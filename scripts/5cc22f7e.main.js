(function() {
  var root;

  root = this;

  if (typeof Backbone === "undefined" || Backbone === null) {
    throw new Error("Backbone should be installed");
  }

  Backbone.App = function(config) {
    var baseApp, conf, lang, loadAnalytics, loadFonts, locale, localeUrl, logger;
    config.rootPath || (config.rootPath = "/");
    window.rootPath = config.rootPath;
    conf = config || {};
    conf.root = conf.rootPath;
    if (conf.namespace == null) {
      conf.namespace = {};
    } else {
      if (_.isString(conf.namespace)) {
        if (root[conf.namespace] != null) {
          conf.namespace = root[conf.namespace];
        } else {
          root[conf.namespace] = {};
          conf.namespace = root[conf.namespace];
        }
      }
    }
    if ((conf.start == null) || !_.isFunction(conf.start)) {
      throw new Error("You need to pass a start function");
    }
    lang = function() {
      if (conf.lang == null) {
        lang = document.getElementsByTagName('html')[0].getAttribute('lang');
      } else {
        if (!_.isFunction(conf.lang)) {
          lang = conf.lang;
        } else {
          lang = conf.lang.call(this);
        }
      }
      return lang || "en";
    };
    localeUrl = function(lang) {
      var url;
      if (conf.localeUrl == null) {
        url = conf.rootPath + ("scripts/locale/strings-" + lang + ".js");
      } else {
        if (!_.isFunction(conf.localeUrl)) {
          url = conf.localeUrl;
        } else {
          url = conf.localeUrl.call(this, lang);
        }
      }
      return url;
    };
    loadFonts = function() {
      var fonts, wf;
      if (conf.fonts == null) {
        return;
      }
      if (!_.isFunction(conf.fonts)) {
        fonts = conf.fonts;
      } else {
        fonts = conf.fonts.call(this);
      }
      if (!_.isArray(fonts)) {
        console.error('fonts should be an array. Check http://www.google.com/webfonts');
      }
      /*
      # TODO: uncoment if any problem with fonts
      window.WebFontConfig =
        custom: {
          families: @families,
          urls: ['../../scripts/managers/fonts.css']
        }
      */

      wf = document.createElement('script');
      wf.src = ('https:' === document.location.protocol ? 'https' : 'http') + '://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';
      wf.type = 'text/javascript';
      wf.async = 'true';
      return yepnope([
        {
          load: wf.src
        }
      ]);
    };
    loadAnalytics = function() {
      var ga, src;
      if (conf.analytics == null) {
        return;
      }
      ga = window._gaq = window._gaq || [];
      ga.push(['_setAccount', conf.analytics]);
      ga.push(['_trackPageview']);
      src = ('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      return yepnope([
        {
          load: src
        }
      ]);
    };
    logger = null;
    if (window.log != null) {
      logger = window.log;
    } else {
      logger = function() {
        return console.log.apply(console, arguments);
      };
    }
    locale = null;
    baseApp = {
      Models: {},
      Collections: {},
      Views: {},
      Managers: {},
      run: function(stage, options) {
        if (options == null) {
          options = {};
        }
        this.lang = lang.call(this);
        this.isDebug = (location.hostname.match(/\.dev$/) != null) || options.forceDebug === true || location.port !== "80" || location.search.match(/forceDebug=true/);
        window.log = _.bind(this.log, this);
        window.elog = _.bind(this.errorlog, this);
        if (this.isDebug) {
          console.log("DEBUG MODE ON");
        }
        this.stage = stage || $('body');
        this.system = Backbone.System;
        if (window.System == null) {
          window.System = this.system;
        }
        /*
        locale = new Backbone.Locale this
        langPath=localeUrl.call this, @lang
        
        @changeLanguage(
          lang: @lang
          path: langPath
          callback: conf.start
          callbackContext: this
          options: options
        )
        */

        conf.start();
        return this;
      },
      log: function() {
        if (!this.isDebug) {
          return;
        }
        return logger.apply(window, arguments);
      },
      errorlog: function(msg) {
        return log("%c" + msg, "color:red");
      },
      on: function(event, method, context) {
        switch (event) {
          case 'language':
            return locale.on(event, method, context);
        }
      },
      off: function(event, method, context) {
        switch (event) {
          case 'language':
            return locale.off(event, method, context);
        }
      },
      changeLanguage: function(options) {
        if (options.lang == null) {
          throw new Error("Language should be defined");
        }
        this.lang = options.lang;
        locale.load(options);
        return this;
      },
      t: function() {
        return locale.t.apply(locale, arguments);
      },
      HandlebarsLog: function(object, context) {},
      isEmail: function(email) {
        var regex;
        regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        return regex.test(email);
      },
      prettyNumber: function(x) {
        var parts;
        if (x === void 0) {
          x = "";
        }
        parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
      },
      prettyCurrency: function(x) {
        var parts;
        parts = Number(x).toFixed(2).toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
      },
      trackEvent: function() {
        var args, payload;
        if (this.isDebug || (window._gaq == null)) {
          return;
        }
        args = Array.prototype.splice.call(arguments, 0);
        payload = ['_trackEvent'].concat(args);
        console.log("Tracking Event:", payload);
        return window._gaq.push(payload);
      }
    };
    loadFonts();
    loadAnalytics();
    _.extend(conf.namespace, baseApp);
    if (_.isFunction(conf.init)) {
      conf.init.call(conf.namespace);
    } else if (_.isObject(conf.init)) {
      _.extend(conf.namespace, conf.init);
    }
    conf.namespace.modelns = conf.namespace['Models'];
    conf.namespace.collectionns = conf.namespace['Collections'];
    conf.namespace.viewns = conf.namespace['Views'];
    window.AppRoot = conf.namespace;
    Handlebars.registerHelper('log', baseApp.HandlebarsLog);
    Handlebars.registerHelper('t', baseApp.t);
    Handlebars.registerHelper('prettyNumber', baseApp.prettyNumber);
    Handlebars.registerHelper('prettyCurrency', baseApp.prettyCurrency);
    Handlebars.registerHelper('unless_blank', function(string, options) {
      if ((string == null) || string.length === 0) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });
    return conf.namespace;
  };

}).call(this);

(function() {
  Backbone.System = (function() {
    function System() {}

    System.Browser = {
      Arora: 'Arora',
      Chrome: 'Chrome',
      Epiphany: 'Epiphany',
      Firefox: 'Firefox',
      MobileSafari: 'Mobile Safari',
      InternetExplorer: 'MSIE',
      Midori: 'Midori',
      Opera: 'Opera',
      Safari: 'Safari'
    };

    System.OS = {
      Android: 'Android',
      ChromeOS: 'CrOS',
      iOS: 'iOS',
      Linux: 'Linux',
      MacOS: 'Mac OS',
      Windows: 'Windows'
    };

    System.Orientation = {
      Portrait: 'Portrait',
      LandscapeRight: 'Landscape right',
      LandscapeLeft: 'Landscape left'
    };

    System.OnlineStatus = {
      Online: 'Online',
      Offline: 'Offline',
      Unknown: 'Unknown'
    };

    System.orientation = function() {
      if (window.orientation == null) {
        return false;
      }
      switch (window.orientation) {
        case 0:
          return this.Orientation.Portrait;
        case 90:
          return this.Orientation.LandscapeLeft;
        case -90:
          return this.Orientation.LandscapeRight;
      }
      return false;
    };

    System.isOnline = function() {
      if (window.navigator.onLine == null) {
        return this.OnlineStatus.Unknown;
      }
      if (window.navigator.onLine) {
        return this.OnlineStatus.Online;
      }
      return this.OnlineStatus.Offline;
    };

    System.isIpad = function() {
      var ua;
      ua = navigator.userAgent;
      if (/iPad/.test(ua)) {
        return true;
      }
    };

    System.browser = function() {
      var ua;
      ua = navigator.userAgent;
      if (/Arora/.test(ua)) {
        return this.Browser.Arora;
      }
      if (/Chrome/.test(ua)) {
        return this.Browser.Chrome;
      }
      if (/Epiphany/.test(ua)) {
        return this.Browser.Epiphany;
      }
      if (/Firefox/.test(ua)) {
        return this.Browser.Firefox;
      }
      if (/Mobile Safari/.test(ua)) {
        return this.Browser.MobileSafari;
      }
      if (/MSIE/.test(ua)) {
        return this.Browser.InternetExplorer;
      }
      if (/Midori/.test(ua)) {
        return this.Browser.Midori;
      }
      if (/Opera/.test(ua)) {
        return this.Browser.Opera;
      }
      if (/Safari/.test(ua)) {
        return this.Browser.Safari;
      }
      return false;
    };

    System.browserVersion = function() {
      var browser, trident, ua, version;
      ua = navigator.userAgent;
      browser = this.getBrowser();
      if (/MSIE (\d+\.\d+);/.test(ua)) {
        version = new Number(RegExp.$1);
        if (/Trident\/(\d+\.\d+);/.test(ua)) {
          trident = new Number(RegExp.$1);
        }
        if ((trident != null) && trident >= 5) {
          return 9;
        } else {
          return parseInt(version);
        }
      }
      return null;
    };

    System.OS = function() {
      var ua;
      ua = navigator.userAgent;
      if (/Android/.test(ua)) {
        return this.OS.Android;
      }
      if (/CrOS/.test(ua)) {
        return this.OS.ChromeOS;
      }
      if (/iP[ao]d|iPhone/.test(ua)) {
        return this.OS.iOS;
      }
      if (/Linux/.test(ua)) {
        return this.OS.Linux;
      }
      if (/Mac OS/.test(ua)) {
        return this.OS.MacOS;
      }
      if (/windows/.test(ua)) {
        return this.OS.Windows;
      }
      return false;
    };

    System.supportCanvas = function() {
      return !!window.CanvasRenderingContext2D;
    };

    System.supportLocalStorage = function() {
      var error;
      try {
        return !!localStorage.getItem;
      } catch (_error) {
        error = _error;
        return false;
      }
    };

    System.supportFile = function() {
      return !!window.File && !!window.FileReader && !!window.FileList && !!window.Blob;
    };

    System.supportFileSystem = function() {
      return !!window.requestFileSystem;
    };

    System.supportRequestAnimationFrame = function() {
      return !!window.mozRequestAnimationFrame || !!window.webkitRequestAnimationFrame || !!window.oRequestAnimationFrame || !!window.msRequestAnimationFrame;
    };

    System.supportSessionStorage = function() {
      var error;
      try {
        return !!sessionStorage.getItem;
      } catch (_error) {
        error = _error;
        return false;
      }
    };

    System.supportWebgl = function() {
      return !!window.WebGLRenderingContext;
    };

    System.supportWorker = function() {
      return !!window.Worker;
    };

    return System;

  })();

}).call(this);

(function() {
  Backbone.Locale = (function() {
    function Locale(options) {
      this.options = options;
      this.strings = {};
      this.lang = options.lang;
      if (options.strings != null) {
        this.strings[this.lang] = options.strings;
      }
      if (Backbone.Events != null) {
        _.extend(this, Backbone.Events);
      }
      this.loadingDicts = false;
    }

    Locale.prototype.load = function(opts) {
      var callback, callbackContext, cb, lang, options, url,
        _this = this;
      if (this.loadingDicts || ((this.lorem == null) && this.checkLorem(opts))) {
        return;
      }
      lang = opts.lang || "en";
      url = opts.path;
      callback = opts.callback;
      callbackContext = opts.callbackContext || this;
      options = opts.options || {};
      if (lang == null) {
        lang = document.getElementsByTagName('html')[0].getAttribute('lang');
      }
      cb = function() {
        _this.lang = lang;
        if (!$('html').hasClass(_this.lang)) {
          $('html').addClass(_this.lang);
        }
        console.info("Strings file for language " + lang + " loaded");
        console.timeEnd('Locale time loading');
        if (_this.strings[lang] == null) {
          _this.strings[lang] = Backbone.Locale.strings;
        }
        if (_this.strings[lang] && (_this.strings[lang].momentjs != null) && (typeof moment !== "undefined" && moment !== null)) {
          moment.lang(lang, _this.strings[lang].momentjs);
        }
        if ((typeof moment !== "undefined" && moment !== null) && lang === 'en') {
          moment.lang('en');
        }
        console.log("OK LANG");
        if (callback != null) {
          callback.call(callbackContext, options);
        }
        if (typeof _this.trigger === 'function') {
          return _this.trigger('language', lang);
        }
      };
      console.time('Locale time loading');
      if (this.strings[lang] != null) {
        cb();
        return;
      }
      if (url == null) {
        url = window.rootPath + ("scripts/locale/strings-" + lang + ".js");
      }
      if (url != null) {
        if (typeof yepnope === 'function') {
          return yepnope([
            {
              load: url,
              callback: function(url, test, key) {
                return cb();
              }
            }
          ]);
        } else {
          throw new Error("yepnope lib not loaded. Check Modernizr version > 2.0");
        }
      } else {
        throw new Error("URL for strings file not defined for lang " + lang);
      }
    };

    Locale.prototype.t = function(locale_string, locale_group, options) {
      var count, dataAttribute, dict, group, p, paragraphs, path, text, type, val;
      if (this.strings == null) {
        throw new Error('No traslation strings loaded');
      }
      if ((options == null) && (locale_group != null) && typeof locale_group === 'object') {
        options = locale_group;
        locale_group = null;
      }
      options = options || {};
      options.span = options.span != null ? options.span : true;
      group = locale_group && this.strings[this.lang][locale_group] || this.strings[this.lang];
      if (group[locale_string] != null) {
        return group[locale_string];
      }
      dataAttribute = "data-locale-string=\"" + locale_string + "\"";
      if (locale_group != null) {
        dataAttribute += " data-locale-group=\"" + locale_group + "\"";
      }
      path = this.lang + '.' + (locale_group != null ? locale_group + '.' : '') + locale_string;
      if ((this.lorem != null) && ((options.lorem != null) || (options.wars != null) || (options.futurama != null))) {
        val = options.lorem || options.wars || options.futurama;
        count = parseInt(val);
        type = Lorem.TYPE.WORD;
        if (/\d+p/.test(val)) {
          type = Lorem.TYPE.PARAGRAPH;
        }
        if (/\d+s/.test(val)) {
          type = Lorem.TYPE.SENTENCE;
        }
        if (/\d+w/.test(val)) {
          type = Lorem.TYPE.WORD;
        }
        if (/\d+ws/.test(val)) {
          type = Lorem.TYPE.WORDSENTENCE;
        }
        if ((options.wars != null) && (Lorem.DICTS.StarWars != null)) {
          dict = Lorem.DICTS.StarWars.master;
        }
        if ((options.futurama != null) && (Lorem.DICTS.Futurama != null)) {
          dict = Lorem.DICTS.Futurama;
          type = Lorem.TYPE.ELEMENT;
        }
        text = this.lorem.createText(count, type, dict);
        if (type === Lorem.TYPE.PARAGRAPH || type === Lorem.TYPE.ELEMENT) {
          paragraphs = text.split("\n");
          paragraphs = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = paragraphs.length; _i < _len; _i++) {
              p = paragraphs[_i];
              _results.push("<p class=\"translation-missing\" " + dataAttribute + " title=\"Translation missing: " + path + "\">" + p + "</p>");
            }
            return _results;
          })();
          return paragraphs.join(' ');
        }
      } else {
        text = locale_string;
      }
      if (options.span) {
        return "<span class=\"translation-missing\" " + dataAttribute + " title=\"Translation missing: " + path + "\">" + text + "</span>";
      } else {
        return text;
      }
    };

    Locale.prototype.checkLorem = function(opts) {
      var dicts, file,
        _this = this;
      console.log("@checkLorem", opts, opts.options);
      if (location.hostname.split('.').slice(-1).toString() !== 'dev' && !opts.options && !opts.options.forceLorem) {
        return false;
      }
      dicts = ['lorem.js', 'lorem.starwars.js'];
      dicts = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = dicts.length; _i < _len; _i++) {
          file = dicts[_i];
          _results.push(window.rootPath + ("scripts/locale/" + file));
        }
        return _results;
      })();
      this.loadingDicts = true;
      yepnope({
        load: dicts,
        complete: function(url, test, key) {
          if (typeof Lorem !== "undefined" && Lorem !== null) {
            _this.lorem = new Lorem;
          }
          _this.loadingDicts = false;
          return _this.load(opts);
        }
      });
      return true;
    };

    Locale.extractMissingTranslations = function() {
      var missingTranslations, obj;
      missingTranslations = $('.translation-missing');
      obj = {};
      missingTranslations.each(function() {
        var $el, group, string;
        $el = $(this);
        group = $el.attr('data-locale-group');
        string = $el.attr('data-locale-string');
        if (group != null) {
          if (obj[group] == null) {
            obj[group] = {};
          }
          return obj[group][string] = $el.html();
        } else {
          return obj[string] = $el.html();
        }
      });
      return obj;
    };

    Locale.missingTranslationsFile = function() {
      var filecontent, k, key, obj, st, string, text;
      obj = this.extractMissingTranslations();
      filecontent = "Backbone.Locale.strings = \n\tlang: \"" + INW.lang + "\"\n";
      for (key in obj) {
        string = obj[key];
        if (_.isString(string)) {
          text = "\t";
          text += "\"" + key + "\": \"Edit text\"\n";
          filecontent += text;
        } else if (_.isObject(string)) {
          filecontent += "\t\"" + key + "\":\n";
          for (k in string) {
            st = string[k];
            text = "\t\t";
            text += "\"" + k + "\": \"Edit text\"\n";
            filecontent += text;
          }
        }
      }
      return filecontent;
    };

    return Locale;

  })();

}).call(this);

(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.ElementView = (function(_super) {
    __extends(ElementView, _super);

    function ElementView() {
      _ref = ElementView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ElementView.prototype.init = function() {};

    ElementView.prototype.modelDidChange = function() {};

    ElementView.prototype.modelDidDestroy = function() {};

    ElementView.prototype.viewWillRender = function() {};

    ElementView.prototype.viewDidRender = function() {};

    ElementView.prototype.viewWillRemove = function() {};

    ElementView.prototype.viewDidRemove = function() {};

    ElementView.prototype.disableLink = function(e) {
      e.preventDefault();
      return e.stopPropagation();
    };

    ElementView.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this._methodBinding();
      this.rendered = false;
      this.binding = options.binding;
      if (options.binding && (this.model != null)) {
        this.model.on('change', this._modelWillChange, this);
        this.model.on('destroy', this._modelWillDestroy, this);
      }
      return this.init(options);
    };

    ElementView.prototype._methodBinding = function() {
      return _.bindAll(this, "render", "_finishRender", "viewDidRender", "modelDidChange", "modelDidDestroy", '_serializeData', '_checkDeviceType', 'viewWillRemove', 'viewDidRemove');
    };

    ElementView.prototype._modelWillChange = function() {
      this.modelDidChange();
      return this.render();
    };

    ElementView.prototype._modelWillDestroy = function() {
      this.modelDidDestroy();
      this.remove();
      return this;
    };

    /*
    _serializeData: ->
      data = {}
      data.models = @collection.toJSON() if @collection?
      data.model = @model.toJSON() if @model?
      _.defaults(@templateData, data)
      @templateData
    */


    ElementView.prototype._serializeData = function() {
      var data;
      data = {};
      if (this.collection != null) {
        if (_.isFunction(this.collection.toTemplateData)) {
          data.models = this.collection.toTemplateData();
        } else {
          data.models = this.collection.toJSON();
        }
      }
      if (this.model != null) {
        if (_.isFunction(this.model.toTemplateData)) {
          data.model = this.model.toTemplateData();
        } else {
          data.model = this.model.toJSON();
        }
      }
      _.defaults(this.templateData, data);
      return this.templateData;
    };

    ElementView.prototype._firstRender = function() {
      /*
      ##oslo:WARNING COMMENTED THIs ONS while debugging for leaks, it was leaking...
      if _.isFunction @resize 
        _.bindAll this, 'resize'
        #$(window).on 'resize', @resize
      
      #$(window).on 'resize', @_checkDeviceType
      
      if _.isFunction @viewOrientationDidChange
        _.bindAll this, 'viewOrientationDidChange'
        #$(window).on 'orientationchange', @viewOrientationDidChange
      
      do @_checkDeviceType
      */

    };

    ElementView.prototype.render = function() {
      var id, template;
      if (!((this.template != null) && _.isFunction(this.template))) {
        throw new Error("Template must be defined");
      }
      this.templateData = {};
      if (!this.rendered) {
        this._firstRender();
      }
      this.viewWillRender();
      this._serializeData();
      template = this._chooseTemplate();
      this.$el.html(template(this.templateData));
      if ((this.$el.attr('id') == null) && (this.idRoot != null)) {
        id = this.idRoot + (this.model.id || this.model.cid);
        this.$el.attr({
          id: id
        });
      }
      _.defer(this._finishRender);
      return this;
    };

    ElementView.prototype._finishRender = function() {
      this.rendered = true;
      this.viewDidRender();
      this.trigger('render', this);
      return this.templateData = {};
    };

    ElementView.prototype._checkDeviceType = function() {
      var w;
      w = $(window).width();
      this.isPhone = w < 768;
      this.isTablet = w > 767 && w < 980;
      if (!this.rendered) {
        this._oldIsPhone = this.isPhone;
      }
      if (_.isFunction(this.phoneTemplate)) {
        if (this.isPhone !== this._oldIsPhone) {
          this.render();
        }
      }
      return this._oldIsPhone = this.isPhone;
    };

    ElementView.prototype._chooseTemplate = function() {
      if (this.isPhone && _.isFunction(this.phoneTemplate)) {
        return this.phoneTemplate;
      } else {
        return this.template;
      }
    };

    ElementView.prototype.remove = function() {
      this.viewWillRemove();
      ElementView.__super__.remove.apply(this, arguments);
      if (this.model) {
        this.model.off('change', this._modelWillChange, this);
        this.model.off('destroy', this._modelWillDestroy, this);
      }
      $(window).off('resize', this._checkDeviceType);
      if (_.isFunction(this.viewOrientationDidChange)) {
        $(window).off('orientationchange', this.viewOrientationDidChange);
      }
      if (_.isFunction(this.resize)) {
        $(window).off('resize', this.resize);
      }
      this.viewDidRemove();
      this.trigger('remove', this);
      return this;
    };

    return ElementView;

  })(Backbone.View);

}).call(this);

(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.CollectionView = (function(_super) {
    __extends(CollectionView, _super);

    function CollectionView() {
      this.remove = __bind(this.remove, this);
      this.render = __bind(this.render, this);
      this.elementRemoved = __bind(this.elementRemoved, this);
      this.renderElement = __bind(this.renderElement, this);
      this.elementAdded = __bind(this.elementAdded, this);
      this.initialize = __bind(this.initialize, this);
      this.elementViewDidRemove = __bind(this.elementViewDidRemove, this);
      this.elementViewDidRender = __bind(this.elementViewDidRender, this);
      _ref = CollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CollectionView.prototype.modelView = Backbone.ElementView;

    CollectionView.prototype.elementViewDidRender = function(view) {};

    CollectionView.prototype.elementViewDidRemove = function(view) {};

    CollectionView.prototype.initialize = function(options) {
      this._methodBinding();
      this.collection.on('add', this.elementAdded);
      this.collection.on('remove', this.elementRemoved);
      return this.init(options);
    };

    CollectionView.prototype.elementAdded = function(model) {
      var e, method, view;
      this.modelViews || (this.modelViews = {});
      view = this.renderElement(model);
      if (view) {
        view.collectionView = this;
        this.modelViews[view.model.cid] = view;
        this.$el.append(view.$el);
        this.elementViewDidRender(view);
        for (e in this.elementEvents) {
          method = this.elementEvents[e];
          if (!_.isFunction(method)) {
            method = this[this.elementEvents[e]];
          }
          if (!method) {
            continue;
          }
          view.on(e, method);
        }
      }
      return view;
    };

    CollectionView.prototype.renderElement = function(model) {
      var view;
      view = new this.modelView({
        model: model,
        binding: this.bindModelViews
      });
      view.render();
      return view;
    };

    CollectionView.prototype.elementRemoved = function(model) {
      var view;
      if (!this.modelViews) {
        return;
      }
      view = this.modelViews[model.cid];
      if (view) {
        view.remove();
        this.elementViewDidRemove(view);
        return delete this.modelViews[view.model.cid];
      }
    };

    CollectionView.prototype.render = function() {
      CollectionView.__super__.render.apply(this, arguments);
      return this.collection.each(this.elementAdded);
    };

    CollectionView.prototype.remove = function() {
      var _this = this;
      CollectionView.__super__.remove.apply(this, arguments);
      this.collection.off('add', this.elementAdded);
      this.collection.off('remove', this.elementRemoved);
      if (this.modelViews) {
        _.each(this.modelViews, function(element) {
          return element.remove();
        });
      }
      this.modelViews = [];
      return this;
    };

    return CollectionView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.BetterCollectionView = (function(_super) {
    __extends(BetterCollectionView, _super);

    function BetterCollectionView() {
      this.select = __bind(this.select, this);
      this.remove = __bind(this.remove, this);
      this.renderElement = __bind(this.renderElement, this);
      this.detachElement = __bind(this.detachElement, this);
      this.appendElement = __bind(this.appendElement, this);
      this.renderVisible = __bind(this.renderVisible, this);
      this.elementRemoved = __bind(this.elementRemoved, this);
      this.elementAdded = __bind(this.elementAdded, this);
      this.getElementHeight = __bind(this.getElementHeight, this);
      this.render = __bind(this.render, this);
      this.updateFilteredModels = __bind(this.updateFilteredModels, this);
      this._validateFilter = __bind(this._validateFilter, this);
      this._serializeData = __bind(this._serializeData, this);
      this.initialize = __bind(this.initialize, this);
      this.elementViewDidRemove = __bind(this.elementViewDidRemove, this);
      this.elementViewDidRender = __bind(this.elementViewDidRender, this);
      _ref = BetterCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BetterCollectionView.prototype.modelView = Backbone.ElementView;

    BetterCollectionView.prototype._filterModels = null;

    BetterCollectionView.prototype.elementViewDidRender = function(view) {};

    BetterCollectionView.prototype.elementViewDidRemove = function(view) {};

    BetterCollectionView.prototype.initialize = function(options) {
      this._methodBinding();
      this.collection.on('add', this.elementAdded);
      this.collection.on('remove', this.elementRemoved);
      this.collection.on('update-filters', this.updateFilteredModels);
      this.init(options);
      return this.filteredModels = [];
    };

    BetterCollectionView.prototype._serializeData = function() {};

    BetterCollectionView.prototype._validateFilter = function(model) {
      if (this._filterModels != null) {
        if ($.isFunction(this._filterModels)) {
          return this._filterModels(model);
        } else {
          return this._filterModels === model.constructor.name;
        }
      } else {
        return true;
      }
    };

    BetterCollectionView.prototype.updateFilteredModels = function() {
      var m, _i, _len, _ref1, _results;
      if (this.collection.comparator != null) {
        this.collection.sort();
      }
      this.filteredModels = [];
      _ref1 = this.collection.models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        m = _ref1[_i];
        if (this._validateFilter(m)) {
          _results.push(this.filteredModels.push(m));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BetterCollectionView.prototype.render = function() {
      BetterCollectionView.__super__.render.apply(this, arguments);
      if (!this.elementViewsContainer) {
        this.elementViewsContainer = $("<div class='collection-element-container'><div>");
        this.$el.append(this.elementViewsContainer);
        this.$el.on("scroll", this.renderVisible);
        this.elementViewsContainer.css("position", "relative");
      }
      this.elementViewsContainer.css("height", this.filteredModels.length * this.getElementHeight());
      this.updateFilteredModels();
      this.elementViewsContainer.css("height", this.filteredModels.length * this.getElementHeight());
      return this.renderVisible();
    };

    BetterCollectionView.prototype.getElementHeight = function() {
      if (this.modelView.prototype.defaultHeight) {
        return this.modelView.prototype.defaultHeight;
      }
      return 30;
    };

    BetterCollectionView.prototype.elementAdded = function(model) {
      this.updateFilteredModels();
      this.elementViewsContainer.css("height", this.filteredModels.length * this.getElementHeight());
      return this.renderVisible();
    };

    BetterCollectionView.prototype.elementRemoved = function(model) {
      var view;
      if (this.filteredModels.indexOf(model) >= 0) {
        this.filteredModels.splice(this.filteredModels.indexOf(model), 1);
      }
      if (!this.modelViews) {
        return;
      }
      view = this.modelViews[model.cid];
      if (view) {
        view.remove();
        this.elementViewDidRemove(view);
        delete this.modelViews[view.model.cid];
      }
      return this.renderVisible();
    };

    BetterCollectionView.prototype.renderVisible = function() {
      var h, index, lowestY, mvcid, rowModel, rows, startRow, totalHeight, view, _i, _len, _ref1, _results;
      this.modelViews || (this.modelViews = {});
      totalHeight = this.$el.innerHeight();
      lowestY = this.$el.scrollTop();
      h = this.getElementHeight();
      rows = Math.ceil(totalHeight / h);
      if (totalHeight === 0) {
        rows = 4;
      }
      startRow = Math.floor(lowestY / h);
      _ref1 = this.filteredModels;
      for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
        rowModel = _ref1[index];
        if (index < startRow - 1 || index > startRow + rows) {
          if (this.modelViews[rowModel.cid]) {
            this.detachElement(rowModel);
          }
        } else {
          if (!this.modelViews[rowModel.cid]) {
            view = this.appendElement(rowModel);
            view.$el.css({
              position: "absolute",
              top: index * h,
              width: "100%",
              height: h
            });
          } else {
            this.modelViews[rowModel.cid].$el.css({
              top: index * h
            });
            this.modelViews[rowModel.cid].model = rowModel;
          }
        }
      }
      _results = [];
      for (mvcid in this.modelViews) {
        if (_.find(this.filteredModels, function(model) {
          return model.cid === mvcid;
        }) == null) {
          _results.push(this.modelViews[mvcid].remove());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BetterCollectionView.prototype.appendElement = function(model) {
      var e, method, view;
      this.modelViews || (this.modelViews = {});
      view = this.renderElement(model);
      if (view) {
        view.collectionView = this;
        this.modelViews[view.model.cid] = view;
        this.elementViewsContainer.append(view.$el);
        this.elementViewDidRender(view);
        for (e in this.elementEvents) {
          method = this.elementEvents[e];
          if (!_.isFunction(method)) {
            method = this[this.elementEvents[e]];
          }
          if (!method) {
            continue;
          }
          view.on(e, method);
        }
      }
      return view;
    };

    BetterCollectionView.prototype.detachElement = function(model) {
      var view;
      view = this.modelViews[model.cid];
      view.remove();
      return this.modelViews[model.cid] = null;
    };

    BetterCollectionView.prototype.renderElement = function(model) {
      var view;
      view = new this.modelView({
        model: model,
        binding: this.bindModelViews
      });
      view.render();
      return view;
    };

    BetterCollectionView.prototype.remove = function() {
      var _this = this;
      BetterCollectionView.__super__.remove.apply(this, arguments);
      this.collection.off('add', this.elementAdded);
      this.collection.off('remove', this.elementRemoved);
      if (this.modelViews) {
        _.each(this.modelViews, function(element) {
          if (element != null) {
            return element.remove();
          }
        });
      }
      this.modelViews = [];
      return this;
    };

    BetterCollectionView.prototype.select = function(model) {
      var _this = this;
      if (model == null) {
        return;
      }
      return _.defer(function() {
        var endPos, index, startPos, view;
        index = _this.filteredModels.indexOf(model);
        startPos = _this.getElementHeight() * (index + 1);
        endPos = _this.getElementHeight() * (index + 2);
        if (startPos < _this.$el.scrollTop()) {
          _this.$el.scrollTop(startPos);
        }
        if (endPos - _this.$el.innerHeight() > _this.$el.scrollTop()) {
          _this.$el.scrollTop(endPos - _this.$el.innerHeight());
        }
        _this.renderVisible();
        view = _this.modelViews[model.cid];
        return view.$el.trigger("click");
      });
    };

    return BetterCollectionView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.ArrayOfModelsView = (function(_super) {
    __extends(ArrayOfModelsView, _super);

    function ArrayOfModelsView() {
      this.select = __bind(this.select, this);
      this.replaceModels = __bind(this.replaceModels, this);
      this.remove = __bind(this.remove, this);
      this.renderElement = __bind(this.renderElement, this);
      this.detachElement = __bind(this.detachElement, this);
      this.appendElement = __bind(this.appendElement, this);
      this.renderVisible = __bind(this.renderVisible, this);
      this.elementRemoved = __bind(this.elementRemoved, this);
      this.elementAdded = __bind(this.elementAdded, this);
      this.getElementHeight = __bind(this.getElementHeight, this);
      this.render = __bind(this.render, this);
      this.updateFilteredModels = __bind(this.updateFilteredModels, this);
      this._validateFilter = __bind(this._validateFilter, this);
      this._serializeData = __bind(this._serializeData, this);
      this.initialize = __bind(this.initialize, this);
      this.elementViewDidRemove = __bind(this.elementViewDidRemove, this);
      this.elementViewDidRender = __bind(this.elementViewDidRender, this);
      _ref = ArrayOfModelsView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ArrayOfModelsView.prototype.modelView = Backbone.ElementView;

    ArrayOfModelsView.prototype._filterModels = null;

    ArrayOfModelsView.prototype.elementViewDidRender = function(view) {};

    ArrayOfModelsView.prototype.elementViewDidRemove = function(view) {};

    ArrayOfModelsView.prototype.initialize = function(options) {
      this._methodBinding();
      this.init(options);
      return this.filteredModels = [];
    };

    ArrayOfModelsView.prototype._serializeData = function() {};

    ArrayOfModelsView.prototype._validateFilter = function(model) {
      if (this._filterModels != null) {
        if ($.isFunction(this._filterModels)) {
          return this._filterModels(model);
        } else {
          return this._filterModels === model.constructor.name;
        }
      } else {
        return true;
      }
    };

    ArrayOfModelsView.prototype.updateFilteredModels = function() {
      var m, _i, _len, _ref1, _results;
      this.filteredModels = [];
      _ref1 = this.collection;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        m = _ref1[_i];
        if (this._validateFilter(m)) {
          _results.push(this.filteredModels.push(m));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
      /*
      if @collection.comparator?
        @collection.sort()
      @filteredModels = []
      for m in @collection.models
        if @_validateFilter(m)
          @filteredModels.push(m)
      */

    };

    ArrayOfModelsView.prototype.render = function() {
      ArrayOfModelsView.__super__.render.apply(this, arguments);
      if (!this.elementViewsContainer) {
        this.elementViewsContainer = $("<div class='collection-element-container'><div>");
        this.$el.append(this.elementViewsContainer);
        this.$el.on("scroll", this.renderVisible);
        this.elementViewsContainer.css("position", "relative");
      }
      this.elementViewsContainer.css("height", this.filteredModels.length * this.getElementHeight());
      this.updateFilteredModels();
      this.elementViewsContainer.css("height", this.filteredModels.length * this.getElementHeight());
      return this.renderVisible();
    };

    ArrayOfModelsView.prototype.getElementHeight = function() {
      if (this.modelView.prototype.defaultHeight) {
        return this.modelView.prototype.defaultHeight;
      }
      return 30;
    };

    ArrayOfModelsView.prototype.elementAdded = function(model) {
      this.updateFilteredModels();
      this.elementViewsContainer.css("height", this.filteredModels.length * this.getElementHeight());
      return this.renderVisible();
    };

    ArrayOfModelsView.prototype.elementRemoved = function(model) {
      var view;
      if (this.filteredModels.indexOf(model) >= 0) {
        this.filteredModels.splice(this.filteredModels.indexOf(model), 1);
      }
      if (!this.modelViews) {
        return;
      }
      view = this.modelViews[model.cid];
      if (view) {
        view.remove();
        this.elementViewDidRemove(view);
        delete this.modelViews[view.model.cid];
      }
      return this.renderVisible();
    };

    ArrayOfModelsView.prototype.renderVisible = function() {
      var h, index, lowestY, mvcid, rowModel, rows, startRow, totalHeight, view, _i, _len, _ref1, _results;
      this.modelViews || (this.modelViews = {});
      totalHeight = this.$el.innerHeight();
      lowestY = this.$el.scrollTop();
      h = this.getElementHeight();
      rows = Math.ceil(totalHeight / h);
      if (totalHeight === 0) {
        rows = 4;
      }
      startRow = Math.floor(lowestY / h);
      _ref1 = this.filteredModels;
      for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
        rowModel = _ref1[index];
        if (index < startRow || index > startRow + rows) {
          if (this.modelViews[rowModel.cid]) {
            this.detachElement(rowModel);
          }
        } else {
          if (!this.modelViews[rowModel.cid]) {
            view = this.appendElement(rowModel);
            view.$el.css({
              position: "absolute",
              top: index * h,
              width: "100%",
              height: h
            });
          } else {
            this.modelViews[rowModel.cid].$el.css({
              top: index * h
            });
            this.modelViews[rowModel.cid].model = rowModel;
          }
        }
      }
      _results = [];
      for (mvcid in this.modelViews) {
        if (_.find(this.filteredModels, function(model) {
          return model.cid === mvcid;
        }) == null) {
          _results.push(this.modelViews[mvcid].$el.detach());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ArrayOfModelsView.prototype.appendElement = function(model) {
      var e, method, view;
      this.modelViews || (this.modelViews = {});
      view = this.renderElement(model);
      if (view) {
        view.collectionView = this;
        this.modelViews[view.model.cid] = view;
        this.elementViewsContainer.append(view.$el);
        this.elementViewDidRender(view);
        for (e in this.elementEvents) {
          method = this.elementEvents[e];
          if (!_.isFunction(method)) {
            method = this[this.elementEvents[e]];
          }
          if (!method) {
            continue;
          }
          view.on(e, method);
        }
      }
      return view;
    };

    ArrayOfModelsView.prototype.detachElement = function(model) {
      var view;
      view = this.modelViews[model.cid];
      view.remove();
      return this.modelViews[model.cid] = null;
    };

    ArrayOfModelsView.prototype.renderElement = function(model) {
      var view;
      view = new this.modelView({
        model: model,
        binding: this.bindModelViews
      });
      view.render();
      return view;
    };

    ArrayOfModelsView.prototype.remove = function() {
      var _this = this;
      ArrayOfModelsView.__super__.remove.apply(this, arguments);
      if (this.modelViews) {
        _.each(this.modelViews, function(element) {
          if (element != null) {
            return element.remove();
          }
        });
      }
      this.modelViews = [];
      return this;
    };

    ArrayOfModelsView.prototype.replaceModels = function(newCollection) {
      this.collection = newCollection;
      return this.updateFilteredModels();
    };

    ArrayOfModelsView.prototype.select = function(model) {
      var endPos, index, startPos,
        _this = this;
      if (model == null) {
        return;
      }
      index = this.collection.indexOf(model);
      startPos = this.getElementHeight() * index;
      endPos = this.getElementHeight() * (index + 1);
      if (startPos < this.$el.scrollTop()) {
        this.$el.scrollTop(startPos);
      }
      if (endPos - this.$el.innerHeight() > this.$el.scrollTop()) {
        this.$el.scrollTop(endPos - this.$el.innerHeight());
      }
      return _.defer(function() {
        var view;
        view = _this.modelViews[model.cid];
        return view.$el.trigger("click");
      });
    };

    return ArrayOfModelsView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.d3View = (function(_super) {
    __extends(d3View, _super);

    function d3View() {
      _ref = d3View.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    d3View.prototype.init = function() {};

    d3View.prototype.modelDidChange = function() {};

    d3View.prototype.modelDidDestroy = function() {};

    d3View.prototype.viewWillRender = function() {};

    d3View.prototype.viewDidRender = function() {};

    d3View.prototype.viewWillRemove = function() {};

    d3View.prototype.viewDidRemove = function() {};

    d3View.prototype.viewWillUpdate = function() {};

    d3View.prototype.viewDidUpdate = function() {};

    d3View.prototype.initialize = function(options) {
      if (options == null) {
        options = {};
      }
      this._methodBinding();
      _.bindAll(this, "viewWillUpdate", "viewDidUpdate", "_viewUpdate");
      this.rendered = false;
      options.binding = this.binding = true;
      if (options.binding && (this.model != null)) {
        this.model.on('change', this._modelWillChange, this);
        this.model.on('destroy', this._modelWillDestroy, this);
      }
      return this.init(options);
    };

    d3View.prototype._modelWillChange = function() {
      this.modelDidChange();
      if (this.rendered == null) {
        return this.render();
      } else {
        return this._viewUpdate();
      }
    };

    d3View.prototype._viewUpdate = function() {
      this.viewWillUpdate();
      return _.defer(this.viewDidUpdate);
    };

    d3View.prototype.render = function() {
      var id, template;
      if (!((this.template != null) && _.isFunction(this.template))) {
        throw new Error("Template must be defined");
      }
      this.templateData = {};
      if (!this.rendered) {
        this._firstRender();
        this.viewWillRender();
        this._serializeData();
        template = this._chooseTemplate();
        this.$el.html(template(this.templateData));
        if ((this.$el.attr('id') == null) && (this.idRoot != null)) {
          id = this.idRoot + (this.model.id || this.model.cid);
          this.$el.attr({
            id: id
          });
        }
        _.defer(this._finishRender);
        return this;
      } else {
        this.viewWillUpdate();
        return _.defer(this.viewDidUpdate);
      }
    };

    return d3View;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.SmoothElementView = (function(_super) {
    __extends(SmoothElementView, _super);

    function SmoothElementView() {
      _ref = SmoothElementView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SmoothElementView.prototype.render = function() {
      this.setHidden(true);
      return SmoothElementView.__super__.render.call(this);
    };

    SmoothElementView.prototype._finishRender = function() {
      SmoothElementView.__super__._finishRender.call(this);
      this.$el.addClass("smooth-view");
      return this.setHidden(false);
    };

    SmoothElementView.prototype.remove = function() {
      this.setHidden(true);
      return SmoothElementView.__super__.remove.call(this);
    };

    SmoothElementView.prototype.setHidden = function(value) {
      if (value) {
        return this.$el.css("opacity", 0);
      } else {
        return this.$el.css("opacity", 1);
      }
    };

    return SmoothElementView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  var BlockUtils,
    _this = this;

  BlockUtils = {
    isEmpty: function(block) {
      if (block instanceof quadrigram.Models.PreFunctionBlockModel) {
        if (block.state === "dead") {
          return true;
        } else {
          return false;
        }
      } else {
        return (block.get("data") == null) || block.get("data") === void 0 || block.get("data").length === 0 || (block.get("data").length === 1 && block.get("data")[0].value === "");
      }
    },
    viewModeToLevel: function(mode) {
      switch (mode) {
        case "list":
          return 0;
        case "table":
          return 1;
      }
    },
    levelToViewMode: function(level) {
      switch (mode) {
        case 0:
          return "list";
        case 1:
          return "table";
      }
    },
    getBlockDepth: function(block) {
      var depth;
      depth = this.depth_recloop(block);
      return depth;
    },
    depth_recloop: function(block) {
      var childDepth, data, depth, qv, _i, _len;
      depth = 0;
      if (block.get && block.get("data") && block.get("data").length > 0) {
        data = block.get("data");
      } else if (block.data && block.data.length > 0) {
        data = block.data;
      }
      if (data != null) {
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          qv = data[_i];
          if (qv.value != null) {
            childDepth = this.depth_recloop(qv.value);
          } else {
            childDepth = 0;
          }
          if (depth < childDepth) {
            depth = childDepth;
          }
        }
        return depth + 1;
      } else {
        return 0;
      }
    },
    isBlockOrData: function(block) {
      if (block instanceof Backbone.Model && block.get("data")) {
        return true;
      } else {
        return block instanceof quadrigram.Models.DataBlockData || block instanceof quadrigram.Models.DataBlockModel;
      }
    },
    isTable: function(block) {
      var bottomIds, qqv, qv, _i, _j, _len, _len1, _ref, _ref1;
      if (this.getBlockDepth(block) !== 2) {
        return false;
      } else if (block.get("data").length === 1) {
        return true;
      } else {
        bottomIds = {};
        _ref = block.get("data");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          qv = _ref[_i];
          _ref1 = qv.value.get("data");
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            qqv = _ref1[_j];
            if (bottomIds[qqv.id] != null) {
              return true;
            }
            bottomIds[qqv.id] = true;
          }
        }
      }
      return false;
    },
    flattenBlock: function(block) {
      return BlockUtils.flattenBlockRecursive(block);
    },
    flattenBlockRecursive: function(block) {
      var qv, result, _i, _len, _ref;
      result = [];
      if (block.get("data") && block.get("data").length === 0) {
        return null;
      }
      if (block.get("data").length > 1) {
        _ref = block.get("data");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          qv = _ref[_i];
          if (this.isBlockOrData(qv.value)) {
            result.push(new quadrigram.Models.QValue(BlockUtils.flattenBlockRecursive(qv.value), qv.id));
          } else {
            result.push(qv);
          }
        }
        return result;
      } else {
        return block.get("data")[0].value;
      }
    },
    flattenBlock2: function(block) {
      return BlockUtils.flattenBlockRecursive2(block);
    },
    flattenBlockRecursive2: function(block) {
      var qv, result, _i, _len, _ref;
      result = {};
      result.data = [];
      result.label = block.get("label");
      result.metaData = block.get("metaData");
      _ref = block.get("data");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        qv = _ref[_i];
        if (this.isBlockOrData(qv.value)) {
          result.data.push(new quadrigram.Models.QValue(BlockUtils.flattenBlockRecursive2(qv.value), qv.id));
        } else {
          result.data.push(new quadrigram.Models.QValue(qv.value, qv.id));
        }
      }
      return result;
    },
    adaptFlattenBlockToVisualizers: function(block) {
      return BlockUtils.adaptFlattenBlockToVisualizersRecursive(block);
    },
    adaptFlattenBlockToVisualizersRecursive: function(block) {
      var childrenBlock, output, _i, _len, _ref;
      if ((block != null) && (block.data != null)) {
        if (block.data.length === 1) {
          return output = BlockUtils.adaptFlattenBlockToVisualizersRecursive(block.data[0].value);
        } else {
          output = [];
          output.label = block.label;
          output.metadata = block.metaData;
          _ref = block.data;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            childrenBlock = _ref[_i];
            output.push({
              id: childrenBlock.id,
              value: BlockUtils.adaptFlattenBlockToVisualizersRecursive(childrenBlock.value)
            });
          }
          return output;
        }
      } else {
        return block;
      }
    },
    unflattenBlock: function(object) {
      return BlockUtils.unflattenBlockRecursive(object);
    },
    unflattenBlockRecursive: function(object) {
      var qv, result, resultData, _i, _len, _ref;
      result = new quadrigram.Models.DataBlockData;
      resultData = [];
      if (object == null) {
        elog("Error: operator did not return an object. Autosave disabled");
        quadrigram.router.dataModels.currentProject.autoSaveEnabled = false;
        return result;
      }
      if (_.isArray(object.data)) {
        _ref = object.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          qv = _ref[_i];
          if ((qv != null) && qv.value && (qv.value.data != null)) {
            resultData.push(new quadrigram.Models.QValue(BlockUtils.unflattenBlockRecursive(qv.value), qv.id));
          } else {
            resultData.push(qv);
          }
        }
      } else {
        resultData.push(object.data);
      }
      result.set("data", resultData);
      result.set("label", object.label);
      result.set("metaData", object.metaData);
      return result;
    },
    swapIds: function(block) {
      var qv, resultBlockData, resultData, resultQV, _i, _len, _ref;
      resultBlockData = new quadrigram.Models.DataBlockData;
      resultData = [];
      _ref = block.get("data");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        qv = _ref[_i];
        resultQV = {
          id: qv.value,
          value: qv.id
        };
        resultData.push(resultQV);
      }
      resultBlockData.set("data", resultData);
      return resultBlockData;
    },
    getIdsAtLevel: function(block, targetLevel) {
      var allIds, blockDepth, idLabel, result, resultBlockData, trueResult;
      result = [];
      resultBlockData = new quadrigram.Models.DataBlockData;
      blockDepth = this.getBlockDepth(block);
      targetLevel = blockDepth - targetLevel;
      this.getNames_recLoop(block, result, targetLevel, blockDepth);
      trueResult = [];
      allIds = {};
      $.each(result, function(index, value) {
        if (allIds[value.id] == null) {
          allIds[value.id] = value.id;
          return trueResult.push(value);
        }
      });
      resultBlockData.set("data", trueResult);
      switch (targetLevel) {
        case 0:
          idLabel = "Rows";
          break;
        case 1:
          idLabel = "Columns";
          break;
        default:
          idLabel = "-";
      }
      resultBlockData.set("metaData", {
        "idLabel": idLabel,
        "valueLabel": "Names"
      });
      return resultBlockData;
    },
    getNames_recLoop: function(block, result, targetLevel, level) {
      var currentArray, qv, _i, _len, _results;
      currentArray = block.get("data");
      _results = [];
      for (_i = 0, _len = currentArray.length; _i < _len; _i++) {
        qv = currentArray[_i];
        if (targetLevel + 1 === level) {
          _results.push(result.push(new quadrigram.Models.QValue(qv.id, qv.id)));
        } else {
          if (this.isBlockOrData(qv.value)) {
            _results.push(this.getNames_recLoop(qv.value, result, targetLevel, level - 1));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    },
    blockToDataObject: function(block) {
      var result;
      result = this.dataArrayToObject(block);
      return JSON.stringify(result);
    },
    checkIsDate: function(string) {
      
    var pattern1 = /^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$/
    ;
      
    var pattern2 = /((0?[13578]|10|12)(-|\/)((0[0-9])|([12])([0-9]?)|(3[01]?))(-|\/)((\d{4})|(\d{2}))|(0?[2469]|11)(-|\/)((0[0-9])|([12])([0-9]?)|(3[0]?))(-|\/)((\d{4}|\d{2})))/   
    ;
      
    var pattern3 = /^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ (0?[1-9]|([12]\d)|30))|(Feb(ruary)?\ (0?[1-9]|1\d|2[0-8]|(29(?=,\s?))))))/
    ;
      string = String(string).trim();
      if (string.match(pattern1)) {
        return "valid";
      } else if (string.match(pattern2) || string.match(pattern3)) {
        return "invalid";
      } else {
        return null;
      }
    },
    dataArrayToObject: function(block) {
      var attr, attributes, d, dataObject, i, key, resultObject;
      resultObject = {};
      if ((block != null) && (block.get != null) && (block.get("data") != null)) {
        if (block.attributes != null) {
          attributes = block.attributes;
        } else {
          attributes = block;
        }
        for (key in attributes) {
          attr = attributes[key];
          if (key !== "data") {
            resultObject[key] = attr;
          } else {
            dataObject = {};
            for (i in attr) {
              d = attr[i];
              dataObject[d.id] = this.dataArrayToObject(d.value);
            }
            resultObject[key] = dataObject;
          }
        }
        return resultObject;
      } else {
        return block;
      }
    }
  };

  try {
    window.BlockUtils = BlockUtils;
  } catch (_error) {
    this.BlockUtils = BlockUtils;
  }

}).call(this);

(function() {
  'use strict';
  var _this = this;

  window.QValueUtils = {
    addValues: function(a, b) {
      var type;
      if ((a === null || $.isNumeric(a)) && (b === null || $.isNumeric(b))) {
        type = "Number";
      } else {
        type = "String";
      }
      if (type === "String") {
        if (a === null) {
          return b;
        }
        if (b === null) {
          return a;
        } else {
          return a + ", " + b;
        }
      } else {
        return window[type](a) + window[type](b);
      }
    },
    aggregateInit: function(currentId) {
      var cached, value;
      value = new quadrigram.Models.QValue(null, currentId);
      cached = {
        "value": value,
        "meta": {}
      };
      return cached;
    },
    aggregateFirst: function(cached, newValue, mode) {
      if (mode === "add" || mode === "mean" || mode === "count" || mode === "none") {
        return cached.value.value = null;
      } else if (mode === "asblock") {
        newValue = new quadrigram.Models.DataBlockData;
        newValue.get("data").push(new quadrigram.Models.QValue(cached.value.value, cached.value.value));
        return cached.value.value = newValue;
      }
    },
    aggregateStep: function(cached, newValue, mode) {
      var _base, _base1;
      if (mode === "add" || mode === "none") {
        cached.value.value = QValueUtils.addValues(cached.value.value, newValue);
      } else if (mode === "mean") {
        (_base = cached.meta).count || (_base.count = 0);
        cached.meta.count += 1;
        cached.value.value = +cached.value.value + +newValue;
      } else if (mode === "count") {
        (_base1 = cached.meta).count || (_base1.count = 0);
        cached.meta.count += 1;
      } else if (mode === "asblock") {
        if (cached.value.value == null) {
          cached.value.value = newValue;
        } else if (!BlockUtils.isBlockOrData(cached.value.value)) {
          QValueUtils.aggregateFirst(cached, newValue, mode);
          cached.value.value.get("data").push(new quadrigram.Models.QValue(newValue, newValue));
        } else {
          cached.value.value.get("data").push(new quadrigram.Models.QValue(newValue, newValue));
        }
      }
      if (cached == null) {
        cached.value.value = "aggregateError";
      }
      return cached;
    },
    aggregateEnd: function(cached, mode, label) {
      if (mode === "none") {
        return cached.value;
      } else if (mode === "add") {
        return cached.value;
      } else if (mode === "mean") {
        if (cached.meta && cached.meta.count) {
          cached.value.value = cached.value.value / cached.meta.count;
          return cached.value;
        } else {
          return cached.value;
        }
      } else if (mode === "count") {
        if (cached.meta && cached.meta.count) {
          cached.value.value = cached.meta.count;
          return cached.value;
        } else {
          cached.value.value = 1;
          return cached.value;
        }
      } else if (mode === "asblock") {
        if (BlockUtils.isBlockOrData(cached.value.value)) {
          cached.value.value.set("label", label);
          cached.value.value.set("metaData", {
            "label": label,
            "valueLabel": label,
            "idLabel": label
          });
        }
        return cached.value;
      }
    },
    chooseBestAggregation: function(table, colKey) {
      var notNumbers, ob, _i, _len;
      notNumbers = false;
      for (_i = 0, _len = table.length; _i < _len; _i++) {
        ob = table[_i];
        if (!$.isNumeric(ob[colKey])) {
          notNumbers = true;
          break;
        }
      }
      if (notNumbers) {
        return "count";
      } else {
        return "add";
      }
    },
    needsAggregation: function(table, colKey) {
      var allIds, ob, _i, _len;
      allIds = {};
      for (_i = 0, _len = table.length; _i < _len; _i++) {
        ob = table[_i];
        if (allIds[ob[colKey]] != null) {
          return true;
        }
        allIds[ob[colKey]] = true;
      }
      return false;
    }
  };

}).call(this);

(function() {
  var LayoutUtils;

  LayoutUtils = {
    presets: {
      "Web": {
        "layoutFormat": "web-layout",
        "maxWidth": "900px",
        "minWidth": "600px",
        "minHeight": "322px",
        "numCols": "14",
        "numRows": "6",
        "margins": "5"
      },
      "Phone": {
        "layoutFormat": "web-layout",
        "maxWidth": "414px",
        "minWidth": "414px",
        "minHeight": "628px",
        "numCols": "10",
        "numRows": "6",
        "margins": "5"
      },
      "Embedded Graphic": {
        "layoutFormat": "embed-layout",
        "width": "400px",
        "height": "300px",
        "numCols": "12",
        "numRows": "9",
        "margins": "5"
      }
    },
    forcePreset: function(settings) {
      var preset, propName, result;
      if (settings.layoutPreset == null) {
        return settings;
      } else {
        preset = this.presets[settings.layoutPreset];
        result = settings;
        for (propName in preset) {
          result[propName] = preset[propName];
        }
        return result;
      }
    },
    validatePreset: function(settings) {
      var preset, propName, result;
      if (settings.layoutPreset == null) {
        settings.layoutPreset = "custom";
      } else {
        preset = this.presets[settings.layoutPreset];
        result = settings;
        for (propName in preset) {
          if (result[propName] !== preset[propName]) {
            settings.layoutPreset = "custom";
          }
        }
      }
      return settings;
    },
    validateLayoutSettings: function(settings, forcePreset) {
      var defaultTimeStamp, propName, result;
      result = {};
      defaultTimeStamp = 0;
      for (propName in settings) {
        if (!settings[propName]) {
          result[propName] = settings[propName];
        } else {
          if (settings[propName].value) {
            settings[propName] = settings[propName].value;
          }
          result[propName] = settings[propName];
        }
      }
      if (!result["foregroundColor"]) {
        result["foregroundColor"] = "#FFFFFF";
      }
      if (!result["width"]) {
        result["width"] = "100px";
      }
      if (!result["height"]) {
        result["height"] = "100px";
      }
      if (forcePreset) {
        result = this.forcePreset(result);
      } else {
        result = this.validatePreset(result);
      }
      this.validateExtremeValues(result);
      return result;
    },
    validateExtremeValues: function(settings) {
      if (this.scrapPx(settings.numCols) > 50) {
        settings.numCols = "50px";
      }
      if (this.scrapPx(settings.numCols) < 1) {
        settings.numCols = 1;
      }
      if (this.scrapPx(settings.numRows) > 50) {
        settings.numRows = "50px";
      }
      if (this.scrapPx(settings.numRows) < 1) {
        settings.numRows = 1;
      }
      if (this.scrapPx(settings.margins) > 25) {
        settings.margins = "25px";
      }
      if (this.scrapPx(settings.margins) < 0) {
        settings.margins = "0px";
      }
      if (this.scrapPx(settings.maxWidth) > 1920) {
        settings.maxWidth = "1920px";
      }
      if (this.scrapPx(settings.maxWidth) < 100) {
        settings.maxWidth = "100px";
      }
      if (this.scrapPx(settings.minWidth) > 1920) {
        settings.minWidth = "1920px";
      }
      if (this.scrapPx(settings.minWidth) < 100) {
        settings.minWidth = "100px";
      }
      if (this.scrapPx(settings.width) > 1920) {
        settings.width = "1920px";
      }
      if (this.scrapPx(settings.width) < 100) {
        return settings.width = "100px";
      }
      /*
      if @scrapPx(settings.height) > 1080
        settings.height = 1080
      if @scrapPx(settings.height) < 100
        settings.height = 100
      */

    },
    constrainLayoutSettings: function(settings) {
      var targetId, widthArray;
      widthArray = [
        {
          "id": "width",
          "object": settings.width
        }, {
          "id": "colWidth",
          "object": settings.colWidth
        }, {
          "id": "numCols",
          "object": settings.numCols
        }, {
          "id": "margins",
          "object": settings.margins
        }
      ];
      widthArray.sort(function(a, b) {
        if (a.object === "") {
          return false;
        }
        if (b.object === "") {
          return true;
        }
      });
      targetId = widthArray[0].id;
      if (targetId === "margins") {
        targetId = widthArray[1].id;
      }
      if (targetId === "numCols") {
        settings.numCols = this.scrapPx(settings.width) / (this.scrapPx(settings.colWidth) + 2 * this.scrapPx(settings.margins));
      } else if (targetId === "colWidth" || targetId === "margins") {
        settings.colWidth = ((this.scrapPx(settings.width) / settings.numCols) - 2 * this.scrapPx(settings.margins)) + "px";
      } else if (targetId === "width") {
        settings.width = settings.numCols * (this.scrapPx(settings.colWidth) + 2 * this.scrapPx(settings.margins)) + "px";
      }
      return settings;
    },
    scrapPx: function(str) {
      var result;
      result = String(str);
      result = result.replace("px", "").replace("%", "");
      return Number(result);
    }
  };

  try {
    window.LayoutUtils = LayoutUtils;
  } catch (_error) {
    this.LayoutUtils = LayoutUtils;
  }

}).call(this);

(function() {
  var NetworkUtils;

  NetworkUtils = {
    fillBlocks: function(mainBlock, nodesBlock, relsBlock, format, allBlock) {
      var checkResult, idkey;
      nodesBlock.set("data", []);
      relsBlock.set("data", []);
      if (format === "pairsTable") {
        checkResult = this.checkIfPairsTable(mainBlock);
        this.fillFromPairsTable(mainBlock, nodesBlock, relsBlock);
        idkey = "__Index__";
      } else if (format === "adjMatrix") {
        checkResult = this.checkIfAdjMatrix(mainBlock);
        this.fillFromAdjMatrix(mainBlock, nodesBlock, relsBlock);
        idkey = "-";
      }
      allBlock.get("operator").setExpressionValues({
        "keySelector": {
          value: idkey
        },
        "originalBlock": mainBlock
      });
      allBlock.runOperator();
      nodesBlock.set("fetchState", "ready");
      return relsBlock.set("fetchState", "ready");
    },
    checkIfNetwork: function(mainBlock) {
      var result;
      result = {};
      if (this.checkIfPairsTable(mainBlock).valid) {
        result.pairsTable = true;
      }
      if (this.checkIfAdjMatrix(mainBlock).valid) {
        result.adjMatrix = true;
      }
      if (!result.pairsTable && !result.adjMatrix) {
        result = null;
      }
      return result;
    },
    checkIfPairsTable: function(mainBlock) {
      var col, destinationOK, originOK, valid, _i, _len, _ref;
      valid = false;
      originOK = false;
      destinationOK = false;
      _ref = mainBlock.get("data");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        col = _ref[_i];
        if (col.id === "Origin" || col.id === "origin") {
          originOK = true;
        }
        if (col.id === "Destination" || col.id === "destination") {
          destinationOK = true;
        }
      }
      if (originOK && destinationOK) {
        valid = true;
      }
      return {
        valid: valid
      };
    },
    fillFromPairsTable: function(mainBlock, nodesBlock, relsBlock) {
      var dest, destId, j, nodesIds, relationId, relsDestinations, relsIds, relsOrigins, relsValues, row, source, sourceId, usedIds, usedRels, weight, _i, _len, _ref;
      nodesIds = new quadrigram.Models.DataBlockData;
      relsIds = new quadrigram.Models.DataBlockData;
      relsValues = new quadrigram.Models.DataBlockData;
      relsOrigins = new quadrigram.Models.DataBlockData;
      relsDestinations = new quadrigram.Models.DataBlockData;
      usedIds = {};
      usedRels = {};
      source = mainBlock.get("data")[0].value;
      dest = mainBlock.get("data")[1].value;
      if (mainBlock.get("data")[2] != null) {
        weight = mainBlock.get("data")[2].value;
      }
      _ref = source.get("data");
      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
        row = _ref[j];
        /*
        if j==0
          continue
        */

        sourceId = row.value;
        destId = dest.get("data")[j].value;
        if (!usedIds[sourceId]) {
          usedIds[sourceId] = true;
          nodesIds.get("data").push({
            "id": sourceId,
            "value": sourceId
          });
        }
        if (!usedIds[destId]) {
          usedIds[destId] = true;
          nodesIds.get("data").push({
            "id": destId,
            "value": destId
          });
        }
        relationId = sourceId + "->" + destId;
        if (!usedRels[relationId]) {
          usedRels[relationId] = true;
          relsIds.get("data").push({
            "id": relationId,
            "value": relationId
          });
          relsOrigins.get("data").push({
            "id": relationId,
            "value": sourceId
          });
          relsDestinations.get("data").push({
            "id": relationId,
            "value": destId
          });
        }
        if (weight != null) {
          relsValues.get("data").push({
            "id": relationId,
            "value": weight.get("data")[j].value
          });
        }
      }
      relsIds.metaData = {
        "viewMode": "list",
        "idLabel": "Relation id",
        "valueLabel": "Name"
      };
      relsValues.metaData = {
        "viewMode": "list",
        "idLabel": "Relation id",
        "valueLabel": "Weight"
      };
      relsOrigins.metaData = {
        "viewMode": "list",
        "idLabel": "Relation id",
        "valueLabel": "Origin"
      };
      relsDestinations.metaData = {
        "viewMode": "list",
        "idLabel": "Relation id",
        "valueLabel": "Destination"
      };
      relsBlock.get("data").push({
        "id": "Name",
        "value": relsIds
      });
      if (weight != null) {
        relsBlock.get("data").push({
          "id": "Weight",
          "value": relsValues
        });
      }
      relsBlock.get("data").push({
        "id": "Origin",
        "value": relsOrigins
      });
      relsBlock.get("data").push({
        "id": "Destination",
        "value": relsDestinations
      });
      nodesIds.metaData = {
        "viewMode": "list",
        "idLabel": "Node id"
      };
      return nodesBlock.get("data").push({
        "id": "Name",
        "value": nodesIds
      });
    },
    checkIfAdjMatrix: function(mainBlock) {
      var col, i, matched, _i, _len, _ref;
      if (mainBlock.get("data").length - 1 !== mainBlock.get("data")[0].value.get("data").length) {
        return {
          valid: false,
          reason: "Matrix must be square!"
        };
      }
      matched = true;
      _ref = mainBlock.get("data");
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        col = _ref[i];
        if (i !== 0) {
          if (mainBlock.get("data")[i].id !== mainBlock.get("data")[0].value.get("data")[i - 1].value) {
            matched = false;
          }
        }
      }
      if (!matched) {
        return {
          valid: false,
          reason: "Column headers and row headers dont match!"
        };
      }
      return {
        valid: true
      };
    },
    fillFromAdjMatrix: function(mainBlock, nodesBlock, relsBlock) {
      var col, destId, hasNodeWeights, i, j, nodesIds, nodesValues, relId, relsDestinations, relsIds, relsOrigins, relsValues, row, sourceId, _i, _j, _len, _len1, _ref, _ref1;
      nodesIds = new quadrigram.Models.DataBlockData;
      nodesValues = new quadrigram.Models.DataBlockData;
      relsIds = new quadrigram.Models.DataBlockData;
      relsValues = new quadrigram.Models.DataBlockData;
      relsOrigins = new quadrigram.Models.DataBlockData;
      relsDestinations = new quadrigram.Models.DataBlockData;
      _ref = mainBlock.get("data");
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        col = _ref[i];
        if (i === 0) {
          continue;
        }
        nodesIds.get("data").push({
          "id": col.value.get("label"),
          "value": col.value.get("label")
        });
        _ref1 = col.value.get("data");
        for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
          row = _ref1[j];
          if (j > i - 1) {
            continue;
          } else if (j === i - 1) {
            if (Number(row.value)) {
              hasNodeWeights = true;
            }
            nodesValues.get("data").push({
              "id": sourceId,
              "value": row.value
            });
          } else if (Number(row.value) > 0) {
            sourceId = col.value.get("label");
            destId = mainBlock.get("data")[0].value.get("data")[j].value;
            relId = sourceId + "->" + destId;
            relsIds.get("data").push({
              "id": relId,
              "value": relId
            });
            relsValues.get("data").push({
              "id": relId,
              "value": row.value
            });
            relsOrigins.get("data").push({
              "id": relId,
              "value": sourceId
            });
            relsDestinations.get("data").push({
              "id": relId,
              "value": destId
            });
          }
        }
      }
      relsIds.metaData = {
        "viewMode": "list",
        "idLabel": "Relation name",
        "valueLabel": "Name"
      };
      relsValues.metaData = {
        "viewMode": "list",
        "idLabel": "Relation name",
        "valueLabel": "Weight"
      };
      relsOrigins.metaData = {
        "viewMode": "list",
        "idLabel": "Relation name",
        "valueLabel": "Origin"
      };
      relsDestinations.metaData = {
        "viewMode": "list",
        "idLabel": "Relation name",
        "valueLabel": "Destination"
      };
      relsBlock.get("data").push({
        "id": "Name",
        "value": relsIds
      });
      relsBlock.get("data").push({
        "id": "Weight",
        "value": relsValues
      });
      relsBlock.get("data").push({
        "id": "Origin",
        "value": relsOrigins
      });
      relsBlock.get("data").push({
        "id": "Destination",
        "value": relsDestinations
      });
      nodesIds.metaData = {
        "viewMode": "list",
        "idLabel": "Node id"
      };
      nodesBlock.get("data").push({
        "id": "Name",
        "value": nodesIds,
        "valueLabel": "Name"
      });
      if (hasNodeWeights) {
        return nodesBlock.get("data").push({
          "id": "Weight",
          "value": nodesValues,
          "valueLabel": "Weight"
        });
      }
    }
  };

  try {
    window.NetworkUtils = NetworkUtils;
  } catch (_error) {
    this.NetworkUtils = NetworkUtils;
  }

}).call(this);

(function() {
  'use strict';
  var svgUtils;

  svgUtils = {};

  svgUtils.svgToUrl = function(source) {
    var blobSource, url;
    blobSource = new XMLSerializer().serializeToString(source);
    url = window.URL.createObjectURL(new Blob([blobSource], {
      "type": "text\/xml"
    }));
    return url;
  };

  svgUtils.svgToImageUrl = function(source) {
    var blobSource, url;
    blobSource = new XMLSerializer().serializeToString(source);
    url = window.URL.createObjectURL(new Blob([blobSource], {
      "type": 'image/svg+xml;charset=utf-8'
    }));
    return url;
  };

  svgUtils.getSVGWithStyles = function(element, forceFont) {
    var clone, emptySvg, emptySvgDeclarationComputed, htmlSource;
    emptySvg = window.document.createElementNS("http://www.w3.org/2000/svg", 'svg');
    window.document.body.appendChild(emptySvg);
    emptySvgDeclarationComputed = getComputedStyle(emptySvg);
    clone = $(element.cloneNode(true));
    clone.find(".dont-render").remove();
    htmlSource = clone.attr("version", 1.1).attr("xmlns", "http://www.w3.org/2000/svg")[0];
    $("body").append(htmlSource);
    svgUtils.setInlineStyles(htmlSource, emptySvgDeclarationComputed, forceFont);
    htmlSource.remove();
    emptySvg.remove();
    return htmlSource;
  };

  /*
  explicitlySetStyleRoot:(element,cSSStyleDeclarationComputed)=>
    i = undefined
    len = undefined
    key = undefined
    value = undefined
    computedStyleStr = ''
    i = 0
    len = cSSStyleDeclarationComputed.length
    while i < len
      key = cSSStyleDeclarationComputed[i]
      value = cSSStyleDeclarationComputed.getPropertyValue(key)
      if !element.hasAttribute(key) #key!="width" && key!="height"
        computedStyleStr += key + ':' + value + ';'
  
      i++
    element.setAttribute 'style', computedStyleStr
  */


  
svgUtils.setInlineStyles = function(svg, emptySvgDeclarationComputed,forceFont) {

  function explicitlySetStyle (element) {
    var cSSStyleDeclarationComputed = getComputedStyle(element);
    var i, len, key, value;
    var computedStyleStr = "";
    for (i=0, len=cSSStyleDeclarationComputed.length; i<len; i++) {
      key=cSSStyleDeclarationComputed[i];
      value=cSSStyleDeclarationComputed.getPropertyValue(key);
      if (key=="font-family")
      {
        if (forceFont==true)
        {
        }
        value="Arial"
        
      }
      if (value!==emptySvgDeclarationComputed.getPropertyValue(key) && value != "auto") {
        computedStyleStr+=key+":"+value+";";
      }
    }
    element.setAttribute('style', computedStyleStr);
  }
  function traverse(obj){
    var tree = [];
    tree.push(obj);
    visit(obj);
    function visit(node) {
      if (node && node.hasChildNodes()) {
        var child = node.firstChild;
        while (child) {
          if (child.nodeType === 1 && child.nodeName != 'SCRIPT'){
            tree.push(child);
            visit(child);
          }
          child = child.nextSibling;
        }
      }
    }
    return tree;
  }
  // hardcode computed css styles inside svg
  var allElements = traverse(svg);
  var i = allElements.length;
  while (i--){
    explicitlySetStyle(allElements[i]);
  }
}
;

  window.svgUtils = svgUtils;

}).call(this);

(function() {
  window.quadrigram = new Backbone.App({
    lang: "en",
    environment: "exported",
    version: "1.1.1",
    start: function(options) {
      var _this = this;
      log("STARTING BACKBONE WITH ENV:", this.environment);
      if (this.environment !== "editor" && this.environment !== "exported") {
        this.environment = "editor";
      }
      quadrigram.environment = this.environment;
      quadrigram.baseUrl = "http://www.quadrigram.com/";
      quadrigram.version = this.version;
      quadrigram.googleUrl = quadrigram.baseUrl + "rs/google/";
      quadrigram.userUrl = quadrigram.baseUrl + "rs/user/";
      quadrigram.webUrl = quadrigram.baseUrl;
      quadrigram.router = new quadrigram.Router;
      quadrigram.tracker = new quadrigram.Tracker;
      quadrigram.rootPath = "/editor/";
      if (this.environment === "editor") {
        quadrigram.fonts = quadrigram.baseUrl + "editor/";
      } else {
        quadrigram.fonts = "./";
      }
      moment.locale("en-UK");
      window.onerror = function(message, filename, lineno, colno, error) {
        if (error != null) {
          return quadrigram.tracker.sendEvent({
            event_type: 101,
            event_subtype: 0,
            error_code: message,
            error_data: {
              stack: error.stack
            }
          });
        } else {
          return quadrigram.tracker.sendEvent({
            event_type: 101,
            event_subtype: 0,
            error_code: message,
            error_data: {
              filename: filename,
              lineno: lineno
            }
          });
        }
      };
      /*
      proxiedSync = Backbone.sync
      Backbone.sync = (method, model, options) =>
        options || (options = {});
      
      
        if !options.crossDomain
          options.crossDomain = true;
      
        if !options.xhrFields
          options.xhrFields = {withCredentials:true};
        return proxiedSync(method, model, options);
      */

      
    if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
      Object.defineProperty(Function.prototype, 'name', {
          get: function() {
              var funcNameRegex = /function\s([^(]{1,})\(/;
              var results = (funcNameRegex).exec((this).toString());
              return (results && results.length > 1) ? results[1].trim() : "";
          },
          set: function(value) {}
      });
    }
    ;
      Backbone.history.start({
        pushState: true,
        root: quadrigram.rootPath
      });
    }
  });

  $(function() {
    $.ajaxSetup({
      url: "ping.php",
      cache: false,
      xhrFields: {
        withCredentials: true
      }
    });
    $.widget("custom.selectmenuWithTooltips", $.ui.selectmenu, {
      _renderItem: function(ul, item) {
        var li;
        li = this._super(ul, item);
        li.attr("data-ui-tip-id", item.element.attr("data-ui-tip-id"));
        return li.addClass("ui-tip-target");
      }
    });
    quadrigram.run($('#content'), {
      forceDebug: true
    });
    return _.deepObjectExtend = function(target, source) {
      var prop;
      if (_.isArray(target) || _.isString(target) || _.isNumber(target)) {
        target = source;
        return;
      }
      for (prop in source) {
        if (target[prop] != null) {
          _.deepObjectExtend(target[prop], source[prop]);
        } else {
          target[prop] = source[prop];
        }
      }
      return target;
    };
  });

  $.fn.convertToDynamicSvg = function($img, callback) {
    var imgClass, imgID, imgURL,
      _this = this;
    imgClass = $img.attr("class");
    imgID = $img.attr("id");
    imgURL = $img.attr("src") || $img.attr("href");
    return jQuery.get(imgURL, (function(data) {
      var $svg;
      $svg = jQuery(data).find('svg');
      if (typeof imgID !== 'undefined') {
        $svg = $svg.attr('id', imgID);
      }
      if (typeof imgClass !== 'undefined') {
        $svg = $svg.attr('class', imgClass + ' replaced-svg');
      }
      $svg = $svg.removeAttr('xmlns:a');
      $img.replaceWith($svg);
      if (callback != null) {
        callback();
      }
    }), 'xml');
  };

  /*
  `
  $.fn.textWidth = function(text, font) {
      if (!$.fn.textWidth.fakeEl) $.fn.textWidth.fakeEl = $('<span>').hide().appendTo(document.body);
      var originalEl = $(text);
      var originalText = ""
      if (originalEl[0].tagName == "INPUT")
      {
        originalText = String(originalEl.val())
      }
      else
      {
        originalText = String(originalEl.html())
      }
      $.fn.textWidth.fakeEl.text(originalText)
      $.fn.textWidth.fakeEl.css('font', font || originalEl.css('font'));
      return $.fn.textWidth.fakeEl.width()+1;
  };
  `
  
  `
  $.fn.textHeight = function(text, font) {
      if (!$.fn.textHeight.fakeEl) $.fn.textHeight.fakeEl = $('<span>').hide().appendTo(document.body);
      var originalEl = $(text);
      var originalText = ""
      if (originalEl[0].tagName == "INPUT")
      {
        originalText = String(originalEl.val())
      }
      else
      {
        originalText = String(originalEl.html())
      }
      $.fn.textHeight.fakeEl.text(originalText)
      $.fn.textHeight.fakeEl.css('font', font || originalEl.css('font'));
      return $.fn.textHeight.fakeEl.height();
  };
  `
  */


  $.fn.textWidth = function(text, font) {
    var originalEl, originalText;
    if (!$.fn.textWidth.fakeEl) {
      $.fn.textWidth.fakeEl = $('<span>').hide().appendTo(document.body);
    }
    originalEl = $(text);
    originalText = '';
    if (originalEl[0].tagName === 'INPUT') {
      originalText = String(originalEl.val());
    } else {
      originalText = String(originalEl.html());
    }
    $.fn.textWidth.fakeEl.text(originalText);
    $.fn.textWidth.fakeEl.css('font', font || originalEl.css('font'));
    return $.fn.textWidth.fakeEl.width() + 1;
  };

  $.fn.textHeight = function(text, font) {
    var originalEl, originalText;
    if (!$.fn.textHeight.fakeEl) {
      $.fn.textHeight.fakeEl = $('<span>').hide().appendTo(document.body);
    }
    originalEl = $(text);
    originalText = '';
    if (originalEl[0].tagName === 'INPUT') {
      originalText = String(originalEl.val());
    } else {
      originalText = String(originalEl.html());
    }
    $.fn.textHeight.fakeEl.text(originalText);
    $.fn.textHeight.fakeEl.css('font', font || originalEl.css('font'));
    return $.fn.textHeight.fakeEl.height();
  };

  $.fn.isInheritedStyle = function(style) {
    var current, inherited;
    current = this.css(style);
    this.css(style, 'inherit');
    inherited = this.css(style);
    if (current === inherited) {
      this.css(style, '');
    } else {
      this.css(style, current);
    }
    return current === inherited;
  };

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      this.compareVersions = __bind(this.compareVersions, this);
      this.startProject = __bind(this.startProject, this);
      this.checkProjectIntegrity = __bind(this.checkProjectIntegrity, this);
      this.actualRenameCurrentProject = __bind(this.actualRenameCurrentProject, this);
      this.actualSaveAsCurrentProject = __bind(this.actualSaveAsCurrentProject, this);
      this.actualSaveCurrentProject = __bind(this.actualSaveCurrentProject, this);
      this.actualShareCurrentProject = __bind(this.actualShareCurrentProject, this);
      this.renameCurrentProject = __bind(this.renameCurrentProject, this);
      this.shareCurrentProject = __bind(this.shareCurrentProject, this);
      this.saveAsCurrentProject = __bind(this.saveAsCurrentProject, this);
      this.saveCurrentProject = __bind(this.saveCurrentProject, this);
      this.optimizeCurrentProjectData = __bind(this.optimizeCurrentProjectData, this);
      this.startNewProject = __bind(this.startNewProject, this);
      this.showLoadingError = __bind(this.showLoadingError, this);
      this.abortedProjectLoad = __bind(this.abortedProjectLoad, this);
      this.loadProject = __bind(this.loadProject, this);
      this.cleanPrevieousProject = __bind(this.cleanPrevieousProject, this);
      this.resizeProject = __bind(this.resizeProject, this);
      this.startApp = __bind(this.startApp, this);
      this.composeLayout = __bind(this.composeLayout, this);
      this.before_any = __bind(this.before_any, this);
      this.getDevice = __bind(this.getDevice, this);
      this.setAnalyticsScript = __bind(this.setAnalyticsScript, this);
      _ref = Router.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Router.prototype.appViews = {};

    Router.prototype.dataModels = {};

    Router.prototype.managers = {};

    Router.prototype.routes = {
      '?state=:state': 'start',
      '*path': 'start'
    };

    Router.prototype.start = function(state) {
      var device, openProjectId;
      this.before_any();
      openProjectId = null;
      if (quadrigram.environment === "editor" && quadrigram.rootPath === "/editor/") {
        this.setAnalyticsScript();
        device = this.getDevice();
        if (device === "Tablet" || device === "Mobile") {
          this.appViews.disclaimerDeviceView = new quadrigram.Views.DisclaimerDeviceView({
            el: $('#pre-loader-container'),
            binding: false
          });
          this.appViews.disclaimerDeviceView.render();
          return;
        }
        if (state != null) {
          state = JSON.parse(state);
          if (state.action === "open" && state.ids.length > 0) {
            openProjectId = state.ids[0];
          } else if (state.action === "create") {
            openProjectId = "newProject";
          }
        }
      }
      if (device === "Tablet" || device === "Mobile") {
        this.hammer = new Hammer();
      }
      return this.startApp(openProjectId);
    };

    Router.prototype.setAnalyticsScript = function() {
      var code, e, s;
      s = document.createElement('script');
      s.type = 'text/javascript';
      code = "(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');          ga('create', 'UA-26978704-4', 'auto');          ga('send', 'pageview');";
      try {
        s.appendChild(document.createTextNode(code));
        return document.body.appendChild(s);
      } catch (_error) {
        e = _error;
        s.text = code;
        return document.body.appendChild(s);
      }
    };

    Router.prototype.getDevice = function() {
      if (!this.device) {
        if (device.mobile()) {
          this.device = "Mobile";
        }
        if (device.tablet()) {
          this.device = "Tablet";
        }
        if (device.desktop()) {
          this.device = "Desktop";
        }
      }
      return this.device;
      /*
      if !@device
        @device = "Desktop"
        mark = $("#device-detector").css("width")
        switch mark
          when "1px" then @device = "Desktop"
          when "2px" then @device = "Tablet"
          when "3px" then @device = "Mobile"
      return @device
      */

    };

    Router.prototype.before_any = function() {
      this.doOnce || (this.doOnce = _.once(this.composeLayout));
      return this.doOnce();
    };

    Router.prototype.composeLayout = function() {
      return this.performance = new quadrigram.Managers.PerformanceManager;
    };

    Router.prototype.startApp = function(openProjectId) {
      var _this = this;
      this.managers.fontManager = new quadrigram.Managers.FontManager();
      this.managers.serverManager = new quadrigram.Managers.ServerManager();
      this.managers.formatManager = new quadrigram.Managers.FormatManager();
      this.managers.workerManager = new quadrigram.Managers.WorkerManager();
      this.managers.keyboardShortcutsManager = new quadrigram.Managers.KeyboardShortcutsManager();
      this.managers.uiTooltipManager = new quadrigram.Managers.UiTooltipManager($("body"));
      this.appViews.loaderView = new quadrigram.Views.LoaderView({
        el: $('#loader-container'),
        model: new Backbone.Model(),
        binding: false
      });
      this.appViews.loaderView.render();
      if (quadrigram.environment === "editor") {
        this.dataModels.user = new quadrigram.Models.User();
        this.appViews.headerView = new quadrigram.Views.HeaderView({
          el: $('#header-container'),
          model: this.dataModels.user,
          binding: true
        });
        this.appViews.uiView = new quadrigram.Views.UIView({
          model: this.dataModels.currentProject,
          binding: false
        });
        localStorage.removeItem('optimizedData');
        this.dataModels.user.on("change", function() {
          if (openProjectId == null) {
            return _this.loadProject(_this.dataModels.user.get("lastOpenedProject"));
          } else if (openProjectId === "newProject") {
            return _this.startNewProject();
          } else {
            return _this.loadProject({
              id: openProjectId
            });
          }
        });
        this.dataModels.user.fetch();
      } else {
        this.loadProject("local");
        $(".back-container").remove();
        $(".front-container").remove();
        $("#header-container").remove();
      }
      return window.addEventListener("resize", function() {
        return _this.resizeProject();
      });
    };

    Router.prototype.resizeProject = function() {
      var ch, cw, marginLeft, marginTop, minScale, projectMaxWidth, projectMinWidth, projectWidth, properOuterWidth, scale, viewport;
      if (this.getDevice() === "Desktop") {
        properOuterWidth = window.outerWidth;
      } else {
        if (device.portrait()) {
          properOuterWidth = window.screen.availWidth;
        } else {
          properOuterWidth = window.screen.availHeight;
        }
      }
      projectMinWidth = Number(this.dataModels.currentProject.get("layout-settings").minWidth.replace("px", ""));
      projectMaxWidth = Number(this.dataModels.currentProject.get("layout-settings").maxWidth.replace("px", ""));
      projectMinWidth = projectMinWidth + properOuterWidth * 0.1;
      projectMaxWidth = projectMaxWidth + properOuterWidth * 0.1;
      if (properOuterWidth >= projectMaxWidth) {
        projectWidth = projectMaxWidth;
        scale = 1;
        minScale = properOuterWidth / projectWidth;
      } else if (properOuterWidth <= projectMinWidth && this.getDevice() === "Desktop") {
        projectWidth = projectMaxWidth;
        scale = projectMinWidth / projectWidth;
        minScale = scale;
      } else {
        projectWidth = projectMaxWidth;
        scale = properOuterWidth / projectWidth;
        minScale = scale;
      }
      this.dataModels.currentProject.initialScale = scale;
      if (this.getDevice() === "Desktop") {
        if (scale < 1 && quadrigram.environment === "editor") {
          $(".project-content").css("transform", "scale(" + scale + ")");
          cw = Number(this.dataModels.currentProject.get("layout-settings").width.replace("px", ""));
          ch = Number(this.dataModels.currentProject.get("layout-settings").height.replace("px", ""));
          marginLeft = -cw * (1 - scale) / 2 + (window.innerWidth - cw * scale) / 2;
          marginTop = -ch * (1 - scale) / 2;
          $(".project-content").css("margin", marginTop + "px " + marginLeft + "px");
          $(".project-content").css("width", (1 / scale) * 100 + "%");
          return $(".project-content").css("height", (1 / scale) * 100 + "%");
        } else {
          $(".project-content").css("transform", "");
          $(".project-content").css("margin", "");
          return $(".project-content").css("width", this.dataModels.currentProject.get("layout-settings").maxWidth);
        }
      } else {
        viewport = document.querySelector("meta[name=viewport]");
        viewport.setAttribute('content', 'initial-scale=' + scale.toFixed(1) + ' minimum-scale=' + minScale.toFixed(1));
        $("body").css("height", (+this.dataModels.currentProject.get("layout-settings").height.replace("px", "") + 160) + "px");
        $("html").css("height", (+this.dataModels.currentProject.get("layout-settings").height.replace("px", "") + 160) + "px");
        return $(".project-container").css("overflow", "visible");
      }
    };

    Router.prototype.cleanPrevieousProject = function() {
      var _tempSMT;
      quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
        mode: 2,
        "class": "reset"
      });
      if (this.dataModels.currentProject) {
        this.dataModels.currentProject.trigger("killProject");
        _tempSMT = Backbone.Relational.store._subModels;
        Backbone.Relational.store.reset();
        Backbone.Relational.store._subModels = _tempSMT;
      }
      if (this.appViews.projectView) {
        return this.appViews.projectView.remove();
      }
    };

    Router.prototype.loadProject = function(metaData) {
      var _this = this;
      this.performance.trackStep("Start Loading Project", ["project", "load", "qdr"], {});
      this.cleanPrevieousProject();
      quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
        message: 3,
        type: 0,
        priority: 0,
        timeout: 0,
        mode: 0,
        "class": "loadingProject"
      });
      if (metaData === "local") {
        this.dataModels.currentProject = new quadrigram.Models.ProjectModel({
          id: "localProject"
        });
        this.dataModels.currentProject.url = "data/project.qdr";
        return this.dataModels.currentProject.fetch({
          success: function() {
            _this.startProject();
            quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
              mode: 1,
              "class": "loadingProject"
            });
            ({
              silent: true
            });
            return _this.resizeProject();
          }
        });
      } else if ((metaData != null) && (metaData.id != null)) {
        if (this.appViews.headerView != null) {
          this.appViews.headerView.showProjectName("");
        }
        this.dataModels.currentProject = new quadrigram.Models.ProjectModel({
          id: metaData.id
        });
        this.dataModels.currentProject.on("abort", this.abortedProjectLoad);
        return this.dataModels.currentProject.fetch({
          success: function() {
            if (quadrigram.router.compareVersions(_this.dataModels.currentProject.get("pversion"), quadrigram.version) > 0) {
              _this.showLoadingError("Sorry, this project was created with a newer version of quadrigram so it can't be loaded. Please open another project or create a new one.");
              return;
            }
            if (_this.dataModels.currentProject.get("id") !== metaData.id) {
              _this.dataModels.currentProject.set("id", metaData.id);
            }
            _this.performance.trackStep("Project Loaded", ["project", "load", "qdr"], {});
            _this.startProject();
            quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
              mode: 1,
              "class": "loadingProject"
            });
            return {
              silent: true
            };
          },
          error: function() {
            return _this.showLoadingError("Sorry, there was an error while loading the project from Google Drive. Please open another project or create a new one.");
          }
        });
      } else {
        return this.startNewProject();
      }
    };

    Router.prototype.abortedProjectLoad = function() {
      quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
        message: 4,
        type: 2,
        priority: 2,
        timeout: 0,
        mode: 0,
        "class": "projectError"
      });
      return delete this.dataModels.currentProject;
    };

    Router.prototype.showLoadingError = function(message_text, autoCreateProject) {
      /*
      setTimeout(()=>
        @appViews.loaderView.trigger("loaderErrorMessage",message)
      ,500)
      */

      return quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
        message: message_text,
        type: 2,
        priority: 2,
        timeout: 0,
        mode: 0,
        "class": "projectError"
      });
      /*
      setTimeout(()=>
        @appViews.loaderView.hide()
      ,4000)
      */

    };

    Router.prototype.startNewProject = function() {
      this.cleanPrevieousProject();
      this.dataModels.currentProject = new quadrigram.Models.ProjectModel();
      this.startProject();
      return this.saveCurrentProject();
    };

    Router.prototype.optimizeCurrentProjectData = function() {
      try {
        return localStorage.setItem('optimizedData', JSON.stringify({
          id: this.dataModels.currentProject.get("id"),
          data: this.dataModels.currentProject.getInitialData()
        }));
      } catch (_error) {
        return quadrigram.tracker.sendEvent({
          event_type: 101,
          event_subtype: 3
        });
      }
    };

    Router.prototype.saveCurrentProject = function() {
      var saveAs;
      if (this.dataModels.currentProject.get("id")) {
        return this.actualSaveCurrentProject();
      } else {
        saveAs = new quadrigram.Views.SaveAsDialog({
          type: "save",
          callBack: this.actualSaveCurrentProject
        });
        return saveAs.render();
      }
    };

    Router.prototype.saveAsCurrentProject = function() {
      var saveAs;
      saveAs = new quadrigram.Views.SaveAsDialog({
        type: "saveas",
        callBack: this.actualSaveAsCurrentProject
      });
      return saveAs.render();
    };

    Router.prototype.shareCurrentProject = function() {
      var share;
      share = new quadrigram.Views.ShareDialog({
        type: "share",
        callBack: this.actualShareCurrentProject
      });
      return share.render();
    };

    Router.prototype.renameCurrentProject = function() {
      var saveAs;
      saveAs = new quadrigram.Views.SaveAsDialog({
        type: "rename",
        callBack: this.actualRenameCurrentProject
      });
      return saveAs.render();
    };

    Router.prototype.actualShareCurrentProject = function(options) {
      return quadrigram.router.dataModels.currentProject.requestShare(options.mails);
    };

    Router.prototype.actualSaveCurrentProject = function(options) {
      var realSize;
      if (options && options.newName) {
        quadrigram.router.dataModels.currentProject.set("pname", options.newName);
      }
      realSize = this.appViews.projectView.getRealSize();
      this.dataModels.currentProject.get("layout-settings").width = realSize.width;
      this.dataModels.currentProject.get("layout-settings").height = realSize.height;
      return quadrigram.router.dataModels.currentProject.requestSave();
    };

    Router.prototype.actualSaveAsCurrentProject = function(options) {
      if (options && options.newName) {
        quadrigram.router.dataModels.currentProject.set("pname", options.newName);
      }
      return quadrigram.router.managers.serverManager.saveAsCurrentProject(options.newName);
    };

    Router.prototype.actualRenameCurrentProject = function(options) {
      if (options && options.newName) {
        quadrigram.router.dataModels.currentProject.set("pname", options.newName);
      }
      quadrigram.router.dataModels.currentProject.requestSave();
      return quadrigram.router.managers.serverManager.renameCurrentProject(options.newName);
    };

    Router.prototype.checkProjectIntegrity = function(p) {
      if (p.get("layoutData").length !== p.get("visualizersCollection").models.length) {
        elog("Missing visualizer");
        return false;
      }
      return true;
    };

    Router.prototype.startProject = function() {
      /*
      if !@checkProjectIntegrity(@dataModels.currentProject)
        @showLoadingError("The project file is corrupt. Please open another project or create a new one.")
        return
      */

      this.appViews.projectView = new quadrigram.Views.ProjectView({
        model: this.dataModels.currentProject,
        binding: false
      });
      if (this.appViews.uiView) {
        this.appViews.uiView.model = this.dataModels.currentProject;
        this.appViews.uiView.render();
      } else {
        this.dataModels.currentProject.mode = "preview";
      }
      $(".project-container").append(this.appViews.projectView.$el);
      this.appViews.projectView.render();
      /*
      if !@dataModels.currentProject.hasPendingResources()
        #@appViews.loaderView.trigger("loaderMessage","")
      
        quadrigram.router.appViews.loaderView.trigger("loaderMessage",
          mode: 1
          class: "loadingProject"
        )
      */

      this.dataModels.currentProject.startTracking();
      this.dataModels.currentProject.startAutosave();
      return this.dataModels.currentProject.set("layout-settings", LayoutUtils.validateLayoutSettings(this.dataModels.currentProject.get("layout-settings")), {
        silent: true
      });
    };

    Router.prototype.compareVersions = function(a, b) {
      var a_components, b_components, i, len, _i;
      if (a == null) {
        return -1;
      }
      if (b == null) {
        return 1;
      }
      if (a === b) {
        return 0;
      }
      a_components = a.split(".");
      b_components = b.split(".");
      len = Math.min(a_components.length, b_components.length);
      for (i = _i = 0; 0 <= len ? _i <= len : _i >= len; i = 0 <= len ? ++_i : --_i) {
        if (parseInt(a_components[i]) > parseInt(b_components[i])) {
          return 1;
        }
        if (parseInt(a_components[i]) < parseInt(b_components[i])) {
          return -1;
        }
      }
      if (a_components.length > b_components.length) {
        return 1;
      }
      if (a_components.length < b_components.length) {
        return -1;
      }
      return 0;
    };

    return Router;

  })(Backbone.Router);

}).call(this);

this["JST"] = this["JST"] || {};

this["JST"]["app/scripts/templates/Grid.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<div class='canvas-container'>\n\n  <div class=\"layout-guides-container\">\n    <div class=\"layout-guides\">\n      <div class=\"layout-cols\"></div>\n      <div class=\"layout-rows\"></div>\n    </div>\n  </div>\n\n</div>\n\n";
  });

this["JST"]["app/scripts/templates/Project.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"tooltip-layer\">\n</div>\n<div class=\"gridster\">\n  <ul>\n  </ul>\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/UI.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/UI/blockInspector.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n          <li class=\"operator-selector-item button-"
    + escapeExpression(((stack1 = ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " ui-tip-target\" data-ui-tip-id =\"operator-"
    + escapeExpression(((stack1 = ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" value=\""
    + escapeExpression(((stack1 = ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">";
  if (stack2 = helpers.label) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.label; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</li>\n          ";
  return buffer;
  }

  buffer += "<div class=\"block-inspector-content ui-front\">\n\n    <div class=\"block-selector block-inspector-item\">\n\n      <div class=\"selected-block-container slot-body\"></div>\n    </div>\n\n    <div class=\"equal-char-block-container block-inspector-item\">\n      <div class=\"equal-icon\"></div>\n    </div>\n\n    <div class=\"operator-selector-container block-inspector-item\">\n      <div class=\"dropdown operator-selector\">\n        <div id=\"operator-selector-button-1\" class=\"operator-selector-button\" data-toggle=\"dropdown\">\n          <span class=\"caret\"></span>\n        </div>\n        <ul class=\"dropdown-menu main-selector\" name=\"format-selector\" role=\"menu\" aria-labelledby=\"operator-selector-button-1\">\n          ";
  stack1 = helpers.each.call(depth0, depth0.functionsLibrary, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </ul>\n      </div>\n    </div>\n\n    <div class=\"mega-slot-container block-inspector-item\">\n    </div>\n    <div class=\"clear\"></div>\n </div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dataFactory.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"data-manager-content\">\n\n\n    <div class=\"col one\">\n      <div class=\"btn-group data-container-menu\">\n        <div type=\"button\" menu=\"file\" class=\"btn btn-default data-container-menu-item files\">\n          <div class=\"menu-item-icon\">\n            Files\n          </div>\n        </div>\n        <!-- deprecated! <button type=\"button\" menu=\"custom\" class=\"btn btn-default data-container-menu-item\">Blocks</button> -->\n        <div type=\"button\" menu=\"urls\" class=\"btn btn-default data-container-menu-item disabled urls\">\n          <div class=\"menu-item-icon\">\n            URLs\n          </div>\n        </div>\n        <div type=\"button\" menu=\"custom\" class=\"btn btn-default data-container-menu-item formulas\">\n          <div class=\"menu-item-icon\">\n              Formulas\n          </div>\n        </div>\n        <div type=\"button\" menu=\"charts\" class=\"btn btn-default data-container-menu-item outputs\">\n          <div class=\"menu-item-icon\">\n            Outputs\n          </div>\n        </div>\n      </div>\n      \n      \n      <div class=\"block-group-list-container\"></div>\n\n    </div>\n    \n    <div class=\"col two\">\n     \n      <div class=\"block-group-container\"></div>\n    </div>\n    <!--<div class=\"col three\"></div>-->\n\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/BlockPreview.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dialog\">\n  <div class=\"preview-container\"></div>\n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/dataTableOptionsTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"builder-options-inline text\">Use the column</div>  \n<div class=\"id-selector-container builder-options-inline selector\" ></div> \n<div class=\"builder-options-inline text\">as item identifiers (rows names).</div>  ";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/dataTypeOptionsTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<div class=\"data-type-selector-container builder-options-item\">\n\n  <div class=\"is-network-checkbox-container hidden\">\n    <input class=\"checkbox-input\" type=\"checkbox\"> </input>\n    <div class=\"builder-options-inline text\"> Interpret the data as a Network (detected <b class=\"detected-format\"></b> format) </div>\n    <a class=\"learn-more-link\">Click here to learn more</a>\n  </div>\n</div> \n\n<div class=\"specific-options-container builder-options-item hidden\">\n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/dynamicCheckboxTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<input class=\"dyanimc-checkbox\" type=\"checkbox\">\n<span>By checking this box we will link this document as a dynamic Google Sheet in the project.</span>\n\n\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/fileTypeOptions.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<div class = \"tabs-container\">\n  <ul class=\"tabs-list\">\n\n  </ul>  \n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/multiTablePreviewTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"super-table-content\">\n  \n<div class = \"list-selector\">\n  <ul>\n\n  </ul>\n</div>\n\n<div class = \"table-container\">\n  <table class=\"table\">\n  </table>\n</div>\n  \n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/networkOptionsTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"builder-options-inline text\">Network is formated as </div>  \n<div class=\"format-selector-container builder-options-inline selector\">\n  <select class=\"format-selector\">\n    <!--\n    <option value=\"pairsTable\">Pairs table</option>\n    <option value=\"adjMatrix\">Adjacency matrix</option>\n    -->\n  </select>\n</div> ";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/noDataTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"no-data-table\">\n  <div class=\"no-data-yet-label\">\n    NO DATA\n  </div>\n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/noDataYetTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"no-data-yet-table\">\n  <div class=\"no-data-yet-label\">\n    Calculating...\n  </div>\n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/processingTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"processing-table\">\n  <div class=\"processing-message\">\n    Processing data...\n  </div>\n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/singleValuePreviewTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class = \"value-container\">\n\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/singleValueTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"single-value-table\">\n  "
    + escapeExpression(((stack1 = depth0.value),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\n  <div class=\"one-value-warning\">\n    This cell has a single value (with id: "
    + escapeExpression(((stack1 = depth0.id),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")\n  </div>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/tableContentTemplate - Copy.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, stack2, options;
  buffer += "\n        ";
  options = {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data};
  stack2 = ((stack1 = helpers.ifEq || depth0.ifEq),stack1 ? stack1.call(depth0, ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.index), 0, options) : helperMissing.call(depth0, "ifEq", ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.index), 0, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n      \n      ";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "";
  buffer += "\n          <div class=\"table-viewer-content-header-cell table-viewer-content-header-id-cell table-viewer-cell\" data-id=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\"> "
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + " </div>\n        ";
  return buffer;
  }

function program4(depth0,data) {
  
  var buffer = "";
  buffer += "\n          <div class=\"table-viewer-content-header-cell table-viewer-cell\" data-id=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\"> "
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + " </div>\n        ";
  return buffer;
  }

function program6(depth0,data,depth1) {
  
  var buffer = "", stack1, stack2, options;
  buffer += "\n      <div class=\"table-viewer-content-row table-viewer-row\">\n\n        ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.setIndex || depth0.setIndex),stack1 ? stack1.call(depth0, ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.index), options) : helperMissing.call(depth0, "setIndex", ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.index), options)))
    + "\n        ";
  stack2 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.programWithDepth(7, program7, data, depth0, depth1),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n      </div>\n    ";
  return buffer;
  }
function program7(depth0,data,depth1,depth2) {
  
  var buffer = "", stack1, stack2, options;
  buffer += "\n          ";
  options = {hash:{},inverse:self.programWithDepth(10, program10, data, depth1, depth2),fn:self.program(8, program8, data),data:data};
  stack2 = ((stack1 = helpers.ifEq || depth0.ifEq),stack1 ? stack1.call(depth0, ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.index), 0, options) : helperMissing.call(depth0, "ifEq", ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.index), 0, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n        ";
  return buffer;
  }
function program8(depth0,data) {
  
  var buffer = "";
  buffer += "\n            <div class=\"table-viewer-content-row-id-cell table-viewer-cell\" data-id=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\"> "
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + " </div>\n          ";
  return buffer;
  }

function program10(depth0,data,depth2,depth3) {
  
  var buffer = "", stack1, stack2, options;
  buffer += "\n            <div class=\"table-viewer-content-cell table-viewer-cell\">";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers.getFromTable || depth3.getFromTable),stack1 ? stack1.call(depth0, ((stack1 = depth3.tableData),stack1 == null || stack1 === false ? stack1 : stack1.contentData), depth2.index, ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.index), options) : helperMissing.call(depth0, "getFromTable", ((stack1 = depth3.tableData),stack1 == null || stack1 === false ? stack1 : stack1.contentData), depth2.index, ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.index), options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "</div>\n          ";
  return buffer;
  }

  buffer += "\n<div class=\"table-viewer-content\">\n  \n    <div class=\"table-viewer-content-header table-viewer-row\">\n      \n      ";
  stack2 = helpers.each.call(depth0, ((stack1 = depth0.tableData),stack1 == null || stack1 === false ? stack1 : stack1.headerData), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n      \n    </div>\n \n    <div class=\"table-viewer-content-header-dropdowns table-viewer-row\">\n    </div>\n    ";
  stack2 = helpers.each.call(depth0, ((stack1 = depth0.tableData),stack1 == null || stack1 === false ? stack1 : stack1.contentData), {hash:{},inverse:self.noop,fn:self.programWithDepth(6, program6, data, depth0),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n</div>\n\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/tablePreviewTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<table class = \"table-viewer\">\n\n</table>\n\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/tableView.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, self=this;

function program1(depth0,data) {
  
  
  return "\n  \n  <div class=\"all-options-container\">\n    \n    \n    <div class=\"data-type-options-container builder-options-container\">\n     \n    </div>\n  </div>\n \n  \n  <div class=\"warning-container hidden\"></div>\n";
  }

  buffer += "<div class=\"toggler-container\">\n  \n</div>\n";
  stack1 = helpers['if'].call(depth0, depth0.isBuilder, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n<div  class=\"hot-container\">\n\n</div>\n<div class=\"file-type-options-container\">\n\n</div>\n<div class=\"checkbox-container\">\n  \n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/viewModeTogglerTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"view-mode-toggle ui-tip-target\" data-ui-tip-id=\"view-mode-toggle\">\n  <div class=\"dropdown view-mode-selector\">\n    <div class=\"view-mode-selector-button\" data-toggle=\"dropdown\">\n      <div class=\"selected-instance table-icon\" value=\"table\"></div>\n    </div>\n    <ul class=\"dropdown-menu\" name=\"format-selector\" role=\"menu\">\n      <li class=\"view-mode-item \" value=\"col\"> \n        <div class = \"dropdown-icon col-icon\"> </div> \n        <span> Column </span> \n      </li>\n      <li class=\"view-mode-item \" value=\"row\"> \n        <div class = \"dropdown-icon row-icon\"> </div> \n        <span> Row </span> \n      </li>\n      <li class=\"view-mode-item \" value=\"table\"> \n        <div class = \"dropdown-icon table-icon\"> </div> \n        <span> Table </span> \n      </li>\n      \n\n    </ul>\n  </div>\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/warningAggregateTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"warning-content yellow-warning\">\n  <div class=\"warning-message\">\n    The column selected as item's identifier (";
  if (stack1 = helpers.idKey) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.idKey; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ") has repeated elements. All the other columns must be aggregated.\n  </div>\n  <div class=\"dismiss-btn\">I know, its ok!</div>\n\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/warningBadDataTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"warning-content yellow-warning\">\n  <div class=\"warning-message\">\n    Maybe your data is not propertly formated: <b> "
    + escapeExpression(((stack1 = depth0.reason),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " </b>\n  </div>\n  <div class=\"dismiss-btn\">I kow, its ok!</div>\n  <a class=\"learn-more-link\">Click here to learn more</a>\n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/BlockPreview/warningInvalidDataTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"warning-content red-warning\">\n  <div class=\"warning-message\">\n    Sorry, we were unable to propertly parse your file...\n  </div>\n  <a class=\"learn-more-link\">Click here to learn more</a>\n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/blockBuilder.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dialog\">\n  <div class=\"table-container\"></div>\n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/dropzonePreviewTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-details\">\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n    <div class=\"dz-size\" data-dz-size></div>\n    <img data-dz-thumbnail />\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  \n  <div class=\"dz-success-mark\"><span>✔</span></div>\n  <div class=\"dz-error-mark\"><span>✘</span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  \n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/exportOptions.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dialog export-options-dialog\">\n \n    <div class=\"export-description\">\n      Choose an option to publish your project\n    </div>\n    <div class=\"export-options-container\">\n      <a class=\"export-a\" data-type=\"web\" target=\"_blank\">\n        <div class=\"export-option web-option\" data-type=\"web\">\n          <div class=\"option-icon web-option\"></div>\n          <div class=\"option-title\"> Publish as a Web</div>\n          <div class=\"option-description\">\n            The web will be hosted at quadrigram.com and you can share the link with your audience\n          </div>\n          \n        </div>\n      </a>\n      <a class=\"export-a\" data-type=\"embed\" target=\"_blank\">\n        <div class=\"export-option embed-option\" data-type=\"embed\">\n          <div class=\"option-icon embed-option\"></div>\n          <div class=\"option-title\"> Publish for Embedding</div>\n          <div class=\"option-description\">\n            You will get an embed code that you can paste into any html editor\n          </div>\n          \n        </div>\n      </a>\n      <a class=\"export-a\" data-type=\"zip\" target=\"_blank\">\n        <div class=\"export-option zip-option\" data-type=\"zip\">\n          <div class=\"option-icon zip-option\"></div>\n          <div class=\"option-title\"> Download source code</div>\n          <div class=\"option-description\">\n            Download a zip file containing the source code of your project.\n          </div>\n          \n        </div>\n      </a>\n    </div>\n\n</div>\n\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/exportResourceCollection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/exportResourceItem.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<span class=\"icon\"></span>\n<div class=\"block-group\" groupId=\""
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  <a class=\"block-group-label\"> "
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.label)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " </a>\n</div>\n<div class=\"checkbox\">\n  <label>\n    <!--<input type=\"checkbox\" class=\"include-checkbox\"> Make a copy of this file to the build folder </input>-->\n    <span class=\"export-file-message field-label\">this file will be downloaded onto the build project, within the app/data folder</span>\n  </label>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/filePicker.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"dialog\">\n\n  <ul class=\"source-selector\">\n    <li class=\"source source-q\">Quadrigram</li>\n    <li class=\"source source-google\"> Google drive </li>\n     <a href=\"";
  if (stack1 = helpers.folderUrl) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.folderUrl; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\" target=\"_blank\" class=\"google-drive-link\">Go to my drive</a>\n  </ul>\n  <div class=\"file-list list-container\">\n    <div class=\"file-list-search\">\n      <input type=\"text\" class=\"file-list-search-input disabled\" placeholder=\"🔍 Search a file\">\n    </div>\n    <div class=\"file-list-header\">\n        <ul>\n          <li class=\"file-list-header-item\">Name</li>\n          <li class=\"file-list-header-item\">Created</li>\n          <li class=\"file-list-header-item\">Modified</li>\n        </ul>\n    </div>\n  </div>\n  <div class=\"clear\"></div>\n  <div class=\"dropzone file-upload ui-tip-target\" data-ui-tip-id=\"dropzone\">\n    <div class=\"pb-container\">\n      <div class=\"error-container hidden\"></div>\n      <div class=\"fake-progress-container hidden\">\n        <div class=\"fake-progress\"></div>\n\n        <!-- <div class=\"loading-icon q-loading\"><span>Loading</span></div> -->\n        <div class=\"loading-icon\">\n          <img  src=\"images/loader.gif\"></img>\n          <span> Loading </span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/layoutSettingsTab.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, options;
  buffer += "\n            <option data-id=\""
    + escapeExpression(((stack1 = ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"> "
    + escapeExpression(((stack1 = ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " (";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.prettyLayoutFormat || depth0.prettyLayoutFormat),stack1 ? stack1.call(depth0, depth0.layoutFormat, options) : helperMissing.call(depth0, "prettyLayoutFormat", depth0.layoutFormat, options)))
    + ") </option>\n          ";
  return buffer;
  }

  buffer += "<!--\n<div class=\"layout-property\">\n  <p class=\"property-title collapsable-toggle \">Layout</p>\n  <div class=\"propertyBody\">\n    <ul class=\"layout-menu\">\n      <li class=\"layout-btn web-layout\" data-id=\"web-layout\">Web</li>\n      <li class=\"layout-btn full-screen-layout\" data-id=\"full-screen-layout\">Fullscreen</li>\n      <li class=\"layout-btn embed-layout\" data-id=\"embed-layout\">Embed</li>\n    </ul>\n    <div class=\"clear\"></div>\n  </div>\n</div>\n-->\n<div class=\"layout-settings tab-settings\">\n  <div class=\"prop\">\n    <p class=\"property-title collapsable-toggle \">Size</p>\n    <div class=\"propertyBody\">\n      <div class=\"property-group selector\">\n        <select class=\"preset-selector\">\n          ";
  stack1 = helpers.each.call(depth0, depth0.presets, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </select>\n      </div>\n\n      <div class=\"layout-properties\" data-id=\"web-layout\">\n        <div class=\"property-group\">\n          <p> Max width </p>\n          <input data-id = \"maxWidth\" class=\"settings-input project-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Min width </p>\n          <input data-id = \"minWidth\" class=\"settings-input project-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Min height </p>\n          <input data-id = \"minHeight\" class=\"settings-input project-height-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Number of columns </p>\n          <input data-id = \"numCols\" class=\"settings-input project-cols-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Margins </p>\n          <input data-id = \"margins\" class=\"settings-input grid-margin-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(%)?\" qm-option-format-defaults=\"|%\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n      </div>\n\n\n      <div class=\"layout-properties\" data-id=\"full-screen-layout\">\n        <div class=\"property-group\">\n          <p> Number of columns </p>\n          <input data-id = \"numCols\" class=\"settings-input project-cols-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Number of rows</p>\n          <input data-id = \"numRows\" class=\"settings-input project-rows-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Margins </p>\n          <input data-id = \"margins\" class=\"settings-input grid-margin-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(%)?\" qm-option-format-defaults=\"|%\"></input>\n          <div class=\"clear\"></div>\n        </div>\n      </div>\n\n      <div class=\"layout-properties\" data-id=\"embed-layout\">\n        <div class=\"property-group\">\n          <p> Space width </p>\n          <input data-id = \"width\" class=\"settings-input project-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p> Space Height </p>\n          <input data-id = \"height\" class=\"settings-input project-height-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p> Number of columns </p>\n          <input data-id = \"numCols\" class=\"settings-input project-cols-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p> Number of rows</p>\n          <input data-id = \"numRows\" class=\"settings-input project-rows-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <!--\n        <div class=\"property-group\">\n          <p> Column width </p>\n          <input data-id = \"colWidth\" class=\"settings-input grid-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        -->\n        <div class=\"property-group last\">\n          <p> Margins </p>\n          <input data-id = \"margins\" class=\"settings-input grid-margin-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(%)?\" qm-option-format-defaults=\"|%\"></input>\n          <div class=\"clear\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"prop\">\n  <div class=\"property layout-color\">\n    <p class=\"property-title collapsable-toggle \">Color</p>\n    <div class=\"propertyBody\">\n      <div class=\"property-group\">\n        <p> Background Color </p>\n        <input data-id = \"backgroundColor\" class=\"bkg-color\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n        <div class=\"clear\"></div>\n      </div>\n      <div class=\"property-group last\">\n        <p> Canvas Color </p>\n        <input data-id = \"foregroundColor\" class=\"fg-color\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#000000\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n        <div class=\"clear\"></div>\n      </div>\n      <div class=\"clear\"></div>\n    </div>\n  </div>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/projectsPicker.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dialog project-picker\">\n  <div class=\"file-list-search\">\n    <input type=\"text\" class=\"file-list-search-input disabled\" placeholder=\"🔍 Search a project\">\n  </div>\n  <div class=\"projects-header\">\n    <ul>\n      <li class=\"header-item\">Name</li>\n      <li class=\"header-item\">Created</li>\n      <li class=\"header-item\">Modified</li>\n    </ul>\n  </div>\n  <div class=\"list-container projects-list\"></div>\n  <!--<div class=\"new-btn-container\">\n    <button type = \"button\" class=\"new-btn ok-button\"> Create new project </button>\n  </div>-->\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/saveAsDialog.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dialog\">\n	<div class=\"save-as\">\n    <span> Name: </span>\n		<input class=\"pname-input\"> </input>\n	</div>\n</div>\n\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/settingsDialog.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dialog\">\n\n  <!-- Estas classes estan male, xk no son layout-menu ni layout-btn sino, settings-menu y settings-btn!!!! -->\n  <ul class=\"layout-menu\">\n    <li class=\"layout-btn settings-tab-btn current-tab\" data-id=\"layout\">Layout</li>\n    <li class=\"layout-btn settings-tab-btn\" data-id=\"tooltip\">Tooltip</li>\n    <li class=\"layout-btn settings-tab-btn disabled\" data-id=\"style\">Style guides</li>\n  </ul>\n  <div class=\"clear\"></div>\n\n  <div class=\"settings-container\"></div>\n\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/dialogs/settingsTabs/styleSettings.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, options;
  buffer += "\n            <option data-id=\""
    + escapeExpression(((stack1 = ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"> "
    + escapeExpression(((stack1 = ((stack1 = data),stack1 == null || stack1 === false ? stack1 : stack1.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " (";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.prettyLayoutFormat || depth0.prettyLayoutFormat),stack1 ? stack1.call(depth0, depth0.layoutFormat, options) : helperMissing.call(depth0, "prettyLayoutFormat", depth0.layoutFormat, options)))
    + ") </option>\n          ";
  return buffer;
  }

  buffer += "<div class=\"style-settings tab-settings\">\n  Style\n  <!--<div class=\"prop\">\n    <p class=\"property-title\">Size</p>\n    <div class=\"propertyBody\">\n      <div class=\"property-group selector\">\n        <select class=\"preset-selector\">\n          ";
  stack1 = helpers.each.call(depth0, depth0.presets, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </select>\n      </div>\n\n      <div class=\"layout-properties\" data-id=\"web-layout\">\n        <div class=\"property-group\">\n          <p> Max width </p>\n          <input data-id = \"maxWidth\" class=\"settings-input project-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Min width </p>\n          <input data-id = \"minWidth\" class=\"settings-input project-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Min height </p>\n          <input data-id = \"minHeight\" class=\"settings-input project-height-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Number of columns </p>\n          <input data-id = \"numCols\" class=\"settings-input project-cols-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Margins </p>\n          <input data-id = \"margins\" class=\"settings-input grid-margin-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(%)?\" qm-option-format-defaults=\"|%\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n      </div>\n\n\n      <div class=\"layout-properties\" data-id=\"full-screen-layout\">\n        <div class=\"property-group\">\n          <p> Number of columns </p>\n          <input data-id = \"numCols\" class=\"settings-input project-cols-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Number of rows</p>\n          <input data-id = \"numRows\" class=\"settings-input project-rows-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n\n        <div class=\"property-group\">\n          <p> Margins </p>\n          <input data-id = \"margins\" class=\"settings-input grid-margin-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(%)?\" qm-option-format-defaults=\"|%\"></input>\n          <div class=\"clear\"></div>\n        </div>\n      </div>\n\n      <div class=\"layout-properties\" data-id=\"embed-layout\">\n        <div class=\"property-group\">\n          <p> Space width </p>\n          <input data-id = \"width\" class=\"settings-input project-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p> Space Height </p>\n          <input data-id = \"height\" class=\"settings-input project-height-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p> Number of columns </p>\n          <input data-id = \"numCols\" class=\"settings-input project-cols-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p> Number of rows</p>\n          <input data-id = \"numRows\" class=\"settings-input project-rows-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group last\">\n          <p> Margins </p>\n          <input data-id = \"margins\" class=\"settings-input grid-margin-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(%)?\" qm-option-format-defaults=\"|%\"></input>\n          <div class=\"clear\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"prop\">\n  <div class=\"property layout-color\">\n    <p class=\"property-title\">Color</p>\n    <div class=\"propertyBody\">\n      <div class=\"property-group\">\n        <p> Background Color </p>\n        <input data-id = \"backgroundColor\" class=\"bkg-color\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n        <div class=\"clear\"></div>\n      </div>\n      <div class=\"property-group last\">\n        <p> Canvas Color </p>\n        <input data-id = \"foregroundColor\" class=\"fg-color\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#000000\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n        <div class=\"clear\"></div>\n      </div>\n      <div class=\"clear\"></div>\n    </div>\n  </div>-->\n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/settingsTabs/tooltipSettings.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n          <option data-id=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\"> "
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + " </option>\n        ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "";
  buffer += "\n          <option data-id=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\" style=\"font-family:"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\"> "
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + " </option>\n        ";
  return buffer;
  }

function program5(depth0,data) {
  
  var buffer = "";
  buffer += escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "|";
  return buffer;
  }

  buffer += "<div class=\"tooltip-settings tab-settings\">\n  <p class=\"property-title\">General</p>\n  <div class=\"tooltip-box\"><div class=\"tooltip-box-target\"></div></div>\n  <div class=\"general-tooltip-properties layout-properties\">\n    <div class=\"property-group selector base-style-selector-container selector-container half-selector-container ui-front\">\n      <p>Base style</p>\n      <select class=\"base-style-selector preset-selector half-preset-selector\">\n        ";
  stack1 = helpers.each.call(depth0, depth0.styles, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </select>\n    </div>\n    <div class=\"property-group font-selector-container selector-container ui-front\">\n      <p>Font family</p>\n      <!--<select class=\"font-selector preset-selector half-preset-selector\">\n        ";
  stack1 = helpers.each.call(depth0, depth0.fonts, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n      </select>-->      \n        <input title=\"Font\" class=\"ql-font font-selector preset-selector half-preset-selector\" qm-input-type=\"input-with-options\" qm-option-options = \"";
  stack1 = helpers.each.call(depth0, depth0.fonts, {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "default\" qm-option-auto-open-contextual=\"true\" qm-option-force-value-to-option=\"true\" qm-option-default-value=\"Roboto\"></input>      \n    </div>\n    <div class=\"clear\"></div>\n    \n    <div class=\"property-group\">\n      <p>Border Color</p>\n      <input data-id = \"borderColor\" class=\"border-color-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n    </div>\n    <div class=\"property-group border-line-property selector-container ui-front\">\n      <p>Border width</p>\n      <input data-id = \"borderWidth\" class=\"settings-input border-width-value\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n    </div>\n    \n    \n    \n    <div class=\"property-group rounded-corner-property selector-container ui-front\">\n      <p>Rounded Corners</p>\n      <input data-id = \"roundedCorner\" class=\"settings-input font-size-value\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n    </div>\n    <div class=\"property-group\">\n      <p>Separator Color</p>\n      <input data-id = \"separatorColor\" class=\"separator-color-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n    </div>\n\n  </div>\n\n  <div class=\"prop\">\n    <p class=\"property-title collapsable-toggle \">Title</p>\n    <div class=\"propertyBody\">\n      <div class=\"layout-properties\" data-id=\"web-layout\">\n        <div class=\"property-group\">\n          <p>Text Color</p>\n          <input data-id = \"textColorTitle\" class=\"text-color-title-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p>Background Color</p>\n          <input data-id = \"backgroundColorTitle\" class=\"bkg-color-title-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n        </div>\n        <div class=\"property-group\">\n          <p>Font Size</p>\n          <input data-id = \"fontSizeTitle\" class=\"settings-input font-size-title-value\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group font-style-title-container selector-container ui-front\">\n          <p>Font Style</p>\n          <!--<select preset-id=\"fontWeightTitle\" class=\"font-weight-title-selector font-weight-selector preset-selector half-preset-selector\">            \n              <option data-id=\"light\"> light </option>\n              <option data-id=\"normal\"> normal </option>\n              <option data-id=\"bold\"> bold </option>              \n          </select>-->\n          <input title=\"Font style\" data-id = \"fontStyleTitle\"  class=\"ql-fontstyle font-style-title-selector font-weight-selector preset-selector half-preset-selector\" qm-input-type=\"input-with-options\" qm-option-options = \"Thin|Semi-Light|Light|Regular|Medium|Semi-Bold|Bold|Extra-Bold|Black|Thin-Italic|Semi-Light-Italic|Light-Italic|Italic|Medium-Italic|Semi-Bold-Italic|Bold-Italic|Extra-Bold-Italic|Black-Italic|default\" qm-option-auto-open-contextual=\"true\" qm-option-force-value-to-option=\"true\" qm-option-default-value=\"Regular\"></input>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"prop\">\n  <div class=\"property layout-color\">\n    <p class=\"property-title collapsable-toggle \">Value</p>\n    <div class=\"propertyBody\">\n        <div class=\"property-group\">\n          <p>Text Color</p>\n          <input data-id = \"textColorValue\" class=\"text-color-title-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p>Background Color</p>\n          <input data-id = \"backgroundColorValue\" class=\"bkg-color-title-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n        </div>\n        <div class=\"property-group\">\n          <p>Font Size</p>\n          <input data-id = \"fontSizeValue\" class=\"settings-input font-size-title-value\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group font-weight-value-container selector-container ui-front\">\n          <p>Font Style</p>\n          <!--<select preset-id=\"fontWeightValue\" class=\"font-weight-value-selector font-weight-selector preset-selector half-preset-selector\">                        \n              <option data-id=\"light\"> light </option>\n              <option data-id=\"normal\"> normal </option>\n              <option data-id=\"bold\"> bold </option>\n          </select>-->\n          <input title=\"Font style\" data-id = \"fontStyleValue\" class=\"ql-fontstyle font-style-value-selector font-style-selector preset-selector half-preset-selector\" qm-input-type=\"input-with-options\" qm-option-options = \"Thin|Semi-Light|Light|Regular|Medium|Semi-Bold|Bold|Extra-Bold|Black|Thin-Italic|Semi-Light-Italic|Light-Italic|Italic|Medium-Italic|Semi-Bold-Italic|Bold-Italic|Extra-Bold-Italic|Black-Italic|default\" qm-option-auto-open-contextual=\"true\" qm-option-force-value-to-option=\"true\" qm-option-default-value=\"Regular\"></input>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"prop\">\n  <div class=\"property layout-color\">\n    <p class=\"property-title collapsable-toggle \">Label</p>\n    <div class=\"propertyBody\">\n        <div class=\"property-group\">\n          <p>Text Color</p>\n          <input data-id = \"textColorLabel\" class=\"text-color-title-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p>Font Size</p>\n          <input data-id = \"fontSizeLabel\" data-id = \"fontStyleLabel\" class=\"settings-input font-size-value\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group font-style-label-container selector-container ui-front\">\n          <p>Font Style</p>\n          <!--<select preset-id=\"fontWeightLabel\" class=\"font-weight-label-selector font-weight-selector preset-selector half-preset-selector half-preset-selector\">                          \n              <option data-id=\"light\"> light </option>\n              <option data-id=\"normal\"> normal </option>\n              <option data-id=\"bold\"> bold </option>              \n          </select>-->\n          <input title=\"Font style\" data-id = \"fontStyleLabel\" class=\"ql-fontstyle font-style-label-selector font-style-selector preset-selector half-preset-selector half-preset-selector\" qm-input-type=\"input-with-options\" qm-option-options = \"Thin|Semi-Light|Light|Regular|Medium|Semi-Bold|Bold|Extra-Bold|Black|Thin-Italic|Semi-Light-Italic|Light-Italic|Italic|Medium-Italic|Semi-Bold-Italic|Bold-Italic|Extra-Bold-Italic|Black-Italic|default\" qm-option-auto-open-contextual=\"true\" qm-option-force-value-to-option=\"true\" qm-option-default-value=\"Regular\"></input>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"prop\">\n  <div class=\"property layout-color\">\n    <p class=\"property-title collapsable-toggle \">Description</p>\n    <div class=\"propertyBody\">\n        <div class=\"property-group\">\n          <p>Background Color</p>\n          <input data-id = \"backgroundColorDescription\" class=\"bkg-color-description-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n        </div>\n        <div class=\"property-group\">\n          <p>Text Color</p>\n          <input data-id = \"textColorDescription\" class=\"text-color-description-value\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\" qm-option-contextual-container=\".front-container\" qm-option-z-index=\"3003\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p>Line Height</p>\n          <input data-id = \"lineHeightDescription\" class=\"settings-input line-height-description-value\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group\">\n          <p>Font Size</p>\n          <input data-id = \"fontSizeDescription\" class=\"settings-input font-size-description-value\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n          <div class=\"clear\"></div>\n        </div>\n        <div class=\"property-group font-style-description-container selector-container ui-front\">\n          <p>Font family</p>\n          <input preset-id=\"fontStyleDescription\" data-id = \"fontStyleDescription\" title=\"Font style\" class=\"ql-fontstyle font-style-description-selector font-style-selector preset-selector half-preset-selector\" qm-input-type=\"input-with-options\" qm-option-options = \"Thin|Semi-Light|Light|Regular|Medium|Semi-Bold|Bold|Extra-Bold|Black|Thin-Italic|Semi-Light-Italic|Light-Italic|Italic|Medium-Italic|Semi-Bold-Italic|Bold-Italic|Extra-Bold-Italic|Black-Italic|default\" qm-option-auto-open-contextual=\"true\" qm-option-force-value-to-option=\"true\" qm-option-default-value=\"Regular\"></input>\n          <!--<select preset-id=\"fontWeightDescription\" class=\"font-weight-description-selector font-weight-selector preset-selector half-preset-selector\">            \n              <option data-id=\"light\"> light </option>\n              <option data-id=\"normal\"> normal </option>\n              <option data-id=\"bold\"> bold </option>              \n          </select>-->\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"tooltip-bottom-clear\"/>\n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/dialogs/shareDialog.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dialog share-dialog\">\n  <div class=\"disclaimer\">A copy of the current project will be sent to the following addresses.\nImported files will be shared.</div>\n  <div class=\"share\">\n    <div class=\"share-container\">\n      <span> Email list: </span>\n      <input type=\"text\" class=\"form-control\" id=\"tokenfield\" value=\"\"/>\n    </div>\n  </div>\n  <div class=\"message-error\"></div>\n</div>";
  });

this["JST"]["app/scripts/templates/UI/dialogs/styleSettingsTab.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dialog\">\n\n  <div class=\"property\">\n    <p class=\"property-title\">Layout</p>\n    <div class=\"propertyBody\">\n      <ul class=\"layout-menu\">\n        <li class=\"layout-btn web-layout\" data-id=\"web-layout\">Web</li>\n        <li class=\"layout-btn full-screen-layout\" data-id=\"full-screen-layout\">Fullscreen</li>\n        <li class=\"layout-btn embed-layout\" data-id=\"embed-layout\">Embed</li>\n        <li class=\"layout-btn custom-layout\" data-id=\"embed-layout\">Custom</li>\n      </ul>\n      <div class=\"clear\"></div>\n    </div>\n\n\n    <div class=\"propertyBody\">\n      <div class=\"property-group\">\n        <p> Space width </p>\n        <input data-id = \"width\" class=\"settings-input project-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n        <div class=\"clear\"></div>\n      </div>\n      <div class=\"property-group\">\n        <p> Space Height </p>\n        <input data-id = \"height\" class=\"settings-input project-height-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n        <div class=\"clear\"></div>\n      </div>\n    </div>\n\n    <div class=\"propertyBody\">\n      <div class=\"property-group\">\n        <p> Number of columns </p>\n        <input data-id = \"numCols\" class=\"settings-input project-cols-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n        <div class=\"clear\"></div>\n      </div>\n      <div class=\"property-group\">\n        <p> Number of rows</p>\n        <input data-id = \"numRows\" class=\"settings-input project-rows-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d*[\\.,]?\\d*)\"></input>\n        <div class=\"clear\"></div>\n      </div>\n\n    </div>\n\n  </div>\n  <div class=\"property\">\n    <p class=\"property-title\">Grid Settings</p>\n    <div class=\"propertyBody\">\n      <div class=\"property-group\">\n        <p> Column width </p>\n        <input data-id = \"colWidth\" class=\"settings-input grid-width-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n        <div class=\"clear\"></div>\n      </div>\n      <div class=\"property-group\">\n      <p> Margins </p>\n      <input data-id = \"margins\" class=\"settings-input grid-margin-input\" qm-input-type=\"input-with-format\" qm-option-force-value-to-format=\"(\\d+)\\s?(px)?\" qm-option-format-defaults=\"|px\"></input>\n      </div>\n    </div>\n  </div>\n  <div class=\"property\">\n    <p class=\"property-title\">Color</p>\n    <div class=\"propertyBody\">\n      <div class=\"property-group\">\n        <p> Background Color </p>\n        <input data-id = \"backgroundColor\" class=\"bkg-color\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#ffffff\"></input>\n        <div class=\"clear\"></div>\n      </div>\n      <div class=\"property-group\">\n        <p> Foreground Color </p>\n        <input data-id = \"foregroundColor\" class=\"fg-color\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#000000\"></input>\n      </div>\n      <div class=\"clear\"></div>\n    </div>\n  </div>\n\n\n\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/disclaimerDeviceView.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"disclaimer-device-view-container\">\n  <div class=\"disclaimer-device-view-content\">\n    <div class=\"disclaimer-device-view-logo\"></div>\n    <div class=\"disclaimer-device-view-paragraph\">\n      <p>Hello there!!</p>\n      <p>With this device you can visit projects published with Quadrigram but you can not edit them.</p><a class=\"disclaimer-gallery-link\" href=\"http://www.quadrigram.com/#gallery\">\n      Checkout some Quadrigram projects here</a>\n    </div>\n  </div>\n</div>";
  });

this["JST"]["app/scripts/templates/UI/errors/messageError.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"message-server-error\">\n  <span class=\"message-container\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</span>\n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/errors/pickerError.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "	<div class=\"retry-overlay\"> \n		<div class=\"retry-overlay-message\">Retry</div>\n	</div>\n";
  });

this["JST"]["app/scripts/templates/UI/header.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div id=\"header\">\n  <div class=\"header-left-container\">\n  <div id=\"user-info\" class=\"header-item\">\n      <div class=\"avatar-container\">\n        <span class=\"avatar user-info-item\" style=\"background-image:url('"
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.avatarURL)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "')\"></span>\n      </div>\n      <div class=\"dropdown user-info-item\">\n        <button class=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\">\n          <div class=\"user-name\">"
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n          <span class=\"caret\"></span>\n        </button>\n        <ul class=\"dropdown-menu user-options\" role=\"menu\" aria-labelledby=\"dropdownMenu1\">\n          <li role=\"presentation\" class=\"user-profile\">User profile</li>\n          <li class=\"logout-button\" role=\"presentation\" >Logout</li>\n        </ul>\n      </div>\n    </div>\n\n    <div id=\"project-info\" class=\"header-item project-info-button\">\n      <div class=\"dropdown user-info-item\">\n        <button class=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\">\n          <div id=\"dropdownMenu1-text\">Project</div>\n          <span class=\"caret\"></span>\n        </button>\n        <ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dropdownMenu1\">\n          <li class=\"new-button\" role=\"presentation\">New project</li>\n          <li class=\"open-button\" role=\"presentation\">Open project</li>\n          <li class=\"save-button\" role=\"presentation\">Save...</li>\n          <li class=\"save-as-button\" role=\"presentation\">Save As...</li>\n          <li class=\"rename-button\" role=\"presentation\">Rename...</li>\n          <li class=\"share-button\" role=\"presentation\">Share</li>\n        </ul>\n      </div>\n      <div id=\"project-title\" class=\"user-info-item\">Project name</div>\n    </div>\n    <div class=\"save-component\">\n\n      <div class=\"save-btn\"><a>\n        <span class=\"label\">Save</span>\n        <span class=\"icon\"></span>\n      </a></div>\n\n    </div>\n  </div>\n  <div class=\"header-center-container\">\n    <div class=\"header-title header-item\">\n      <div class=\"title\"></div>\n      <div class=\"version\">"
    + escapeExpression(((stack1 = depth0.version),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</div>\n    </div>\n  </div>\n  <div class=\"header-right-container\">\n    <div class=\"header-tools action-buttons\">\n      <div class=\"tool ui-tip-target help\" data-ui-tip-id=\"help-button\"><span class=\"icon\"> ? </span><span class=\"tool-name\"> Help </span></div>\n      <!--<li class=\"ui-tip-target\" data-ui-tip-id=\"undo-button\"><div class=\"undo\"><span class=\"icon\"></span></div></li>\n      <li class=\"ui-tip-target\" data-ui-tip-id=\"redo-button\"><div class=\"redo\"><span class=\"icon\"></span></div></li>-->\n    </div>\n    <div class=\"header-tools header-edit-tools\">\n      <div class=\"tool preview-button toggle-preview-btn ui-tip-target\" class=\"ui-tip-target\" data-ui-tip-id=\"preview-button\"><a href=\"#\"><span class=\"icon\"></span></span><span class=\"tool-name\">Preview</span></a></div>\n      \n      <div class=\"tool share export-button ui-tip-target\" data-ui-tip-id=\"export-button\"><a href=\"#\"><span class=\"icon\"></span><span class=\"tool-name\">Publish</span></a></div>\n    </div>\n  </div>\n\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/imageMetadataItem.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  
  return "\n  	<div class=\"delete-btn btn\"> Delete </div>\n  ";
  }

  buffer += "<div class=\"image-meta-data-item\" data-id=\""
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-name=\""
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  <!-- <span class=\"icon type-";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.convertToType || depth0.convertToType),stack1 ? stack1.call(depth0, ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.mimeType), options) : helperMissing.call(depth0, "convertToType", ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.mimeType), options)))
    + "\"></span> -->\n  <!-- thumbnailPath, NO EXISTE!!!, pero es que ademas, filePath no funciona la mayoria de veces (403)-->\n  <div class=\"image-preview\" style=\"background-image: url("
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.thumbnailPath)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ")\"></div>\n  <div class=\"white-overlay\"></div>\n  <div class=\"action-btn btn hidden\"> Load image </div>\n  <a class=\"item-label\"> "
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " </a>\n  <!--\n  <a class=\"item-created\"> ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.convertToDate || depth0.convertToDate),stack1 ? stack1.call(depth0, ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.created), options) : helperMissing.call(depth0, "convertToDate", ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.created), options)))
    + " </a>\n  <a class=\"item-modified\"> ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.convertToDate || depth0.convertToDate),stack1 ? stack1.call(depth0, ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.modified), options) : helperMissing.call(depth0, "convertToDate", ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.modified), options)))
    + " </a>\n\n  \n  ";
  stack2 = helpers.unless.call(depth0, ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.readOnly), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n  -->\n  \n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/listItem.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "\n<span class=\"icon\"></span>\n<div class=\"block-group\" groupId=\""
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  <input class=\"item-label\" value=\""
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.label)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></input>\n</div>\n<div class=\"list-item-actions\">\n  <a class=\"delete\"></a>\n  <a class=\"edit\"></a>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/loadableCollectionView.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<div class=\"items-container\"></div>\n<div class=\"overlay-container\"> </div>";
  });

this["JST"]["app/scripts/templates/UI/loadableView.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/UI/loader/errorLoader.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"loader\">\n  <img class=\"loader-animation\" src=\"images/loader.gif\"/>\n  <div class=\"loader-message\"><img src=\"images/loader.gif\"/>Content<div>\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/loader/loader.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"loader\">\n  <img class=\"loader-animation\" src=\"images/loader.gif\"/>\n  <div class=\"loader-message under-gif\"></div>\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/loader/loaderOver.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"loader-over\">\n  <img class=\"loader-animation\" src=\"images/loader.gif\"/>\n  <div class=\"loader-over-message\"></div>\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/loadingOverlay.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"loading-overlay\">\n  <img src=\"images/loader.gif\"/>Loading...\n</div>\n";
  });

this["JST"]["app/scripts/templates/UI/messageOverlay.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"message-overlay\">\n  <span class=\"message-conatiner\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</span>\n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/metadataItem.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  
  return "\n  	<div class=\"delete-btn btn\"> Delete </div>\n  ";
  }

  buffer += "<div class=\"meta-data-item\" data-id=\""
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-name=\""
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  <span class=\"icon type-";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.convertToType || depth0.convertToType),stack1 ? stack1.call(depth0, ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.mimeType), options) : helperMissing.call(depth0, "convertToType", ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.mimeType), options)))
    + "\"></span>\n\n  <a class=\"item-label\"> "
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.name)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " </a>\n  <a class=\"item-created\"> ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.convertToDate || depth0.convertToDate),stack1 ? stack1.call(depth0, ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.created), options) : helperMissing.call(depth0, "convertToDate", ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.created), options)))
    + " </a>\n  <a class=\"item-modified\"> ";
  options = {hash:{},data:data};
  buffer += escapeExpression(((stack1 = helpers.convertToDate || depth0.convertToDate),stack1 ? stack1.call(depth0, ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.modified), options) : helperMissing.call(depth0, "convertToDate", ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.modified), options)))
    + " </a>\n\n  <div class=\"action-btn btn\"> NONE </div>\n  ";
  stack2 = helpers.unless.call(depth0, ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.readOnly), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n  \n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/propertiesFamily.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n";
  });

this["JST"]["app/scripts/templates/UI/textBar.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"toolbar-container\">\n</div>";
  });

this["JST"]["app/scripts/templates/UI/textBarToolBar.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "|";
  return buffer;
  }

  buffer += "<div class=\"quill-bar toolbar\">\n<div class=\"prop\">\n  <p class=\"property-title\">Character</p>\n\n  <div class=\"propertyBody\">\n      <div class=\"ql-font-container\">\n        <input title=\"Font\" class=\"ql-font\" qm-input-type=\"input-with-options\" qm-option-options = \"";
  stack1 = helpers.each.call(depth0, depth0.fontFamilies, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "default\" qm-option-auto-open-contextual=\"true\" qm-option-force-value-to-option=\"true\" qm-option-default-value=\"Oswald\"></input>\n      </div>\n      <div class=\"ql-fontstyle-container\">\n        <input title=\"Font style\" class=\"ql-fontstyle\" qm-input-type=\"input-with-options\" qm-option-options = \"Thin|Semi-Light|Light|Regular|Medium|Semi-Bold|Bold|Extra-Bold|Black|Thin-Italic|Semi-Light-Italic|Light-Italic|Italic|Medium-Italic|Semi-Bold-Italic|Bold-Italic|Extra-Bold-Italic|Black-Italic|default\" qm-option-auto-open-contextual=\"true\" qm-option-force-value-to-option=\"true\" qm-option-default-value=\"Regular\"></input>\n      </div>\n\n      <div class=\"ql-line-spacing-container\">\n        <input title=\"Line spacing\" class=\"ql-linespacing\" qm-input-type=\"input-with-options\" qm-option-options = \"normal|6px|8px|9px|10px|11px|12px|14px|18px|24px|30px|36px|48px|60px|72px\" qm-option-force-value-to-format=\"(-+)?(\\d+)\\s?(px)?\" qm-option-format-defaults=\"||px\" qm-option-special-value=\"normal\" qm-option-default-value=\"normal\"></input>\n      </div>\n      <div class=\"ql-size-container\">\n        <input title=\"Size\" class=\"ql-size\" qm-input-type=\"input-with-options\" qm-option-options = \"6px|8px|9px|10px|11px|12px|14px|18px|24px|30px|36px|48px|60px|72px\" qm-option-force-value-to-format=\"(\\d+)\\s?(px|pt)?\" qm-option-format-defaults=\"|px\" qm-option-default-value=\"18px\"></input>\n      </div>\n\n      <div class=\"ql-letter-spacing-container\">\n        <input title=\"Letter spacing\" class=\"ql-letterspacing\" qm-input-type=\"input-with-options\" qm-option-options = \"0px|10px|25px|50px|75px|100px|200px\" qm-option-force-value-to-format=\"(-+)?(\\d+)\\s?(px)?\" qm-option-format-defaults=\"||px\" qm-option-default-value=\"0px\"></input>\n      </div>\n      <div class=\"ql-color-container\">\n        <input title=\"Text color\" class=\"ql-color\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"#000000\" qm-option-z-index=\"909\" qm-option-contextual-container=\".front-container\" qm-option-icon=\"text-color-icon\"></input>\n      </div>\n\n      <div class=\"clear\"></div>\n      <span class=\"ql-format-group\">\n        <!--<span title=\"Bold\" class=\"ql-format-button ql-bold\">Bold</span>\n        <span title=\"Italic\" class=\"ql-format-button ql-italic\">Italic</span>-->\n        <span title=\"Underline\" class=\"ql-format-button ql-underline\">Underline</span>\n        <span title=\"Strikethrough\" class=\"ql-format-button ql-strike\">Linethrough</span>\n        <span title=\"Link\" class=\"ql-format-button ql-link\"></span>\n        <div class=\"ql-color-container\" style=\"margin-top: -3px;\">\n          <input title=\"Text highlight\" class=\"ql-background\" qm-input-type=\"color-input\" qm-option-options = \"rgb(255,0,0)|rgb(0,255,0)|rgb(0,0,255)\" qm-option-default-value=\"none\" qm-option-z-index=\"909\" qm-option-contextual-container=\".front-container\" qm-option-icon=\"bkg-color-icon\"></input>\n        </div>\n      </span>\n      <div class=\"clear\"></div>\n  </div>\n</div>\n<div class=\"prop\">\n  <p class=\"property-title\"> Paragraph Align </p>\n  <div class=\"propertyBody\">\n    <input title=\"Align\" class=\"ql-align\" qm-input-type=\"icon-selector\" qm-option-options = \"left|center|right|justify\"  qm-option-auto-open-contextual=\"true\" qm-option-default-value=\"left\"></input>\n    <div class=\"clear\"></div>\n  </div>\n</div>\n<div class=\"prop\">\n  <p class=\"property-title\">Text Format</p>\n  <div class=\"propertyBody\">\n    <span class=\"ql-format-group\">\n      <span title=\"List\" class=\"ql-format-button ql-list\">List</span>\n      <span title=\"Bullet\" class=\"ql-format-button ql-bullet\">Bullets</span>\n    </span>\n\n    </div>\n</div>\n<div class=\"prop\">\n  <p class=\"property-title\">Vertical align</p>\n  <div class=\"propertyBody\">\n    <input title=\"Align\" class=\"ql-valign\" qm-input-type=\"icon-selector\" qm-option-options = \"top|middle|bottom\"  qm-option-auto-open-contextual=\"true\" qm-option-default-value=\"top\"></input>\n  </div>\n</div>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/toolbar.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"tools-menu\">\n    <div class=\"tools leftSide\">\n      <div class=\"data-manager-toggle manager-toggle ui-tip-target\" data-ui-tip-id=\"data-manager\">\n        <p class=\"title\"><span class=\"title-icon\"></span><span class=\"title-name\">Manage Data</span></p>\n      </div>\n<!--\n      <div class=\"function-manager-toggle manager-toggle\">\n        <p class=\"title\"><span class=\"title-icon\"></span><span class=\"title-name\">Formula</span></p>\n      </div>\n-->\n    </div>\n\n\n    <div class=\"tools edit-tools rightSide\">\n      <ul>\n        <li class=\"layout ui-tip-target\" data-ui-tip-id=\"layout-settings\"><a><span class=\"icon\"></span><span class=\"tool-name\">Layout Settings</span></a></li>\n      </ul>\n    </div>\n\n    <div class=\"tools visualizers-tools center\">\n      <ul class=\"centered-content\">\n        <li class=\"basic\"><a><span class=\"icon\"></span><span class=\"tool-name\">Charts</span></a></li>\n        <li class=\"text\"><a href=\"#\" id=\"text-btn\"><span class=\"icon\"></span><span class=\"tool-name\">Text</span></a></li>\n        <li class=\"draw\"><a href=\"#\"><span class=\"icon\"></span><span class=\"tool-name\">Shapes</span></a></li>\n        <li class=\"media\"><a href=\"#\"><span class=\"icon\"></span><span class=\"tool-name\">Media</span></a></li>\n        <li class=\"controls\"><a><span class=\"icon\"></span><span class=\"tool-name\">Controls</span></a></li>\n      </ul>\n    </div>\n</div>\n\n<div class=\"tools-submenu\">\n</div>\n<div class=\"clear\"></div>\n";
  });

this["JST"]["app/scripts/templates/UI/toolsDragList.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1;
  buffer += "\n<li class=\""
    + escapeExpression(((stack1 = depth0.stateClass),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"><a data-group = \""
    + escapeExpression(((stack1 = ((stack1 = depth1.model),stack1 == null || stack1 === false ? stack1 : stack1.group)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-class=\""
    + escapeExpression(((stack1 = depth0.dataClass),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"> "
    + escapeExpression(((stack1 = depth0.label),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<img src=\"images/visualizers_thumbnails/"
    + escapeExpression(((stack1 = depth0.icon),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"></a></li>\n";
  return buffer;
  }

  buffer += "\n<ul class=\"tool-sub-menu basic-menu visualizers-menu\" >\n\n";
  stack1 = helpers.each.call(depth0, depth0.dragOptions, {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n</ul>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/toolsDragTipList.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1;
  buffer += "\n\n<li class=\""
    + escapeExpression(((stack1 = depth0.stateClass),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  <div class=\"viz-drag-button ui-tip-target\" data-ui-tip-id=\"viz-"
    + escapeExpression(((stack1 = depth0.dataClass),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"data-group = \""
    + escapeExpression(((stack1 = ((stack1 = depth1.model),stack1 == null || stack1 === false ? stack1 : stack1.group)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" data-class=\""
    + escapeExpression(((stack1 = depth0.dataClass),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n    <img src=\"images/"
    + escapeExpression(((stack1 = depth0.icon),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n    <p>"
    + escapeExpression(((stack1 = depth0.label),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</p>\n  </div>\n</li>\n\n";
  return buffer;
  }

  buffer += "<div class=\"tooltip-content\">\n\n<ul class=\"tooltip-element-area\">\n";
  stack1 = helpers.each.call(depth0, depth0.dragOptions, {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</ul>\n\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/UI/topMenu.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"toolbar-container\"></div>\n";
  });

this["JST"]["app/scripts/templates/UI/vizInspector.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div id=\"vizInspector\">\n	<div class=\"header\">\n		<input class=\"viz-label\"></input>\n		<div class=\"close\">Close</div>\n	</div>\n</div>\n\n<div id=\"viz-inspector-content\">\n</div>\n\n<div class=\"viz-inspector-ui-front ui-front\">\n</div>\n  \n\n";
  });

this["JST"]["app/scripts/templates/UI/vizInspectorContent.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "";
  buffer += "\n      <li class=\"viz-inspector-"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + " ui-tip-target\" data-ui-tip-id=\"family-"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\" data=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</li>\n    ";
  return buffer;
  }

  buffer += "<div class=\"vizInspectorMenu\">\n  <ul>\n    ";
  stack1 = helpers.each.call(depth0, depth0.families, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  </ul>\n</div>\n\n<div class=\"family-container\">\n\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/QValueEditable.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<td>\n<input class=\"id-input\"> </input>\n</td>\n<td>\n<div class=\"value-input-container\"> </div>\n</td>";
  });

this["JST"]["app/scripts/templates/blocks/blockColumn.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"block-stack flex-column ";
  if (stack1 = helpers.role) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.role; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "-stack ";
  if (stack1 = helpers.type) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.type; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "-stack\">\n    <h5 class=\"col-name\">";
  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</h5>\n    <div class=\"flex-column block-list cols-list\"></div>\n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/blockGroup - Copy (2).hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"block-group-column flex-column\">\n\n</div>";
  });

this["JST"]["app/scripts/templates/blocks/blockGroup - Copy.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  
  return "\n<a class=\"add-block-button new_item\"><span>New block</span></a>\n";
  }

function program3(depth0,data) {
  
  
  return "\n\n<div class=\"flex-column block-stack\">\n  \n    <h5 class=\"first-col-name\"></h5>\n    <div class=\"data-block-container main-block\">\n    </div>\n\n</div>\n<div class=\"flex-column block-stack\">\n\n    <h5>Column names</h5>\n    <div class=\"data-block-container level-0-names\">\n    </div>\n\n    <h5>Row names</h5>\n    <div class=\"data-block-container level-1-names\">\n    </div>\n  \n</div>\n";
  }

  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  stack2 = ((stack1 = helpers.hasAddFunction || depth0.hasAddFunction),stack1 ? stack1.call(depth0, depth0.model, options) : helperMissing.call(depth0, "hasAddFunction", depth0.model, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n";
  options = {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data};
  stack2 = ((stack1 = helpers.hasSpecialBlocks || depth0.hasSpecialBlocks),stack1 ? stack1.call(depth0, depth0.model, options) : helperMissing.call(depth0, "hasSpecialBlocks", depth0.model, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n\n\n<div class=\"flex-column block-stack cols level-0\">\n  <h5 class=\"second-col-name\"></h5>\n  <div class=\"block-list cols-list\"></div>\n</div>\n\n<div class=\"flex-column block-stack rows level-1\">\n  <h5 class=\"third-col-name\"></h5>\n  <div class=\"block-list rows-list\"></div>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/blockGroup.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/blockGroupBlockStack.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"flex-column block-stack\">\n  <div class=\"column-title\"><span class=\"title name\"></h5></div>\n  <div class=\"block-list\"></div>\n</div>\n";
  });

this["JST"]["app/scripts/templates/blocks/blockGroupCollection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<div class=\"add-group-button-area\"><div class=\"add-group-button new_item button\"><div class=\"button-text\">";
  if (stack1 = helpers.newText) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.newText; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div></div></div>\n";
  return buffer;
  }

  stack1 = helpers['if'].call(depth0, depth0.newText, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/blockGroupColumn.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"block-group-column flex-column\">\n\n</div>";
  });

this["JST"]["app/scripts/templates/blocks/customBlockCollection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"dropdown block-dropdown block-options\">\n    <div id=\"block-options-button-1\" class=\"block-options-button\" data-toggle=\"dropdown\">\n    	<span class=\"hit-area\">\n	      <div class=\"selected-block-container slot-body\"></div>\n	      <span class=\"caret\"></span>\n  		</span>\n    </div>\n	<ul class=\"dropdown-menu custom-block-menu\" role=\"menu\" aria-labelledby=\"block-options-button-1\">\n      <div class=\"new-block-button\">New Block</div>\n    </ul>\n</div>";
  });

this["JST"]["app/scripts/templates/blocks/customBlockCollectionElement.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<li class='list-item' block-id='"
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "'>\n  <div class='delete data-block-button'></div>\n  <div class='edit data-block-button draw'></div>\n</li>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/dataBlock.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"data-block-body ui-tip-target\" data-ui-tip-id=\"data-block\">\n  <div class=\"data-block-background\">\n    <div class=\"data-block-processing\">\n      <div class=\"processing-bar\"></div>\n    </div>\n  </div>\n\n  <div class=\"data-block-name\"><span> "
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.label)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " </span></div>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/dataBlockCollection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/dataBlockCollectionElement.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class='data-block-item-container'>\n\n</div>";
  });

this["JST"]["app/scripts/templates/blocks/dataBlockEditable.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"data-drop-value\"> \n  <div class=\"input-component\">\n\n  </div>\n  <div class=\"list-editor-toggle\">\n\n  </div>\n</div>";
  });

this["JST"]["app/scripts/templates/blocks/dataBlockEditableTable.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/blocks/dataBlockFunction.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"scroll-left scroller\"><div class=\"format-arrow-left\"></div></div>\n<div class=\"expression-container\">\n</div>\n<div class=\"scroll-right scroller\"><div class=\"format-arrow-right\"></div></div>\n";
  });

this["JST"]["app/scripts/templates/blocks/dataBlockLabelable.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"data-block-body\">\n  <input class=\"data-block-name\" value=\""
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.label)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">  </input>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/dataBlockReference.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/blocks/dataBlockStatic.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/blocks/editableQValueCollection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/editors/colorEditor.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<!-- hay que deciridir si usamos un plugin o lo hacemos nosotros, de momento usa minicolors, que necesita un <input> -->\n<input class=\"text-input\"/>";
  });

this["JST"]["app/scripts/templates/blocks/editors/dateEditor.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<!-- implementar en el viewDidRender de dateEditorView.coffee las funciones para que se abra el date picker popup -->\n<input type=\"text\" class=\"datepicker\"/>";
  });

this["JST"]["app/scripts/templates/blocks/editors/optionsEditor.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<select>\n  <!-- estas optiones seran creadas por handlebars, de momento puede ser superhardcoded como ahora -->\n  <option> CartoDB </option>\n  <option> GooglMaps </option>\n  <option> OpenStreetMap </option>\n</select>";
  });

this["JST"]["app/scripts/templates/blocks/editors/percentageEditor.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<!-- poner aqui el el texto con slider al lado -->\n<div> percentage slider </div>";
  });

this["JST"]["app/scripts/templates/blocks/editors/textEditor.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<input class=\"text-input\"/>";
  });

this["JST"]["app/scripts/templates/blocks/operators/addLoopButton.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"expression-part\">\n  <div class=\"add-more\"></div>\n</div>";
  });

this["JST"]["app/scripts/templates/blocks/operators/expressionPart.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/operators/expressionPartCollection.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/operators/operatorOptions.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <span class=\"operator-conector\"> ";
  if (stack1 = helpers.label) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.label; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " </span>\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      ";
  stack1 = helpers.unless.call(depth0, depth0.hidden, {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;
  }
function program4(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <option data-opt-id=\""
    + escapeExpression(((stack1 = depth0.optId),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\"> "
    + escapeExpression(((stack1 = depth0.label),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + " </option>\n      ";
  return buffer;
  }

  buffer += "  \n  ";
  options = {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data};
  stack2 = ((stack1 = helpers.unless_blank || depth0.unless_blank),stack1 ? stack1.call(depth0, depth0.label, options) : helperMissing.call(depth0, "unless_blank", depth0.label, options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n\n  <select class=\"expression-part-selector\" data-id=";
  if (stack2 = helpers.partId) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.partId; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + ">\n    ";
  stack2 = helpers.each.call(depth0, depth0.options, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n  </select>";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/property.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n			<option class = \"ui-tip-target\" data-ui-tip-id=\""
    + escapeExpression(((stack1 = depth0.value),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\" value=\""
    + escapeExpression(((stack1 = depth0.value),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">"
    + escapeExpression(((stack1 = depth0.label),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</option>\n		";
  return buffer;
  }

  buffer += "<div class=\"property property-list-item\">\n	<h5 class=\"property-label ui-tip-target\">"
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.label)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "<span class=\"contract\"></span></h5>\n	<div class=\"propertyBody\">\n		<select class=\"format-selector\" name=\"format-selector\">\n		";
  stack2 = helpers.each.call(depth0, depth0.formats, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n		</select>\n		<select class=\"hidden-select\" style=\"font-size: 10px; display:none;\">\n        <option class=\"hidden-option\"></option>\n    </select>\n		<div class=\"property-container\" property=\"property name\"> </div>\n		<div class=\"clear\"></div>\n	</div>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/slot.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n  <div class=\"slot-label ui-tip-target\">";
  if (stack1 = helpers.label) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.label; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n  ";
  return buffer;
  }

  buffer += "\n  ";
  stack1 = helpers['if'].call(depth0, depth0.needsLabel, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n  <div class=\"slot-container\">\n      <div class=\"slot-body\"> </div>\n  </div>\n  \n  <div class=\"function-btn not-available\"> </div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/blocks/tableEditor.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n<div class=\"header\">\n  <span class=\"block-label-span\"> Create date range list</span>\n  <div class=\"close\">Close</div>\n</div>\n\n<div class=\"table-editor-content\">\n  <div class=\"table-container\">\n    <table>\n      <thead class=\"table-editor-head\">\n        <tr>\n          <th> Id Name </th>\n          <th> Value </th>\n        </tr>\n      </thead>\n      <tbody class=\"table-editor-body\">\n      </tbody>\n    </table>\n  </div>\n  <div class=\"button-container\">\n    <button class=\"ok-button btn\"> Ok </button>\n  </div>\n  <!-- <button class=\"cancel-button btn\"> Cancel </button> -->\n\n</div>\n\n\n\n";
  });

this["JST"]["app/scripts/templates/smoothElementView.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/List.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/VisualizersList.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/barChart.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/downloadButtons.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"download-menu\">\n  <canvas class=\"cover\"/>\n  <div class=\"button-container\">\n    <div class=\"text\">\n      Save this image as:\n    </div>\n    <div class=\"button svg\">\n      SVG\n    </div>\n    <div class=\"button png\">\n      PNG\n    </div>\n  </div>\n</div>\n";
  });

this["JST"]["app/scripts/templates/visualizers/empty.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/lineChart.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n";
  });

this["JST"]["app/scripts/templates/visualizers/linkControl.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/network.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/pieChart.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/playPauseButton.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "-btn control-btn\" data-id=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\">\n  <img class=\"svg-control-icon\" src=\"./images/control_parts/animator_icons_"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + ".svg\"></img>\n  <div class=\"control-label hidden\">"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "</div>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/pointsInAMap.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/rectangle.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "\n";
  });

this["JST"]["app/scripts/templates/visualizers/scatterPlot.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/shareButton.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<a class=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "-btn control-btn\" data-id=\""
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "\" target=\"_blank\">\n  <div class=\"circle\"/>\n  <div class=\"svg-container "
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + "-container default\">\n    <img class=\"svg-control-icon\" src=\"./images/control_parts/share_"
    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))
    + ".svg\"></img>\n  </div>\n</a>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/stackedBarChart.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/stacksOnTime.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<p>Your content here.</p>\n\n";
  });

this["JST"]["app/scripts/templates/visualizers/textArea.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"quill-container\"></div>\n";
  });

this["JST"]["app/scripts/templates/visualizers/tooltipBody.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n    <div class='tooltip-body-item-id' style='font-size:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth1.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.fontSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";color:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth1.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.textColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";'>";
  if (stack2 = helpers.item) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.item; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</div>\n  ";
  return buffer;
  }

function program3(depth0,data,depth1) {
  
  var buffer = "", stack1;
  buffer += "\n    ";
  stack1 = helpers['if'].call(depth0, depth0.value, {hash:{},inverse:self.noop,fn:self.programWithDepth(4, program4, data, depth1),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n  ";
  return buffer;
  }
function program4(depth0,data,depth2) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n      <div class='tooltip-body-value-entry'    style=\"color:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth2.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.textColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";font-size:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth2.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.fontSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";font-weight:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth2.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.fontWeight)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";font-style:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth2.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.fontStyle)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; border-top:solid 1px; border-color: "
    + escapeExpression(((stack1 = ((stack1 = depth2.style),stack1 == null || stack1 === false ? stack1 : stack1.separatorColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n        <div class='tooltip-body-value-entry-main'>\n          <div class='tooltip-body-value-entry-label tooltip-body-value-entry-item' style='line-height:normal;";
  stack2 = helpers['if'].call(depth0, ((stack1 = depth2.style),stack1 == null || stack1 === false ? stack1 : stack1.label), {hash:{},inverse:self.programWithDepth(7, program7, data, depth2),fn:self.programWithDepth(5, program5, data, depth2),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "  '>";
  if (stack2 = helpers.label) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.label; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</div>\n          ";
  stack2 = helpers['if'].call(depth0, depth0.prefix, {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n          <div class='tooltip-body-value-entry tooltip-body-value-entry-item' style='line-height:normal;'>";
  if (stack2 = helpers.value) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.value; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</div>\n          ";
  stack2 = helpers['if'].call(depth0, depth0.sufix, {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n        </div>\n      </div>\n    ";
  return buffer;
  }
function program5(depth0,data,depth3) {
  
  var buffer = "", stack1;
  buffer += " font-size:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth3.style),stack1 == null || stack1 === false ? stack1 : stack1.label)),stack1 == null || stack1 === false ? stack1 : stack1.fontSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";  font-weight:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth3.style),stack1 == null || stack1 === false ? stack1 : stack1.label)),stack1 == null || stack1 === false ? stack1 : stack1.fontWeight)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; font-style:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth3.style),stack1 == null || stack1 === false ? stack1 : stack1.label)),stack1 == null || stack1 === false ? stack1 : stack1.fontStyle)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; color:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth3.style),stack1 == null || stack1 === false ? stack1 : stack1.label)),stack1 == null || stack1 === false ? stack1 : stack1.textColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; ";
  return buffer;
  }

function program7(depth0,data,depth3) {
  
  var buffer = "", stack1;
  buffer += "font-size:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth3.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.fontSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; color:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth3.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.textColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";";
  return buffer;
  }

function program9(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <div class='tooltip-body-value-entry-prefix tooltip-body-value-entry-item' style='line-height:normal;'>";
  if (stack1 = helpers.prefix) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.prefix; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n          ";
  return buffer;
  }

function program11(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n            <div class='tooltip-body-value-entry-sufix tooltip-body-value-entry-item' style='line-height:normal;'>";
  if (stack1 = helpers.sufix) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.sufix; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</div>\n          ";
  return buffer;
  }

function program13(depth0,data) {
  
  var buffer = "", stack1, stack2;
  buffer += "\n    <div class='tooltip-body-description' style='font-family:"
    + escapeExpression(((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.fontFamily)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";line-height:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.description)),stack1 == null || stack1 === false ? stack1 : stack1.lineHeight)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; background-color:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.description)),stack1 == null || stack1 === false ? stack1 : stack1.backgroundColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; font-size:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.description)),stack1 == null || stack1 === false ? stack1 : stack1.fontSize)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; font-style:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.description)),stack1 == null || stack1 === false ? stack1 : stack1.fontStyle)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; font-weight:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.description)),stack1 == null || stack1 === false ? stack1 : stack1.fontWeight)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";  color:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.description)),stack1 == null || stack1 === false ? stack1 : stack1.textColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; border-top:solid 1px; border-color: "
    + escapeExpression(((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.separatorColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "'>";
  if (stack2 = helpers.description) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.description; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</div>\n  ";
  return buffer;
  }

  buffer += "<div class='tooltip-body-content' style='font-family:"
    + escapeExpression(((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.fontFamily)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";background-color:"
    + escapeExpression(((stack1 = ((stack1 = ((stack1 = depth0.style),stack1 == null || stack1 === false ? stack1 : stack1.value)),stack1 == null || stack1 === false ? stack1 : stack1.backgroundColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + ";' >\n  ";
  stack2 = helpers['if'].call(depth0, depth0.item, {hash:{},inverse:self.noop,fn:self.programWithDepth(1, program1, data, depth0),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n\n  ";
  stack2 = helpers.each.call(depth0, depth0.value, {hash:{},inverse:self.noop,fn:self.programWithDepth(3, program3, data, depth0),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n  </div>\n  ";
  stack2 = helpers['if'].call(depth0, depth0.description, {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/tooltipTitle.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <div class='tooltip-title-image' style=\"background-image:url('";
  if (stack1 = helpers.image) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.image; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "') ";
  if (stack1 = helpers.imagecss) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.imagecss; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\"></div>\n  ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += " font-weight:";
  if (stack1 = helpers.fontWeight) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.fontWeight; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1);
  return buffer;
  }

  buffer += "<div class='tooltip-title-background' style=\"background-color:"
    + escapeExpression(((stack1 = ((stack1 = depth0.titleStyle),stack1 == null || stack1 === false ? stack1 : stack1.backgroundColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "; color:"
    + escapeExpression(((stack1 = ((stack1 = depth0.titleStyle),stack1 == null || stack1 === false ? stack1 : stack1.textColor)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "\">\n  ";
  stack2 = helpers['if'].call(depth0, depth0.image, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n  <div class='tooltip-title-content' style='font-size:";
  if (stack2 = helpers.fontSize) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.fontSize; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "; font-style:";
  if (stack2 = helpers.fontStyle) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.fontStyle; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "; line-height:normal; font-family:";
  if (stack2 = helpers.fontFamily) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.fontFamily; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "; ";
  stack2 = helpers['if'].call(depth0, depth0.fontWeight, {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += " '>";
  if (stack2 = helpers.title) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.title; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  buffer += escapeExpression(stack2)
    + "</div>\n</div>";
  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/treemap.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/visualizer.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "";


  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/visualizerContainer.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<!-- <div class=\"context-menu\">\n  <p class=\"viz-name\">"
    + escapeExpression(((stack1 = ((stack1 = depth0.model),stack1 == null || stack1 === false ? stack1 : stack1.id)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</p>\n</div> -->\n\n<div class=\"commands-container\">\n  \n  \n  <div class=\"delete-viz-button command-viz-button ui-tip-target\" data-ui-tip-id=\"delete-viz-button\"></div>\n  <div class=\"output-viz-button command-viz-button ui-tip-target\" data-ui-tip-id=\"output-viz-button\"></div>\n  <!-- <div class=\"print-viz-button command-viz-button ui-tip-target\" data-ui-tip-id=\"print-viz-button\"></div> -->\n  <div class=\"download-viz-button command-viz-button ui-tip-target\" data-ui-tip-id=\"download-viz-button\"></div>\n</div>\n<div class=\"viz-view-gridster\"></div>\n<div class=\"viz-view-container\"></div>\n<div class=\"viz-label-container\">\n  <div class=\"viz-label-centering\">\n    <div class=\"viz-label\"></div>\n  </div>\n</div>\n<div class=\"size-feedback-container\">\n  <div class=\"size-feedback\"></div>\n</div>\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/visualizers/visualizerMessage.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <div class=\"loading-square collapsed\">\n        <img class=\"loader-animation\" src=\"images/FinalLoader-2_2.gif\"/>\n        <div class=\"loader-message under-gif\" style=\"color:";
  if (stack1 = helpers.messageColor) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.messageColor; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ";background-color:rgba(255,255,255,";
  if (stack1 = helpers.opacityBox) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.opacityBox; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ");\">";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "<div>\n      </div>\n      \n      \n    ";
  return buffer;
  }

function program3(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n      <div class=\"loader-message\" style=\"color:";
  if (stack1 = helpers.messageColor) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.messageColor; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ";background-color:rgba(255,255,255,";
  if (stack1 = helpers.opacityBox) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.opacityBox; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ");\">";
  if (stack1 = helpers.message) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "<div>\n    ";
  return buffer;
  }

  buffer += "<div class=\"message-container\">\n  <div class=\"loader\" style=\"background-color:rgba(255,255,255,";
  if (stack1 = helpers.backgroundOpacity) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.backgroundOpacity; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + ")\">\n    ";
  stack1 = helpers['if'].call(depth0, depth0.loaderGif, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    \n  </div>\n</div>\n\n";
  return buffer;
  });

this["JST"]["app/scripts/templates/watermarkTemplate.hbs"] = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  


  return "<div class=\"watermark-container\">\n  <div class=\"watermark\">\n    <div class=\"watermark-logo\">\n    </div>\n  </div>\n</div>";
  });
(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Tracker = (function() {
    function Tracker() {
      this._sendEventData = __bind(this._sendEventData, this);
      this.sendEvent = __bind(this.sendEvent, this);
      this.currentStack = [];
      this.debouncedSend = _.throttle(this._sendEventData, 15000, {
        leading: false
      });
    }

    Tracker.prototype.sendEvent = function(e) {
      var exception;
      if (quadrigram.environment === "exported") {
        return;
      }
      this.currentStack.push(e);
      e.browser_info = navigator.userAgent;
      e.version = quadrigram.version;
      try {
        if (JSON.stringify(e.client_data).length > 10000) {
          e.client_data = JSON.stringify(e.client_data).substring(0, 10000);
        }
        if (JSON.stringify(e.error_data).length > 5000) {
          e.error_data = JSON.stringify(e.error_data).substring(0, 5000);
        }
      } catch (_error) {
        exception = _error;
        e.client_data = null;
        e.error_data = null;
      }
      return this.debouncedSend();
    };

    Tracker.prototype._sendEventData = function() {
      $.ajax({
        type: "POST",
        url: quadrigram.baseUrl + "rs/logtrace",
        data: JSON.stringify(this.currentStack),
        dataType: "text",
        contentType: "application/json; charset=utf-8"
      });
      return this.currentStack = [];
    };

    return Tracker;

  })();

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Managers.PerformanceManager = (function() {
    PerformanceManager.prototype.stack = [];

    function PerformanceManager() {
      this.getStepsWithTag = __bind(this.getStepsWithTag, this);
      this.trackStep = __bind(this.trackStep, this);
      this.startTime = new Date();
      this.stack = [];
    }

    PerformanceManager.prototype.trackStep = function(stepTitle, stepTags, stepExtraInfo) {
      var eventInfo;
      this.eventTime = new Date();
      eventInfo = {};
      eventInfo.timeSinceStart = this.eventTime.getTime() - this.startTime.getTime();
      eventInfo.stamp = this.eventTime;
      eventInfo.title = stepTitle;
      eventInfo.tags = stepTags;
      eventInfo.extraInfo = stepExtraInfo;
      return this.stack.push(eventInfo);
    };

    PerformanceManager.prototype.getStepsWithTag = function(tag) {
      var output,
        _this = this;
      output = _.filter(this.stack, function(stackEntry) {
        return stackEntry.tags.indexOf(tag) !== -1;
      });
      return output;
    };

    return PerformanceManager;

  })();

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Managers.ServerManager = (function() {
    function ServerManager() {
      this.getImageUrl = __bind(this.getImageUrl, this);
      this.getExportUrl = __bind(this.getExportUrl, this);
      this.fetchFileFromURL = __bind(this.fetchFileFromURL, this);
      this.fetchFile = __bind(this.fetchFile, this);
      this.getResourceConfig = __bind(this.getResourceConfig, this);
      this.logout = __bind(this.logout, this);
      this.onPickerCallback = __bind(this.onPickerCallback, this);
      this.deleteFile = __bind(this.deleteFile, this);
      this.saveAsCurrentProject = __bind(this.saveAsCurrentProject, this);
      this.renameCurrentProject = __bind(this.renameCurrentProject, this);
      this.deleteProject = __bind(this.deleteProject, this);
      this.shareProject = __bind(this.shareProject, this);
      this.getProjectsList = __bind(this.getProjectsList, this);
      this.getResourcesList = __bind(this.getResourcesList, this);
      this.createPicker = __bind(this.createPicker, this);
    }

    ServerManager.prototype.createPicker = function() {
      return quadrigram.router.appViews.uiView.showFilePicker(this.onPickerCallback);
    };

    ServerManager.prototype.getResourcesList = function() {
      var resList;
      resList = new quadrigram.Collections.metaResourceCollection();
      return resList;
    };

    ServerManager.prototype.getProjectsList = function() {
      var projectsList;
      projectsList = new quadrigram.Collections.metaProjectCollection();
      return projectsList;
    };

    ServerManager.prototype.shareProject = function(mails, projectId) {
      var mailJSON, shareUrl;
      log("ServerManager,id", mails, projectId);
      mailJSON = JSON.stringify(mails);
      shareUrl = quadrigram.baseUrl + "rs/google/share/" + projectId;
      return $.ajax({
        url: shareUrl,
        contentType: "application/json",
        type: 'POST',
        data: mailJSON
      });
    };

    ServerManager.prototype.deleteProject = function(metadata, callback, errorCallback) {
      var deleteUrl;
      deleteUrl = quadrigram.baseUrl + "rs/google/project/" + metadata.id;
      return $.ajax({
        url: deleteUrl,
        type: 'DELETE',
        success: callback,
        error: errorCallback
      });
    };

    ServerManager.prototype.renameCurrentProject = function(newName) {
      var renameUrl;
      renameUrl = quadrigram.baseUrl + "rs/google/project/" + quadrigram.router.dataModels.currentProject.get("id");
      return $.ajax({
        url: renameUrl,
        type: 'PUT',
        headers: {
          'pname': newName
        }
      });
    };

    ServerManager.prototype.saveAsCurrentProject = function(newName) {
      quadrigram.router.dataModels.currentProject.unset("id");
      return quadrigram.router.dataModels.currentProject.requestSave();
    };

    ServerManager.prototype.deleteFile = function(metadata, callback, errorCallback) {
      var deleteUrl;
      deleteUrl = quadrigram.baseUrl + "rs/google/resource/" + metadata.id;
      return $.ajax({
        url: deleteUrl,
        type: 'DELETE',
        success: callback,
        error: errorCallback
      });
    };

    ServerManager.prototype.onPickerCallback = function(metadata) {
      return quadrigram.router.dataModels.currentProject.createExternalGroup(metadata);
    };

    ServerManager.prototype.logout = function() {
      var url,
        _this = this;
      url = quadrigram.userUrl + "logout";
      return $.getJSON(url, function(data) {}).done(function() {
        return window.location.href = quadrigram.webUrl;
      }).fail(function(error) {
        return window.location.href = quadrigram.webUrl;
      });
    };

    ServerManager.prototype.getResourceConfig = function() {
      var _this = this;
      if (this.resourcesConfig == null) {
        this.resourcesConfig = new Backbone.Model;
        this.resourcesConfig.url = "data/resourcesconf.json";
        this.resourcesConfig.fetch();
        this.resourcesConfig.on("change", function() {
          return _this.resourcesConfig.trigger("ready");
        });
      } else if (this.resourcesConfig.get("resourceList") != null) {
        _.defer(function() {
          return _this.resourcesConfig.trigger("ready");
        });
      }
      return this.resourcesConfig;
    };

    ServerManager.prototype.fetchFile = function(rid, id, callback) {
      var url,
        _this = this;
      if (quadrigram.environment === "editor") {
        url = quadrigram.baseUrl + "rs/google/resource/" + rid;
        return this.fetchFileFromURL(rid, url, callback);
      } else {
        this.resourcesConfig = this.getResourceConfig();
        return this.resourcesConfig.on("ready", function() {
          var resource, resourceCandidates;
          resourceCandidates = $.grep(_this.resourcesConfig.get("resourceList"), function(res) {
            if (res.exportedProvider !== "local") {
              return res.id === rid;
            } else {
              return res.id === id;
            }
          });
          if (resourceCandidates.length < 1) {
            elog("resource not found!!!!");
          } else {
            resource = resourceCandidates[0];
          }
          if (resource.exportedProvider !== "local") {
            url = resource.filePath;
            return _this.fetchFileFromURL(rid, url, callback);
          } else {
            url = resource.filePath;
            return $.ajax({
              dataType: "json",
              url: url,
              cache: true,
              success: function(data, status) {
                var responseObject;
                responseObject = {
                  providerName: "local",
                  rid: rid,
                  id: id,
                  status: status
                };
                responseObject.data = _.findWhere(data.data, {
                  "id": id
                });
                return callback(responseObject);
              }
            });
            /*
            $.getJSON(url,(data,status)->
              responseObject = {providerName:"local", rid:rid, status:status}
              responseObject.data = _.findWhere(data.data,{"rid":rid})
              callback(responseObject)
            )
            */

          }
        });
      }
    };

    ServerManager.prototype.fetchFileFromURL = function(rid, url, callback) {
      var oReq,
        _this = this;
      oReq = new XMLHttpRequest();
      oReq.open('GET', url, true);
      oReq.withCredentials = true;
      oReq.responseType = "arraybuffer";
      oReq.onload = function() {
        var responseObject;
        responseObject = {
          providerName: "google",
          rid: rid,
          mimeType: this.getResponseHeader('content-type'),
          data: oReq.response,
          status: this.status
        };
        return callback(responseObject);
      };
      oReq.onreadystatechange = function() {
        if (this.status !== 200 && (this.error == null)) {
          elog("Error receiving file");
          return this.error = 1;
        }
      };
      oReq.onerror = function() {
        var responseObject;
        elog("Error receiving file");
        responseObject = {
          providerName: "google",
          rid: rid,
          mimeType: _this.getResponseHeader('content-type'),
          data: oReq.response,
          status: _this.status
        };
        return callback(responseObject);
      };
      return oReq.send();
    };

    /*
    #CREO QUE YA NO HACE FALTA NADA DE ESO, sino, debe ir en UI.coffe: showExportOptions
    requestExportWindow:()=>
      
      if (quadrigram.router.dataModels.currentProject.get("id"))
        _.defer(()=>
          win = window.open(quadrigram.webUrl+"#export/"+quadrigram.router.dataModels.currentProject.get("id"), '_blank')
        )  
        quadrigram.router.saveCurrentProject()
      else
        quadrigram.router.appViews.loaderView.trigger("loaderMessage","Give your project a name before publishing it")
        _.delay(() =>
          quadrigram.router.appViews.loaderView.hide()
        ,2000)
        quadrigram.router.saveCurrentProject()
    */


    ServerManager.prototype.getExportUrl = function(type) {
      var url;
      switch (type) {
        case "web":
          return url = quadrigram.webUrl + '#publish-website/' + quadrigram.router.dataModels.currentProject.get("id");
        case "embed":
          return url = quadrigram.webUrl + '#publish-embed/' + quadrigram.router.dataModels.currentProject.get("id");
        case "zip":
          return url = quadrigram.webUrl + '#publish-download/' + quadrigram.router.dataModels.currentProject.get("id");
      }
    };

    ServerManager.prototype.getImageUrl = function(rid, callback) {
      var _this = this;
      if (rid.indexOf("http") >= 0 || rid === "") {
        callback(rid);
        return;
      }
      if (quadrigram.environment === "editor") {
        callback("https://docs.google.com/uc?id=" + rid + "&export=view");
      } else {
        this.resourcesConfig = this.getResourceConfig();
        this.resourcesConfig.on("ready", function() {
          var resource, resourceCandidates, url;
          resourceCandidates = $.grep(_this.resourcesConfig.get("resourceList"), function(res) {
            return res.id === rid;
          });
          if (resourceCandidates.length < 1) {
            elog("local image not found!, tryig public url...");
            return callback("https://docs.google.com/uc?id=" + rid + "&export=view");
          } else {
            resource = resourceCandidates[0];
            url = resource.filePath;
            return callback(url);
          }
        });
      }
    };

    return ServerManager;

  })();

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Managers.LayoutManager = (function() {
    function LayoutManager(el, layoutSettings) {
      var self,
        _this = this;
      this.el = el;
      this.comparareWgdSizes = __bind(this.comparareWgdSizes, this);
      this.setVizFrame = __bind(this.setVizFrame, this);
      this.redrawFrames = __bind(this.redrawFrames, this);
      this.serialize = __bind(this.serialize, this);
      this.removeVisualizer = __bind(this.removeVisualizer, this);
      this.addVisualizer = __bind(this.addVisualizer, this);
      this.changing = __bind(this.changing, this);
      this.resize = __bind(this.resize, this);
      this.checkScroll = __bind(this.checkScroll, this);
      this.drag = __bind(this.drag, this);
      this.changeEnd = __bind(this.changeEnd, this);
      this.resizeEnd = __bind(this.resizeEnd, this);
      this.dragStart = __bind(this.dragStart, this);
      this.dragEnd = __bind(this.dragEnd, this);
      this.enable = __bind(this.enable, this);
      this.disable = __bind(this.disable, this);
      this.getLowestPointOfSortedFrameArray = __bind(this.getLowestPointOfSortedFrameArray, this);
      this.sortArrayOfVizForGridster = __bind(this.sortArrayOfVizForGridster, this);
      this.setLoaded = __bind(this.setLoaded, this);
      this.drawGuides = __bind(this.drawGuides, this);
      this.updateCanvas = __bind(this.updateCanvas, this);
      this.setGridSizes = __bind(this.setGridSizes, this);
      this._resizeGridster = __bind(this._resizeGridster, this);
      this.updateSettings = __bind(this.updateSettings, this);
      this.updateGridsterSettings = __bind(this.updateGridsterSettings, this);
      _.extend(this, Backbone.Events);
      /*
      window.addEventListener("resize", ()=>
          @_resizeGridster()
      );
      */

      this.gridster = this.el.gridster({
        min_rows: 120,
        autogrow_cols: false,
        limit: false,
        resize: {
          enabled: true,
          stop: this.resizeEnd,
          resize: this.resize
        },
        draggable: {
          limit: false,
          start: this.dragStart,
          stop: this.dragEnd,
          drag: this.drag,
          ignore_dragging: function(e) {
            return $(e.currentTarget).find(".viz-container.selected").length > 0 && !$(e.target).hasClass("context-menu") && !($(e.target).attr("class") === "bkg-svg") && !($(e.target).hasClass("bkg-dom"));
          }
        },
        serialize_params: function($w, wgd) {
          return {
            col: wgd.col,
            row: wgd.row,
            size_x: wgd.size_x,
            size_y: wgd.size_y,
            vizID: $w.attr("viz-id")
          };
        }
      }).data('gridster');
      this.el.parent().addClass("preload");
      this.gridster.resize_api.options.ignore_dragging = function(e) {
        return $(e.target).closest(".ql-editor").length > 0;
      };
      this.gridster.resize_widget_dimensions = function(options) {
        var serializedGrid;
        if (options.widget_margins) {
          this.options.widget_margins = options.widget_margins;
        }
        if (options.widget_base_dimensions) {
          this.options.widget_base_dimensions = options.widget_base_dimensions;
        }
        if (options.max_cols) {
          this.options.max_cols = options.max_cols;
        }
        if (options.min_cols) {
          this.options.min_cols = options.min_cols;
        }
        this.min_widget_width = (this.options.widget_margins[0] * 2) + this.options.widget_base_dimensions[0];
        this.min_widget_height = (this.options.widget_margins[1] * 2) + this.options.widget_base_dimensions[1];
        serializedGrid = this.serialize();
        /*
        this.$widgets.each($.proxy((i, widget) =>
            $widget = $(widget);
            # log "resizing widget",$widget
            this.resize_widget($widget);
            _.delay(()=>
              $widget.trigger("resizeEnd")
            ,500)
        , this));
        */

        this.generate_grid_and_stylesheet();
        this.get_widgets_from_DOM();
        this.set_dom_grid_height();
        this.set_dom_grid_width();
        this.drag_api.options.container_width = this.cols * this.min_widget_width;
        return this;
      };
      self = this;
      
    this.gridster.drag_api.scroll_in = function(axis, data) {
        var $window = $(self.el).closest(".project-container");
        var dir_map = { x : 'left', y : 'top' };
        var capitalize = function(str) {
          return str.charAt(0).toUpperCase() + str.slice(1);
        };
        var dir_prop = dir_map[axis];

        var area_size = 100;
        var scroll_inc = 5;

        var is_x = axis === 'x';
        //CHAPUZILLA: Queremos o no scroll_x (en principio no, pero si el layout mide mas que nuestra pantalla!!!???)
        //Hay que hacerlo mejor...
        if (is_x == true)
          {
            return;
          }

        var window_size = is_x ? this.window_width : this.window_height;
        var doc_size = is_x ? $(document).width() : $(document).height();
        var player_size = is_x ? this.$player.width() : this.$player.height();

        var next_scroll;
        var scroll_offset = $window['scroll' + capitalize(dir_prop)]();
        var min_window_pos = scroll_offset;
        var max_window_pos = min_window_pos + window_size;

        //CHAPUZA, no se porque el top coge menos que el bottom...
        var mouse_next_zone = max_window_pos - 40;  // down/right
        var mouse_prev_zone = min_window_pos + 120;  // up/left

        var abs_mouse_pos = min_window_pos + data.pointer[dir_prop];

        var max_player_pos = (doc_size - window_size + player_size);

        if (abs_mouse_pos >= mouse_next_zone) {
            next_scroll = scroll_offset + scroll_inc;
            //if (next_scroll < max_player_pos) {
                $window['scroll' + capitalize(dir_prop)](next_scroll);
                this['scroll_offset_' + axis] += scroll_inc;
            //}
        }

        if (abs_mouse_pos <= mouse_prev_zone) {
            next_scroll = scroll_offset - scroll_inc;
            //if (next_scroll > 0) {
                $window['scroll' + capitalize(dir_prop)](next_scroll);
                this['scroll_offset_' + axis] -= scroll_inc;
            //}
        }

        return this;
    };
    ;
      
    this.gridster.drag_api.get_offset = function(e) {

        var $window = $(self.el).closest(".project-container")
        //var $window = $(window)
        e.preventDefault();
        var mouse_actual_pos = this.get_mouse_pos(e);
        var diff_x = Math.round(
            mouse_actual_pos.left - this.mouse_init_pos.left);
        var diff_y = Math.round(mouse_actual_pos.top - this.mouse_init_pos.top);

        var left = Math.round(this.el_init_offset.left +
            diff_x - this.baseX + $window.scrollLeft() - this.win_offset_x);
        var top = Math.round(this.el_init_offset.top +
            diff_y - this.baseY + $window.scrollTop() - this.win_offset_y);

        //THIS should not be performed!!!
        //but then there are some isues when going to the right... :(
        /*
        if (this.options.limit) {
            if (left > this.player_max_left) {
                left = this.player_max_left;
            } else if(left < this.player_min_left) {
                left = this.player_min_left;
            }
        }
        */
        return {
            position: {
                left: left,
                top: top
            },
            pointer: {
                left: mouse_actual_pos.left,
                top: mouse_actual_pos.top,
                diff_left: diff_x + ($window.scrollLeft() - this.win_offset_x),
                diff_top: diff_y + ($window.scrollTop() - this.win_offset_y)
            }
        };
      };
    ;
      
      this.gridster.drag_api.on_dragstart = function(e) {
        e.preventDefault();
        var $window = $(self.el).closest(".project-container")

        if (this.is_dragging) { return this; }

        this.drag_start = this.is_dragging = true;
        var offset = this.$container.offset();
        this.baseX = Math.round(offset.left);
        this.baseY = Math.round(offset.top);
        this.initial_container_width = this.options.container_width || this.$container.width();

        if (this.options.helper === 'clone') {
            this.$helper = this.$player.clone()
                .appendTo(this.$container).addClass('helper');
            this.helper = true;
        } else {
            this.helper = false;
        }

        this.win_offset_y = $window.scrollTop();
        this.win_offset_x = $window.scrollLeft();
        this.scroll_offset_y = 0;
        this.scroll_offset_x = 0;
        this.el_init_offset = this.$player.offset();
        this.player_width = this.$player.width();
        this.player_height = this.$player.height();

        this.set_limits(this.options.container_width);

        if (this.options.start) {
            this.options.start.call(this.$player, e, this.get_drag_data(e));
        }

        return false;
    };

    ;
      
      this.gridster.add_resize_handle = function($w) {
          var append_to = this.options.resize.handle_append_to;
          //un poco chapuzero porque no miramos si $w existe o si teniamos que quitarlo de append_to...
          $w.find("."+this.resize_handle_class).remove()
          $(this.resize_handle_tpl).appendTo( append_to ? $(append_to, $w) : $w);

          return this;
      }
    ;
      
      this.gridster.on_start_drag = function(event, ui) {
        this.$helper.add(this.$player).add(this.$wrapper).addClass('dragging');

        this.highest_col = this.get_highest_occupied_cell().col;

        this.$player.addClass('player');
        this.player_grid_data = this.$player.coords().grid;
        this.placeholder_grid_data = $.extend({}, this.player_grid_data);

            //COMENTED THIS LINES:
            //Could have some ifs to do something in between (showing when something)
            //andother option is to use a "fake canvas" with some alpha...

            //this.set_dom_grid_height(this.$el.height() +
            //    (this.player_grid_data.size_y * this.min_widget_height));

            //this.set_dom_grid_width(this.cols);

        var pgd_sizex = this.player_grid_data.size_x;
        var cols_diff = this.cols - this.highest_col;

        if (this.options.autogrow_cols && cols_diff <= pgd_sizex) {
            this.add_faux_cols(Math.min(pgd_sizex - cols_diff, 1));
        }

        var colliders = this.faux_grid;
        var coords = this.$player.data('coords').coords;

        this.cells_occupied_by_player = this.get_cells_occupied(
            this.player_grid_data);
        this.cells_occupied_by_placeholder = this.get_cells_occupied(
            this.placeholder_grid_data);

        this.last_cols = [];
        this.last_rows = [];

        // see jquery.collision.js
        this.collision_api = this.$helper.collision(
            colliders, this.options.collision);

        this.$preview_holder = $('<' + this.$player.get(0).tagName + ' />', {
              'class': 'preview-holder',
              'data-row': this.$player.attr('data-row'),
              'data-col': this.$player.attr('data-col'),
              css: {
                  width: coords.width,
                  height: coords.height
              }
        }).appendTo(this.$el);

        if (this.options.draggable.start) {
          this.options.draggable.start.call(this, event, ui);
        }
    };
    ;
      
      this.gridster.set_placeholder = function(col, row) {
        var phgd = $.extend({}, this.placeholder_grid_data);
        var $nexts = this.widgets_below({
                col: phgd.col,
                row: phgd.row,
                size_y: phgd.size_y,
                size_x: phgd.size_x
            });

        // Prevents widgets go out of the grid
        var right_col = (col + phgd.size_x - 1);

        if (right_col > this.cols) {
            //ESTABA MAL, ponia (right_col-cols) ...
            col = col - (right_col - this.cols);
        }


        var moved_down = this.placeholder_grid_data.row < row;
        var changed_column = this.placeholder_grid_data.col !== col;

        this.placeholder_grid_data.col = col;
        this.placeholder_grid_data.row = row;

        this.cells_occupied_by_placeholder = this.get_cells_occupied(
            this.placeholder_grid_data);

        this.$preview_holder.attr({
            'data-row' : row,
            'data-col' : col
        });

        if (moved_down || changed_column) {
            $nexts.each($.proxy(function(i, widget) {
                this.move_widget_up(
                 $(widget), this.placeholder_grid_data.col - col + phgd.size_y);
            }, this));
        }

        var $widgets_under_ph = this.get_widgets_under_player(
            this.cells_occupied_by_placeholder);

        if ($widgets_under_ph.length) {
            $widgets_under_ph.each($.proxy(function(i, widget) {
                var $w = $(widget);
                this.move_widget_down(
                 $w, row + phgd.size_y - $w.data('coords').grid.row);
            }, this));
        }

    };
    ;
      
    this.gridster.resize_widget = function($widget, size_x, size_y, callback) {
        var wgd = $widget.coords().grid;
        var col = wgd.col;
        var max_cols = this.options.max_cols;
        var old_size_y = wgd.size_y;
        var old_col = wgd.col;
        var new_col = old_col;

        size_x || (size_x = wgd.size_x);
        size_y || (size_y = wgd.size_y);

        if (max_cols !== Infinity) {
            size_x = Math.min(size_x, max_cols - col + 1);
        }
        //MUY raro que no sirva de nada...
        //pero parece que no, y jodia mucho la performance...
        /*
        if (size_y > old_size_y) {
            this.add_faux_rows(Math.max(size_y - old_size_y, 0));
        }

        var player_rcol = (col + size_x - 1);
        if (player_rcol > this.cols) {
            this.add_faux_cols(player_rcol - this.cols);
        }
        */
        var new_grid_data = {
            col: new_col,
            row: wgd.row,
            size_x: size_x,
            size_y: size_y
        };

        this.mutate_widget_in_gridmap($widget, wgd, new_grid_data);

        this.set_dom_grid_height();
        this.set_dom_grid_width();

        if (callback) {
            callback.call(this, new_grid_data.size_x, new_grid_data.size_y);
        }

        return $widget;
    };

    ;
      
      this.gridster.add_widget = function(html, size_x, size_y, col, row, max_size, min_size, doAnimation) {
        var pos;
        size_x || (size_x = 1);
        size_y || (size_y = 1);

        if (!col & !row) {
            pos = this.next_position(size_x, size_y);
        } else {
            pos = {
                col: col,
                row: row,
                size_x: size_x,
                size_y: size_y
            };

            this.empty_cells(col, row, size_x, size_y);
        }

        var $w = $(html).attr({
                'data-col': pos.col,
                'data-row': pos.row,
                'data-sizex' : size_x,
                'data-sizey' : size_y
            }).addClass('gs-w').appendTo(this.$el);

        if (doAnimation==true)
        {
          $w.hide();
        }



        this.$widgets = this.$widgets.add($w);

        //Esta llamada, crea un new Coords() que llama widht() y height() del $el, y hace que vaya un poco lento...
        this.register_widget($w);

        this.add_faux_rows(pos.size_y);
        //this.add_faux_cols(pos.size_x);

        if (max_size) {
            this.set_widget_max_size($w, max_size);
        }

        if (min_size) {
            this.set_widget_min_size($w, min_size);
        }

        this.set_dom_grid_width();
        this.set_dom_grid_height();

        this.drag_api.set_limits(this.cols * this.min_widget_width);
        if (doAnimation==true)
        {
          return $w.fadeIn();
        }
        else
        {
          return $w;
        }

    };
    ;
      
    this.gridster.register_widget = function($el) {
        var isDOM = $el instanceof jQuery;
        var wgd = isDOM ? this.dom_to_coords($el) : $el;
        var posChanged = false;
        isDOM || ($el = wgd.el);

        var empty_upper_row = this.can_go_widget_up(wgd);
        if (empty_upper_row) {
            wgd.row = empty_upper_row;
            $el.attr('data-row', empty_upper_row);
            this.$el.trigger('gridster:positionchanged', [wgd]);
            posChanged = true;
        }

        if (this.options.avoid_overlapped_widgets &&
            !this.can_move_to(
             {size_x: wgd.size_x, size_y: wgd.size_y}, wgd.col, wgd.row)
        ) {
            $.extend(wgd, this.next_position(wgd.size_x, wgd.size_y));
            $el.attr({
                'data-col': wgd.col,
                'data-row': wgd.row,
                'data-sizex': wgd.size_x,
                'data-sizey': wgd.size_y
            });
            posChanged = true;
        }

        //En vez de crear el coords, con $el.coords() lo creamos "a mano" para no tener que llamar wdith(), height(), que tardan mucho... (100ms vs 5ms)
        //NO VA BIEN; pero no creo que sea esto... (efetivamente, en versiones antigguas tambien hace cosas raras a veces..)!!!!!


        var coords = new GridsterCoords([{
          left:wgd.col*this.min_widget_width,
          top:wgd.row*this.min_widget_width,
          width:wgd.size_x*this.min_widget_width,
          height:wgd.size_y*this.min_widget_width
        }]);
        coords.el = $el
        coords.coords.el = $el
        $el.data('coords',coords);

        /*
        //attach Coord object to player data-coord attribute
        $el.data('coords', $el.coords());
        */

        // Extend Coord object with grid position info
        $el.data('coords').grid = wgd;

        this.add_to_gridmap(wgd, $el);

        this.options.resize.enabled && this.add_resize_handle($el);

        return posChanged;
    };
    ;
      this.resizeGridster = _.throttle(this._resizeGridster, 400);
    }

    LayoutManager.prototype.updateGridsterSettings = function(layoutSettings) {
      var oldSettings;
      oldSettings = {
        "old_dimensions_x": this.gridster.options.widget_base_dimensions[0],
        "old_dimensions_y": this.gridster.options.widget_base_dimensions[1],
        "old_cols": this.gridster.options.max_cols
      };
      this.updateSettings(layoutSettings);
      this._resizeGridster();
      return this.setGridSizes(layoutSettings, oldSettings);
    };

    LayoutManager.prototype.updateSettings = function(layoutSettings) {
      layoutSettings = LayoutUtils.validateLayoutSettings(layoutSettings);
      this.MARGINS = LayoutUtils.scrapPx(layoutSettings.margins);
      this.BASE_DIMENSIONS = LayoutUtils.scrapPx(layoutSettings.colWidth);
      this.SPACE_WIDTH = LayoutUtils.scrapPx(layoutSettings.width);
      this.SPACE_HEIGHT = LayoutUtils.scrapPx(layoutSettings.height);
      this.MAX_WIDTH = LayoutUtils.scrapPx(layoutSettings.maxWidth);
      this.MIN_WIDTH = LayoutUtils.scrapPx(layoutSettings.minWidth);
      this.MIN_HEIGHT = LayoutUtils.scrapPx(layoutSettings.minHeight);
      this.FOREGROUND_COLOR = layoutSettings.foregroundColor;
      this.MAX_COLS = layoutSettings.numCols;
      this.MAX_ROWS = layoutSettings.numRows;
      this.LAYOUT_FORMAT = layoutSettings.layoutFormat;
      this.MAX_COLS = Math.floor(this.MAX_COLS);
      return this.BASE_DIMENSIONS = (this.SPACE_WIDTH / this.MAX_COLS) * (1 - 2 * this.MARGINS / 100);
    };

    LayoutManager.prototype._resizeGridster = function() {
      var marginx, marginy, newHeight, newWidth, x_dimension, y_dimension;
      if (this.currentLayoutMode === "full-screen-layout") {
        newWidth = this.el.closest(".project-container").width();
        newHeight = this.el.closest(".project-container").height();
        this.el.closest(".project-content").width(newWidth + "px");
        this.el.closest(".project-content").height(newHeight + "px");
        x_dimension = (newWidth / this.MAX_COLS) * (1 - 2 * this.MARGINS / 100);
        y_dimension = (newHeight / this.MAX_ROWS) * (1 - 2 * this.MARGINS / 100);
        marginx = (newWidth / this.MAX_COLS) * this.MARGINS / 100;
        marginy = (newHeight / this.MAX_ROWS) * this.MARGINS / 100;
      } else if (this.currentLayoutMode === "embed-layout") {
        this.el.closest(".project-content").width(this.SPACE_WIDTH + "px");
        this.el.closest(".project-content").height(this.SPACE_HEIGHT + "px");
        x_dimension = (this.SPACE_WIDTH / this.MAX_COLS) * (1 - 2 * this.MARGINS / 100);
        y_dimension = (this.SPACE_HEIGHT / this.MAX_ROWS) * (1 - 2 * this.MARGINS / 100);
        marginx = (this.SPACE_WIDTH / this.MAX_COLS) * this.MARGINS / 100;
        marginy = (this.SPACE_HEIGHT / this.MAX_ROWS) * this.MARGINS / 100;
      } else if (this.currentLayoutMode === "web-layout") {
        newWidth = this.MAX_WIDTH;
        this.el.closest(".project-content").width(newWidth + "px");
        this.el.closest(".project-content").height("auto");
        x_dimension = (newWidth / this.MAX_COLS) * (1 - 2 * this.MARGINS / 100);
        y_dimension = x_dimension;
        marginx = (newWidth / this.MAX_COLS) * this.MARGINS / 100;
        marginy = marginx;
      }
      /*
      else if @currentLayoutMode == "web-layout"
        newWidth = Math.min(Math.max(@el.closest(".project-container").width()-20,@MIN_WIDTH),@MAX_WIDTH)
        @el.closest(".project-content").width(newWidth+"px")
        @el.closest(".project-content").height("auto")
        #x_dimension = newWidth/@MAX_COLS - 2*@MARGINS
        x_dimension = (newWidth/@MAX_COLS) *(1-2*@MARGINS/100)
        y_dimension = x_dimension
        marginx = (newWidth/@MAX_COLS)*@MARGINS/100
        marginy = marginx
        #minHeight=Math.min(768, newWidth*0.75)
      */

      this.gridster.resize_widget_dimensions({
        widget_base_dimensions: [x_dimension, y_dimension],
        widget_margins: [marginx, marginy],
        max_cols: this.MAX_COLS,
        min_cols: this.MAX_COLS
      });
      return this.updateCanvas();
    };

    LayoutManager.prototype.setGridSizes = function(gridSettings, oldSettings) {
      var old_cols, old_dimensions_x, old_dimensions_y, postLayout, preLayout, wgd, _i, _len, _results;
      old_dimensions_x = oldSettings.old_dimensions_x;
      old_dimensions_y = oldSettings.old_dimensions_y;
      old_cols = oldSettings.old_cols;
      preLayout = this.gridster.serialize();
      postLayout = [];
      _results = [];
      for (_i = 0, _len = preLayout.length; _i < _len; _i++) {
        wgd = preLayout[_i];
        /*
        if old_cols != @MAX_COLS
          wgd.size_x = Math.round( wgd.size_x*old_dimensions_x/@gridster.options.widget_base_dimensions[0] )
          wgd.size_y = Math.round( wgd.size_y*old_dimensions_y/@gridster.options.widget_base_dimensions[1] )
          wgd.col = 1+Math.round( (wgd.col-1)*old_dimensions_x/@gridster.options.widget_base_dimensions[0] )
          wgd.row = 1+Math.round( (wgd.row-1)*old_dimensions_y/@gridster.options.widget_base_dimensions[1] )
        */

        wgd.size_x = Math.min(Math.max(1, wgd.size_x), this.MAX_COLS);
        wgd.size_y = Math.max(1, wgd.size_y);
        wgd.col = Math.min(Math.max(1, wgd.col), this.MAX_COLS + 1 - wgd.size_x);
        wgd.row = Math.max(1, wgd.row);
        _results.push(this.setVizFrame(wgd, {
          forceRedraw: true
        }));
      }
      return _results;
    };

    LayoutManager.prototype.updateCanvas = function() {
      var $canvasContainer, $guidesContainer, canvasHeight, canvasWidth, delay,
        _this = this;
      $canvasContainer = this.el.closest(".project-content").find(".canvas-container");
      delay = 0;
      if (this.gridster.container_height !== Number.NEGATIVE_INFINITY && ($canvasContainer.height() > this.gridster.container_height || $canvasContainer.width() > this.gridster.container_width)) {
        delay = 500;
      }
      canvasWidth = this.el.closest(".project-content").width();
      canvasHeight = this.el.closest(".project-content").height();
      if (this.LAYOUT_FORMAT === "web-layout") {
        canvasHeight = this.gridster.container_height;
        if (canvasHeight < this.MIN_HEIGHT) {
          canvasHeight = this.MIN_HEIGHT;
        }
      }
      if (this.LAYOUT_FORMAT === "embed-layout") {
        canvasHeight = this.SPACE_HEIGHT;
        canvasWidth = this.SPACE_WIDTH;
      }
      $canvasContainer.css({
        "width": canvasWidth,
        "height": canvasHeight,
        "background": this.FOREGROUND_COLOR
      });
      if (quadrigram.environment === "editor") {
        $guidesContainer = $canvasContainer.find(".layout-guides-container");
        $guidesContainer.css({
          "width": canvasWidth,
          "height": canvasHeight
        });
        return setTimeout(function() {
          return _this.drawGuides(canvasWidth, canvasHeight);
        }, delay);
      }
    };

    LayoutManager.prototype.drawGuides = function(actualWidth, actualHeight) {
      var ROWS, i, marginX, marginY, widgetHeight, widgetWidth, _i, _j, _ref,
        _this = this;
      widgetWidth = this.gridster.min_widget_width;
      widgetHeight = this.gridster.min_widget_height;
      marginX = this.gridster.options.widget_margins[0];
      marginY = this.gridster.options.widget_margins[1];
      this.ROW_WIDTH = actualWidth;
      $('.layout-cols').empty();
      for (i = _i = 0, _ref = this.MAX_COLS; _i < _ref; i = _i += 1) {
        $('.layout-cols').append("<div class='layout-col'></div>");
      }
      ROWS = Math.ceil(actualHeight / widgetHeight);
      $('.layout-rows').empty();
      for (i = _j = 0; _j < ROWS; i = _j += 1) {
        $('.layout-rows').append("<div class='layout-row'></div>");
      }
      $('.layout-cols').css("width", actualWidth);
      $('.layout-rows').css("width", actualWidth);
      /*
      safeMargin = widgetWidth*@MARGINS/100
      if @MARGINS == 0
        safeMargin = 1
      */

      if (marginX === 0) {
        marginX = 1;
      }
      if (marginY === 0) {
        marginY = 1;
      }
      _.each($('.layout-row'), function(el, k) {
        var topPos;
        topPos = k * (widgetHeight + (2 * marginY));
        return $(el).css({
          "width": actualWidth,
          "height": widgetHeight - 2 * marginY,
          "margin": marginX,
          "margin-top": marginY,
          "margin-bottom": marginY * 2,
          "top": topPos
        });
      });
      return $('.layout-col').css({
        width: widgetWidth - 2 * marginX,
        margin: marginX
      });
      /*
      _.delay( () =>
          # log el
          @el.trigger('gridsterResize')
        , 500)
      */

    };

    LayoutManager.prototype.setLoaded = function() {
      this.el.closest(".gridster").removeClass("preload");
      return this.updateCanvas();
    };

    LayoutManager.prototype.sortArrayOfVizForGridster = function(array) {
      var _this = this;
      array = array.sort(function(a, b) {
        var Acol, Arow, Asize_x, Asize_y, Bcol, Brow, Bsize_x, Bsize_y;
        Arow = a.getProperty("row").getValues();
        Acol = a.getProperty("col").getValues();
        Asize_x = a.getProperty("size_x").getValues();
        Asize_y = a.getProperty("size_y").getValues();
        Brow = b.getProperty("row").getValues();
        Bcol = b.getProperty("col").getValues();
        Bsize_x = b.getProperty("size_x").getValues();
        Bsize_y = b.getProperty("size_y").getValues();
        if (Arow > Brow || Arow === Brow && Acol > Bcol) {
          return 1;
        }
        return -1;
      });
      return array;
    };

    LayoutManager.prototype.getLowestPointOfSortedFrameArray = function(array) {
      var frame, result, _i, _len;
      result = 0;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        frame = array[_i];
        if (frame.row + frame.size_y - 1 > result) {
          result = frame.row + frame.size_y - 1;
        }
      }
      return result;
    };

    LayoutManager.prototype.disable = function() {
      this.gridster.disable();
      return this.gridster.disable_resize();
    };

    LayoutManager.prototype.enable = function() {
      this.gridster.enable();
      return this.gridster.enable_resize();
    };

    LayoutManager.prototype.dragEnd = function(e, ui) {
      var el,
        _this = this;
      if (this.intervalTrigger) {
        window.clearInterval(this.intervalTrigger);
      }
      e.stopImmediatePropagation();
      el = ui.$helper;
      $('.layout-guides-container').removeClass("dragging");
      ui.$helper.find(".viz-container").removeClass("dragging");
      this.changeEnd(el);
      if (ui.$player.find(".viz-container .viz-view").length === 0 || ui.$player.find(".viz-container .viz-view").css("opacity") === "0") {
        return setTimeout(function() {
          ui.$player.find(".viz-container .viz-view").css({
            "opacity": 1
          });
          return ui.$player.find(".viz-container .viz-drag-icon").remove();
        }, 10);
      }
    };

    LayoutManager.prototype.dragStart = function(e, ui) {
      $('.layout-guides-container').addClass("dragging");
      ui.$helper.find(".viz-container").addClass("dragging");
      return $(window).trigger("viz:dragging");
    };

    LayoutManager.prototype.resizeEnd = function(e, ui) {
      var el;
      el = $(ui.$helper.closest("li"));
      /*
      _.delay( () ->
          # log el
          el.trigger('resizeEnd')
        , 500, el)
      */

      el.trigger('qresizeEnd');
      return this.changeEnd(el);
    };

    LayoutManager.prototype.changeEnd = function(el) {
      this.trigger("change:viz-frame", el.attr("hidden"));
      if (el.attr("hidden")) {
        return el.removeAttr("hidden");
      }
    };

    LayoutManager.prototype.drag = function(e, ui) {
      var el,
        _this = this;
      el = ui.$helper;
      this.changing(el);
      if (this.intervalTrigger) {
        window.clearInterval(this.intervalTrigger);
      }
      return this.intervalTrigger = window.setInterval(function() {
        return _this.checkScroll(e, ui);
      }, 10);
    };

    LayoutManager.prototype.checkScroll = function(e, ui) {
      var data;
      data = this.gridster.drag_api.get_drag_data(e);
      return this.gridster.drag_api.manage_scroll(data);
    };

    LayoutManager.prototype.resize = function(e, ui) {
      var el;
      el = $(ui.$helper.closest("li"));
      return el.trigger('qresize');
    };

    LayoutManager.prototype.changing = function(el) {};

    LayoutManager.prototype.addVisualizer = function(model) {
      var col, doAnimation, projection, result, row, size_x, size_y, transform;
      row = model.getProperty("row").getValues();
      col = model.getProperty("col").getValues();
      if (model.getProperty("size_x").getValues() && model.getProperty("size_y").getValues()) {
        size_x = Math.min(this.MAX_COLS, model.getProperty("size_x").getValues());
        size_y = model.getProperty("size_y").getValues();
      } else {
        size_x = Math.floor(this.MAX_COLS / 2);
        if (size_x * this.gridster.min_widget_width < 300) {
          size_x = Math.floor(300 / this.gridster.min_widget_width);
        }
        if (size_x * this.gridster.min_widget_width > 800) {
          size_x = Math.floor(800 / this.gridster.min_widget_width);
        }
        size_y = Math.round(size_x * 0.62);
      }
      if (model.addMode === "float") {
        row = 1;
        projection = Math.min(Math.max(this.gridster.$el.offset().left, model.options.initialPos.x), this.gridster.$el.offset().left + this.gridster.$el.width());
        transform = projection - this.gridster.$el.offset().left;
        col = Math.floor(transform / this.gridster.min_widget_width - 1.5);
        col = Math.max(Math.min(col, this.MAX_COLS), 1);
        row = null;
        col = null;
      }
      if (model.addMode != null) {
        doAnimation = true;
      }
      result = this.gridster.add_widget('<li class="gridster-item" viz-id=' + model.id + '/>', +size_x, +size_y, +col, +row, null, null, doAnimation);
      if (model.addMode === "scroll") {
        this.updateCanvas();
      }
      this.trigger("change:viz-frame", false);
      return result;
    };

    LayoutManager.prototype.removeVisualizer = function(model) {
      var $widget;
      $widget = this.gridster.$widgets.filter("[viz-id='" + model.get("id") + "']");
      this.gridster.remove_widget($widget);
      return setTimeout(this.updateCanvas, 500);
    };

    LayoutManager.prototype.serialize = function() {
      return this.gridster.serialize();
    };

    LayoutManager.prototype.redrawFrames = function(layoutData) {
      var candidate, timeoutBeforeAnimation, w, _i, _len, _ref,
        _this = this;
      timeoutBeforeAnimation = 0;
      _ref = this.gridster.$widgets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        w = _ref[_i];
        candidate = _.find(layoutData, function(ld) {
          return ld.vizID === $(w).attr("viz-id");
        });
        if (candidate == null) {
          $(w).stop();
          $(w).css("opacity", "0");
          timeoutBeforeAnimation = 300;
        }
      }
      return setTimeout(function() {
        var $canvasContainer, vizModel, _j, _k, _len1, _len2, _ref1;
        _ref1 = _this.gridster.$widgets;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          w = _ref1[_j];
          _this.gridster.remove_from_gridmap(w);
        }
        for (_k = 0, _len2 = layoutData.length; _k < _len2; _k++) {
          vizModel = layoutData[_k];
          _this.setVizFrame(vizModel);
        }
        /*
        if @currentLayoutMode == "full-screen-layout"
          @resizeGridster()
        */

        $canvasContainer = _this.el.closest(".project-content").find(".canvas-container");
        if (Math.round($canvasContainer.height() - _this.gridster.container_height) !== 0 || Math.round($canvasContainer.width() - _this.gridster.container_width) !== 0) {
          return _this.updateCanvas();
        }
      }, timeoutBeforeAnimation);
    };

    LayoutManager.prototype.setVizFrame = function(wgd, options) {
      var $widget,
        _this = this;
      $widget = this.gridster.$widgets.filter("[viz-id='" + wgd.vizID + "']");
      if ($widget.length > 0) {
        if (((options != null) && options.forceRedraw) || this.comparareWgdSizes(wgd, $widget.coords().grid) === false) {
          $widget.trigger('qresize');
          _.delay(function() {
            return $widget.trigger('qresizeEnd');
          }, 300);
        }
        return this.gridster.mutate_widget_in_gridmap($widget, $widget.coords().grid, wgd);
      } else {
        return elog("ERROR: widget not found!");
      }
    };

    LayoutManager.prototype.comparareWgdSizes = function(wgdA, wgdB) {
      if (wgdA.size_x !== wgdB.size_x) {
        return false;
      }
      if (wgdA.size_y !== wgdB.size_y) {
        return false;
      }
      return true;
    };

    return LayoutManager;

  })();

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Managers.ToolTipManager = (function() {
    ToolTipManager.listStyles = function() {
      var temp;
      temp = new quadrigram.Managers.ToolTipManager();
      return temp.listStyles();
    };

    ToolTipManager.prototype.styles = {
      "Avocado": {
        name: "Avocado",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#a8a927"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#cddc39",
          textColor: "#555555",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#f4ff7f",
            textColor: "#555555",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#555555",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#cddc39",
            textColor: "#555555",
            fontStyle: "Bold"
          }
        }
      },
      "Bluths Original": {
        name: "Bluths Original",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#ffd600"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#ffeb00",
          textColor: "#555555",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#ffd600",
            textColor: "#555555",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#555555",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#ffeb00",
            textColor: "#555555",
            fontStyle: "Bold"
          }
        }
      },
      "Brixton": {
        name: "Brixton",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#444444"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#e0e0e0",
          textColor: "#444444",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#eeeeee",
            textColor: "#444444",
            fontStyle: "Bold"
          },
          label: {
            fontSize: "12px",
            textColor: "#444444",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "18px",
            backgroundColor: "#fafafa",
            textColor: "#444444",
            fontStyle: "Regular"
          }
        }
      },
      "Brownie": {
        name: "Brownie",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "0px",
          color: "#a8a927"
        },
        roundedCorner: "5px",
        separatorColor: "transparent",
        title: {
          fontSize: "18px",
          backgroundColor: "#5d4038",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#a0887e",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#5d4038",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Bubbles": {
        name: "Bubbles",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "0px",
          color: "#c9e6ca"
        },
        roundedCorner: "5px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#b2dfdc",
          textColor: "#555555",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#c9e6ca",
            textColor: "#555555",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#555555",
            fontStyle: "Regular"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#ddedc8",
            textColor: "#555555",
            fontStyle: "Bold"
          }
        }
      },
      "Camo": {
        name: "Camo",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#1c5e20"
        },
        roundedCorner: "5px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#014d41",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#1c5e20",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#33691e",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Cherry Bomb": {
        name: "Cherry Bomb",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#d60000"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#ff1844",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#d60000",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#ff1844",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Clouds": {
        name: "Clouds",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#40adf0"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#efebe8",
          textColor: "#555555",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#0191ea",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#00affe",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Coal": {
        name: "Coal",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#2a373f"
        },
        roundedCorner: "5px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#546f7a",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#465a65",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#36474f",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Classic": {
        name: "Classic",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "0px",
          color: "none"
        },
        roundedCorner: "0px",
        separatorColor: "#dddddd",
        title: {
          fontSize: "14px",
          backgroundColor: "#2E307A",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#ffffff",
            textColor: "#2E307A",
            fontStyle: "Regular"
          },
          label: {
            fontSize: "12px",
            textColor: "#2E307A",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#ffffff",
            textColor: "#000",
            fontStyle: "Regular"
          }
        }
      },
      "Dark Matter": {
        name: "Dark Matter",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "0px",
          color: "#ffffff"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#231f20",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#1c1c1c",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#231f20",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Five 0": {
        name: "Five 0",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#1976d3"
        },
        roundedCorner: "5px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#1465c0",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#1976d3",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#1d89e4",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Financial": {
        name: "Financial",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#33691d"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#ddedc9",
          textColor: "#555555",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#f1f7e9",
            textColor: "#555555",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#555555",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#c5e1a6",
            textColor: "#555555",
            fontStyle: "Regular"
          }
        }
      },
      "Grapefruit": {
        name: "Grapefruit",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#ddba90"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#feb74d",
          textColor: "#555555",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#fdce80",
            textColor: "#555555",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#555555",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#ffe0b2",
            textColor: "#555555",
            fontStyle: "Bold"
          }
        }
      },
      "Green Tea": {
        name: "Green Tea",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "2px",
          color: "#dde776"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#aed582",
          textColor: "#555555",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#dde776",
            textColor: "#555555",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#555555",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#fff176",
            textColor: "#555555",
            fontStyle: "Bold"
          }
        }
      },
      "Greyscale Rounded": {
        name: "Greyscale Rounded",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#878787"
        },
        roundedCorner: "5px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#575757",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#3c3c3c",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#231f20",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Label Purple": {
        name: "Label Purple",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#3f51b5"
        },
        separatorColor: "#3f51b5",
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#ffffff",
          textColor: "#3f51b5",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#3f51b5",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#ffffff",
            textColor: "#3f51b5",
            fontStyle: "Bold"
          }
        }
      },
      "Lochness": {
        name: "Lochness",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#43a047"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#00695b",
          textColor: "#ffffff",
          fontStyle: "Bold"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#43a047",
            textColor: "#ffffff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#9ccc66",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Organic": {
        name: "Organic",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#5d8a49"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#ddedc8",
          textColor: "#424242",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#aed582",
            textColor: "#424242",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#424242",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#33691e",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      },
      "Sunburn": {
        name: "Sunburn",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#f09a9b"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#ffcdd2",
          textColor: "#555555",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#ee9a9a",
            textColor: "#555555",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#555555",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#e57373",
            textColor: "#555555",
            fontStyle: "Bold"
          }
        }
      },
      "Sunrise": {
        name: "Sunrise",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#ffd33f"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#ffea00",
          textColor: "#424242",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#fec400",
            textColor: "#424242",
            fontStyle: "Light"
          },
          label: {
            fontSize: "12px",
            textColor: "#424242",
            fontStyle: "Medium"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#ff9000",
            textColor: "#424242",
            fontStyle: "Bold"
          }
        }
      },
      "Swissmiss": {
        name: "Swissmiss",
        classes: "qtip-visualizer",
        fontFamily: "Roboto",
        border: {
          width: "1px",
          color: "#82b1ff"
        },
        roundedCorner: "0px",
        separatorColor: "transparent",
        title: {
          fontSize: "14px",
          backgroundColor: "#5d4038",
          textColor: "#ffffff",
          fontStyle: "Regular"
        },
        body: {
          value: {
            fontSize: "12px",
            backgroundColor: "#8c6e63",
            textColor: "#82b1ff",
            fontStyle: "Medium"
          },
          label: {
            fontSize: "12px",
            textColor: "#ffffff",
            fontStyle: "Light"
          },
          description: {
            fontSize: "10px",
            lineHeight: "normal",
            backgroundColor: "#a1897f",
            textColor: "#ffffff",
            fontStyle: "Regular"
          }
        }
      }
    };

    ToolTipManager.prototype.customProperties = {};

    function ToolTipManager(project, tooltipSettings) {
      this.resetCustomProperties = __bind(this.resetCustomProperties, this);
      this.getStyle = __bind(this.getStyle, this);
      this.listStyles = __bind(this.listStyles, this);
      this.changeStyle = __bind(this.changeStyle, this);
      this.setToolTipSettings = __bind(this.setToolTipSettings, this);
      _.extend(this, Backbone.Events);
      this.project = project;
      if (this.project == null) {
        return;
      }
      if (!this.project.get("tooltip-settings")) {
        this.changeStyle("Dark Matter", false);
      } else {
        this.setToolTipSettings(tooltipSettings);
      }
    }

    ToolTipManager.prototype.setToolTipSettings = function(tooltipSettings) {
      this.currentStyle = tooltipSettings.name;
      if (!tooltipSettings.body.value) {
        return this.setToolTipSettings(this.getStyle("default"));
      }
      if (this.project.get("tooltip-settings") !== tooltipSettings) {
        return this.project.set("tooltip-settings", tooltipSettings);
      }
    };

    ToolTipManager.prototype.changeStyle = function(styleName, resetProperties) {
      var newStyle;
      this.currentStyle = styleName;
      newStyle = this.styles[styleName];
      if (newStyle === void 0) {
        newStyle = this.styles["default"];
      }
      if (resetProperties) {
        this.customProperties = {};
      }
      newStyle.customProperties = this.customProperties;
      return this.project.set("tooltip-settings", newStyle);
    };

    ToolTipManager.prototype.listStyles = function() {
      return _.keys(this.styles);
    };

    ToolTipManager.prototype.getStyle = function(styleName) {
      return this.styles[styleName];
    };

    ToolTipManager.prototype.resetCustomProperties = function() {
      return this.changeStyle(this.currentStyle, true);
    };

    return ToolTipManager;

  }).call(this);

}).call(this);

(function() {
  'use strict';
  quadrigram.Managers.FormatManager = (function() {
    function FormatManager() {}

    FormatManager.prototype.formatDefinitions = {
      "Number": {
        "uiTipContent": "Simple number input",
        "label": "Numbers",
        "slots": [
          {
            "uiTipContent": "Number input",
            "id": "value",
            "label": "Value",
            "type": "number"
          }
        ]
      },
      "Px": {
        "uiTipContent": "Number of pixels",
        "label": "Pixels",
        "slots": [
          {
            "uiTipContent": "Pixels input",
            "id": "value",
            "label": "Value",
            "type": "number_px"
          }
        ]
      },
      "Boolean": {
        "uiTipContent": "Boolean input, can be Yes or No (true or false)",
        "label": "Yes or no",
        "slots": [
          {
            "uiTipContent": "Boolean input",
            "id": "value",
            "label": "Value",
            "type": "boolean"
          }
        ]
      },
      "Color": {
        "uiTipContent": "Select a color from the palette",
        "label": "Colors",
        "slots": [
          {
            "uiTipContent": "Click on the color preview to open the palette",
            "id": "value",
            "label": "Color",
            "type": "color"
          }
        ]
      },
      "Text": {
        "uiTipContent": "Text input",
        "label": "Text",
        "slots": [
          {
            "uiTipContent": "Type any text",
            "id": "value",
            "label": "String of text",
            "type": "text"
          }
        ]
      },
      "Percentage": {
        "label": "Percentage",
        "uiTipContent": "Percentge input for values between 0 and 100",
        "slots": [
          {
            "uiTipContent": "Type of select a percentage value",
            "id": "value",
            "label": "Value",
            "type": "percentage"
          }
        ]
      },
      "Options": {
        "label": "Options",
        "uiTipContent": "Options input",
        "slots": [
          {
            "uiTipContent": "Select one of the options",
            "id": "value",
            "label": "Value",
            "type": "options"
          }
        ]
      },
      "Date": {
        "label": "Date",
        "uiTipContent": "Date input",
        "slots": [
          {
            "uiTipContent": "Type a date or click on the icon to open the calendar",
            "id": "value",
            "label": "Value",
            "type": "date"
          }
        ]
      },
      "ColorsByValues": {
        "label": "Colors by value",
        "uiTipContent": "Maps diferent values to diferent colors",
        "slots": [
          {
            "uiTipContent": "Insert the values that represent the colors",
            "id": "values",
            "label": "Values",
            "type": "number"
          }, {
            "uiTipContent": "Select a color scale to map your values into. The lowest value will get the leftmost color and the hightest value the rightmost color",
            "id": "colorscale",
            "label": "Color Scale",
            "type": "colorscale"
          }
        ]
      },
      "PercentageByValues": {
        "label": "Percentages by value",
        "uiTipContent": "Maps a set of values into a range of percentages",
        "slots": [
          {
            "uiTipContent": "Insert the values that will be converted to percentages",
            "id": "values",
            "label": "Values",
            "type": "number"
          }, {
            "uiTipContent": "Select the percentage to assign to the minimum of the values",
            "id": "min",
            "label": "Minimum value",
            "type": "percentage"
          }, {
            "uiTipContent": "Select the percentage to assign to the maximum of the values",
            "id": "max",
            "label": "Maximum value",
            "type": "percentage"
          }
        ]
      },
      "ByValues": {
        "label": "Numbers by value",
        "uiTipContent": "Maps a set of values into a range of numbers",
        "slots": [
          {
            "uiTipContent": "Insert the values that will be converted to other numbers",
            "id": "values",
            "label": "Values",
            "type": "number"
          }, {
            "uiTipContent": "Type the number to assign to the minimum of the values",
            "id": "min",
            "label": "Minimum value",
            "type": "number"
          }, {
            "uiTipContent": "Type the number to assign to the maximum of the values",
            "id": "max",
            "label": "Maximum value",
            "type": "number"
          }
        ]
      },
      "PxByValues": {
        "label": "Pixels by value",
        "uiTipContent": "Maps a set of values into a range of pixel values",
        "slots": [
          {
            "uiTipContent": "Insert the values that will be converted to pixel values",
            "id": "values",
            "label": "Values",
            "type": "number"
          }, {
            "uiTipContent": "Type the number of pixels to assign to the minimum of the values",
            "id": "min",
            "label": "Minimum in px",
            "type": "number_px"
          }, {
            "uiTipContent": "Type the number of pixels to assign to the maximum of the values",
            "id": "max",
            "label": "Maximum in px",
            "type": "number_px"
          }
        ]
      },
      "PxByValuesAndDomain": {
        "label": "Pixels by value and domain",
        "uiTipContent": "Maps a set of values into a range of pixel values",
        "slots": [
          {
            "uiTipContent": "Insert the values that will be converted to pixel values",
            "id": "values",
            "label": "Values",
            "type": "number"
          }, {
            "uiTipContent": "Fix the minimum value. It is very useful if values are going to change dynamically",
            "id": "minValues",
            "label": "Minimum value",
            "type": "number"
          }, {
            "uiTipContent": "Fix the maximum value. It is very useful if values are going to change dynamically",
            "id": "maxValues",
            "label": "Maximum value",
            "type": "number"
          }, {
            "uiTipContent": "Type the number of pixels to assign to the minimum of the values",
            "id": "min",
            "label": "Minimum in px",
            "type": "number_px"
          }, {
            "uiTipContent": "Type the number of pixels to assign to the maximum of the values",
            "id": "max",
            "label": "Maximum in px",
            "type": "number_px"
          }
        ]
      },
      "PxRange": {
        "label": "Range of pixels",
        "uiTipContent": "Defines a range of pixels",
        "slots": [
          {
            "uiTipContent": "Type the number of pixels to assign to the minimum of the values",
            "id": "min",
            "label": "Minimum in px",
            "type": "number_px"
          }, {
            "uiTipContent": "Type the number of pixels to assign to the maximum of the values",
            "id": "max",
            "label": "Maximum in px",
            "type": "number_px"
          }
        ]
      },
      "ColorsByCategories": {
        "label": "Colors by category",
        "uiTipContent": "Maps a set of values into a set of colors according to the defined categories",
        "slots": [
          {
            "uiTipContent": "Insert or edit a list that defines a category for each of the items",
            "id": "categories",
            "label": "Categories",
            "type": "Text"
          }, {
            "uiTipContent": "Edit or insert a list that assigns one color to each of the categories",
            "id": "colors",
            "label": "Colors",
            "type": "color"
          }, {
            "uiTipContent": "Select a default color for items without a defined category or categories without a defined color",
            "id": "defaultColor",
            "label": "Default Color",
            "type": "color"
          }
        ]
      },
      "ColorsByScale": {
        "label": "Scale of colors",
        "uiTipContent": "Automatically assigns colors to the set of values",
        "slots": [
          {
            "uiTipContent": "Select a color scale to automatically map the values into",
            "id": "value",
            "label": "Color Scale",
            "type": "colorscale"
          }
        ]
      },
      "Rectangle": {
        "label": "Rectangle",
        "uiTipContent": "Rectangle input",
        "slots": [
          {
            "uiTipContent": "Define a rectangle (?)",
            "id": "value",
            "label": "Rectangle",
            "type": "noinput"
          }
        ]
      },
      "Place": {
        "label": "Places",
        "uiTipContent": "Place input defined by latitude and longitude",
        "slots": [
          {
            "uiTipContent": "Drop the latitude",
            "id": "lat",
            "label": "Latitude",
            "type": "Number"
          }, {
            "uiTipContent": "drop the longitude",
            "id": "lon",
            "label": "Longitude",
            "type": "Number"
          }
        ]
      },
      "PlaceUTM": {
        "label": "UTM Places",
        "uiTipContent": "Place input defined by latitude and longitude",
        "slots": [
          {
            "uiTipContent": "Drop the UTM-X coordinate",
            "id": "utmx",
            "label": "UTM X coordinate",
            "type": "Number"
          }, {
            "uiTipContent": "Drop the UTM-Y coordinate",
            "id": "utmy",
            "label": "UTM Y coordinate",
            "type": "Number"
          }, {
            "uiTipContent": "Drop the UTM Zone ",
            "id": "utmzone",
            "label": "UTM Zone",
            "type": "Number"
          }
        ]
      },
      "Network": {
        "label": "Nodes and relations",
        "uiTipContent": 'Network input defined by its nodes and relations. Learn more about networks <a href="http://www.quadrigram.com/#helpContent/networks" target="_blank">here.</a>',
        "slots": [
          {
            "uiTipContent": "Drop nodes",
            "id": "nodes",
            "label": "Nodes",
            "type": "noinput"
          }, {
            "uiTipContent": "Drop relations",
            "id": "relations",
            "label": "Relations",
            "type": "noinput"
          }
        ]
      },
      "MapView": {
        "label": "Center and zoom",
        "uiTipContent": "Defines how to view a map",
        "slots": [
          {
            "uiTipContent": "Type the zoom level to control the scale of the map",
            "id": "zoom",
            "label": "Zoom",
            "type": "Number"
          }, {
            "uiTipContent": "Type the center of the map as two comma separated values: (latitude,longitude) (?)",
            "id": "center",
            "label": "Center",
            "type": "text"
          }
        ]
      },
      "JustDrop": {
        "label": "List of values",
        "uiTipContent": "Only accepts blocks",
        "slots": [
          {
            "uiTipContent": "Drag and drop a block here",
            "id": "value",
            "label": "Input",
            "type": "noinput"
          }
        ]
      },
      "PrefixSufix": {
        "label": "Prefix and sufix",
        "uiTipContent": "Adds prefixes and sufixes to a set of values. Useful for adding units to values.",
        "slots": [
          {
            "uiTipContent": "Insert a set of texts or numbers",
            "id": "label",
            "label": "Label",
            "type": "text"
          }, {
            "uiTipContent": "Insert a single text to be prefixed to all labels or a list of texts to be mapped",
            "id": "prefix",
            "label": "Prefix",
            "type": "text"
          }, {
            "uiTipContent": "Insert a single text to be sufixed to all labels or a list of texts to be mapped",
            "id": "sufix",
            "label": "Sufix",
            "type": "text"
          }
        ]
      },
      "Deactivated": {
        "label": "Deactivated",
        "uiTipContent": "Deactivates the property",
        "slots": []
      },
      "Transition": {
        "label": "Transition",
        "uiTipContent": "Defines a transition method",
        "slots": [
          {
            "uiTipContent": "Select the type of transition animation",
            "id": "easeType",
            "label": "Ease type of transition",
            "type": "options"
          }, {
            "uiTipContent": "Type the duration of the transition",
            "id": "time",
            "label": "Transition duration in Milliseconds",
            "type": "Number"
          }
        ]
      },
      "SimpleRange": {
        "label": "Range",
        "uiTipContent": "Defines a range with a min and max value",
        "slots": [
          {
            "uiTipContent": "Number input",
            "id": "min",
            "label": "Min",
            "type": "number"
          }, {
            "uiTipContent": "Number input",
            "id": "max",
            "label": "Max",
            "type": "number"
          }
        ]
      },
      "Range": {
        "label": "Range and step",
        "uiTipContent": "Defines a range with a min and max values and a step",
        "slots": [
          {
            "uiTipContent": "Number input",
            "id": "start",
            "label": "Min",
            "type": "number"
          }, {
            "uiTipContent": "Number input",
            "id": "end",
            "label": "Max",
            "type": "number"
          }, {
            "uiTipContent": "Number input",
            "id": "step",
            "label": "Step",
            "type": "number"
          }
        ]
      },
      "ImageUrl": {
        "label": "Image",
        "uiTipContent": "Url to an image file",
        "slots": [
          {
            "uiTipContent": "Open the image picker to select an image from your drive or paste an external url",
            "id": "value",
            "label": "Image url",
            "type": "imageurl"
          }, {
            "uiTipContent": "Select the type scaling",
            "id": "scale",
            "label": "Image scaling",
            "type": "options"
          }, {
            "uiTipContent": "Select wether the image should be tiled",
            "id": "repeat",
            "label": "Image repetition",
            "type": "boolean"
          }
        ]
      },
      "IntensitiesByValues": {
        "label": "Percentages by value",
        "uiTipContent": "Maps a set of values into a range of percentage values",
        "slots": [
          {
            "uiTipContent": "Insert the values that will be converted to percent values",
            "id": "values",
            "label": "Values",
            "type": "number"
          }, {
            "uiTipContent": "Set the percentage to assign to the minimum of the values",
            "id": "min",
            "label": "Minimum intensity",
            "type": "percentage"
          }, {
            "uiTipContent": "Set the percentage to assign to the maximum of the values",
            "id": "max",
            "label": "Maximum intensity",
            "type": "percentage"
          }
        ]
      },
      "Font": {
        "label": "Font",
        "uiTipContent": "Defines a transition method",
        "slots": [
          {
            "uiTipContent": "Select the font family",
            "id": "fontFamily",
            "label": "Font family",
            "type": "options"
          }, {
            "uiTipContent": "Select the font style",
            "id": "fontStyle",
            "label": "Font style",
            "type": "options"
          }
        ]
      }
    };

    return FormatManager;

  })();

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Managers.FontManager = (function() {
    function FontManager() {
      this.quillInjections = __bind(this.quillInjections, this);
      this.initTextBars = __bind(this.initTextBars, this);
      this.loadInFrame = __bind(this.loadInFrame, this);
      this.getFontStyles = __bind(this.getFontStyles, this);
      this.fontsList = __bind(this.fontsList, this);
      this.families = ['Oswald', 'Kreon', 'Roboto', 'Droid Sans', 'Lato', 'Titillium Web', 'Open Sans Condensed', 'Open Sans', 'Verdana', 'Ubuntu', 'Droid Serif', 'Roboto Slab', 'EB Garamond', 'Libre Baskerville', 'Merriweather', 'Georgia', 'Playfair Display', 'Playfair Display SC', 'Old Standard TT'];
      this.wflFamilies = ['Oswald:n3,n4,n7', 'Kreon:n3,n4,n7', 'Roboto:n1,n3,n4,n5,n7,n9,i1,i3,i4,i5,i7,i9', 'Droid Sans:n4,n7', 'Lato:n1,n3,n4,n7,n9,i1,i3,i4,i7,i9', 'Titillium Web:n2,n3,n4,n6,n7,n9,i2,i3,i4,i6,i7', 'Open Sans Condensed:n3,n7,i3', 'Open Sans:n3,n4,n6,n7,n8,i3,i4,i6,i7,i8', 'Verdana:n4,n7,i4,i7', 'Ubuntu:n3,n4,n5,n7,i3,i4,i5,i7', 'Droid Serif:n4,n7,i4,i7', 'Roboto Slab:n1,n3,n4,n7', 'EB Garamond:n4', 'Libre Baskerville:n4,n7,i4', 'Merriweather:n3,n4,n7,n9,i3,i4,i7,i9', 'Georgia:n4,n7,i4,i7', 'Playfair Display:n4,n7,n9,i4,i7,i9', 'Playfair Display SC:n4,n7,n9,i4,i7,i9', 'Old Standard TT:n4,n7,i4'];
      this.familyStyles = {
        "Oswald": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }
        ],
        "Kreon": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }
        ],
        "Roboto": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Thin",
            fontStyle: "normal",
            fontWeight: "100"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Medium",
            fontStyle: "normal",
            fontWeight: "500"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Black",
            fontStyle: "normal",
            fontWeight: "900"
          }, {
            styleName: "Thin-Italic",
            fontStyle: "italic",
            fontWeight: "100"
          }, {
            styleName: "Light-Italic",
            fontStyle: "italic",
            fontWeight: "300"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Medium-Italic",
            fontStyle: "italic",
            fontWeight: "500"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }, {
            styleName: "Black-Italic",
            fontStyle: "italic",
            fontWeight: "900"
          }
        ],
        "Droid Sans": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }
        ],
        "Lato": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Thin",
            fontStyle: "normal",
            fontWeight: "100"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Black",
            fontStyle: "normal",
            fontWeight: "900"
          }, {
            styleName: "Thin-Italic",
            fontStyle: "italic",
            fontWeight: "100"
          }, {
            styleName: "Light Italic",
            fontStyle: "italic",
            fontWeight: "300"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Black-Italic",
            fontStyle: "italic",
            fontWeight: "900"
          }
        ],
        "Titillium Web": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Semi-Light",
            fontStyle: "normal",
            fontWeight: "200"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Semi-Bold",
            fontStyle: "normal",
            fontWeight: "600"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Black",
            fontStyle: "normal",
            fontWeight: "900"
          }, {
            styleName: "Semi-Light-Italic",
            fontStyle: "italic",
            fontWeight: "200"
          }, {
            styleName: "Light-Italic",
            fontStyle: "italic",
            fontWeight: "300"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Semi-Bold-Italic",
            fontStyle: "italic",
            fontWeight: "600"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }
        ],
        "Open Sans Condensed": [
          {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Light-Italic",
            fontStyle: "italic",
            fontWeight: "300"
          }
        ],
        "Open Sans": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Semi-Bold",
            fontStyle: "normal",
            fontWeight: "600"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Extra-Bold",
            fontStyle: "normal",
            fontWeight: "800"
          }, {
            styleName: "Light-Italic",
            fontStyle: "italic",
            fontWeight: "300"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Semi-Bold-Italic",
            fontStyle: "italic",
            fontWeight: "600"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }, {
            styleName: "Extra-Bold-Italic",
            fontStyle: "italic",
            fontWeight: "800"
          }
        ],
        "Verdana": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }
        ],
        "Ubuntu": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Medium",
            fontStyle: "normal",
            fontWeight: "500"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Light-Italic",
            fontStyle: "italic",
            fontWeight: "300"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Medium-Italic",
            fontStyle: "italic",
            fontWeight: "500"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }
        ],
        "Droid Serif": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Italic",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "normal",
            fontWeight: "700"
          }
        ],
        "Roboto Slab": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Thin",
            fontStyle: "normal",
            fontWeight: "100"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }
        ],
        "EB Garamond": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }
        ],
        "Libre Baskerville": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }
        ],
        "Merriweather": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Light",
            fontStyle: "normal",
            fontWeight: "300"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Black",
            fontStyle: "normal",
            fontWeight: "900"
          }, {
            styleName: "Light-Italic",
            fontStyle: "italic",
            fontWeight: "300"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }, {
            styleName: "Black-Italic",
            fontStyle: "italic",
            fontWeight: "900"
          }
        ],
        "Georgia": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }
        ],
        "Playfair Display": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Black",
            fontStyle: "normal",
            fontWeight: "900"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }, {
            styleName: "Black-Italic",
            fontStyle: "italic",
            fontWeight: "900"
          }
        ],
        "Playfair Display SC": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Black",
            fontStyle: "normal",
            fontWeight: "900"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }, {
            styleName: "Bold-Italic",
            fontStyle: "italic",
            fontWeight: "700"
          }, {
            styleName: "Black-Italic",
            fontStyle: "italic",
            fontWeight: "900"
          }
        ],
        "Old Standard TT": [
          {
            styleName: "Regular",
            fontStyle: "normal",
            fontWeight: "400"
          }, {
            styleName: "Bold",
            fontStyle: "normal",
            fontWeight: "700"
          }, {
            styleName: "Italic",
            fontStyle: "italic",
            fontWeight: "400"
          }
        ]
      };
      WebFont.load({
        custom: {
          families: this.wflFamilies,
          urls: [quadrigram.fonts + 'scripts/managers/fonts2.css']
        }
      });
      this.quillInjections();
      this.initTextBars();
    }

    FontManager.prototype.fontsList = function() {
      return this.families;
    };

    FontManager.prototype.getFontStyles = function(fontFamily) {
      return this.familyStyles[fontFamily];
    };

    FontManager.prototype.loadInFrame = function(iframe, callback) {
      return WebFont.load({
        custom: {
          families: this.wflFamilies,
          urls: [quadrigram.fonts + 'scripts/managers/fonts2.css']
        },
        context: iframe,
        timeout: 100,
        active: callback
      });
    };

    FontManager.prototype.initTextBars = function() {
      return this.textbarManager = new quadrigram.Views.Textbar({
        model: null
      });
    };

    FontManager.prototype.quillInjections = function() {
      
      Quill.prototype.getSelection = function() {
      this.editor.checkUpdate();
      return this.editor.selection.getRange(true);
      };
    ;
      
      Quill.modules["toolbar"].prototype.setActive = function(format, value) {
        var $input, input, selectValue, _ref;
        input = this.inputs[format];
        if (input == null) {
          return;
        }
        $input = $(input);
        if (input.tagName === 'INPUT') {
          this.triggering = true;
          if (value == null) {
            value = $input.attr("qm-internal-default")
          }
          if (_.isArray(value))
          {
            $input.val("")
          }
          else
          {
            $input.val(value.replace(/['"]+/g, ''))
          }

          return this.triggering = false;

        }
        else if (input.tagName === 'SELECT') {
          this.triggering = true;
          if (_.isArray(value)) {
            $input.find("option:selected").removeAttr("selected");
          }
          else
          {
            if(value)
              {
                 $input.val(value.replace(/['"]+/g, ''));
              }

          }

          return this.triggering = false;
        } else {
          return $input.toggleClass('ql-active', value || false);
        }
      };
    ;
      return Quill.modules["toolbar"].prototype.initFormat = 
      function(format, callback) {
        var dom = Quill.require("dom")

        var eventName, input, selector;
        selector = ".ql-" + format;
        if (Quill.modules["toolbar"].formats.SELECT[format] != null) {
          selector = "select" + selector;
          eventName = 'change';
        }else if (Quill.modules["toolbar"].formats.INPUT[format] != null) {
          selector = "input" + selector;
          eventName = 'change';
        }else {
          eventName = 'click';
        }
        input = this.container.querySelector(selector);
        if (input == null) {
          return;
        }
        this.inputs[format] = input;

        var self = this
        $(input).on(eventName, function() {

          var value
          if (eventName == "change")
          {
            value = $(input).val()
          }
          else
          {
            value = !$(input).hasClass('ql-active')
          }
          self.preventUpdate = true;

          //REVISE: To comment or not to comment... (?)
          self.quill.focus();

          var range = self.quill.getSelection();
          if (range != null) {
            callback(range, value);
          }
          self.preventUpdate = false;

          return this;
        })
      };
    ;
    };

    return FontManager;

  })();

}).call(this);

(function() {
  'use strict';
  quadrigram.Managers.KeyboardShortcutsManager = (function() {
    function KeyboardShortcutsManager() {
      Mousetrap.bind(['command+z', 'ctrl+z'], function() {
        quadrigram.router.dataModels.currentProject.undo();
        return false;
      });
      Mousetrap.bind(['command+shift+z', 'ctrl+shift+z'], function() {
        quadrigram.router.dataModels.currentProject.redo();
        return false;
      });
      Mousetrap.bind(['command+s', 'ctrl+s'], function() {
        quadrigram.router.saveCurrentProject();
        return false;
      });
      Mousetrap.bind(['command+alt+n', 'ctrl+alt+n'], function() {
        quadrigram.router.loadProject();
        return false;
      });
      Mousetrap.bind(['command+shift+s', 'ctrl+shift+s'], function() {
        quadrigram.router.saveAsCurrentProject();
        return false;
      });
      Mousetrap.bind(['command+shift+r', 'ctrl+shift+r'], function() {
        quadrigram.router.renameCurrentProject();
        return false;
      });
      Mousetrap.bind(['command+m', 'ctrl+m'], function() {
        quadrigram.router.appViews.uiView.toolbar.datamanagerClicked();
        return false;
      });
      Mousetrap.bind(['f10', 'f10'], function() {
        quadrigram.router.appViews.uiView.setDevMode();
        return false;
      });
    }

    return KeyboardShortcutsManager;

  })();

}).call(this);

(function() {
  'use strict';
  quadrigram.Managers.WorkerManager = (function() {
    var allWorkers, pendingJobs, workersPool;

    function WorkerManager() {}

    workersPool = [];

    pendingJobs = [];

    allWorkers = [];

    WorkerManager.prototype.startWorker = function(worker, onmessage) {
      worker.addEventListener('message', onmessage, false);
      return worker.postMessage({
        t: "isReady"
      });
    };

    WorkerManager.prototype.getWorker = function(workerUrl) {
      var newWorker;
      if (workersPool.length > 0) {
        return workersPool.shift();
      } else if (workersPool.length < 8) {
        newWorker = new Worker(workerUrl);
        newWorker.sourceUrl = workerUrl;
        return newWorker;
      } else {
        return null;
      }
    };

    WorkerManager.prototype.releaseWorker = function(worker) {
      worker.removeEventListener('message');
      workersPool.push(worker);
      return this.checkPending();
    };

    WorkerManager.prototype.requestJob = function(workerUrl, onmessage) {
      var worker;
      worker = this.getWorker(workerUrl);
      if (worker) {
        return this.startWorker(worker, onmessage);
      } else {
        return pendingJobs.push({
          "workerUrl": workerUrl,
          "onmessage": onmessage
        });
      }
    };

    WorkerManager.prototype.checkPending = function() {
      var job, shouldCheck, worker, _results;
      shouldCheck = true;
      _results = [];
      while (pendingJobs.length > 0 && shouldCheck) {
        job = pendingJobs[0];
        worker = this.getWorker(job.workerUrl);
        if (worker) {
          this.startWorker(worker, job.onmessage);
          pendingJobs.shift();
          _results.push(shouldCheck = true);
        } else {
          _results.push(shouldCheck = false);
        }
      }
      return _results;
    };

    return WorkerManager;

  })();

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Managers.UiTooltipManager = (function() {
    function UiTooltipManager($root) {
      this.resgisterContent = __bind(this.resgisterContent, this);
      this.createTip = __bind(this.createTip, this);
      this.handleTooltipOver = __bind(this.handleTooltipOver, this);
      $root.on("mouseover", ".ui-tip-target", this.handleTooltipOver);
    }

    UiTooltipManager.prototype.handleTooltipOver = function(e) {
      log("tooltipable hovered");
      if ($(e.currentTarget).attr("data-hasqtip") == null) {
        return this.createTip(e.currentTarget);
      }
    };

    UiTooltipManager.prototype.createTip = function(target) {
      if (($(target).attr("data-ui-tip-id") != null) && (this.uiTooltipDictionary[$(target).attr("data-ui-tip-id")] != null)) {
        return $(target).qtip({
          style: {
            classes: "ui-tip",
            tip: {
              corner: true,
              offset: 5
            }
          },
          content: {
            text: this.uiTooltipDictionary[$(target).attr("data-ui-tip-id")]
          },
          show: {
            delay: 1000,
            ready: true
          },
          hide: {
            event: 'wheel mouseleave',
            fixed: true
          },
          position: {
            target: "mouse",
            my: "bottom left",
            at: "top center",
            viewport: $("body"),
            adjust: {
              mouse: false,
              method: 'flip flip',
              resize: true
            }
          },
          events: {
            hide: function(e, api) {
              return quadrigram.tracker.sendEvent({
                event_type: 306,
                client_data: {
                  uiTipId: $(target).attr("data-ui-tip-id")
                }
              });
            },
            hidden: function(event, api) {
              return $(this).detach();
            },
            show: function(event, api) {
              return $(this).appendTo(api.get('position.container'));
            }
          }
        });
      } else {
        return elog("Ui tip content is missing!");
      }
    };

    UiTooltipManager.prototype.resgisterContent = function(id, content) {
      return this.uiTooltipDictionary[id] = content;
    };

    UiTooltipManager.prototype.uiTooltipDictionary = {
      "export-button": "Share the project by hosting it at quadrigram.com or downloading the HTML5 source code.",
      "undo-button": "Undo",
      "redo-button": "Redo",
      "help-button": "Lessons and tutorials at quadrigram.com",
      "preview-button": "See how the exported project will look like",
      "data-manager": "Load and operate with files",
      "layout-settings": "Configure project global settings such as width, height, layout and colors",
      "block-group-rename": "Double-click to rename",
      "viz-LinkControl": "Creates a text anchor element for navigating to a given url when clicked.",
      "viz-ListChart": "Display a selectable list of items. Useful to make interactive filters.",
      "viz-ScatterPlot": "Compare up to three (X-axis, Y-axis and point radius) numeric variables using a scatter plot.",
      "viz-BarChart": "Group data with rectangular bars with lengths proportional to the values that they represent using a bar chart",
      "viz-StackedBarChart": "Stack series of data on top of each other with a stacked bar chart.",
      "viz-GroupedBarChart": "Groups series of data as rectangular bars next to each other with a bar chart.",
      "viz-LineChart": "Plot multiple time series with a line chart",
      "viz-StackedAreaChart": "Stack multiple time series to represent accumulated totals over time using percentages ",
      "viz-StacksOnTime": "Stack multiple elements belonging to the same time frame such as number of tweets per hour",
      "viz-PointsInAMap": "Draw geolocalized data points over a dynamic map.",
      "viz-TreeMap": "Display hierarchical (tree structured) data a a set of nested rectangles",
      "viz-Network": "Visualize a set of nodes and relations as a graph",
      "viz-RadarChart": "Display multivariate data in the form of a two-dimensional chart",
      "data-block": "Double-click to preview the content of this data block",
      "edit-external": "Edit how the file is interpreted",
      "edit-custom": "Edit the contents of this formula",
      "operator-Identity": "Set manually the value of the block",
      "operator-Filter": "Filter a data block with conditions on the rows and/or columns.",
      "operator-Transpose": "Swap the columns and rows of a table",
      "operator-Join": "Join two blocks with a common identifier into one.",
      "operator-GetNames": "Extract the ids of a block.",
      "operator-SwapIds": "Swap the values and names of a column block.",
      "operator-Sort": "Sort the values of a block according to its ids or values.",
      "operator-Aggregate": "Set the ids of a block to the values of one of its columns, aggregating the other columns.",
      "delete-viz-button": "Delete visualizer",
      "output-viz-button": "View the outputs of this visualizer in the Data Manager",
      "family-data": "Change the data",
      "family-style": "Change styling properties of the visualizer like colors and sizes of elements displayed in the chart",
      "family-select": "Change selection behaviour",
      "family-axis": "Change axis settings",
      "family-tooltip": "Change styling of tooltip inside this visualizer",
      "format-selector": "Select the input format that best suits your needs",
      "Load file": "Load this file from your Google Drive into the current project",
      "delete-file": "The file will be deleted from your Google Drive Quadrigram folder",
      "dropzone": "Upload files to your Google Drive to be able to load them into the project",
      "view-on-drive": "Click to view the original file on Google Drive",
      "refresh-file": "Reload the file from the source",
      "view-mode-toggle": "Choose how to view the data in this block. Note that the data won't change, only how you see it in this preview."
    };

    return UiTooltipManager;

  })();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  quadrigram.Models.QModel = (function(_super) {
    __extends(QModel, _super);

    function QModel() {
      this.destroyR = __bind(this.destroyR, this);
      this.removeFromProject = __bind(this.removeFromProject, this);
      this.bubbleEvent = __bind(this.bubbleEvent, this);
      this.postModelSetup = __bind(this.postModelSetup, this);
      this.postCreate = __bind(this.postCreate, this);
      this.create = __bind(this.create, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.labelChanged = __bind(this.labelChanged, this);
      _ref = QModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    toString:()=>
      return "{"+@.get("id")+","+@.get("value")+"}"
    */


    QModel.prototype.initialize = function(attributes, options) {
      var id;
      if (!attributes || !attributes.id) {
        id = quadrigram.idManager.getId(this.constructor.name.replace("Model", "") + "_");
        this.set("id", id);
        this.create(options);
        _.defer(this.postCreate);
      }
      quadrigram.idManager.addToList(this.get("id"));
      if (this.get("label")) {
        quadrigram.labelManager.addToList(this.get("label"));
      }
      this.on("change:label", this.labelChanged);
      this.modelSetup(options);
      _.defer(this.postModelSetup);
      return this.on("all", this.bubbleEvent);
    };

    QModel.prototype.labelChanged = function() {
      quadrigram.labelManager.removeFromList(this._previousAttributes["label"]);
      return quadrigram.labelManager.addToList(this.get("label"));
    };

    QModel.prototype.modelSetup = function(options) {};

    QModel.prototype.create = function() {};

    QModel.prototype.postCreate = function() {};

    QModel.prototype.postModelSetup = function() {};

    QModel.prototype.bubbleEvent = function() {
      var collection, eventName, eventType, keyContents, model, models, options, relation, _i, _j, _len, _ref1, _results,
        _this = this;
      eventName = arguments[0], model = arguments[1], collection = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), options = arguments[_i++];
      eventType = eventName.indexOf(":") >= 0 ? eventName.substring(0, eventName.indexOf(":")) : eventName;
      if (this.undoableEvents && this.undoableEvents.indexOf(eventName) >= 0) {
        quadrigram.router.dataModels.currentProject.trigger(eventType, model, collection[0], options);
      }
      /*
      if model
        log "++++++++ skipping event?",model.get("id")," event: ",eventName,
        "_attributeChangeFired",model._attributeChangeFired,
        "isNew",model.isNew(),
        "hasChanged",model.hasChanged(),
        "_isInitialized",model._isInitialized,
        "changed",model.changed
      if model && !model._attributeChangeFired && !eventName=="childModified"
        log "++++++++ skipping event!",eventName,model._attributeChangeFired
        return
      */

      if (eventName === "childModified" || (this.bubblingEvents && this.bubblingEvents.indexOf(eventName) >= 0)) {
        _ref1 = this.getRelations();
        _results = [];
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          relation = _ref1[_j];
          if (relation.options.bubbleUp) {
            keyContents = this.get(relation.key);
            models = keyContents ? (keyContents instanceof Backbone.Collection ? keyContents.models : [keyContents]) : [];
            _results.push(_.each(models || [], function(related) {
              if (related) {
                return related.trigger("childModified", _this);
              }
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    QModel.prototype.removeFromProject = function() {
      var i, keyContents, models, relation, rmodel, _i, _j, _len, _ref1, _ref2;
      if (this.beingRemoved) {
        return;
      } else {
        this.beingRemoved = true;
      }
      if (this.get("project")) {
        this.set("project", null);
      }
      _ref1 = this.getRelations();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        relation = _ref1[_i];
        if (relation.options.type === Backbone.HasMany || relation.reverseRelation.bubbleUp) {
          keyContents = this.get(relation.key);
          models = keyContents ? (keyContents instanceof Backbone.Collection ? keyContents.models : [keyContents]) : [];
          if (models.length > 0) {
            for (i = _j = _ref2 = models.length - 1; _j >= 0; i = _j += -1) {
              rmodel = models[i];
              if (rmodel != null) {
                rmodel.removeFromProject();
              }
            }
          }
        }
      }
      return this.beingRemoved = false;
    };

    QModel.prototype.destroyR = function() {
      var i, keyContents, models, relation, rmodel, _i, _j, _len, _ref1, _ref2;
      if (this.beingDestroyed != null) {
        return;
      } else {
        this.beingDestroyed = true;
      }
      this.off();
      _ref1 = this.getRelations();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        relation = _ref1[_i];
        if (relation.options.type === Backbone.HasMany || relation.reverseRelation.bubbleUp) {
          keyContents = this.get(relation.key);
          models = keyContents ? (keyContents instanceof Backbone.Collection ? keyContents.models : [keyContents]) : [];
          if (models.length > 0) {
            for (i = _j = _ref2 = models.length - 1; _j >= 0; i = _j += -1) {
              rmodel = models[i];
              if (rmodel != null) {
                rmodel.destroyR();
              }
            }
          }
        }
      }
      return Backbone.Relational.store.unregister(this);
    };

    return QModel;

  })(Backbone.RelationalModel);

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Models.QValue = (function() {
    function QValue(value, id) {
      this.value = value;
      this.id = id;
      this.toString = __bind(this.toString, this);
    }

    QValue.prototype.toString = function() {
      return "{" + this.id + "," + this.value + "}";
    };

    return QValue;

  })();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.DataBlockModel = (function(_super) {
    __extends(DataBlockModel, _super);

    function DataBlockModel() {
      this.detachAndDestroy = __bind(this.detachAndDestroy, this);
      this.removeFromProject = __bind(this.removeFromProject, this);
      this.summary = __bind(this.summary, this);
      this.toJSON = __bind(this.toJSON, this);
      this.toTemplateData = __bind(this.toTemplateData, this);
      this.getValue = __bind(this.getValue, this);
      this.setData = __bind(this.setData, this);
      this.setDataManual = __bind(this.setDataManual, this);
      this.addValue = __bind(this.addValue, this);
      this.clearData = __bind(this.clearData, this);
      this.setSelected = __bind(this.setSelected, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = DataBlockModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockModel.prototype.undoableEvents = ["change:data:manual", "change:label"];

    DataBlockModel.prototype.bubblingEvents = ["change:data", "change:label", "change:fetchState", "dependency-change"];

    DataBlockModel.prototype.subModelTypes = {
      "Function": "quadrigram.Models.FunctionBlockModel",
      "Editable": "quadrigram.Models.EditableBlockModel",
      "External": "quadrigram.Models.ExternalBlockModel"
    };

    DataBlockModel.prototype.create = function() {};

    DataBlockModel.prototype.modelSetup = function(options) {
      if (!this.get("data")) {
        this.set("data", [], {
          silent: true
        });
      }
      return this.set("fetchState", "ready", {
        silent: true
      });
    };

    DataBlockModel.prototype.setSelected = function(value) {
      this.selected = value;
      return this.trigger("set-selected");
    };

    DataBlockModel.prototype.clearData = function() {
      return this.set("data", []);
    };

    DataBlockModel.prototype.addValue = function(id, value) {
      var values;
      values = this.get("data");
      values.push(new quadrigram.Models.QValue(value, id));
      return this.set("data", values);
    };

    DataBlockModel.prototype.setDataManual = function(value) {
      this.setData(value);
      this.trigger("change:data:manual", this);
      if (this.get("internalOfSlot").get("ownerSlotGroup").get("ownerViz") != null) {
        return quadrigram.tracker.sendEvent({
          event_type: 202,
          event_subtype: 2,
          client_data: {
            owner: this.get("internalOfSlot").get("ownerSlotGroup").get("ownerViz").get("id"),
            action: "manualEdit",
            value: value,
            id: this.get("internalOfSlot").get("ownerSlotGroup").get("propId")
          }
        });
      } else if (this.get("internalOfSlot").get("ownerSlotGroup").get("currentOperation") != null) {
        return quadrigram.tracker.sendEvent({
          event_type: 202,
          event_subtype: 2,
          client_data: {
            owner: this.get("internalOfSlot").get("ownerSlotGroup").get("currentOperation"),
            action: "manualEdit",
            value: value,
            id: this.get("internalOfSlot").get("slotId")
          }
        });
      }
    };

    DataBlockModel.prototype.setData = function(value, options) {
      var v, _i, _j, _k, _len, _len1, _len2, _values;
      if (_.isArray(value)) {
        if (value[0] == null) {
          _values = value;
        } else if (value[0].constructor.name === "QValue") {
          _values = value;
        } else if (value[0].value) {
          _values = [];
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            v = value[_i];
            _values.push(new quadrigram.Models.QValue(v.value, v.id));
          }
        } else if (value[0].children) {
          _values = [];
          for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
            v = value[_j];
            _values.push(new quadrigram.Models.QValue(v.children, v.id));
          }
        } else {
          _values = [];
          for (_k = 0, _len2 = value.length; _k < _len2; _k++) {
            v = value[_k];
            _values.push(new quadrigram.Models.QValue(v));
          }
        }
      } else {
        if (value.constructor.name === "QValue") {
          _values = [value];
        } else {
          _values = [new quadrigram.Models.QValue(value)];
        }
      }
      return this.set("data", _values, options);
    };

    DataBlockModel.prototype.getValue = function() {
      if (this.get("data").length > 1) {
        return this.get("data");
      } else if (this.get("data").length === 1) {
        return this.get("data")[0].value;
      } else {
        return "";
      }
    };

    DataBlockModel.prototype.toTemplateData = function(options) {
      return Backbone.Model.prototype.toJSON.call(this);
    };

    DataBlockModel.prototype.toJSON = function(options) {
      var result;
      result = DataBlockModel.__super__.toJSON.apply(this, arguments);
      if ((options != null) && options.ommitData) {
        if (this.constructor.name === "FunctionBlockModel" || this.constructor.name === "ExternalBlockModel" || this.get("role") === "output") {
          return _.omit(result, ["data", "fetchState"]);
        }
      }
      return result;
    };

    DataBlockModel.prototype.summary = function() {
      var e, result;
      result = "[DataBlock - label: '" + this.get("label") + "'";
      try {
        if (this.get("data") != null) {
          result += " - length: " + this.get("data").length;
          if (this.get("metaData") != null) {
            result += " - idLabel: '" + this.get("metaData").idLabel + "' - valueLabel: '" + this.get("metaData").valueLabel + "'";
          }
          if (this.get("data").length > 0) {
            result += " - sample: [{" + this.get("data")[0].id + "," + this.get("data")[0].value + "}";
            if (this.get("data").length > 1) {
              result += ", {" + this.get("data")[1].id + "," + this.get("data")[1].value + "},...]";
            }
          }
          result += "]";
        }
      } catch (_error) {
        e = _error;
        result += "ERROR ENCODING...]";
      }
      return result;
    };

    DataBlockModel.prototype.removeFromProject = function() {
      var slot, _i, _len, _ref1;
      _ref1 = this.get("insideSlot").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        if (slot != null) {
          slot.popBlock();
        }
      }
      return DataBlockModel.__super__.removeFromProject.call(this);
    };

    DataBlockModel.prototype.detachAndDestroy = function() {
      return this.removeFromProject();
    };

    return DataBlockModel;

  })(quadrigram.Models.QModel);

  quadrigram.Models.DataBlockModel.setup();

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Models.DataBlockData = (function() {
    function DataBlockData(source) {
      this.summary = __bind(this.summary, this);
      this.toString = __bind(this.toString, this);
      this.getBackboneModel = __bind(this.getBackboneModel, this);
      this.set = __bind(this.set, this);
      this.get = __bind(this.get, this);
      if (source instanceof quadrigram.Models.DataBlockModel) {
        this.set("data", source.get("data"));
        this.set("metaData", source.get("metaData"));
      } else if (_.isArray(source)) {
        this.set("data", source);
      } else if (source != null) {
        this.set("data", [source]);
      } else {
        this.set("data", []);
      }
    }

    DataBlockData.prototype.get = function(attrName) {
      /*
      if attrName == "data"
        return @data
      if attrName == "metaData"
        return @metaData
      */

      return this[attrName];
    };

    DataBlockData.prototype.set = function(attrName, value) {
      /*
      if attrName == "data"
        @data = value
      if attrName == "metaData"
        @metaData = value
      */

      return this[attrName] = value;
    };

    DataBlockData.prototype.getBackboneModel = function() {
      return new Backbone.Model(this);
    };

    DataBlockData.prototype.toString = function() {
      var result;
      return result = "[DataBlockData length:" + this.get("data").length + "]";
    };

    DataBlockData.prototype.summary = function() {
      var result;
      return result = "[DataBlockData length:" + this.get("data").length + "]";
    };

    return DataBlockData;

  })();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.DataBlockCollection = (function(_super) {
    __extends(DataBlockCollection, _super);

    function DataBlockCollection() {
      this.toJSON = __bind(this.toJSON, this);
      this.comparator = __bind(this.comparator, this);
      _ref = DataBlockCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockCollection.prototype.model = quadrigram.Models.DataBlockModel;

    DataBlockCollection.prototype.comparator = function(model) {
      var date;
      date = model.get("creation_date");
      if (date) {
        return date;
      }
    };

    DataBlockCollection.prototype.toJSON = function(options) {
      var result,
        _this = this;
      result = DataBlockCollection.__super__.toJSON.apply(this, arguments);
      if ((options != null) && options.ommitData) {
        result = result.filter(function(block) {
          var originalBlock;
          if (block.internalOfSlot != null) {
            return true;
          }
          if (block.insideSlot.length > 0) {
            return true;
          }
          originalBlock = _this.find({
            "id": block.id
          });
          if (originalBlock.get("blockGroup") && originalBlock.get("blockGroup").get("type") === "custom" && originalBlock.get("blockGroup").get("mainBlock") === originalBlock) {
            return true;
          }
          return false;
        });
      }
      return result;
    };

    return DataBlockCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SlotModel = (function(_super) {
    __extends(SlotModel, _super);

    function SlotModel() {
      this.removeFromProject = __bind(this.removeFromProject, this);
      this.getOwnerBlockGroup = __bind(this.getOwnerBlockGroup, this);
      this.getState = __bind(this.getState, this);
      this.getBlock = __bind(this.getBlock, this);
      this.getValue = __bind(this.getValue, this);
      this.setValue = __bind(this.setValue, this);
      this.setExternalBlock = __bind(this.setExternalBlock, this);
      this.animatedPop = __bind(this.animatedPop, this);
      this.popBlock = __bind(this.popBlock, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = SlotModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SlotModel.prototype.relations = [
      {
        type: Backbone.HasOne,
        key: 'internalBlock',
        relatedModel: "quadrigram.Models.DataBlockModel",
        includeInJSON: Backbone.Model.prototype.idAttribute,
        reverseRelation: {
          type: Backbone.HasOne,
          key: 'internalOfSlot',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }, {
        type: Backbone.HasOne,
        key: 'externalBlock',
        relatedModel: "quadrigram.Models.DataBlockModel",
        includeInJSON: Backbone.Model.prototype.idAttribute,
        reverseRelation: {
          key: 'insideSlot',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }
    ];

    SlotModel.prototype.undoableEvents = ["change:externalBlock"];

    SlotModel.prototype.bubblingEvents = ["change:externalBlock"];

    SlotModel.prototype.create = function() {
      var block;
      block = new quadrigram.Models.EditableBlockModel({
        "internalOfSlot": this
      });
      return block.set({
        "blockGroup": this.getOwnerBlockGroup(),
        "label": "List of " + pluralize(this.get("slotId")),
        "origin": "internal"
      }, {
        silent: true
      });
    };

    SlotModel.prototype.modelSetup = function(options) {};

    /*
    it creates an internal block function.
    createAndInsertFunctionBlock:()=>
      ##TODO: Are names still too long?
      fb = new quadrigram.Models.FunctionBlockModel blockGroup:quadrigram.router.dataModels.currentProject.getCustomGroup() ,label:@.get("ownerSlotGroup").get("ownerViz").get("id")+ " - " +@.get("ownerSlotGroup").get("propLabel")
      log "created function block",fb
    */


    SlotModel.prototype.popBlock = function() {
      var block, defaultData;
      if (this.get("internalBlock") == null) {
        block = new quadrigram.Models.EditableBlockModel({
          "internalOfSlot": this
        });
        defaultData = this.get("ownerSlotGroup").getDefaultAt(this.get("slotId"));
        block.set({
          "blockGroup": this.getOwnerBlockGroup(),
          "label": "List of " + pluralize(this.get("slotId")),
          "origin": "internal"
        }, {
          silent: true
        });
        block.setData(defaultData, {
          silent: true
        });
      }
      return this.set("externalBlock", null);
    };

    SlotModel.prototype.animatedPop = function() {
      var _this = this;
      this.trigger("wrongData");
      return _.delay(function() {
        return _this.popBlock();
      }, 2000);
    };

    SlotModel.prototype.setExternalBlock = function(block) {
      var blockValue;
      if (this.get("ownerSlotGroup").get("ownerViz") != null) {
        this.get("ownerSlotGroup").get("ownerViz").newExternal = block;
      }
      this.set("externalBlock", block);
      blockValue = block.summary();
      if (this.get("ownerSlotGroup").get("ownerViz") != null) {
        return quadrigram.tracker.sendEvent({
          event_type: 202,
          event_subtype: 2,
          client_data: {
            owner: this.get("ownerSlotGroup").get("ownerViz").get("id"),
            action: "dropped",
            value: blockValue,
            id: this.get("ownerSlotGroup").get("propId")
          }
        });
      } else if (this.get("ownerSlotGroup").get("currentOperation") != null) {
        return quadrigram.tracker.sendEvent({
          event_type: 202,
          event_subtype: 2,
          client_data: {
            owner: this.get("ownerSlotGroup").get("currentOperation"),
            action: "dropped",
            value: blockValue,
            id: this.get("slotId")
          }
        });
      }
    };

    SlotModel.prototype.setValue = function(value, options) {
      return this.get("internalBlock").setData(value, options);
    };

    SlotModel.prototype.getValue = function() {
      var data;
      if (this.get("externalBlock") != null) {
        data = this.get("externalBlock").getValue();
      } else if (this.get("internalBlock") != null) {
        data = this.get("internalBlock").getValue();
      } else {
        data = null;
      }
      return data;
    };

    SlotModel.prototype.getBlock = function() {
      var block;
      if (this.get("externalBlock") != null) {
        block = this.get("externalBlock");
      } else {
        block = this.get("internalBlock");
      }
      return block;
    };

    SlotModel.prototype.getState = function() {
      var result;
      result = "ready";
      if (this.get("externalBlock") != null) {
        result = this.get("externalBlock").get("fetchState");
      } else {
        result = this.get("internalBlock").get("fetchState");
      }
      return result;
    };

    SlotModel.prototype.getOwnerBlockGroup = function() {
      return this.get("ownerSlotGroup").getBlockGroup();
    };

    SlotModel.prototype.removeFromProject = function() {
      if (this.get("externalBlock") != null) {
        this.popBlock();
      }
      return SlotModel.__super__.removeFromProject.call(this);
    };

    return SlotModel;

  })(quadrigram.Models.QModel);

  quadrigram.Models.SlotModel.setup();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.SlotCollection = (function(_super) {
    __extends(SlotCollection, _super);

    function SlotCollection() {
      _ref = SlotCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SlotCollection.prototype.model = quadrigram.Models.SlotModel;

    return SlotCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.VisualizerModel = (function(_super) {
    __extends(VisualizerModel, _super);

    function VisualizerModel() {
      this.info = __bind(this.info, this);
      this.toJSON = __bind(this.toJSON, this);
      this.handleWrongData = __bind(this.handleWrongData, this);
      this.updateOutput = __bind(this.updateOutput, this);
      this._flattenModel = __bind(this._flattenModel, this);
      this.getFlatModel = __bind(this.getFlatModel, this);
      this.getValues = __bind(this.getValues, this);
      this.getIds = __bind(this.getIds, this);
      this.getPropertiesCollection = __bind(this.getPropertiesCollection, this);
      this.getProperty = __bind(this.getProperty, this);
      this.setProperty = __bind(this.setProperty, this);
      this.insertToDataSlot = __bind(this.insertToDataSlot, this);
      this.activateProperty = __bind(this.activateProperty, this);
      this.createOutputs = __bind(this.createOutputs, this);
      this.createProperties = __bind(this.createProperties, this);
      this.setFrame = __bind(this.setFrame, this);
      this.handleChildModified = __bind(this.handleChildModified, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = VisualizerModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VisualizerModel.DEACTIVATED = "@QDeactivatedWord";

    VisualizerModel.prototype.behaviors = [];

    VisualizerModel.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'propertiesCollection',
        relatedModel: "quadrigram.Models.PropertyModel",
        includeInJSON: true,
        collectionType: "quadrigram.Collections.PropertyCollection",
        reverseRelation: {
          key: 'ownerViz',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }, {
        type: Backbone.HasMany,
        key: 'outputBlocksCollection',
        relatedModel: "quadrigram.Models.DataBlockModel",
        includeInJSON: false,
        collectionType: "quadrigram.Collections.DataBlockCollection",
        reverseRelation: {
          key: 'outputOwnerViz',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }
    ];

    VisualizerModel.prototype.subModelTypes = {
      "BarChart": "quadrigram.Models.BarChartModel",
      "DonutChart": "quadrigram.Models.DonutChartModel",
      "Histogram": "quadrigram.Models.HistogramModel",
      "LineChart": "quadrigram.Models.LineChartModel",
      "TextArea": "quadrigram.Models.TextAreaModel",
      "RectangleArea": "quadrigram.Models.RectangleAreaModel",
      "StackedAreaChart": "quadrigram.Models.StackedAreaChartModel",
      "StacksOnTime": "quadrigram.Models.StacksOnTimeModel",
      "ScatterPlot": "quadrigram.Models.ScatterPlotModel",
      "StackedBarChart": "quadrigram.Models.StackedBarChartModel",
      "GroupedBarChart": "quadrigram.Models.GroupedBarChartModel",
      "PointsInAMap": "quadrigram.Models.PointsInAMapModel",
      "HeatMap": "quadrigram.Models.HeatMapModel",
      "TreeMap": "quadrigram.Models.TreeMapModel",
      "PieChart": "quadrigram.Models.PieChartModel",
      "NetworkVisualizer": "quadrigram.Models.NetworkVisualizerModel",
      "ListChart": "quadrigram.Models.ListChartModel",
      "LinkControl": "quadrigram.Models.LinkControlModel",
      "PictoGram": "quadrigram.Models.PictoGramModel",
      "SliderControl": "quadrigram.Models.SliderControlModel",
      "RangeControl": "quadrigram.Models.RangeControlModel",
      "DropDown": "quadrigram.Models.DropDownModel",
      "DynamicTextControl": "quadrigram.Models.DynamicTextControlModel",
      "TableControl": "quadrigram.Models.TableControlModel",
      "PlayPauseControl": "quadrigram.Models.PlayPauseControlModel",
      "LegendControl": "quadrigram.Models.LegendControlModel",
      "RadarChart": "quadrigram.Models.RadarChartModel",
      "ImageControl": "quadrigram.Models.ImageControlModel",
      "IFrameControl": "quadrigram.Models.IFrameControlModel",
      "YoutubeControl": "quadrigram.Models.YoutubeControlModel",
      "ShareButtonsControl": "quadrigram.Models.ShareButtonsControlModel"
    };

    VisualizerModel.mergeInfo = function(meta, behaviors) {
      var behaviorInfo, behaviorPath, behaviorProperties, mergeProperties, metaProperties, output, _i, _len;
      mergeProperties = function(baseProperties, newProperties) {
        return _.deepObjectExtend(baseProperties, newProperties);
        /*for propertyKeyOnNew of newProperties
          currentProperty = baseProperties[propertyKeyOnNew]
          propertyOnNew = newProperties[propertyKeyOnNew]
          if currentProperty?
            for fieldKeyOnProperty of propertyOnNew
              currentProperty[fieldKeyOnProperty] = propertyOnNew[fieldKeyOnProperty]
          else
            baseProperties[propertyKeyOnNew] = propertyOnNew
        baseProperties
        */

      };
      output = JSON.parse(JSON.stringify(meta));
      metaProperties = output.properties;
      output.properties || (output.properties = {});
      behaviorProperties = {};
      for (_i = 0, _len = behaviors.length; _i < _len; _i++) {
        behaviorPath = behaviors[_i];
        behaviorInfo = eval(behaviorPath).info();
        behaviorProperties = mergeProperties(behaviorProperties, JSON.parse(JSON.stringify(behaviorInfo.properties)));
      }
      output.properties = mergeProperties(output.properties, behaviorProperties);
      return output;
    };

    VisualizerModel.prototype.create = function(options) {
      var blockGroup;
      blockGroup = new quadrigram.Models.VizBlockGroupModel({
        "ownerViz": this,
        "project": quadrigram.router.dataModels.currentProject,
        "label": quadrigram.labelManager.getPropperName(this.get("type"))
      });
      this.createProperties();
      return this.createOutputs();
    };

    VisualizerModel.prototype.modelSetup = function(options) {
      /*WARNIGN: Esto no esta funcionando bien con muchas llamadas seguidas!!!!!*/

      this.flattenModel = _.debounce(this._flattenModel, 10);
      this.createProperties();
      this.createOutputs();
      return this.on("wrongData", this.handleWrongData);
    };

    VisualizerModel.prototype.handleChildModified = function(model) {
      if (!model.get || model.get("role") !== "output") {
        return this.flattenModel();
      }
    };

    VisualizerModel.prototype.setFrame = function(frame) {
      this.getProperty("col").updateValues({
        "value": frame.col
      });
      this.getProperty("row").updateValues({
        "value": frame.row
      });
      this.getProperty("size_x").updateValues({
        "value": frame.size_x
      });
      return this.getProperty("size_y").updateValues({
        "value": frame.size_y
      });
    };

    VisualizerModel.prototype.createProperties = function() {
      var index, p, preProps, propId, propertyDef, savedObject, vizDef;
      vizDef = this.info(this.get("config"));
      preProps = [];
      index = 0;
      for (propId in vizDef.properties) {
        savedObject = this.get("propertiesCollection").findWhere({
          "propId": propId
        });
        if (savedObject == null) {
          propertyDef = vizDef.properties[propId];
          if (propertyDef.deprecated !== true) {
            p = new quadrigram.Models.PreProperty({
              "ownerViz": this,
              "propId": propId,
              "index": index,
              "sortingWeight": propertyDef.sortingWeight
            });
            p.on("activate-property", this.activateProperty, p);
            preProps.push(p);
          }
        } else {
          if (savedObject.get("type") === "propDef") {
            propertyDef = savedObject.attributes;
            p = new quadrigram.Models.PreProperty({
              "ownerViz": this,
              "propId": propId,
              "index": index,
              "sortingWeight": propertyDef.sortingWeight
            }, {
              propDef: propertyDef
            });
            p.on("activate-property", this.activateProperty, p);
            preProps.push(p);
            this.get("propertiesCollection").remove(savedObject, {
              silent: true
            });
          }
        }
        index += 1;
      }
      return this.prePropertiesCollection = new Backbone.Collection(preProps);
    };

    VisualizerModel.prototype.createOutputs = function() {
      var behaviorInfo, blockGroup, currentBlock, outputBlock, outputBlocks, outputId, outputInfo, outputLabel, outputType, _results;
      blockGroup = this.get("blockGroup");
      outputBlocks = [];
      behaviorInfo = this.info();
      _results = [];
      for (outputId in behaviorInfo.outputs) {
        outputInfo = behaviorInfo.outputs[outputId];
        currentBlock = blockGroup.get("blocksCollection").find(function(candidate) {
          return candidate.get("outputId") === outputId;
        });
        outputLabel = outputInfo.label ? outputInfo.label : outputId;
        outputType = outputInfo.outputType ? outputInfo.outputType : "default";
        if (!currentBlock) {
          outputBlock = new quadrigram.Models.DataBlockModel;
          outputBlock.set({
            "blockGroup": blockGroup,
            "outputOwnerViz": this,
            "role": "output",
            "outputId": outputId,
            "outputType": outputType,
            "label": outputLabel,
            "origin": "visualizer"
          }, {
            "silent": true
          });
          _results.push(outputBlock.setData(outputInfo["default"]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    VisualizerModel.prototype.activateProperty = function(preProp) {
      var i, p, preBlock, preSlot, slot, _i, _j, _len, _len1, _ref1, _ref2, _results;
      this.prePropertiesCollection.remove(preProp);
      p = new quadrigram.Models.PropertyModel({
        "ownerViz": preProp.get("ownerViz"),
        "propId": preProp.get("propId"),
        "index": preProp.get("index"),
        "sortingWeight": preProp.get("sortingWeight")
      }, {
        preProp: preProp
      });
      preProp.trigger("replace-model", p);
      _ref1 = preProp.getSlots();
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        preSlot = _ref1[i];
        slot = p.getSlots()[i];
        preSlot.trigger("replace-model", slot);
        if (preSlot.get("externalBlock") != null) {
          slot.set("externalBlock", preSlot.get("externalBlock"));
        }
      }
      _ref2 = preProp.getBlocks();
      _results = [];
      for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
        preBlock = _ref2[i];
        _results.push(preBlock.trigger("replace-model", p.getBlocks()[i]));
      }
      return _results;
    };

    VisualizerModel.prototype.insertToDataSlot = function(block) {
      var prop;
      prop = this.get("propertiesCollection").where({
        "propId": "data"
      })[0];
      if (!prop) {
        prop = this.prePropertiesCollection.where({
          "propId": "data"
        })[0];
      }
      if (!prop) {
        throw "VisualizerModel:setProperty-Property not found: data";
        return;
      }
      return prop.getSlots()[0].setExternalBlock(block);
    };

    VisualizerModel.prototype.setProperty = function(propId, newValues) {
      var prop;
      prop = this.get("propertiesCollection").where({
        "propId": propId
      })[0];
      if (!prop) {
        prop = this.prePropertiesCollection.where({
          "propId": propId
        })[0];
      }
      if (!prop) {
        throw "VisualizerModel:setProperty-Property not found: " + propId;
        return;
      }
      return prop.updateValues(newValues);
    };

    VisualizerModel.prototype.getProperty = function(propId) {
      var prop;
      prop = this.get("propertiesCollection").where({
        "propId": propId
      })[0];
      if (!prop) {
        prop = this.prePropertiesCollection.where({
          "propId": propId
        })[0];
      }
      if (!prop) {
        throw "VisualizerModel:getProperty-Property not found: " + propId;
        return;
      }
      return prop;
    };

    VisualizerModel.prototype.getPropertiesCollection = function() {
      var result;
      if (!this.get("propertiesCollection")) {
        result = this.prePropertiesCollection;
      } else if (!this.prePropertiesCollection) {
        result = this.get("propertiesCollection");
      } else {
        result = new Backbone.Collection([].concat(this.prePropertiesCollection.models, this.get("propertiesCollection").models));
      }
      result.comparator = function(prop) {
        return prop.get("index");
      };
      result.sort();
      return result;
    };

    VisualizerModel.prototype.getIds = function() {
      return this._ids;
    };

    VisualizerModel.prototype.getValues = function() {
      return this._values;
    };

    VisualizerModel.prototype.getFlatModel = function() {
      this._flattenModel();
      return this.flatModel;
    };

    VisualizerModel.prototype._flattenModel = function() {
      var b, changedProperties, globalState, isNew, prop, propState, value, _i, _j, _len, _len1, _ref1, _ref2;
      log("flattening model");
      isNew = false;
      if (this.flatModel == null) {
        this.flatModel = new Backbone.Model();
      }
      if (!this._events["childModified"]) {
        this.on("childModified", this.handleChildModified);
      }
      changedProperties = {};
      globalState = "ready";
      _ref1 = this.getPropertiesCollection().models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        prop = _ref1[_i];
        if (prop.get("family") !== "layout") {
          if (prop.getBlocks().length === 0) {
            value = quadrigram.Models.VisualizerModel.DEACTIVATED;
          } else if (prop.getBlocks().length === 1) {
            value = BlockUtils.adaptFlattenBlockToVisualizers(prop.getBlocks()[0].toJSON());
          } else {
            value = [];
            _ref2 = prop.getBlocks();
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              b = _ref2[_j];
              value.push(BlockUtils.adaptFlattenBlockToVisualizers(b.toJSON()));
            }
          }
          if (this.flatModel.get(prop.get("propId")) !== value) {
            changedProperties[prop.get("propId")] = value;
            if (_.isArray(changedProperties[prop.get("propId")])) {
              changedProperties[prop.get("propId")]["currentFormat"] = prop.get("currentFormat");
            }
          }
          propState = prop.getState();
          if (propState !== "ready") {
            globalState = propState;
          }
        }
      }
      changedProperties["fetchState"] = globalState;
      this.flatModel.set(changedProperties);
      this.flatModel.behaviors = this.constructor.behaviors;
      this.flatModel.original = this;
      return this.newExternal = null;
    };

    VisualizerModel.prototype.updateOutput = function(outputId, newValue, newMeta) {
      var candidates, outputBlock;
      candidates = this.get("outputBlocksCollection").where({
        "role": "output",
        "outputId": outputId
      });
      if (candidates.length > 0) {
        outputBlock = candidates[0];
        if (newMeta != null) {
          outputBlock.set("metaData", newMeta, {
            silent: true
          });
        }
        return outputBlock.setData(newValue);
      } else {

      }
    };

    VisualizerModel.prototype.handleWrongData = function(changed) {
      var key, prop, s, _i, _len, _ref1, _results;
      key = Object.keys(changed)[0];
      prop = this.getPropertiesCollection().findWhere({
        propId: key
      });
      log("last data was wrong", prop);
      if (this.newExternal != null) {
        _ref1 = prop.getSlots();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          s = _ref1[_i];
          _results.push(s.animatedPop());
        }
        return _results;
      }
    };

    VisualizerModel.prototype.toJSON = function(options) {
      var p, result, _i, _len, _ref1;
      result = VisualizerModel.__super__.toJSON.call(this, options);
      _ref1 = this.prePropertiesCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        if (p.defaultsModified) {
          result.propertiesCollection.push(p.toJSON());
        }
      }
      return result;
    };

    VisualizerModel.prototype.info = function() {
      if (this.output == null) {
        this.output = quadrigram.Models.VisualizerModel.mergeInfo(this.constructor.meta, this.constructor.behaviors);
      }
      return this.output;
    };

    return VisualizerModel;

  }).call(this, quadrigram.Models.QModel);

  quadrigram.Models.VisualizerModel.setup();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.VisualizerCollection = (function(_super) {
    __extends(VisualizerCollection, _super);

    function VisualizerCollection() {
      _ref = VisualizerCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VisualizerCollection.prototype.model = quadrigram.Models.VisualizerModel;

    return VisualizerCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.BarChartModel = (function(_super) {
    __extends(BarChartModel, _super);

    function BarChartModel() {
      _ref = BarChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BarChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.OneDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.AxisBehavior", "quadrigram.Models.TooltipBehavior"];

    BarChartModel.meta = {
      "name": "BarChart",
      "properties": {
        "data": {
          "uiTipContent": "Insert a list of numbers to represent as bars",
          "label": "Height of each bar",
          "family": "data",
          "sortingWeight": "1",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example data"
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": 20
                  }, {
                    "id": "2",
                    "value": 30
                  }, {
                    "id": "3",
                    "value": 40
                  }, {
                    "id": "4",
                    "value": 50
                  }, {
                    "id": "5",
                    "value": 60
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each bar",
          "hidden": false,
          "uiTipContent": "Defines the color of each bar"
        },
        "fillOpacities": {
          "label": "Fill opacity of each bar",
          "hidden": true,
          "formats": {
            "Percentage": {
              "defaults": {
                "value": 100
              },
              "multiValues": {
                "value": true
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each bar",
          "hidden": true,
          "multiValues": {
            "value": true
          },
          "defaults": {
            "value": "#FFFFFF"
          }
        },
        "lineThickness": {
          "label": "Outline thickness of each bar"
        },
        "lineOpacities": {
          "label": "Outline opacity of each bar",
          "formats": {
            Percentage: {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 0
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "IdsOnAxis": {
          "label": "Direction of the bars",
          "family": "axis",
          "sortingWeight": "10",
          "hidden": false,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "Vertical"
              },
              "options": {
                "value": ["Vertical", "Horizontal"]
              }
            }
          }
        },
        "gapBetweenBars": {
          "label": "Gap between bars",
          "family": "style",
          "sortingWeight": "29",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "10"
              }
            }
          }
        }
      }
    };

    BarChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(BarChartModel.meta, BarChartModel.behaviors);
      return output;
    };

    return BarChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.DonutChartModel = (function(_super) {
    __extends(DonutChartModel, _super);

    function DonutChartModel() {
      _ref = DonutChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DonutChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.OneDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.SvgBehavior", "quadrigram.Models.TooltipBehavior"];

    DonutChartModel.meta = {
      "name": "DonutChart",
      "properties": {
        "data": {
          "uiTipContent": "Insert a list of numbers to represent as sectors",
          "label": "Angle of each sector",
          "family": "data",
          "sortingWeight": "1",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example data"
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": 20
                  }, {
                    "id": "2",
                    "value": 30
                  }, {
                    "id": "3",
                    "value": 40
                  }, {
                    "id": "4",
                    "value": 50
                  }, {
                    "id": "5",
                    "value": 60
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each sector",
          "hidden": false,
          "uiTipContent": "Defines the color of each sector"
        },
        "fillOpacities": {
          "label": "Fill opacity of each sector",
          "hidden": true,
          "formats": {
            "Percentage": {
              "defaults": {
                "value": 100
              },
              "multiValues": {
                "value": true
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each sector",
          "hidden": true,
          "multiValues": {
            "value": true
          },
          "defaults": {
            "value": "#FFFFFF"
          }
        },
        "lineThickness": {
          "label": "Outline thickness of each sector"
        },
        "lineOpacities": {
          "label": "Outline opacity of each sector",
          "formats": {
            Percentage: {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 0
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "innerRadius": {
          "label": "Inner Radius",
          "uiTipContent": "Percentage of the sector radius assigned to the inner hole",
          "family": "style",
          "sortingWeight": "30",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "60"
              }
            }
          }
        },
        "labelsOption": {
          "label": "Display the sector's labels",
          "uiTipContent": "Choose if display sector's labels or not. The auto mode will not show the labels if more than twenty sectors were drawn",
          "family": "style",
          "sortingWeight": "30",
          "hidden": true,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "auto"
              },
              "options": {
                "value": ["hide labels", "auto", "force to show"]
              }
            }
          }
        }
      }
    };

    DonutChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(DonutChartModel.meta, DonutChartModel.behaviors);
      return output;
    };

    return DonutChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.HistogramModel = (function(_super) {
    __extends(HistogramModel, _super);

    function HistogramModel() {
      _ref = HistogramModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HistogramModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.OneDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.AxisBehavior", "quadrigram.Models.TooltipBehavior"];

    HistogramModel.meta = {
      "name": "BarChart",
      "outputs": {
        "selectedIndexes": {
          "outputType": "selection",
          "default": [],
          "label": "Selected Items"
        },
        "mouseOverItem": {
          "outputType": "OnOver",
          "default": [],
          "label": "Hovered item"
        },
        "selectedColor": {
          "outputType": "styles",
          "default": [],
          "label": "Colors of selection"
        },
        "selectedItemsInBin": {
          "outputType": "selection",
          "default": [],
          "label": "Items in the selected bin"
        },
        "minimumBinValue": {
          "outputType": "selection",
          "default": [],
          "label": "The minimum value of the selected bin(s)"
        },
        "maximumBinValue": {
          "outputType": "selection",
          "default": [],
          "label": "The maximum value of the selected bin(s)"
        }
      },
      "properties": {
        "data": {
          "uiTipContent": "Insert a list of numbers to represent as bars",
          "label": "Height of each bar",
          "family": "data",
          "sortingWeight": "1",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Bins"
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": 1
                  }, {
                    "id": "2",
                    "value": 30
                  }, {
                    "id": "3",
                    "value": 40
                  }, {
                    "id": "4",
                    "value": 50
                  }, {
                    "id": "5",
                    "value": 0
                  }, {
                    "id": "6",
                    "value": 12
                  }, {
                    "id": "7",
                    "value": 34
                  }, {
                    "id": "8",
                    "value": 82
                  }, {
                    "id": "9",
                    "value": 43
                  }, {
                    "id": "10",
                    "value": 33
                  }, {
                    "id": "11",
                    "value": 62
                  }, {
                    "id": "12",
                    "value": 7
                  }, {
                    "id": "13",
                    "value": 12
                  }, {
                    "id": "14",
                    "value": 24
                  }, {
                    "id": "15",
                    "value": 30
                  }, {
                    "id": "16",
                    "value": 43
                  }, {
                    "id": "17",
                    "value": 31
                  }, {
                    "id": "18",
                    "value": 12
                  }, {
                    "id": "19",
                    "value": 83
                  }, {
                    "id": "20",
                    "value": 100
                  }
                ]
              }
            }
          }
        },
        "bins": {
          "uiTipContent": "Specifies how to bin values in the histogram. If the property is set as deactivated, the visualizer will calculate the number of bins to set.",
          "label": "Bins",
          "family": "data",
          "sortingWeight": "1",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Bins"
              },
              "defaults": {
                "value": 5
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each item",
          "uiTipContent": "Defines the color of each item",
          "family": "style",
          "sortingWeight": "21",
          "hidden": false,
          "formats": {
            "Color": {
              "label": "List of colors",
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#293990"
              }
            },
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(26,35,126),   rgb(13,113,146) 12.5%,  rgb(0,191,165)  25%,    rgb(127,204,109) 37.5%, rgb(253,216,53) 50%,     rgb(246,149,67) 62.5%,   rgb(239,83,80) 75%, rgb(187,48,80) 87.5%,    rgb(136,14,79) 100%)"
              }
            }
          }
        },
        "fillOpacities": {
          "label": "Fill opacity of each bar",
          "hidden": true,
          "formats": {
            "Percentage": {
              "defaults": {
                "value": 100
              },
              "multiValues": {
                "value": true
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each bar",
          "hidden": true,
          "multiValues": {
            "value": true
          },
          "defaults": {
            "value": "#FFFFFF"
          }
        },
        "lineThickness": {
          "label": "Outline thickness of each bar"
        },
        "lineOpacities": {
          "label": "Outline opacity of each bar",
          "formats": {
            Percentage: {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 0
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "IdsOnAxis": {
          "label": "Direction of the bars",
          "family": "axis",
          "sortingWeight": "10",
          "hidden": false,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "Vertical"
              },
              "options": {
                "value": ["Vertical", "Horizontal"]
              }
            }
          }
        },
        "gapBetweenBars": {
          "label": "Gap between bars",
          "family": "style",
          "sortingWeight": "29",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "10"
              }
            }
          }
        }
      }
    };

    HistogramModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(HistogramModel.meta, HistogramModel.behaviors);
      return output;
    };

    return HistogramModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.LineChartModel = (function(_super) {
    __extends(LineChartModel, _super);

    function LineChartModel() {
      _ref = LineChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LineChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TwoDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.AxisBehavior", "quadrigram.Models.TwoDimTooltipBehavior"];

    LineChartModel.meta = {
      "name": "LineChart",
      "properties": {
        "data": {
          "uiTipContent": "Insert a block with columns of numbers. Each column will be represented as a line",
          "label": "Data to plot in line",
          "family": "data",
          "sortingWeight": 1,
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example Data"
              },
              "defaults": {
                "value": [
                  {
                    "id": 1,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 20
                      }, {
                        "id": 2,
                        "value": 10
                      }, {
                        "id": 3,
                        "value": 15
                      }, {
                        "id": 4,
                        "value": 30
                      }, {
                        "id": 5,
                        "value": 20
                      }, {
                        "id": 6,
                        "value": 50
                      }, {
                        "id": 7,
                        "value": 50
                      }, {
                        "id": 8,
                        "value": 60
                      }
                    ]
                  }, {
                    "id": 2,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 10
                      }, {
                        "id": 2,
                        "value": 20
                      }, {
                        "id": 3,
                        "value": 25
                      }, {
                        "id": 4,
                        "value": 30
                      }, {
                        "id": 5,
                        "value": 30
                      }, {
                        "id": 6,
                        "value": 45
                      }, {
                        "id": 7,
                        "value": 51
                      }, {
                        "id": 8,
                        "value": 32
                      }
                    ]
                  }, {
                    "id": 3,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 20
                      }, {
                        "id": 2,
                        "value": 12
                      }, {
                        "id": 3,
                        "value": 20
                      }, {
                        "id": 4,
                        "value": 40
                      }, {
                        "id": 5,
                        "value": 30
                      }, {
                        "id": 6,
                        "value": 25
                      }, {
                        "id": 7,
                        "value": 11
                      }, {
                        "id": 8,
                        "value": 22
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "hidden": true,
          "internal": true
        },
        "fillOpacities": {
          "hidden": true,
          "internal": true
        },
        "lineColors": {
          "hidden": false,
          "label": "Color of each line",
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(255,82,82),   rgb(128,137,124) 16.67%, rgb(0,191,165) 33.33%,  rgb(127,204,109) 50%,   rgb(253,216,53) 66.67%,  rgb(127,181,144) 83.33%, rgb(0,145,234) 100%)"
              }
            }
          }
        },
        "lineThickness": {
          "label": "Thickness of each line",
          "formats": {
            "Px": {
              "defaults": {
                "value": "2px"
              }
            }
          }
        },
        "lineOpacities": {
          "label": "Opacity of each line"
        },
        "displayBreakpoints": {
          "label": "Display Control points on line",
          "family": "style",
          "hidden": true,
          "internal": true,
          "formats": {
            "Boolean": {
              "defaults": {
                "value": false
              },
              "multiValues": {
                "value": false
              }
            }
          }
        },
        "selectionLineThickness": {
          "label": "Thickness of selected lines",
          "formats": {
            "Px": {
              "defaults": {
                "value": "4px"
              },
              "multiValues": {
                "value": false
              }
            }
          }
        },
        "selectionLineOpacities": {
          "label": "Opacity of selected lines"
        },
        "selectionLineColors": {
          "label": "Color of selected lines"
        },
        "selectionFillColors": {
          "hidden": true,
          "internal": true
        },
        "selectionFillOpacities": {
          "hidden": true,
          "internal": true
        }
      }
    };

    LineChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(LineChartModel.meta, LineChartModel.behaviors);
      return output;
    };

    return LineChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.RadarChartModel = (function(_super) {
    __extends(RadarChartModel, _super);

    function RadarChartModel() {
      _ref = RadarChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RadarChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TwoDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.SvgBehavior", "quadrigram.Models.RadarTooltipBehavior"];

    RadarChartModel.meta = {
      "name": "RadarChart",
      "properties": {
        "data": {
          "uiTipContent": "Insert a block with columns of numbers. Each column will be represented as a line",
          "label": "Data to plot in line",
          "family": "data",
          "sortingWeight": 1,
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example Data"
              },
              "defaults": {
                "value": [
                  {
                    "id": 1,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 20
                      }, {
                        "id": 2,
                        "value": 10
                      }, {
                        "id": 3,
                        "value": 15
                      }, {
                        "id": 4,
                        "value": 30
                      }, {
                        "id": 5,
                        "value": 20
                      }, {
                        "id": 6,
                        "value": 50
                      }, {
                        "id": 7,
                        "value": 50
                      }, {
                        "id": 8,
                        "value": 60
                      }
                    ]
                  }, {
                    "id": 2,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 10
                      }, {
                        "id": 2,
                        "value": 20
                      }, {
                        "id": 3,
                        "value": 25
                      }, {
                        "id": 4,
                        "value": 30
                      }, {
                        "id": 5,
                        "value": 30
                      }, {
                        "id": 6,
                        "value": 45
                      }, {
                        "id": 7,
                        "value": 51
                      }, {
                        "id": 8,
                        "value": 32
                      }
                    ]
                  }, {
                    "id": 3,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 20
                      }, {
                        "id": 2,
                        "value": 12
                      }, {
                        "id": 3,
                        "value": 20
                      }, {
                        "id": 4,
                        "value": 40
                      }, {
                        "id": 5,
                        "value": 30
                      }, {
                        "id": 6,
                        "value": 25
                      }, {
                        "id": 7,
                        "value": 11
                      }, {
                        "id": 8,
                        "value": 22
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(255,82,82),   rgb(128,137,124) 16.67%, rgb(0,191,165) 33.33%,  rgb(127,204,109) 50%,   rgb(253,216,53) 66.67%,  rgb(127,181,144) 83.33%, rgb(0,145,234) 100%)"
              }
            }
          }
        },
        "fillOpacities": {
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 80
              }
            }
          }
        },
        "lineColors": {
          "hidden": false,
          "label": "Color of each line",
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(255,82,82),   rgb(128,137,124) 16.67%, rgb(0,191,165) 33.33%,  rgb(127,204,109) 50%,   rgb(253,216,53) 66.67%,  rgb(127,181,144) 83.33%, rgb(0,145,234) 100%)"
              }
            }
          }
        },
        "lineThickness": {
          "label": "Thickness of each line",
          "formats": {
            "Px": {
              "defaults": {
                "value": "2px"
              }
            }
          }
        },
        "lineOpacities": {
          "label": "Opacity of each line"
        },
        "axisColor": {
          "uiTipContent": "Defines the color of the axes",
          "label": "Axes color",
          "family": "style",
          "sortingWeight": "26",
          "hidden": true,
          "formats": {
            "Color": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#000000"
              }
            }
          }
        },
        "axisThickness": {
          "uiTipContent": "Defines the thickness of the axes",
          "label": "Axes thickness",
          "family": "style",
          "sortingWeight": "27",
          "hidden": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "1px"
              }
            }
          }
        },
        "axisOpacity": {
          "uiTipContent": "Defines the opacity of the axes",
          "label": "Axes opacity",
          "family": "style",
          "sortingWeight": "28",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "80"
              }
            }
          }
        },
        "labelColor": {
          "label": "Defines the color of labels",
          "family": "style",
          "hidden": true,
          "formats": {
            "Color": {
              "defaults": {
                "value": "#444444"
              },
              "multiValues": {
                "value": false
              }
            }
          }
        },
        "labelfontSize": {
          "label": "Defines the font size of labels",
          "family": "style",
          "hidden": true,
          "formats": {
            "Px": {
              "defaults": {
                "value": "12px"
              },
              "multiValues": {
                "value": false
              }
            }
          }
        }
      }
    };

    RadarChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(RadarChartModel.meta, RadarChartModel.behaviors);
      return output;
    };

    return RadarChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.StackedAreaChartModel = (function(_super) {
    __extends(StackedAreaChartModel, _super);

    function StackedAreaChartModel() {
      _ref = StackedAreaChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StackedAreaChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TwoDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.AxisBehavior", "quadrigram.Models.TwoDimTooltipBehavior"];

    StackedAreaChartModel.meta = {
      "name": "StackedAreaChart",
      "properties": {
        "data": {
          "uiTipContent": "Insert a block with columns of numbers. Each column will be represented as a line separating and the area below",
          "label": "Data to plot in line",
          "family": "data",
          "sortingWeight": "0",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example Data"
              },
              "defaults": {
                "value": [
                  {
                    "id": "example data 1",
                    "value": [
                      {
                        "id": "1",
                        "value": 20
                      }, {
                        "id": "2",
                        "value": 10
                      }, {
                        "id": "3",
                        "value": 15
                      }, {
                        "id": "4",
                        "value": 30
                      }, {
                        "id": "5",
                        "value": 20
                      }, {
                        "id": "6",
                        "value": 50
                      }, {
                        "id": "7",
                        "value": 50
                      }, {
                        "id": "8",
                        "value": 60
                      }
                    ]
                  }, {
                    "id": "example data 2",
                    "value": [
                      {
                        "id": "1",
                        "value": 40
                      }, {
                        "id": "2",
                        "value": 10
                      }, {
                        "id": "3",
                        "value": 32
                      }, {
                        "id": "4",
                        "value": 21
                      }, {
                        "id": "5",
                        "value": 31
                      }, {
                        "id": "6",
                        "value": 40
                      }, {
                        "id": "7",
                        "value": 19
                      }, {
                        "id": "8",
                        "value": 32
                      }
                    ]
                  }, {
                    "id": "example data 3",
                    "value": [
                      {
                        "id": "1",
                        "value": 10
                      }, {
                        "id": "2",
                        "value": 20
                      }, {
                        "id": "3",
                        "value": 21
                      }, {
                        "id": "4",
                        "value": 14
                      }, {
                        "id": "5",
                        "value": 31
                      }, {
                        "id": "6",
                        "value": 12
                      }, {
                        "id": "7",
                        "value": 43
                      }, {
                        "id": "8",
                        "value": 22
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each area",
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(255,82,82),   rgb(128,137,124) 16.67%, rgb(0,191,165) 33.33%,  rgb(127,204,109) 50%,   rgb(253,216,53) 66.67%,  rgb(127,181,144) 83.33%, rgb(0,145,234) 100%)"
              }
            },
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    id: "example data 1",
                    value: "#AEB5DE"
                  }, {
                    id: "example data 2",
                    value: "#989FCC"
                  }, {
                    id: "example data 3",
                    value: "#8D91BC"
                  }
                ]
              }
            }
          }
        },
        "lineOpacities": {
          "label": "Line opacity of each line",
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 0
              }
            }
          }
        }
      }
    };

    StackedAreaChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(StackedAreaChartModel.meta, StackedAreaChartModel.behaviors);
      return output;
    };

    return StackedAreaChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PictoGramModel = (function(_super) {
    __extends(PictoGramModel, _super);

    function PictoGramModel() {
      _ref = PictoGramModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PictoGramModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.OneDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.SvgBehavior", "quadrigram.Models.TooltipBehavior"];

    PictoGramModel.meta = {
      "name": "BarChart",
      "properties": {
        "data": {
          "uiTipContent": "Insert a list of numbers to represent as bars",
          "label": "Height of each bar",
          "family": "data",
          "sortingWeight": "1",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example data"
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": 20
                  }, {
                    "id": "2",
                    "value": 30
                  }, {
                    "id": "3",
                    "value": 40
                  }, {
                    "id": "4",
                    "value": 50
                  }, {
                    "id": "5",
                    "value": 60
                  }
                ]
              }
            }
          }
        },
        "icon_url": {
          "uiTipContent": "Icon fdsfasd fadsf asd ",
          "label": "Icon",
          "family": "style",
          "sortingWeight": "0",
          "hidden": false,
          "formats": {
            "Options": {
              "label": "Build in icons",
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "person"
              },
              "options": {
                "value": ["person", "walk", "bus", "car", "boat", "flight", "train", "hotel", "house", "shopping_car", "clock", "star", "bar", "calendar", "check", "coin", "credit_card", "document", "country", "heart", "music", "radio", "note", "not_interested", "up", "next", "down"]
              }
            },
            "Text": {
              "label": "External image",
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each icon",
          "hidden": false,
          "uiTipContent": "Defines the color of each bar"
        },
        "fillOpacities": {
          "label": "Fill opacity of each icon",
          "hidden": true,
          "formats": {
            "Percentage": {
              "defaults": {
                "value": 100
              },
              "multiValues": {
                "value": true
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "lineColors": {
          "label": "line color of each icon",
          "hidden": true,
          "multiValues": {
            "value": true
          },
          "defaults": {
            "value": "#FFFFFF"
          }
        },
        "lineThickness": {
          "label": "line thickness of each icon"
        },
        "lineOpacities": {
          "label": "line opacity of each icon",
          "formats": {
            Percentage: {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 0
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "numIcons": {
          "label": "Total number of icons",
          "family": "data",
          "formats": {
            Number: {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": 100
              }
            }
          }
        },
        "iconPadding": {
          "label": "Separation between icons",
          "family": "style",
          "formats": {
            Percentage: {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": 20
              }
            }
          }
        }
      }
    };

    PictoGramModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(PictoGramModel.meta, PictoGramModel.behaviors);
      return output;
    };

    return PictoGramModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SlotGroupModel = (function(_super) {
    __extends(SlotGroupModel, _super);

    function SlotGroupModel() {
      this.getBlockGroup = __bind(this.getBlockGroup, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = SlotGroupModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SlotGroupModel.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'slotsCollection',
        relatedModel: "quadrigram.Models.SlotModel",
        includeInJSON: true,
        collectionType: "quadrigram.Collections.SlotCollection",
        reverseRelation: {
          key: 'ownerSlotGroup',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }
    ];

    SlotGroupModel.prototype.subModelTypes = {
      "operator": "quadrigram.Models.OperatorModel",
      "property": "quadrigram.Models.PropertyModel",
      "propDef": "quadrigram.Models.PropDef"
    };

    SlotGroupModel.prototype.create = function() {};

    SlotGroupModel.prototype.modelSetup = function() {};

    SlotGroupModel.prototype.getBlockGroup = function() {};

    return SlotGroupModel;

  })(quadrigram.Models.QModel);

  quadrigram.Models.SlotGroupModel.setup();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.SlotGroupCollection = (function(_super) {
    __extends(SlotGroupCollection, _super);

    function SlotGroupCollection() {
      _ref = SlotGroupCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SlotGroupCollection.prototype.model = quadrigram.Models.SlotGroupModel;

    return SlotGroupCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PropertyModel = (function(_super) {
    __extends(PropertyModel, _super);

    function PropertyModel() {
      this.unregister = __bind(this.unregister, this);
      this.toJSON = __bind(this.toJSON, this);
      this.getDefaultAt = __bind(this.getDefaultAt, this);
      this.getSlots = __bind(this.getSlots, this);
      this.getBlocks = __bind(this.getBlocks, this);
      this.getBlockGroup = __bind(this.getBlockGroup, this);
      this.getSlotValue = __bind(this.getSlotValue, this);
      this.getState = __bind(this.getState, this);
      this.getValues = __bind(this.getValues, this);
      this.getSourceIds = __bind(this.getSourceIds, this);
      this.updateIds = __bind(this.updateIds, this);
      this.updateStaticData = __bind(this.updateStaticData, this);
      this.updateValues = __bind(this.updateValues, this);
      this.createSlots = __bind(this.createSlots, this);
      this.slotsFromManualValues = __bind(this.slotsFromManualValues, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = PropertyModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PropertyModel.prototype.undoableEvents = ["change:currentFormat:preSots"];

    PropertyModel.prototype.bubblingEvents = ["change:currentFormat"];

    PropertyModel.prototype.create = function(options) {
      var defaultFormat, propDef, vizDef;
      if ((options != null) && options.preProp) {
        propDef = options.preProp.propDef;
      } else {
        vizDef = this.get("ownerViz").info(this.get("ownerViz").get("config"));
        propDef = vizDef.properties[this.get("propId")];
      }
      this.propDef = propDef;
      if (_.isArray(this.propDef.formats)) {
        defaultFormat = this.propDef.formats[0];
      } else {
        if (this.propDef.currentFormat != null) {
          defaultFormat = this.propDef.currentFormat;
        } else {
          defaultFormat = Object.keys(this.propDef.formats)[0];
        }
      }
      this.set("label", propDef.label, {
        silent: true
      });
      this.set("family", propDef.family, {
        silent: true
      });
      this.set("hidden", propDef.hidden, {
        silent: true
      });
      this.set("internal", propDef.internal, {
        silent: true
      });
      this.set("currentFormat", defaultFormat, {
        silent: true
      });
      this.createSlots();
      if (_.isArray(this.propDef.formats)) {
        if (this.propDef.defaults) {
          return this.updateValues(this.propDef.defaults);
        } else {
          return this.updateValues({
            "value": ""
          });
        }
      } else {
        return this.updateValues(this.propDef.formats[this.get("currentFormat")].defaults);
      }
    };

    PropertyModel.prototype.modelSetup = function(options) {
      var vizDef,
        _this = this;
      vizDef = this.get("ownerViz").info(this.get("ownerViz").get("config"));
      this.propDef = vizDef.properties[this.get("propId")];
      /*
        This ignores the property that comes from the persistence data
        maybe because it's not part of the view anymore
      */

      if (this.propDef == null) {
        return;
      }
      if (this.propDef.family !== this.get('family')) {
        this.set('family', this.propDef.family);
      }
      if (this.propDef.formats[this.get('currentFormat')] == null) {
        this.set('currentFormat', Object.keys(this.propDef.formats)[0]);
      }
      this.slotsFromManualValues();
      this.updateStaticData();
      return this.on("change:currentFormat", function(changedModel) {
        if (changedModel.changed.currentFormat) {
          _this.trigger("change:currentFormat:preSots", _this);
          _this.createSlots();
          _this.updateValues(_this.propDef.formats[_this.get("currentFormat")].defaults);
          return _this.updateStaticData();
        }
      });
    };

    PropertyModel.prototype.slotsFromManualValues = function() {
      var newBlock, slot, _i, _len, _ref1, _results;
      _ref1 = this.get("slotsCollection").models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        if (slot.get("manualValue") != null) {
          newBlock = new quadrigram.Models.EditableBlockModel({
            "internalOfSlot": slot
          });
          newBlock.set({
            "blockGroup": this.get("ownerViz").get("blockGroup"),
            "label": "List of " + pluralize(slot.get("slotId")),
            "origin": "internal"
          }, {
            silent: true
          });
          slot.set("internalBlock", newBlock);
          newBlock.set("data", slot.get("manualValue"), {
            silent: true
          });
          _results.push(slot.unset("manualValue"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PropertyModel.prototype.createSlots = function() {
      var cached, format, newSlots, slot, slotdef, wasEmpty, _i, _j, _len, _len1, _ref1, _ref2;
      format = quadrigram.router.managers.formatManager.formatDefinitions[this.get("currentFormat")];
      if (!format) {
        elog("Format is undefined!");
      }
      if (!this.cachedSlots) {
        this.cachedSlots = new Backbone.Collection;
      }
      _ref1 = this.get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        if (slot.get("internalBlock") != null) {
          slot.get("internalBlock").set("blockGroup", null);
        }
      }
      this.cachedSlots.add(this.get("slotsCollection").models);
      if (this.get("slotsCollection").models.length === 0 && this.cachedSlots.length === 0) {
        wasEmpty = true;
      }
      newSlots = [];
      if (format !== void 0) {
        _ref2 = format.slots;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          slotdef = _ref2[_j];
          cached = this.cachedSlots.where({
            "formatId": this.get("currentFormat"),
            "slotId": slotdef.id
          });
          if (cached.length > 0) {
            cached[0].get("internalBlock").set("blockGroup", this.get("ownerViz").get("blockGroup"), {
              "silent": true
            });
            newSlots.push(cached[0]);
          } else {
            newSlots.push(new quadrigram.Models.SlotModel({
              "ownerSlotGroup": this,
              "dataType": slotdef.type,
              "formatId": this.get("currentFormat"),
              "slotId": slotdef.id,
              "slotLabel": slotdef.label
            }));
          }
        }
      }
      this.set("slotsCollection", newSlots, {
        "remove": true
      }, {
        silent: true
      });
      if (wasEmpty) {
        return this.trigger("change:slotsCollection");
      }
    };

    PropertyModel.prototype.updateValues = function(newValues) {
      var slot, slotName, _results;
      _results = [];
      for (slotName in newValues) {
        slot = this.get("slotsCollection").where({
          "slotId": slotName
        })[0];
        if (slot) {
          _results.push(slot.setValue(newValues[slotName]));
        } else {
          _results.push(elog("PropertyModel:updateValues -- slot not found: " + slotName));
        }
      }
      return _results;
    };

    PropertyModel.prototype.updateStaticData = function() {
      var slot, slotName, _i, _len, _ref1, _results;
      _ref1 = this.get("slotsCollection").models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        slotName = slot.get("slotId");
        if (slot) {
          if (slot.get("dataType") === "options") {
            slot.options = this.propDef.formats[this.get("currentFormat")].options[slotName];
          }
          if (this.propDef.formats[this.get("currentFormat")].multiValues && this.propDef.formats[this.get("currentFormat")].multiValues[slotName]) {
            _results.push(slot.set("multiValue", true));
          } else {
            _results.push(slot.set("multiValue", false));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PropertyModel.prototype.updateIds = function() {
      var idSourceBlock, idSourceName, idSourceSlot, slot, slotName, _i, _len, _ref1, _results;
      _ref1 = this.get("slotsCollection").models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        slotName = slot.get("slotId");
        if (this.propDef.formats[this.get("currentFormat")].idSource) {
          idSourceName = this.propDef.formats[this.get("currentFormat")].idSource[slotName];
          if (idSourceName) {
            idSourceSlot = this.get("slotsCollection").findWhere({
              "slotId": idSourceName
            });
            if (idSourceSlot) {
              idSourceBlock = idSourceSlot.getBlock();
              _results.push(log("should fill ids with", idSourceBlock));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PropertyModel.prototype.getSourceIds = function(slotId) {
      var idSourceBlock, idSourceName, idSourceProperty, idSourceSlot, qv, result, _i, _len, _ref1;
      result = [];
      if (this.propDef.formats[this.get("currentFormat")].idSource && this.propDef.formats[this.get("currentFormat")].idSource[slotId]) {
        idSourceName = this.propDef.formats[this.get("currentFormat")].idSource[slotId];
        if (idSourceName.indexOf("visualizer.") !== -1) {
          idSourceProperty = idSourceName.replace("visualizer.", "");
          result = this.get("ownerViz")[idSourceProperty];
        } else {
          idSourceSlot = this.get("slotsCollection").findWhere({
            "slotId": idSourceName
          });
          if (idSourceSlot) {
            idSourceBlock = idSourceSlot.getBlock();
            if (idSourceBlock) {
              _ref1 = idSourceBlock.getValue();
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                qv = _ref1[_i];
                result.push(qv.value);
              }
            }
          }
        }
      } else {
        result = this.get("ownerViz").getIds();
      }
      return result;
    };

    PropertyModel.prototype.getValues = function() {
      var result, slot, _i, _len, _ref1;
      if (this.get("slotsCollection").models.length === 1) {
        result = this.get("slotsCollection").models[0].getValue();
      } else {
        result = {};
        _ref1 = this.get("slotsCollection").models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          slot = _ref1[_i];
          result[slot.get("slotId")] = slot.getValue();
        }
      }
      return result;
    };

    PropertyModel.prototype.getState = function() {
      var result, slot, _i, _len, _ref1;
      result = "ready";
      _ref1 = this.get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        if (slot.getState() !== "ready") {
          result = slot.getState();
        }
      }
      return result;
    };

    PropertyModel.prototype.getSlotValue = function(slotName) {
      var slot;
      slot = this.get("slotsCollection").where({
        "slotId": slotName
      })[0];
      if (!slot) {
        elog("slot not found!" + slotName);
        return;
      }
      return slot.getValue();
    };

    PropertyModel.prototype.getBlockGroup = function() {
      return this.get("ownerViz").get("blockGroup");
    };

    PropertyModel.prototype.getBlocks = function() {
      var result, slot, _i, _len, _ref1;
      result = [];
      _ref1 = this.get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        result.push(slot.getBlock());
      }
      return result;
    };

    PropertyModel.prototype.getSlots = function() {
      return this.get("slotsCollection").models;
    };

    PropertyModel.prototype.getDefaultAt = function(id) {
      if (this.propDef.formats[this.get("currentFormat")].defaults) {
        return this.propDef.formats[this.get("currentFormat")].defaults[id];
      } else {
        return "";
      }
    };

    PropertyModel.prototype.toJSON = function(options) {
      var defaultsObject, needsFullSave, result, s, slotObject, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
      _ref1 = this.get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        s = _ref1[_i];
        if (s.get("externalBlock") != null) {
          needsFullSave = true;
        }
      }
      if (needsFullSave != null) {
        result = PropertyModel.__super__.toJSON.call(this, options);
        _ref2 = this.get("slotsCollection").models;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          s = _ref2[_j];
          slotObject = _.findWhere(result.slotsCollection, {
            slotId: s.get("slotId")
          });
          if ((slotObject.externalBlock == null) && (slotObject.internalBlock != null)) {
            slotObject.manualValue = s.get("internalBlock").get("data");
            slotObject.internalBlock = null;
          }
        }
      } else {
        result = this.propDef;
        defaultsObject = result.formats[this.get("currentFormat")].defaults;
        _ref3 = this.get("slotsCollection").models;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          s = _ref3[_k];
          defaultsObject[s.get("slotId")] = s.getValue();
        }
        result.type = "propDef";
        result.propId = this.get("propId");
        result.currentFormat = this.get("currentFormat");
        delete result.relations;
      }
      return result;
    };

    PropertyModel.prototype.unregister = function() {
      /*
      for s in this.get("slotsCollection").models
        Backbone.Relational.store.unregister(s)
      for part in @get("currentExpression").models
        Backbone.Relational.store.unregister(part)
      */

      /*
      @off()
      Backbone.Relational.store.unregister(this.get("slotsCollection"))
      Backbone.Relational.store.unregister(@)
      */

    };

    return PropertyModel;

  })(quadrigram.Models.SlotGroupModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.PropertyCollection = (function(_super) {
    __extends(PropertyCollection, _super);

    function PropertyCollection() {
      _ref = PropertyCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PropertyCollection.prototype.model = function(attrs, options) {
      switch (attrs.type) {
        case 'property':
          return new quadrigram.Collections.PropertyModel(attrs, options);
        case 'preProp':
          return new quadrigram.Models.PropDef(attrs, options);
      }
    };

    return PropertyCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PreProperty = (function(_super) {
    __extends(PreProperty, _super);

    function PreProperty() {
      this.toJSON = __bind(this.toJSON, this);
      this.activate = __bind(this.activate, this);
      this.getState = __bind(this.getState, this);
      this.getSlots = __bind(this.getSlots, this);
      this.getBlocks = __bind(this.getBlocks, this);
      this.getValues = __bind(this.getValues, this);
      this.updateStaticData = __bind(this.updateStaticData, this);
      this.updateValues = __bind(this.updateValues, this);
      this.createSlots = __bind(this.createSlots, this);
      this.initialize = __bind(this.initialize, this);
      _ref = PreProperty.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PreProperty.prototype.initialize = function(attrs, options) {
      var defaultFormat, propDef, vizDef;
      vizDef = this.get("ownerViz").info(this.get("ownerViz").get("config"));
      if ((options != null) && (options.propDef != null)) {
        this.defaultsModified = true;
        propDef = options.propDef;
      } else {
        propDef = vizDef.properties[this.get("propId")];
      }
      this.propDef = propDef;
      if (_.isArray(this.propDef.formats)) {
        defaultFormat = this.propDef.formats[0];
      } else {
        if (this.propDef.currentFormat != null) {
          defaultFormat = this.propDef.currentFormat;
        } else {
          defaultFormat = Object.keys(this.propDef.formats)[0];
        }
      }
      this.set("label", propDef.label, {
        silent: true
      });
      this.set("family", propDef.family, {
        silent: true
      });
      this.set("hidden", propDef.hidden, {
        silent: true
      });
      this.set("internal", propDef.internal, {
        silent: true
      });
      this.set("currentFormat", defaultFormat, {
        silent: true
      });
      this.createSlots();
      if (_.isArray(this.propDef.formats)) {
        if (this.propDef.defaults) {
          this.updateValues(this.propDef.defaults);
        } else {
          this.updateValues({
            "value": ""
          });
        }
      } else {
        this.updateValues(this.propDef.formats[this.get("currentFormat")].defaults, this.propDef.formats[this.get("currentFormat")].defaultsNames);
      }
      return this.updateStaticData();
      /*
      
      if !options? || !options.defaults?
        if !options? then options = {}
        options.defaults = {"value":""}
      
      @updateStaticData()
      
      if options && options.defaults
        @updateValues(options.defaults)
      */

    };

    PreProperty.prototype.createSlots = function() {
      var format, newSlots, slot, slotdef, _i, _len, _ref1;
      format = quadrigram.router.managers.formatManager.formatDefinitions[this.get("currentFormat")];
      if (!format) {
        elog("Format is undefined!");
      }
      newSlots = [];
      if (format !== void 0) {
        _ref1 = format.slots;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          slotdef = _ref1[_i];
          slot = new quadrigram.Models.PreSlot({
            "ownerSlotGroup": this,
            "dataType": slotdef.type,
            "formatId": this.get("currentFormat"),
            "slotId": slotdef.id,
            "slotLabel": slotdef.label
          });
          slot.on("activate-property", this.activate);
          newSlots.push(slot);
        }
      }
      return this.set("slotsCollection", new Backbone.Collection(newSlots));
    };

    PreProperty.prototype.updateValues = function(newValues, names) {
      var candidateName, slot, slotName, _results;
      _results = [];
      for (slotName in newValues) {
        if (names) {
          candidateName = names[slotName];
        }
        slot = this.get("slotsCollection").where({
          "slotId": slotName
        })[0];
        if (slot) {
          slot.setValue(newValues[slotName]);
          if (candidateName) {
            _results.push(slot.getBlock().set("label", candidateName));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(elog("PropertyModel:updateValues -- slot not found: " + slotName));
        }
      }
      return _results;
    };

    PreProperty.prototype.updateStaticData = function() {
      var slot, slotName, _i, _len, _ref1, _results;
      _ref1 = this.get("slotsCollection").models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        slotName = slot.get("slotId");
        if (slot) {
          if (slot.get("dataType") === "options") {
            slot.options = this.propDef.formats[this.get("currentFormat")].options[slotName];
          }
          if (this.propDef.formats[this.get("currentFormat")].multiValues && this.propDef.formats[this.get("currentFormat")].multiValues[slotName]) {
            _results.push(slot.set("multiValue", true));
          } else {
            _results.push(slot.set("multiValue", false));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    PreProperty.prototype.getValues = function() {
      var result, slot, _i, _len, _ref1;
      if (this.get("slotsCollection").models.length === 1) {
        result = this.get("slotsCollection").models[0].getValue();
      } else {
        result = {};
        _ref1 = this.get("slotsCollection").models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          slot = _ref1[_i];
          result[slot.get("slotId")] = slot.getValue();
        }
      }
      return result;
    };

    PreProperty.prototype.getBlocks = function() {
      var result, slot, _i, _len, _ref1;
      result = [];
      _ref1 = this.get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        result.push(slot.getBlock());
      }
      return result;
    };

    PreProperty.prototype.getSlots = function() {
      return this.get("slotsCollection").models;
    };

    PreProperty.prototype.getState = function() {
      return "ready";
    };

    PreProperty.prototype.activate = function() {
      return this.trigger("activate-property", this);
    };

    PreProperty.prototype.toJSON = function(options) {
      var result;
      result = this.propDef;
      result.type = "propDef";
      result.propId = this.get("propId");
      result.label = this.get("label");
      return result;
    };

    return PreProperty;

  })(Backbone.Model);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PreSlot = (function(_super) {
    __extends(PreSlot, _super);

    function PreSlot() {
      this.setExternalBlock = __bind(this.setExternalBlock, this);
      this.activate = __bind(this.activate, this);
      this.getBlock = __bind(this.getBlock, this);
      this.getValue = __bind(this.getValue, this);
      this.setValue = __bind(this.setValue, this);
      this.initialize = __bind(this.initialize, this);
      _ref = PreSlot.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PreSlot.prototype.initialize = function(attrs, options) {
      var block;
      block = new quadrigram.Models.PreEditableBlockModel({
        "internalOfSlot": this
      });
      block.set({
        "label": "List of " + pluralize(this.get("slotId")),
        "origin": "internal"
      }, {
        silent: true
      });
      block.on("activate-property", this.activate);
      return this.set("internalBlock", block);
    };

    PreSlot.prototype.setValue = function(value, options) {
      return this.get("internalBlock").setData(value, options);
    };

    PreSlot.prototype.getValue = function() {
      return this.get("internalBlock").getValue();
    };

    PreSlot.prototype.getBlock = function() {
      return this.get("internalBlock");
    };

    PreSlot.prototype.activate = function() {
      return this.trigger("activate-property");
    };

    PreSlot.prototype.setExternalBlock = function(block) {
      var blockValue;
      this.set("externalBlock", block);
      blockValue = block.summary();
      if (this.get("ownerSlotGroup").get("ownerViz") != null) {
        quadrigram.tracker.sendEvent({
          event_type: 202,
          event_subtype: 2,
          client_data: {
            owner: this.get("ownerSlotGroup").get("ownerViz").get("id"),
            action: "dropped",
            value: blockValue,
            id: this.get("ownerSlotGroup").get("propId")
          }
        });
      } else if (this.get("ownerSlotGroup").get("currentOperation") != null) {
        quadrigram.tracker.sendEvent({
          event_type: 202,
          event_subtype: 2,
          client_data: {
            owner: this.get("ownerSlotGroup").get("currentOperation"),
            action: "dropped",
            value: blockValue,
            id: this.get("slotId")
          }
        });
      }
      return this.activate();
    };

    return PreSlot;

  })(Backbone.Model);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PreEditableBlockModel = (function(_super) {
    __extends(PreEditableBlockModel, _super);

    function PreEditableBlockModel() {
      this.getData = __bind(this.getData, this);
      this.getValue = __bind(this.getValue, this);
      this.setData = __bind(this.setData, this);
      this.activate = __bind(this.activate, this);
      this.initialize = __bind(this.initialize, this);
      _ref = PreEditableBlockModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PreEditableBlockModel.prototype.initialize = function() {
      this.set("metaData", {
        "valueLabel": "Custom value",
        "idLabel": "Custom id",
        "viewMode": "cell"
      }, {
        silent: true
      });
      return this.set("fetchState", "ready", {
        silent: true
      });
    };

    PreEditableBlockModel.prototype.activate = function() {
      return this.trigger("activate-property");
    };

    /*
    actualActivate:()=>
      log "SHOULD ACTIVATE!"
      
      block = new quadrigram.Models.EditableBlockModel "internalOfSlot":@
      block.set({"blockGroup":@getOwnerBlockGroup(),"label":@.get("ownerSlotGroup").get("propId")},{silent:true})
    
    
      ##DA UN POCO DE MIEDO, pero creo que si que podemos hacer off (para que lo coja el gc...)
      @.off()
      return block
    */


    PreEditableBlockModel.prototype.setData = function(value, options) {
      var v, _i, _j, _k, _len, _len1, _len2, _values;
      if (_.isArray(value)) {
        if (value[0] == null) {
          _values = value;
        } else if (value[0].constructor.name === "QValue") {
          _values = value;
        } else if (value[0].value) {
          _values = [];
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            v = value[_i];
            _values.push(new quadrigram.Models.QValue(v.value, v.id));
          }
        } else if (value[0].children) {
          _values = [];
          for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
            v = value[_j];
            _values.push(new quadrigram.Models.QValue(v.children, v.id));
          }
        } else {
          _values = [];
          for (_k = 0, _len2 = value.length; _k < _len2; _k++) {
            v = value[_k];
            _values.push(new quadrigram.Models.QValue(v));
          }
        }
      } else {
        if (value.constructor.name === "QValue") {
          _values = [value];
        } else {
          _values = [new quadrigram.Models.QValue(value)];
        }
      }
      return this.set("data", _values, options);
    };

    PreEditableBlockModel.prototype.getValue = function() {
      if (this.get("data").length > 1) {
        return this.get("data");
      } else if (this.get("data").length === 1) {
        return this.get("data")[0].value;
      } else {
        return "";
      }
    };

    PreEditableBlockModel.prototype.getData = function() {
      return this.get("data");
    };

    return PreEditableBlockModel;

  })(Backbone.Model);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PropDef = (function(_super) {
    __extends(PropDef, _super);

    function PropDef() {
      _ref = PropDef.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return PropDef;

  })(Backbone.RelationalModel);

  quadrigram.Models.PropDef.setup();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.OperatorModel = (function(_super) {
    __extends(OperatorModel, _super);

    function OperatorModel() {
      this.unregister = __bind(this.unregister, this);
      this.removeFromProject = __bind(this.removeFromProject, this);
      this.toJSON = __bind(this.toJSON, this);
      this.getDefaultAt = __bind(this.getDefaultAt, this);
      this.getSourceIds = __bind(this.getSourceIds, this);
      this.getOperationResult = __bind(this.getOperationResult, this);
      this.getBlockGroup = __bind(this.getBlockGroup, this);
      this.getOperationClass = __bind(this.getOperationClass, this);
      this.removeLoopGroup = __bind(this.removeLoopGroup, this);
      this.hasLoopGroup = __bind(this.hasLoopGroup, this);
      this.addLoopGroup = __bind(this.addLoopGroup, this);
      this.setExpressionValues = __bind(this.setExpressionValues, this);
      this.updateSelectedOptions = __bind(this.updateSelectedOptions, this);
      this.updateDynamicParts = __bind(this.updateDynamicParts, this);
      this.changeExpressionPart = __bind(this.changeExpressionPart, this);
      this.createSlots = __bind(this.createSlots, this);
      this.createOperation = __bind(this.createOperation, this);
      this.slotsFromManualValues = __bind(this.slotsFromManualValues, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = OperatorModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    subModelTypes:
      {
        "Identity":"quadrigram.Models.Identity",
        "OpTest":"quadrigram.Models.OpTest"
      }
    */


    OperatorModel.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'currentExpression',
        relatedModel: "quadrigram.Models.ExpressionPart",
        includeInJSON: true,
        collectionType: "quadrigram.Collections.ExpressionPartCollection",
        reverseRelation: {
          key: 'ownerOperator',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }
    ];

    OperatorModel.prototype.undoableEvents = ["change:currentOperation:preSots", "add:currentExpression"];

    OperatorModel.prototype.bubblingEvents = ["change:currentOperation"];

    OperatorModel.availableOperations = {
      "Identity": {
        className: "quadrigram.Models.Identity",
        label: " Set value"
      },
      "Filter": {
        className: "quadrigram.Models.Filter",
        label: "Filter"
      },
      "Transpose": {
        className: "quadrigram.Models.Transpose",
        label: "Transpose"
      },
      "Join": {
        className: "quadrigram.Models.Join",
        label: "Join"
      },
      "GetNames": {
        className: "quadrigram.Models.GetNames",
        label: "Get names"
      },
      /*
      "SwapIds":
        className:"quadrigram.Models.SwapIds"
        label:"Swap Ids"
      */

      "Sort": {
        className: "quadrigram.Models.Sort",
        label: "Sort"
      },
      "Group": {
        className: "quadrigram.Models.Group",
        label: "Group"
      },
      "Summarize": {
        className: "quadrigram.Models.Summarize",
        label: "Summarize"
      },
      "Aggregate": {
        className: "quadrigram.Models.Aggregate",
        label: "Aggregate"
      }
    };

    OperatorModel.prototype.create = function() {
      var blockGroup;
      blockGroup = new quadrigram.Models.FunctionBlockGroupModel;
      blockGroup.set({
        "ownerOp": this,
        "project": quadrigram.router.dataModels.currentProject,
        "label": "opBlockGroup"
      }, {
        silent: true
      });
      this.set("currentOperation", "Identity");
      return this.createOperation(true);
    };

    OperatorModel.prototype.modelSetup = function(options) {
      var _this = this;
      this.slotsFromManualValues();
      return this.on("change:currentOperation", function(changedModel) {
        if (changedModel.changed.currentOperation) {
          _this.trigger("change:currentOperation:preSots", _this);
          return _this.createOperation(true);
        }
      });
    };

    OperatorModel.prototype.slotsFromManualValues = function() {
      var newBlock, s, slot, _i, _j, _len, _len1, _ref1, _ref2;
      _ref1 = this.get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        if (slot.get("manualValue") != null) {
          newBlock = new quadrigram.Models.EditableBlockModel({
            "internalOfSlot": slot
          });
          newBlock.set({
            "blockGroup": this.get("ownerBlock").get("blockGroup"),
            "label": "List of " + pluralize(slot.get("slotId")),
            "origin": "internal"
          }, {
            silent: true
          });
          slot.set("internalBlock", newBlock);
          newBlock.set("data", slot.get("manualValue"), {
            silent: true
          });
          slot.unset("manualValue");
        }
      }
      _ref2 = this.get("slotsCollection").models;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        s = _ref2[_j];
        s.on("change:externalBlock", this.updateDynamicParts);
      }
      return this.updateSelectedOptions();
    };

    OperatorModel.prototype.createOperation = function(silent) {
      var baseExpCollection, baseExpression, part, _i, _len, _ref1;
      if (!this.cachedExpressionParts) {
        this.cachedExpressionParts = new Backbone.Collection;
      }
      this.cachedExpressionParts.add(this.get("currentExpression").models);
      if (this.cachedExpressionParts.where({
        "operationId": this.get("currentOperation")
      }).length > 0) {
        baseExpCollection = new quadrigram.Collections.ExpressionPartCollection(this.cachedExpressionParts.where({
          "operationId": this.get("currentOperation")
        }));
      } else {
        baseExpression = _.map(this.getOperationClass().baseExpression, _.clone);
        baseExpCollection = new quadrigram.Collections.ExpressionPartCollection(baseExpression);
        _ref1 = baseExpCollection.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          part = _ref1[_i];
          part.set("operationId", this.get("currentOperation"));
        }
      }
      this.createSlots(baseExpCollection);
      this.set("currentExpression", baseExpCollection.models, {
        "remove": true,
        "silent": silent
      });
      return this.updateSelectedOptions();
    };

    OperatorModel.prototype.createSlots = function(expression) {
      var cached, newSlots, part, s, slot, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
      if (!this.cachedSlots) {
        this.cachedSlots = new Backbone.Collection;
      }
      _ref1 = this.get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        if (slot.get("internalBlock") != null) {
          slot.get("internalBlock").set("blockGroup", null, {
            silent: true
          });
        }
      }
      this.cachedSlots.add(this.get("slotsCollection").models);
      newSlots = [];
      _ref2 = expression.models;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        part = _ref2[_j];
        if (part.get("type") === "slot") {
          cached = this.cachedSlots.where({
            "operationId": this.get("currentOperation"),
            "slotId": part.get("partId")
          });
          if (cached.length > 0) {
            if (cached[0].get("internalBlock") != null) {
              cached[0].get("internalBlock").set("blockGroup", this.get("blockGroup"), {
                "silent": true
              });
            }
            newSlots.push(cached[0]);
          } else {
            slot = new quadrigram.Models.SlotModel({
              "ownerSlotGroup": this,
              "slotId": part.get("partId")
            });
            slot.set({
              "dataType": part.get("slotType"),
              "operationId": this.get("currentOperation"),
              "multiValue": part.get("multiValue")
            }, {
              silent: true
            });
            slot.options = part.get("options");
            if (part.get("default") != null) {
              slot.setValue(part.get("default"));
            }
            newSlots.push(slot);
          }
        }
      }
      this.set("slotsCollection", newSlots, {
        "remove": true
      }, {
        silent: true
      });
      _ref3 = this.get("slotsCollection").models;
      for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
        s = _ref3[_k];
        s.on("change:externalBlock", this.updateDynamicParts);
      }
      return this.updateSelectedOptions();
    };

    OperatorModel.prototype.changeExpressionPart = function(partId, newSelection) {
      var part;
      part = this.get("currentExpression").where({
        "partId": partId
      })[0];
      if (!part) {
        elog("part not found!");
      } else {
        part.set("selected", newSelection);
      }
      this.get("currentExpression").trigger("change", part);
      return this.updateDynamicParts();
    };

    OperatorModel.prototype.updateDynamicParts = function() {
      var opClass;
      opClass = this.getOperationClass();
      if (opClass.updateDynamicParts) {
        opClass.updateDynamicParts(this.get("currentExpression"), this.get("slotsCollection"));
        return this.updateSelectedOptions();
      }
    };

    OperatorModel.prototype.updateSelectedOptions = function() {
      var opClass, p, slot, _i, _len, _ref1;
      _ref1 = this.get("currentExpression").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        if (p.get("type") === "dynamic") {
          this.updatePartSelectedOption(p);
        }
        if (p.get("type") === "slot") {
          if (p.get("options") != null) {
            slot = this.get("slotsCollection").findWhere({
              "slotId": p.get("partId")
            });
            if (slot.options == null) {
              slot.options = p.get("options");
            }
          }
        }
      }
      opClass = this.getOperationClass();
      if (opClass.updateSelectedOptions) {
        return opClass.updateSelectedOptions(this.get("currentExpression"), this.get("slotsCollection"));
      }
    };

    OperatorModel.prototype.updatePartSelectedOption = function(part) {
      var lastOption;
      lastOption = part.get("selected");
      if (lastOption == null) {
        part.set("selected", part.get("options")[0], {
          "silent": true
        });
      } else if (part.get("options").length > 0 && $.grep(part.get("options"), function(e) {
        return e.value === lastOption.value;
      }).length === 0) {
        part.set("selected", part.get("options")[0], {
          "silent": true
        });
      }
      return null;
    };

    OperatorModel.prototype.setExpressionValues = function(filledExpression) {
      var filledPart, opClass, part, partId, slot, _i, _len, _ref1, _results;
      opClass = this.getOperationClass();
      this.createSlots(this.get("currentExpression"));
      for (partId in filledExpression) {
        if (partId.indexOf("loopBlock") >= 0) {
          this.addLoopGroup(true);
        }
      }
      _ref1 = this.get("currentExpression").models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        if (filledExpression[part.get("partId")] != null) {
          filledPart = filledExpression[part.get("partId")];
          if (part.get("type") === "slot") {
            slot = this.get("slotsCollection").where({
              "operationId": this.get("currentOperation"),
              "slotId": part.get("partId")
            })[0];
            if (BlockUtils.isBlockOrData(filledPart)) {
              _results.push(slot.set("externalBlock", filledPart, {
                "silent": true
              }));
            } else {
              _results.push(slot.setValue(filledPart, {
                "silent": true
              }));
            }
          } else if (part.get("type") === "dynamic") {
            /*
            currentOption = _.find(part.get("options"),(e)->
              e.optId == filledPart
            )
            */

            _results.push(part.set("selected", filledPart, {
              "silent": true
            }));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    OperatorModel.prototype.addLoopGroup = function(silent) {
      var cached, loopCloneDef, newLoopGroup, newSlots, part, slot, totalSlots, _i, _j, _len, _len1, _ref1;
      newSlots = [];
      totalSlots = this.get("currentExpression").models.length;
      /*
      operatorContainer = $(".operation-container")
      operatorWidth = totalSlots*120
      if (operatorWidth > $('.mega-slot-container').width())
        $('.mega-slot-container').append($('<div class="view-more"><span class="scroll-left"></span></div>'))
      operatorContainer.css('width':operatorWidth+'px')
      */

      loopCloneDef = _.map(this.getOperationClass().loopGroup, _.clone);
      for (_i = 0, _len = loopCloneDef.length; _i < _len; _i++) {
        part = loopCloneDef[_i];
        part.partId = part.partId + totalSlots;
        part.operationId = this.get("currentOperation");
      }
      newLoopGroup = new quadrigram.Collections.ExpressionPartCollection(loopCloneDef);
      _ref1 = newLoopGroup.models;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        part = _ref1[_j];
        if (part.get("type") === "slot") {
          cached = !this.cachedSlots ? [] : this.cachedSlots.where({
            "operationId": this.get("currentOperation"),
            "slotId": part.get("partId")
          });
          if (cached.length > 0) {
            cached[0].get("internalBlock").set("blockGroup", this.get("blockGroup"), {
              "silent": true
            });
            newSlots.push(cached[0]);
            part.set({
              "slot": cached[0]
            });
          } else {
            slot = new quadrigram.Models.SlotModel({
              "ownerSlotGroup": this,
              "dataType": part.get("slotType"),
              "slotId": part.get("partId"),
              "operationId": this.get("currentOperation"),
              "multiValue": part.get("multiValue"),
              "sourceId": part.get("sourceId")
            });
            slot.options = part.get("options");
            if (part.get("default") != null) {
              slot.setValue(part.get("default"), {
                "silent": true
              });
            }
            newSlots.push(slot);
          }
        }
      }
      this.set("slotsCollection", newSlots, {
        "remove": false,
        "silent": silent
      });
      this.set("currentExpression", newLoopGroup.models, {
        "remove": false,
        "silent": silent
      });
      this.updateDynamicParts();
      return this.trigger("childModified");
    };

    OperatorModel.prototype.hasLoopGroup = function() {
      var part, _i, _len, _ref1;
      _ref1 = this.get("currentExpression").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        if (part.get("partId").indexOf("loopBlock") >= 0) {
          return true;
        }
      }
      return false;
    };

    OperatorModel.prototype.removeLoopGroup = function(silent) {
      var lastPart, lastPartId, loopId, part, slot, toBeRemoved, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2;
      lastPart = this.get("currentExpression").models[this.get("currentExpression").models.length - 1];
      lastPartId = lastPart.get("partId");
      if (lastPartId.indexOf("loopBlock") >= 0) {
        loopId = lastPartId.substring(lastPartId.indexOf("loopBlock"), lastPartId.length);
        log("last id", loopId);
        toBeRemoved = [];
        _ref1 = this.get("currentExpression").models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          part = _ref1[_i];
          if (part.get("partId").indexOf(loopId) >= 0) {
            toBeRemoved.push(part);
          }
        }
        for (_j = 0, _len1 = toBeRemoved.length; _j < _len1; _j++) {
          part = toBeRemoved[_j];
          this.get("currentExpression").remove(part, {
            "silent": silent
          });
        }
        _ref2 = this.get("slotsCollection").models;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          slot = _ref2[_k];
          if (slot.get("slotId").indexOf(loopId) >= 0) {
            toBeRemoved.push(slot);
          }
        }
        for (_l = 0, _len3 = toBeRemoved.length; _l < _len3; _l++) {
          slot = toBeRemoved[_l];
          this.get("slotsCollection").remove(slot, {
            "silent": silent
          });
        }
        this.updateDynamicParts();
        return this.trigger("childModified");
      }
    };

    OperatorModel.prototype.getOperationClass = function() {
      return eval("quadrigram.Models." + this.get("currentOperation"));
    };

    OperatorModel.prototype.getBlockGroup = function() {
      return this.get("blockGroup");
    };

    OperatorModel.prototype.getOperationResult = function(context) {
      var opClass;
      opClass = this.getOperationClass();
      return opClass.operate(this.get("slotsCollection"), this.get("currentExpression"), context);
    };

    OperatorModel.prototype.getSourceIds = function(slotId) {
      var baseExpCollection, idSourceBlock, idSourceSlot, opClass, part, qv, result, sourceSlotId, _i, _j, _len, _len1, _ref1;
      result = [];
      baseExpCollection = this.get("currentExpression").models;
      for (_i = 0, _len = baseExpCollection.length; _i < _len; _i++) {
        part = baseExpCollection[_i];
        if (part.get("partId") === slotId) {
          if (part.get("idSource") != null) {
            sourceSlotId = part.get("idSource");
          }
          break;
        }
      }
      if (sourceSlotId != null) {
        idSourceSlot = this.get("slotsCollection").findWhere({
          slotId: sourceSlotId
        });
        if (idSourceSlot != null) {
          idSourceBlock = idSourceSlot.getBlock();
          if (idSourceBlock) {
            _ref1 = idSourceBlock.getValue();
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              qv = _ref1[_j];
              result.push(qv.id);
            }
          }
        }
      }
      opClass = this.getOperationClass();
      if (opClass.getSourceIdsPostProcessing != null) {
        result = opClass.getSourceIdsPostProcessing(this.get("slotsCollection"), this.get("currentExpression"), slotId, result);
      }
      return result;
    };

    OperatorModel.prototype.getDefaultAt = function(id) {
      return "";
    };

    OperatorModel.prototype.toJSON = function(options) {
      var result, s, slotObject, _i, _len, _ref1;
      result = OperatorModel.__super__.toJSON.call(this, options);
      _ref1 = this.get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        s = _ref1[_i];
        slotObject = _.findWhere(result.slotsCollection, {
          slotId: s.get("slotId")
        });
        if ((slotObject.externalBlock == null) && (slotObject.internalBlock != null)) {
          if (s.get("internalBlock") != null) {
            slotObject.manualValue = s.get("internalBlock").get("data");
            slotObject.internalBlock = null;
          }
        }
      }
      return result;
    };

    OperatorModel.prototype.removeFromProject = function() {
      if (this.get("blockGroup") != null) {
        this.get("blockGroup").removeFromProject();
      }
      return OperatorModel.__super__.removeFromProject.call(this);
    };

    OperatorModel.prototype.unregister = function() {
      /*
      for s in this.get("slotsCollection").models
        Backbone.Relational.store.unregister(s)
      for part in @get("currentExpression").models
        Backbone.Relational.store.unregister(part)
      */

      /*
      @off()
      Backbone.Relational.store.unregister(this.get("slotsCollection"))
      Backbone.Relational.store.unregister(@get("currentExpression"))
      Backbone.Relational.store.unregister(@)
      */

    };

    return OperatorModel;

  })(quadrigram.Models.SlotGroupModel);

  quadrigram.Models.OperatorModel.setup();

}).call(this);

(function() {
  'use strict';
  quadrigram.Models.Operation = (function() {
    function Operation() {}

    Operation.buildInput = function(slotsCollection, partsCollection) {
      elog("buildInput MUST be overriden!");
      return null;
    };

    Operation.operate = function(slotsCollection, partsCollection, context) {
      var args;
      args = this.buildInput(slotsCollection, partsCollection);
      if (context._events["operation-finished"] == null) {
        context.on("operation-finished", function(data) {
          var blockData;
          blockData = BlockUtils.unflattenBlock(data);
          return context.trigger("operation-end", blockData);
        });
      }
      return this.doOperation.apply(context, args);
    };

    return Operation;

  })();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.Identity = (function(_super) {
    __extends(Identity, _super);

    function Identity() {
      _ref = Identity.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Identity.baseExpression = [
      {
        "type": "label",
        "partId": "label",
        "label": "Set value"
      }, {
        "type": "slot",
        "partId": "value",
        "slotType": "any",
        "multiValue": true
      }
    ];

    Identity.buildInput = function(slotsCollection, partsCollection) {
      return [
        slotsCollection.where({
          "slotId": "value"
        })[0].getBlock()
      ];
    };

    Identity.doOperation = function() {
      var block;
      block = arguments[0];
      return this.trigger("operation-finished", {
        "data": block.get("data"),
        "metaData": block.get("metaData")
      });
    };

    return Identity;

  })(quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.Filter = (function(_super) {
    __extends(Filter, _super);

    function Filter() {
      _ref = Filter.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Filter.baseExpression = [
      {
        "type": "label",
        "partId": "filterLabel",
        "label": "Filter"
      }, {
        "type": "slot",
        "partId": "originalBlock",
        "slotType": "noinput",
        "updateDynamic": "keySelector"
      }, {
        "type": "dynamic",
        "partId": "keySelector",
        "label": "where",
        "options": [],
        "selected": null
      }, {
        "type": "dynamic",
        "partId": "relationSelector",
        "label": "is",
        "options": [
          {
            "optId": "eq",
            "label": "equal to",
            "value": "=="
          }, {
            "optId": "g",
            "label": "greater than",
            "value": ">"
          }, {
            "optId": "geq",
            "label": "greater or equal",
            "value": ">="
          }, {
            "optId": "l",
            "label": "smaller than",
            "value": "<"
          }, {
            "optId": "leq",
            "label": "smaller or equal",
            "value": "<="
          }, {
            "optId": "neq",
            "label": "different from",
            "value": "!="
          }, {
            "optId": "cont",
            "label": "contains",
            "value": "C"
          }, {
            "optId": "ncont",
            "label": "doesn't contain",
            "value": "!C"
          }
        ]
      }, {
        "type": "slot",
        "partId": "comparingValue",
        "slotType": "text"
      }
    ];

    Filter.loopGroup = [
      {
        "type": "dynamic",
        "partId": "conjunctionSelector_loopBlock_",
        "label": "",
        "options": [
          {
            "optId": "and",
            "label": "and",
            "value": "&&"
          }, {
            "optId": "or",
            "label": "or",
            "value": "||"
          }
        ]
      }, {
        "type": "dynamic",
        "partId": "keySelector_loopBlock_",
        "label": "where",
        "options": [],
        "selected": null
      }, {
        "type": "dynamic",
        "partId": "relationSelector_loopBlock_",
        "label": "is",
        "options": [
          {
            "optId": "eq",
            "label": "equal to",
            "value": "=="
          }, {
            "optId": "g",
            "label": "greater than",
            "value": ">"
          }, {
            "optId": "geq",
            "label": "greater or equal",
            "value": ">="
          }, {
            "optId": "l",
            "label": "smaller than",
            "value": "<"
          }, {
            "optId": "leq",
            "label": "smaller or equal",
            "value": "<="
          }, {
            "optId": "neq",
            "label": "different from",
            "value": "!="
          }, {
            "optId": "cont",
            "label": "contains",
            "value": "C"
          }, {
            "optId": "ncont",
            "label": "doesn't contain",
            "value": "!C"
          }
        ]
      }, {
        "type": "slot",
        "partId": "comparingValue_loopBlock_",
        "slotType": "text"
      }
    ];

    Filter.updateDynamicParts = function(partsCollection, slotsCollection) {
      var options, optionsObject, originalBlock, p, startingLevel, totalDepth, _i, _len, _ref1, _results;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      if ((originalBlock != null) && originalBlock.get("fetchState") !== "ready") {
        return;
      }
      if ((originalBlock != null) && (originalBlock.get("data") != null)) {
        if (originalBlock.get("data").length === 0) {
          return;
        }
        startingLevel = BlockUtils.getBlockDepth(originalBlock);
        totalDepth = startingLevel;
        optionsObject = this.getRecursiveOptions(originalBlock, startingLevel, totalDepth);
        options = optionsObject.idOptions;
        options = options.concat(optionsObject.valueOptions);
      } else {
        options = [];
      }
      _ref1 = partsCollection.models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          _results.push(p.set("options", options));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Filter.getRecursiveOptions = function(qvvalue, level, totalDepth, previousOptions) {
      var levelIdLabel, optId, option, options, retroValue, value, _i, _len, _ref1;
      if (!previousOptions) {
        options = {
          "idOptions": [],
          "valueOptions": []
        };
      } else {
        options = previousOptions;
      }
      if (totalDepth === 1) {
        levelIdLabel = "Name";
        levelIdLabel += " (" + qvvalue.get("metaData").idLabel + ")";
        optId = "col";
      } else if (totalDepth - level === 0) {
        levelIdLabel = "Column name";
        if ((qvvalue.get("metaData") != null) && qvvalue.get("metaData").idLabel !== "Column") {
          levelIdLabel += " (" + qvvalue.get("metaData").idLabel + ")";
        }
        optId = "col";
      } else if (totalDepth - level === 1) {
        levelIdLabel = "Row name";
        if ((qvvalue.get("metaData") != null) && qvvalue.get("metaData").idLabel !== "Row") {
          levelIdLabel += " (" + qvvalue.get("metaData").idLabel + ")";
        }
        optId = "row";
      } else {
        if ((qvvalue.get != null) && (qvvalue.get("metaData") != null)) {
          levelIdLabel = qvvalue.get("metaData").idLabel;
          if (qvvalue.get("metaData").idLabel !== "index") {
            levelIdLabel += " name";
          }
        } else {
          levelIdLabel = "Unknown";
        }
        optId = "dim_" + (totalDepth - level);
      }
      if (quadrigram.router.compareVersions(quadrigram.router.dataModels.currentProject.get("pversion"), "0.9.3") < 0) {
        retroValue = level;
      } else {
        retroValue = totalDepth - level;
      }
      option = {
        "optId": optId,
        "label": levelIdLabel,
        "type": "id",
        "level": retroValue
      };
      options.idOptions.push(option);
      if (totalDepth === 1) {
        option = {
          "optId": "col-value",
          "label": "Value (" + qvvalue.get("metaData").valueLabel + ")",
          "value": "__value__",
          "type": "value",
          "level": totalDepth - level
        };
        options.valueOptions.push(option);
      } else if (totalDepth > 1 && totalDepth - level === 0) {
        if (qvvalue instanceof quadrigram.Models.DataBlockModel) {
          if ((qvvalue.get("data")[0] != null) && qvvalue.get("data")[0].value) {
            _ref1 = qvvalue.get("data");
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              value = _ref1[_i];
              option = {
                "optId": value.id,
                "label": value.id,
                "value": value.id,
                "type": "value",
                "level": retroValue
              };
              options.valueOptions.push(option);
            }
          }
        }
      }
      /*
      if totalDepth==1 && level == 1 
        option = {"optId":"col-value","label":"Cell value","value":"__value__","type":"value" ,"level":totalDepth-level}
        options.valueOptions.push(option)
      */

      if (level > 1) {
        Filter.getRecursiveOptions(qvvalue.get("data")[0].value, level - 1, totalDepth, options);
      }
      return options;
    };

    Filter.buildInput = function(slotsCollection, partsCollection) {
      var args, c, conditionBlock, conditions, err, i, loopId, originalBlock, qv, s, slotId, totalDepth, _i, _j, _len, _len1, _ref1, _ref2;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      conditions = [];
      _ref1 = slotsCollection.models;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        s = _ref1[i];
        slotId = s.get("slotId");
        try {
          if (slotId.indexOf("comparingValue") >= 0) {
            loopId = slotId.replace("comparingValue", "");
            c = {};
            c.key = _.clone(partsCollection.where({
              "partId": "keySelector" + loopId
            })[0].get("selected"));
            if (quadrigram.router.compareVersions(quadrigram.router.dataModels.currentProject.get("pversion"), "0.9.3") < 0) {
              totalDepth = BlockUtils.getBlockDepth(originalBlock);
              c.key.level = totalDepth - c.key.level;
            }
            if (originalBlock.get("metaData").viewMode === "table" && BlockUtils.getBlockDepth(originalBlock) === 1 && c.key.level === 1) {
              c.key.level = 0;
            }
            c.comparator = partsCollection.where({
              "partId": "relationSelector" + loopId
            })[0].get("selected").value;
            c.conditionals = [];
            conditionBlock = slotsCollection.where({
              "slotId": "comparingValue" + loopId
            })[0].getBlock();
            _ref2 = conditionBlock.get("data");
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              qv = _ref2[_j];
              if (qv.value !== "") {
                c.conditionals.push(qv.value);
              }
            }
            if (c.conditionals.length === 0) {
              throw new Error("empty conditionals");
            }
            if (partsCollection.where({
              "partId": "conjunctionSelector" + loopId
            })[0] != null) {
              c.conjunction = partsCollection.where({
                "partId": "conjunctionSelector" + loopId
              })[0].get("selected").value;
            }
            conditions.push(c);
          }
        } catch (_error) {
          err = _error;
        }
      }
      args = [originalBlock, conditions];
      return args;
    };

    /**
     * perform the FILTER operation
     * @param  {[type]} originalBlock  [description]
     * @param  {[type]} key            [description]
     * @param  {[type]} comparator     [description]
     * @param  {[type]} conditionBlock [description]
     * @return {[type]}                [description]
    */


    Filter.doOperation = function() {
      var conditions, newOrder, originalBlock, worker,
        _this = this;
      originalBlock = arguments[0];
      conditions = arguments[1];
      log("filter ", conditions);
      if ((originalBlock != null) && (conditions != null) && conditions.length > 0 && BlockUtils.getBlockDepth(originalBlock) > 0) {
        newOrder = null;
        worker = new Worker('scripts/managers/operationworker.js');
        worker.onmessage = function(e) {
          switch (e.data.t) {
            case 'e':
              elog(e.data.d);
              return quadrigram.tracker.sendEvent({
                event_type: 101,
                event_subtype: 1,
                error_code: "filter_error",
                error_data: {
                  stack: e.data.d
                }
              });
            case 'log':
              return log("Worker message: ", e.data.message);
            case 'ready':
              return worker.postMessage({
                t: "operate",
                operation: "filter",
                originalBlock: JSON.stringify(originalBlock),
                newOrder: newOrder,
                conditions: conditions
              });
            case 'operation-finished':
              log("filterEnd ", conditions, e.data.d);
              _this.trigger("operation-finished", e.data.d);
              return worker.terminate();
          }
        };
        return worker.postMessage({
          t: "isReady"
        });
      } else {
        return this.trigger("operation-finished", {
          "data": []
        });
      }
    };

    return Filter;

  }).call(this, quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.Transpose = (function(_super) {
    __extends(Transpose, _super);

    function Transpose() {
      _ref = Transpose.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Transpose.baseExpression = [
      {
        "type": "label",
        "partId": "transpose",
        "label": "Transpose"
      }, {
        "type": "slot",
        "partId": "originalBlock",
        "slotType": "noinput"
      }
    ];

    Transpose.buildInput = function(slotsCollection, partsCollection) {
      var args, originalBlock;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      args = [originalBlock];
      return args;
    };

    /**
     * perform the TRANSPOSE operation
     * @param  {[type]} originalBlock [description]
     * @return {[type]}               [description]
    */


    Transpose.doOperation = function() {
      var conditions, newOrder, originalBlock, _i, _ref1, _results,
        _this = this;
      originalBlock = arguments[0];
      conditions = [];
      if ((originalBlock != null) && (conditions != null) && BlockUtils.getBlockDepth(originalBlock) > 0) {
        newOrder = (function() {
          _results = [];
          for (var _i = _ref1 = BlockUtils.getBlockDepth(originalBlock) - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; _ref1 <= 0 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        if (this.worker != null) {
          this.worker.terminate();
          this.worker = null;
        }
        this.worker = new Worker('scripts/managers/operationworker.js');
        this.worker.onmessage = function(e) {
          switch (e.data.t) {
            case 'e':
              elog(e.data.d);
              return quadrigram.tracker.sendEvent({
                event_type: 101,
                event_subtype: 1,
                error_code: "transpose_error",
                error_data: {
                  stack: e.data.d
                }
              });
            case 'log':
              return log("Worker message: ", e.data.message);
            case 'ready':
              return _this.worker.postMessage({
                t: "operate",
                operation: "transpose",
                originalBlock: JSON.stringify(originalBlock),
                newOrder: newOrder,
                conditions: conditions
              });
            case 'operation-finished':
              _this.trigger("operation-finished", e.data.d);
              _this.worker.terminate();
              return _this.worker = null;
          }
        };
        return this.worker.postMessage({
          t: "isReady"
        });
      } else {
        return this.trigger("operation-finished", {
          "data": []
        });
      }
    };

    return Transpose;

  }).call(this, quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.Join = (function(_super) {
    __extends(Join, _super);

    function Join() {
      _ref = Join.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Join.baseExpression = [
      {
        "type": "label",
        "partId": "combine",
        "label": "Join"
      }, {
        "type": "dynamic",
        "partId": "structureSelector",
        "label": "",
        "options": [
          {
            "optId": "cols",
            "label": "columns",
            "value": 1
          }, {
            "optId": "rows",
            "label": "rows",
            "value": 0
          }, {
            "optId": "tables",
            "label": "tables",
            "value": 2
          }
        ]
      }, {
        "type": "label",
        "partId": "combine",
        "label": "from"
      }, {
        "type": "slot",
        "partId": "first_joinblock",
        "slotType": "noinput"
      }, {
        "type": "label",
        "partId": "and",
        "label": "and"
      }, {
        "type": "slot",
        "partId": "second_joinblock",
        "slotType": "noinput"
      }
    ];

    Join.loopGroup = [
      {
        "type": "label",
        "partId": "and",
        "label": "and"
      }, {
        "type": "slot",
        "partId": "second_joinblock_loopblock_",
        "slotType": "noinput"
      }
    ];

    Join.buildInput = function(slotsCollection, partsCollection) {
      var allBlocks, args, b, s, structureLevel, _i, _len, _ref1;
      allBlocks = [];
      _ref1 = slotsCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        s = _ref1[_i];
        if (s.get("slotId").indexOf("joinblock") >= 0) {
          b = s.getBlock();
          if ((b != null) && b.getValue() !== "") {
            allBlocks.push(b);
          }
        }
      }
      structureLevel = partsCollection.where({
        "partId": "structureSelector"
      })[0].get("selected").value;
      args = [allBlocks, structureLevel];
      return args;
    };

    /**
     * perform the COMBINE operation
     * @param  {[type]} allBlocks [description]
     * @return {[type]}           [description]
    */


    Join.doOperation = function() {
      var blocksArray, structureLevel,
        _this = this;
      blocksArray = arguments[0];
      structureLevel = arguments[1];
      if ((blocksArray != null) && blocksArray.length > 0 && (structureLevel != null)) {
        if (this.worker != null) {
          this.worker.terminate();
          this.worker = null;
        }
        this.worker = new Worker('scripts/managers/operationworker.js');
        this.worker.onmessage = function(e) {
          var b, objectsArray, _i, _len;
          switch (e.data.t) {
            case 'e':
              elog(e.data.d);
              return quadrigram.tracker.sendEvent({
                event_type: 101,
                event_subtype: 1,
                error_code: "join_error",
                error_data: {
                  stack: e.data.d
                }
              });
            case 'log':
              return log("Worker message: ", e.data.message);
            case 'ready':
              objectsArray = [];
              for (_i = 0, _len = blocksArray.length; _i < _len; _i++) {
                b = blocksArray[_i];
                objectsArray.push(JSON.stringify(b));
              }
              return _this.worker.postMessage({
                t: "operate",
                operation: "concat",
                array: objectsArray,
                level: structureLevel
              });
            case 'operation-finished':
              _this.trigger("operation-finished", e.data.d);
              _this.worker.terminate();
              return _this.worker = null;
          }
        };
        return this.worker.postMessage({
          t: "isReady"
        });
      } else {
        return this.trigger("operation-finished", {
          "data": []
        });
      }
    };

    return Join;

  })(quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.GetNames = (function(_super) {
    __extends(GetNames, _super);

    function GetNames() {
      _ref = GetNames.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GetNames.baseExpression = [
      {
        "type": "label",
        "partId": "getNames",
        "label": "Get names"
      }, {
        "type": "dynamic",
        "partId": "levelSelector",
        "label": "of",
        "options": [],
        "selected": null
      }, {
        "type": "label",
        "partId": "from",
        "label": "from"
      }, {
        "type": "slot",
        "partId": "originalBlock",
        "slotType": "noinput"
      }
    ];

    GetNames.updateDynamicParts = function(partsCollection, slotsCollection) {
      var depth, options, originalBlock, viewDirection, viewMode;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      if ((originalBlock != null) && originalBlock.get("fetchState") !== "ready") {
        return;
      }
      depth = BlockUtils.getBlockDepth(originalBlock);
      viewMode = originalBlock.get("metaData").viewMode;
      viewDirection = originalBlock.get("metaData").viewDirection;
      options = [];
      if (depth === 1) {
        if (viewDirection === "col" || (viewMode == null) || viewMode === "list") {
          options.push({
            "optId": "col",
            "label": "rows",
            "value": 1
          });
        } else {
          options.push({
            "optId": "col",
            "label": "columns",
            "value": 1
          });
        }
      }
      if (depth === 2) {
        options.push({
          "optId": "row",
          "label": "rows",
          "value": 2
        });
        options.push({
          "optId": "col",
          "label": "columns",
          "value": 1
        });
      }
      if (depth === 3) {
        options.push({
          "optId": "row",
          "label": "rows",
          "value": 3
        });
        options.push({
          "optId": "col",
          "label": "columns",
          "value": 2
        });
        options.push({
          "optId": "table",
          "label": "tables",
          "value": 1
        });
      }
      return partsCollection.where({
        "partId": "levelSelector"
      })[0].set("options", options);
    };

    GetNames.buildInput = function(slotsCollection, partsCollection) {
      var args, error, originalBlock, structureLevel;
      originalBlock = null;
      structureLevel = 0;
      try {
        originalBlock = slotsCollection.where({
          "slotId": "originalBlock"
        })[0].getBlock();
        structureLevel = partsCollection.where({
          "partId": "levelSelector"
        })[0].get("selected").value;
      } catch (_error) {
        error = _error;
        log("error", error);
      }
      args = [originalBlock, structureLevel];
      return args;
    };

    GetNames.doOperation = function() {
      var originalBlock, structureLevel, trueResult;
      originalBlock = arguments[0];
      structureLevel = arguments[1];
      if ((originalBlock != null) && (structureLevel != null)) {
        trueResult = BlockUtils.getIdsAtLevel(originalBlock, structureLevel);
      } else {
        trueResult = {
          "data": []
        };
      }
      return this.trigger("operation-finished", trueResult);
    };

    return GetNames;

  }).call(this, quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SwapIds = (function(_super) {
    __extends(SwapIds, _super);

    function SwapIds() {
      _ref = SwapIds.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SwapIds.baseExpression = [
      {
        "type": "label",
        "partId": "swapIds",
        "label": "Swap Ids of"
      }, {
        "type": "slot",
        "partId": "originalBlock",
        "slotType": "noinput"
      }
    ];

    SwapIds.buildInput = function(slotsCollection, partsCollection) {
      var args, error, originalBlock, structureLevel;
      originalBlock = null;
      structureLevel = 0;
      try {
        originalBlock = slotsCollection.where({
          "slotId": "originalBlock"
        })[0].getBlock();
      } catch (_error) {
        error = _error;
        log("error", error);
      }
      args = [originalBlock, structureLevel];
      return args;
    };

    SwapIds.doOperation = function() {
      var originalBlock, trueResult;
      originalBlock = arguments[0];
      if ((originalBlock != null) && BlockUtils.getBlockDepth(originalBlock) === 1) {
        trueResult = BlockUtils.swapIds(originalBlock);
      } else {
        trueResult = {
          "data": []
        };
      }
      return this.trigger("operation-finished", trueResult);
    };

    return SwapIds;

  }).call(this, quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.Sort = (function(_super) {
    __extends(Sort, _super);

    function Sort() {
      _ref = Sort.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Sort.baseExpression = [
      {
        "type": "label",
        "partId": "combine",
        "label": "Sort rows of"
      }, {
        "type": "slot",
        "partId": "originalBlock",
        "slotType": "noinput",
        "multiValue": false,
        "updateDynamic": "sortingId"
      }, {
        "type": "dynamic",
        "partId": "sortingId",
        "label": "on column",
        "options": [],
        "selected": null
      }, {
        "type": "label",
        "partId": "inlabel",
        "label": "in"
      }, {
        "type": "dynamic",
        "partId": "direction",
        "label": "",
        "options": [
          {
            "optId": "desc",
            "label": "descending order",
            "value": "desc"
          }, {
            "optId": "asc",
            "label": "ascending order",
            "value": "asc"
          }
        ]
      }
    ];

    Sort.updateDynamicParts = function(partsCollection, slotsCollection) {
      var onlyOption, options, originalBlock, p, qv, _i, _j, _len, _len1, _ref1, _ref2, _results;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      options = [];
      if ((originalBlock != null) && (originalBlock.get("data") != null) && originalBlock.get("data").length > 0) {
        if ((originalBlock.get("data")[0].value.get != null) && (originalBlock.get("data")[0].value.get("data") != null)) {
          _ref1 = originalBlock.get("data");
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            qv = _ref1[_i];
            options.push({
              "optId": qv.id,
              "label": qv.id,
              "value": qv.id
            });
          }
        } else {
          onlyOption = originalBlock.get("metaData").valueLabel;
          options.push({
            "optId": onlyOption,
            "label": onlyOption,
            "value": onlyOption
          });
        }
        if ((originalBlock.get("data")[0].value.get != null) && (originalBlock.get("data")[0].value.get("data") != null)) {
          options.push({
            "optId": "__id__",
            "label": originalBlock.get("data")[0].value.get("metaData").idLabel,
            "value": "__id__"
          });
        } else {
          options.push({
            "optId": "__id__",
            "label": originalBlock.get("metaData").idLabel,
            "value": "__id__"
          });
        }
      }
      _ref2 = partsCollection.models;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        p = _ref2[_j];
        if (p.get("partId").indexOf("sortingId") >= 0) {
          p.set("options", options);
          if (options.length < 2) {
            _results.push(p.set("hidden", true));
          } else {
            _results.push(p.unset("hidden"));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Sort.buildInput = function(slotsCollection, partsCollection) {
      var args, direction, originalBlock, sortingId, structureLevel;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      structureLevel = 0;
      direction = partsCollection.where({
        "partId": "direction"
      })[0].get("selected").value;
      try {
        sortingId = partsCollection.where({
          "partId": "sortingId"
        })[0].get("selected").value;
      } catch (_error) {}
      args = [originalBlock, structureLevel, sortingId, direction];
      return args;
    };

    /**
     * perform the COMBINE operation
     * @param  {[type]} allBlocks [description]
     * @return {[type]}           [description]
    */


    Sort.doOperation = function() {
      var direction, originalBlock, sortingId, structureLevel,
        _this = this;
      originalBlock = arguments[0];
      structureLevel = arguments[1];
      sortingId = arguments[2];
      direction = arguments[3];
      if ((originalBlock != null) && (sortingId != null)) {
        if (this.worker != null) {
          this.worker.terminate();
          this.worker = null;
        }
        this.worker = new Worker('scripts/managers/operationworker.js');
        this.worker.onmessage = function(e) {
          switch (e.data.t) {
            case 'e':
              elog(e.data.d);
              return quadrigram.tracker.sendEvent({
                event_type: 101,
                event_subtype: 1,
                error_code: "sort_error",
                error_data: {
                  stack: e.data.d
                }
              });
            case 'log':
              return log("Worker message: ", e.data.message);
            case 'ready':
              return _this.worker.postMessage({
                t: "operate",
                operation: "sort",
                originalBlock: JSON.stringify(originalBlock),
                structureLevel: structureLevel,
                sortingId: sortingId,
                direction: direction
              });
            case 'operation-finished':
              _this.trigger("operation-finished", e.data.d);
              _this.worker.terminate();
              return _this.worker = null;
          }
        };
        return this.worker.postMessage({
          t: "isReady"
        });
      } else {
        return this.trigger("operation-finished", {
          "data": []
        });
      }
    };

    return Sort;

  })(quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.Aggregate = (function(_super) {
    __extends(Aggregate, _super);

    function Aggregate() {
      _ref = Aggregate.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Aggregate.baseExpression = [
      {
        "type": "label",
        "partId": "aggName",
        "label": "Aggregate"
      }, {
        "type": "slot",
        "partId": "originalBlock",
        "slotType": "noinput",
        "updateDynamic": "keySelector"
      }, {
        "type": "dynamic",
        "partId": "keySelector",
        "label": "using column",
        "options": [],
        "selected": null
      }, {
        "type": "label",
        "partId": "andaslabel",
        "label": "as id and aggregating each column"
      }, {
        "type": "slot",
        "partId": "modesSelector",
        "label": "",
        "slotType": "options",
        "multiValue": true,
        "idSource": "originalBlock",
        "options": [
          {
            "value": "add",
            "label": "by adding"
          }, {
            "value": "mean",
            "label": "as the mean"
          }, {
            "value": "count",
            "label": "by counting"
          }, {
            "value": "asblock",
            "label": "as a list"
          }, {
            "value": "min",
            "label": "minimum value"
          }, {
            "value": "max",
            "label": "maximum value"
          }, {
            "value": "first",
            "label": "first value"
          }, {
            "value": "last",
            "label": "last value"
          }, {
            "value": "ignore",
            "label": "ignore"
          }
        ],
        "default": "add"
      }
    ];

    Aggregate.loopGroup = [
      {
        "type": "label",
        "partId": "andthenlabel_loopBlock_",
        "label": "and then (for each row) aggregate"
      }, {
        "type": "dynamic",
        "partId": "keySelector_loopBlock_",
        "label": "using column",
        "options": [],
        "selected": null
      }, {
        "type": "label",
        "partId": "andaslabel_loopBlock_",
        "label": "as id and aggregating each column"
      }, {
        "type": "slot",
        "partId": "modesSelector_loopBlock_",
        "label": "",
        "slotType": "options",
        "multiValue": true,
        "idSource": "originalBlock",
        "options": [
          {
            "value": "add",
            "label": "by adding"
          }, {
            "value": "mean",
            "label": "as the mean"
          }, {
            "value": "count",
            "label": "by counting"
          }, {
            "value": "asblock",
            "label": "as a list"
          }, {
            "value": "min",
            "label": "minimum value"
          }, {
            "value": "max",
            "label": "maximum value"
          }, {
            "value": "first",
            "label": "first value"
          }, {
            "value": "last",
            "label": "last value"
          }, {
            "value": "ignore",
            "label": "ignore"
          }
        ],
        "default": "asblock"
      }
    ];

    Aggregate.updateDynamicParts = function(partsCollection, slotsCollection) {
      var options, originalBlock, p, qv, _i, _j, _len, _len1, _ref1, _ref2, _results;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      if ((originalBlock != null) && originalBlock.get("fetchState") !== "ready") {
        return;
      }
      if ((originalBlock != null) && (originalBlock.get("data") != null)) {
        options = [];
        _ref1 = originalBlock.get("data");
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          qv = _ref1[_i];
          options.push({
            "optId": qv.id,
            "label": qv.id,
            "value": qv.id
          });
        }
      } else {
        options = [];
      }
      _ref2 = partsCollection.models;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        p = _ref2[_j];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          _results.push(p.set("options", options));
        } else {
          _results.push(void 0);
        }
        /*
        FALTA HACER QUE SE "actualizen" los defaults del slot de mode (slot.options) pero no creo que deba ser aqui
        DEBERIA SER EL SLOT ON "modelSetup" o algo asi...
        
        if p.get("partId").indexOf("modesSelector")>=0
          p.set("options",options)
        */

      }
      return _results;
    };

    Aggregate.updateSelectedOptions = function(partsCollection, slotsCollection) {
      var allOptions, forbiddenOptionValues, myOptions, o, p, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _results;
      forbiddenOptionValues = {};
      _ref1 = partsCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          allOptions = p.get("options");
          if (p.get("selected") != null) {
            if (!forbiddenOptionValues[p.get("selected").value]) {
              forbiddenOptionValues[p.get("selected").value] = true;
            } else {
              for (_j = 0, _len1 = allOptions.length; _j < _len1; _j++) {
                o = allOptions[_j];
                if (!forbiddenOptionValues[o.value]) {
                  p.set("selected", o, {
                    silent: true
                  });
                  forbiddenOptionValues[o.value] = true;
                  break;
                }
              }
            }
          }
        }
      }
      _ref2 = partsCollection.models;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        p = _ref2[_k];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          myOptions = JSON.parse(JSON.stringify(allOptions));
          for (_l = 0, _len3 = myOptions.length; _l < _len3; _l++) {
            o = myOptions[_l];
            if (forbiddenOptionValues[o.value] && o.value !== p.get("selected").value) {
              o.hidden = true;
            } else {
              delete o.hidden;
            }
          }
          _results.push(p.set("options", myOptions));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Aggregate.getSourceIdsPostProcessing = function(slotsCollection, partsCollection, slotId, ids) {
      var forbiddenOptionValues, id, part, result, _i, _j, _len, _len1, _ref1;
      forbiddenOptionValues = {};
      _ref1 = partsCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        if (part.get("partId") === slotId) {
          break;
        }
        if (part.get("partId").indexOf("keySelector") >= 0) {
          forbiddenOptionValues[part.get("selected").value] = true;
        }
      }
      result = [];
      for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
        id = ids[_j];
        if (forbiddenOptionValues[id] == null) {
          result.push(id);
        }
      }
      return result;
    };

    Aggregate.buildInput = function(slotsCollection, partsCollection) {
      var aggBy, aggByOriginal, aggRules, args, e, i, key, loopId, originalBlock, qv, s, slotId, _i, _j, _len, _len1, _ref1, _ref2;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      aggRules = [];
      _ref1 = slotsCollection.models;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        s = _ref1[i];
        slotId = s.get("slotId");
        try {
          if (slotId.indexOf("modesSelector") >= 0) {
            loopId = slotId.replace("modesSelector", "");
            key = partsCollection.where({
              "partId": "keySelector" + loopId
            })[0].get("selected").value;
            aggByOriginal = slotsCollection.where({
              "slotId": "modesSelector" + loopId
            })[0].getBlock().get("data");
            if (aggByOriginal.length === 1) {
              aggBy = [];
              _ref2 = originalBlock.get("data");
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                qv = _ref2[_j];
                aggBy.push({
                  id: qv.id,
                  value: aggByOriginal[0].value
                });
              }
              aggBy.push({
                id: originalBlock.get("metaData").idKey,
                value: aggByOriginal[0].value
              });
            } else {
              aggBy = aggByOriginal;
            }
            aggRules.push({
              key: key,
              aggBy: aggBy
            });
          }
        } catch (_error) {
          e = _error;
        }
      }
      args = [originalBlock, aggRules];
      return args;
    };

    /**
     * perform the TRANSPOSE operation
     * @param  {[type]} originalBlock [description]
     * @return {[type]}               [description]
    */


    Aggregate.doOperation = function() {
      var aggRules, originalBlock,
        _this = this;
      originalBlock = arguments[0];
      aggRules = arguments[1];
      /*
      if aggRules.length == 0
        return
      key = aggRules[0].key
      aggBy = aggRules[0].aggBy
      */

      if ((originalBlock != null) && BlockUtils.getBlockDepth(originalBlock) > 0 && aggRules.length > 0) {
        if (this.worker != null) {
          this.worker.terminate();
          this.worker = null;
        }
        this.worker = new Worker('scripts/managers/operationworker.js');
        this.worker.onmessage = function(e) {
          switch (e.data.t) {
            case 'e':
              elog(e.data.d);
              return quadrigram.tracker.sendEvent({
                event_type: 101,
                event_subtype: 1,
                error_code: "aggregate_error",
                error_data: {
                  stack: e.data.d
                }
              });
            case 'log':
              return log("Worker message: ", e.data.message);
            case 'ready':
              return _this.worker.postMessage({
                t: "operate",
                operation: "aggregate",
                originalBlock: JSON.stringify(originalBlock),
                aggRules: JSON.stringify(aggRules)
              });
            case 'operation-finished':
              _this.trigger("operation-finished", e.data.d);
              _this.worker.terminate();
              return _this.worker = null;
          }
        };
        return this.worker.postMessage({
          t: "isReady"
        });
      } else {
        return this.trigger("operation-finished", {
          "data": []
        });
      }
    };

    return Aggregate;

  }).call(this, quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.Group = (function(_super) {
    __extends(Group, _super);

    function Group() {
      _ref = Group.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Group.baseExpression = [
      {
        "type": "label",
        "partId": "aggName",
        "label": "Group rows of"
      }, {
        "type": "slot",
        "partId": "originalBlock",
        "slotType": "noinput",
        "updateDynamic": "keySelector"
      }, {
        "type": "dynamic",
        "partId": "keySelector",
        "label": "by repetitions in column",
        "options": [],
        "selected": null
      }
    ];

    Group.loopGroup = [
      {
        "type": "label",
        "partId": "andthenlabel_loopBlock_",
        "label": "and then"
      }, {
        "type": "dynamic",
        "partId": "keySelector_loopBlock_",
        "label": "by repetitions in column",
        "options": [],
        "selected": null
      }
    ];

    Group.updateDynamicParts = function(partsCollection, slotsCollection) {
      var options, originalBlock, p, qv, _i, _j, _len, _len1, _ref1, _ref2, _results;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      if ((originalBlock != null) && (originalBlock.get("data") != null)) {
        options = [];
        _ref1 = originalBlock.get("data");
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          qv = _ref1[_i];
          options.push({
            "optId": qv.id,
            "label": qv.id,
            "value": qv.id
          });
        }
      } else {
        options = [];
      }
      _ref2 = partsCollection.models;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        p = _ref2[_j];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          _results.push(p.set("options", options));
        } else {
          _results.push(void 0);
        }
        /*
        FALTA HACER QUE SE "actualizen" los defaults del slot de mode (slot.options) pero no creo que deba ser aqui
        DEBERIA SER EL SLOT ON "modelSetup" o algo asi...
        
        if p.get("partId").indexOf("modesSelector")>=0
          p.set("options",options)
        */

      }
      return _results;
    };

    Group.updateSelectedOptions = function(partsCollection, slotsCollection) {
      var allOptions, forbiddenOptionValues, myOptions, o, p, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _results;
      forbiddenOptionValues = {};
      _ref1 = partsCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          allOptions = p.get("options");
          if (p.get("selected") != null) {
            if (!forbiddenOptionValues[p.get("selected").value]) {
              forbiddenOptionValues[p.get("selected").value] = true;
            } else {
              for (_j = 0, _len1 = allOptions.length; _j < _len1; _j++) {
                o = allOptions[_j];
                if (!forbiddenOptionValues[o.value]) {
                  p.set("selected", o, {
                    silent: true
                  });
                  forbiddenOptionValues[o.value] = true;
                  break;
                }
              }
            }
          }
        }
      }
      _ref2 = partsCollection.models;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        p = _ref2[_k];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          myOptions = JSON.parse(JSON.stringify(allOptions));
          for (_l = 0, _len3 = myOptions.length; _l < _len3; _l++) {
            o = myOptions[_l];
            if (forbiddenOptionValues[o.value] && o.value !== p.get("selected").value) {
              o.hidden = true;
            } else {
              delete o.hidden;
            }
          }
          _results.push(p.set("options", myOptions));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Group.getSourceIdsPostProcessing = function(slotsCollection, partsCollection, slotId, ids) {
      var forbiddenOptionValues, id, part, result, _i, _j, _len, _len1, _ref1;
      forbiddenOptionValues = {};
      _ref1 = partsCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        if (part.get("partId") === slotId) {
          break;
        }
        if (part.get("partId").indexOf("keySelector") >= 0) {
          forbiddenOptionValues[part.get("selected").value] = true;
        }
      }
      result = [];
      for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
        id = ids[_j];
        if (forbiddenOptionValues[id] == null) {
          result.push(id);
        }
      }
      return result;
    };

    Group.buildInput = function(slotsCollection, partsCollection) {
      var aggRules, args, e, key, originalBlock, part, partId, _i, _len, _ref1;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      /*
      aggRules = []
      for s,i in slotsCollection.models
        slotId = s.get("slotId")
        try
          if slotId.indexOf("modesSelector")>=0
            loopId = slotId.replace("modesSelector","")
      
            key = partsCollection.where({"partId":"keySelector"+loopId})[0].get("selected").value
            aggByOriginal = slotsCollection.where({"slotId":"modesSelector"+loopId})[0].getBlock().get("data")
            if aggByOriginal.length==1
              aggBy = []
              for qv in originalBlock.get("data")
                aggBy.push({id:qv.id,value:aggByOriginal[0].value})
              aggBy.push({id:originalBlock.get("metaData").idKey,value:aggByOriginal[0].value})
            else
              aggBy = aggByOriginal
      
            aggRules.push({key:key,aggBy:aggBy})
      
        catch e
      */

      aggRules = [];
      _ref1 = partsCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        partId = part.get("partId");
        try {
          if (partId.indexOf("keySelector") >= 0) {
            key = part.get("selected").value;
            aggRules.push({
              key: key,
              aggBy: "asblock"
            });
          }
        } catch (_error) {
          e = _error;
        }
      }
      args = [originalBlock, aggRules];
      return args;
    };

    /**
     * perform the TRANSPOSE operation
     * @param  {[type]} originalBlock [description]
     * @return {[type]}               [description]
    */


    Group.doOperation = function() {
      var aggRules, originalBlock,
        _this = this;
      originalBlock = arguments[0];
      aggRules = arguments[1];
      /*
      if aggRules.length == 0
        return
      key = aggRules[0].key
      aggBy = aggRules[0].aggBy
      */

      if ((originalBlock != null) && BlockUtils.getBlockDepth(originalBlock) > 0 && aggRules.length > 0) {
        if (this.worker != null) {
          this.worker.terminate();
          this.worker = null;
        }
        this.worker = new Worker('scripts/managers/operationworker.js');
        this.worker.onmessage = function(e) {
          switch (e.data.t) {
            case 'e':
              elog(e.data.d);
              return quadrigram.tracker.sendEvent({
                event_type: 101,
                event_subtype: 1,
                error_code: "aggregate_error",
                error_data: {
                  stack: e.data.d
                }
              });
            case 'log':
              return log("Worker message: ", e.data.message);
            case 'ready':
              return _this.worker.postMessage({
                t: "operate",
                operation: "aggregate",
                originalBlock: JSON.stringify(originalBlock),
                aggRules: JSON.stringify(aggRules)
              });
            case 'operation-finished':
              _this.trigger("operation-finished", e.data.d);
              _this.worker.terminate();
              return _this.worker = null;
          }
        };
        return this.worker.postMessage({
          t: "isReady"
        });
      } else {
        return this.trigger("operation-finished", {
          "data": []
        });
      }
    };

    return Group;

  }).call(this, quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.Summarize = (function(_super) {
    __extends(Summarize, _super);

    function Summarize() {
      _ref = Summarize.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Summarize.baseExpression = [
      {
        "type": "label",
        "partId": "aggName",
        "label": "Summarize each column of"
      }, {
        "type": "slot",
        "partId": "originalBlock",
        "slotType": "noinput",
        "updateDynamic": "keySelector"
      }, {
        "type": "dynamic",
        "partId": "keySelector",
        "label": "aggregating repetitions of",
        "options": [],
        "selected": null
      }, {
        "type": "label",
        "partId": "andaslabel",
        "label": "by"
      }, {
        "type": "slot",
        "partId": "modesSelector",
        "label": "",
        "slotType": "options",
        "multiValue": true,
        "idSource": "originalBlock",
        "options": [
          {
            "value": "add",
            "label": "by adding"
          }, {
            "value": "mean",
            "label": "as the mean"
          }, {
            "value": "count",
            "label": "by counting"
          }, {
            "value": "min",
            "label": "minimum value"
          }, {
            "value": "max",
            "label": "maximum value"
          }, {
            "value": "first",
            "label": "first value"
          }, {
            "value": "last",
            "label": "last value"
          }, {
            "value": "ignore",
            "label": "ignore"
          }
        ],
        "default": "add"
      }
    ];

    /*
    @loopGroup:[
      {
        "type": "label"
        "partId": "andthenlabel_loopBlock_"
        "label": "and then (for each row) aggregate"
      },
      {
        "type": "dynamic"
        "partId": "keySelector_loopBlock_"
        "label": "using column"
        "options":[]
        "selected": null
      },
      {
        "type": "label"
        "partId": "andaslabel_loopBlock_"
        "label": "as id and aggregating each column"
      },
      {
        "type": "slot"
        "partId": "modesSelector_loopBlock_"
        "label": ""
        "slotType": "options"
        "multiValue": true
        "idSource": "originalBlock"
        "options":[
          {
            "value":"add"
            "label":"by adding"
          },
          {
            "value":"mean"
            "label":"as the mean"
          },
          {
            "value":"count"
            "label":"by counting"
          },
          {
            "value":"min"
            "label":"minimum value"
          },
          {
            "value":"max"
            "label":"maximum value"
          },
          {
            "value":"first"
            "label":"first value"
          },
          {
            "value":"last"
            "label":"last value"
          }
        ]
        "default":"asblock"
      }
    ]
    */


    Summarize.updateDynamicParts = function(partsCollection, slotsCollection) {
      var options, originalBlock, p, qv, _i, _j, _len, _len1, _ref1, _ref2, _results;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      if ((originalBlock != null) && (originalBlock.get("data") != null)) {
        options = [];
        _ref1 = originalBlock.get("data");
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          qv = _ref1[_i];
          options.push({
            "optId": qv.id,
            "label": qv.id,
            "value": qv.id
          });
        }
      } else {
        options = [];
      }
      _ref2 = partsCollection.models;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        p = _ref2[_j];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          _results.push(p.set("options", options));
        } else {
          _results.push(void 0);
        }
        /*
        FALTA HACER QUE SE "actualizen" los defaults del slot de mode (slot.options) pero no creo que deba ser aqui
        DEBERIA SER EL SLOT ON "modelSetup" o algo asi...
        
        if p.get("partId").indexOf("modesSelector")>=0
          p.set("options",options)
        */

      }
      return _results;
    };

    Summarize.updateSelectedOptions = function(partsCollection, slotsCollection) {
      var allOptions, forbiddenOptionValues, myOptions, o, p, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2, _results;
      forbiddenOptionValues = {};
      _ref1 = partsCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          allOptions = p.get("options");
          if (p.get("selected") != null) {
            if (!forbiddenOptionValues[p.get("selected").value]) {
              forbiddenOptionValues[p.get("selected").value] = true;
            } else {
              for (_j = 0, _len1 = allOptions.length; _j < _len1; _j++) {
                o = allOptions[_j];
                if (!forbiddenOptionValues[o.value]) {
                  p.set("selected", o, {
                    silent: true
                  });
                  forbiddenOptionValues[o.value] = true;
                  break;
                }
              }
            }
          }
        }
      }
      _ref2 = partsCollection.models;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        p = _ref2[_k];
        if (p.get("partId").indexOf("keySelector") >= 0) {
          myOptions = JSON.parse(JSON.stringify(allOptions));
          for (_l = 0, _len3 = myOptions.length; _l < _len3; _l++) {
            o = myOptions[_l];
            if (forbiddenOptionValues[o.value] && o.value !== p.get("selected").value) {
              o.hidden = true;
            } else {
              delete o.hidden;
            }
          }
          _results.push(p.set("options", myOptions));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Summarize.getSourceIdsPostProcessing = function(slotsCollection, partsCollection, slotId, ids) {
      var forbiddenOptionValues, id, part, result, _i, _j, _len, _len1, _ref1;
      forbiddenOptionValues = {};
      _ref1 = partsCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        if (part.get("partId") === slotId) {
          break;
        }
        if (part.get("partId").indexOf("keySelector") >= 0) {
          forbiddenOptionValues[part.get("selected").value] = true;
        }
      }
      result = [];
      for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
        id = ids[_j];
        if (forbiddenOptionValues[id] == null) {
          result.push(id);
        }
      }
      return result;
    };

    Summarize.buildInput = function(slotsCollection, partsCollection) {
      var aggBy, aggByOriginal, aggRules, args, e, i, key, loopId, originalBlock, qv, s, slotId, _i, _j, _len, _len1, _ref1, _ref2;
      originalBlock = slotsCollection.where({
        "slotId": "originalBlock"
      })[0].getBlock();
      aggRules = [];
      _ref1 = slotsCollection.models;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        s = _ref1[i];
        slotId = s.get("slotId");
        try {
          if (slotId.indexOf("modesSelector") >= 0) {
            loopId = slotId.replace("modesSelector", "");
            key = partsCollection.where({
              "partId": "keySelector" + loopId
            })[0].get("selected").value;
            aggByOriginal = slotsCollection.where({
              "slotId": "modesSelector" + loopId
            })[0].getBlock().get("data");
            if (aggByOriginal.length === 1) {
              aggBy = [];
              _ref2 = originalBlock.get("data");
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                qv = _ref2[_j];
                aggBy.push({
                  id: qv.id,
                  value: aggByOriginal[0].value
                });
              }
              aggBy.push({
                id: originalBlock.get("metaData").idKey,
                value: aggByOriginal[0].value
              });
            } else {
              aggBy = aggByOriginal;
            }
            aggRules.push({
              key: key,
              aggBy: aggBy
            });
          }
        } catch (_error) {
          e = _error;
        }
      }
      args = [originalBlock, aggRules];
      return args;
    };

    /**
     * perform the TRANSPOSE operation
     * @param  {[type]} originalBlock [description]
     * @return {[type]}               [description]
    */


    Summarize.doOperation = function() {
      var aggRules, originalBlock,
        _this = this;
      originalBlock = arguments[0];
      aggRules = arguments[1];
      /*
      if aggRules.length == 0
        return
      key = aggRules[0].key
      aggBy = aggRules[0].aggBy
      */

      if ((originalBlock != null) && BlockUtils.getBlockDepth(originalBlock) > 0 && aggRules.length > 0) {
        if (this.worker != null) {
          this.worker.terminate();
          this.worker = null;
        }
        this.worker = new Worker('scripts/managers/operationworker.js');
        this.worker.onmessage = function(e) {
          switch (e.data.t) {
            case 'e':
              elog(e.data.d);
              return quadrigram.tracker.sendEvent({
                event_type: 101,
                event_subtype: 1,
                error_code: "aggregate_error",
                error_data: {
                  stack: e.data.d
                }
              });
            case 'log':
              return log("Worker message: ", e.data.message);
            case 'ready':
              return _this.worker.postMessage({
                t: "operate",
                operation: "aggregate",
                originalBlock: JSON.stringify(originalBlock),
                aggRules: JSON.stringify(aggRules)
              });
            case 'operation-finished':
              _this.trigger("operation-finished", e.data.d);
              _this.worker.terminate();
              return _this.worker = null;
          }
        };
        return this.worker.postMessage({
          t: "isReady"
        });
      } else {
        return this.trigger("operation-finished", {
          "data": []
        });
      }
    };

    return Summarize;

  }).call(this, quadrigram.Models.Operation);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.BlockGroupModel = (function(_super) {
    __extends(BlockGroupModel, _super);

    function BlockGroupModel() {
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = BlockGroupModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BlockGroupModel.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'blocksCollection',
        relatedModel: "quadrigram.Models.DataBlockModel",
        includeInJSON: true,
        collectionType: "quadrigram.Collections.DataBlockCollection",
        reverseRelation: {
          key: 'blockGroup',
          bubbleUp: true,
          includeInJSON: "id"
        }
      }, {
        type: Backbone.HasOne,
        key: 'ownerViz',
        relatedModel: "quadrigram.Models.VisualizerModel",
        includeInJSON: Backbone.Model.prototype.idAttribute,
        reverseRelation: {
          type: Backbone.HasOne,
          key: 'blockGroup',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }, {
        type: Backbone.HasOne,
        key: 'ownerOp',
        relatedModel: "quadrigram.Models.OperatorModel",
        includeInJSON: Backbone.Model.prototype.idAttribute,
        reverseRelation: {
          type: Backbone.HasOne,
          key: 'blockGroup',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }, {
        type: Backbone.HasOne,
        key: 'mainBlock',
        relatedModel: "quadrigram.Models.FunctionBlockModel",
        includeInJSON: Backbone.Model.prototype.idAttribute,
        reverseRelation: {
          type: Backbone.HasOne,
          key: 'ownerCustomBlockGroup',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }
    ];

    BlockGroupModel.prototype.undoableEvents = ["add:blocksCollection", "remove:blocksCollection", "change:buildData"];

    BlockGroupModel.prototype.subModelTypes = {
      "external": "quadrigram.Models.ExternalBlockGroupModel",
      "custom": "quadrigram.Models.CustomBlockGroupModel",
      "viz": "quadrigram.Models.VizBlockGroupModel",
      "function": "quadrigram.Models.FunctionBlockGroupModel"
    };

    BlockGroupModel.prototype.create = function() {};

    BlockGroupModel.prototype.modelSetup = function(options) {};

    /*
    destroy:()=>
      for b in @.get("blocksCollection").models
        ##No se como pero peta...
        if b?
          b.detachAndDestroy()
    */


    return BlockGroupModel;

  })(quadrigram.Models.QModel);

  quadrigram.Models.BlockGroupModel.setup();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ExternalBlockGroupModel = (function(_super) {
    __extends(ExternalBlockGroupModel, _super);

    function ExternalBlockGroupModel() {
      this.updateBlocks = __bind(this.updateBlocks, this);
      this.toOptimizedResource = __bind(this.toOptimizedResource, this);
      this.createSubBlocks = __bind(this.createSubBlocks, this);
      this.createNetworkSubBlocks = __bind(this.createNetworkSubBlocks, this);
      this.updateAggregatedBlock = __bind(this.updateAggregatedBlock, this);
      this.updateNetworkBlocks = __bind(this.updateNetworkBlocks, this);
      this.updateTypedBlock = __bind(this.updateTypedBlock, this);
      this.handleNewBuildData = __bind(this.handleNewBuildData, this);
      this.updateBuildData = __bind(this.updateBuildData, this);
      this.updateAggregators = __bind(this.updateAggregators, this);
      this.resetBuildData = __bind(this.resetBuildData, this);
      this.createMainBlock = __bind(this.createMainBlock, this);
      this.buildFromRawData = __bind(this.buildFromRawData, this);
      this.buildFromProcessedData = __bind(this.buildFromProcessedData, this);
      this.onJsonParsed = __bind(this.onJsonParsed, this);
      this.csvToJson = __bind(this.csvToJson, this);
      this.jsonToJson = __bind(this.jsonToJson, this);
      this.getXLSSheet = __bind(this.getXLSSheet, this);
      this.xlsworker = __bind(this.xlsworker, this);
      this.xlsToJson = __bind(this.xlsToJson, this);
      this.convertToJSON = __bind(this.convertToJSON, this);
      this.parseFile = __bind(this.parseFile, this);
      this.onResponse = __bind(this.onResponse, this);
      this.requestData = __bind(this.requestData, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = ExternalBlockGroupModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExternalBlockGroupModel.prototype.create = function() {
      return this.set("type", "external", {
        silent: true
      });
    };

    ExternalBlockGroupModel.prototype.modelSetup = function(options) {
      return this.requestData();
    };

    ExternalBlockGroupModel.prototype.requestData = function(options) {
      this.set("fetchState", "loading");
      quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
        message: "Getting " + this.get("label") + " from Google Drive ",
        type: 0,
        priority: 0,
        timeout: 0,
        mode: 0,
        "class": "getting",
        id: this.get("rid")
      });
      return quadrigram.router.managers.serverManager.fetchFile(this.get("rid"), this.get("id"), this.onResponse);
    };

    ExternalBlockGroupModel.prototype.onResponse = function(fetchResponse) {
      quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
        mode: 1,
        "class": "getting",
        id: fetchResponse.rid
      });
      if (fetchResponse.status !== 200 && fetchResponse.status !== "success") {
        this.invalidData = true;
        quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
          message: 1,
          type: 1,
          priority: 1,
          "class": "driveError",
          id: fetchResponse.rid,
          timeout: 3000,
          mode: 0
        });
        return;
      }
      if (fetchResponse.providerName !== "local") {
        return this.parseFile(fetchResponse.rid, fetchResponse.mimeType, fetchResponse.data, fetchResponse.satus);
      } else {
        return this.buildFromProcessedData(fetchResponse.data);
      }
    };

    ExternalBlockGroupModel.prototype.parseFile = function(rid, mimeType, rawData, status) {
      if (rawData != null) {
        quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
          message: "Parsing the file " + this.get("label"),
          type: 0,
          priority: 0,
          timeout: 0,
          mode: 0,
          "class": "parsing",
          id: this.get("rid")
        });
        return this.convertToJSON(mimeType, rawData, this.onJsonParsed);
      } else {
        elog("Error: file not found");
        return this.onJsonParsed({});
      }
    };

    ExternalBlockGroupModel.prototype.convertToJSON = function(mimeType, content, callback) {
      var pattern;
      pattern = /(.+?)(;.+?)?$/;
      mimeType = mimeType.match(pattern)[1];
      switch (mimeType) {
        case "application/vnd.ms-excel":
          return this.xlsToJson(content, callback, "xls");
        case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
          return this.xlsToJson(content, callback, "xlsx");
        case "application/json":
          return this.jsonToJson(content, callback);
        case "text/csv":
          return this.csvToJson(content, callback);
      }
    };

    ExternalBlockGroupModel.prototype.xlsToJson = function(content, callback, xlsType) {
      var arr, bstr, data, i, _i, _ref1;
      data = new Uint8Array(content);
      arr = new Array();
      for (i = _i = 0, _ref1 = data.length + 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        arr[i] = String.fromCharCode(data[i]);
      }
      bstr = arr.join("");
      return this.xlsworker(bstr, callback, xlsType);
    };

    ExternalBlockGroupModel.prototype.xlsworker = function(sourceData, cb, xlsType) {
      var worker,
        _this = this;
      worker = new Worker('scripts/managers/xlsworker.js');
      worker.externalBlockGroup = this;
      worker.onmessage = function(e) {
        switch (e.data.t) {
          case 'e':
            elog(e.data.d);
            return quadrigram.tracker.sendEvent({
              event_type: 101,
              event_subtype: 2,
              error_code: "xls_error",
              error_data: {
                stack: e.data.d
              }
            });
          case 'readyToParse':
            return worker.postMessage({
              t: "parse",
              d: sourceData,
              xlsType: xlsType,
              sheet: 0
            });
          case 'parsed':
            cb(e.data.d);
            return worker.terminate();
        }
      };
      return worker.postMessage({
        t: "isReadyToParse",
        d: sourceData,
        xlsType: xlsType
      });
    };

    ExternalBlockGroupModel.prototype.getXLSSheet = function(rawData, sheetName) {};

    ExternalBlockGroupModel.prototype.jsonToJson = function(content, cb) {};

    ExternalBlockGroupModel.prototype.csvToJson = function(content, cb) {
      var csvString, lastObject, result;
      csvString = (new TextDecoder("utf-8")).decode(content);
      result = Papa.parse(csvString, {
        header: true
      });
      lastObject = result.data[result.data.length - 1];
      while (Object.keys(lastObject).length === 1 && lastObject[Object.keys(lastObject)[0]] === "") {
        result.data.pop();
        lastObject = result.data[result.data.length - 1];
      }
      return cb(result.data);
    };

    ExternalBlockGroupModel.prototype.onJsonParsed = function(jsonData) {
      var _this = this;
      quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
        mode: 1,
        "class": "parsing",
        id: this.get("rid")
      });
      log("JSON PARSED!");
      this.rawData = jsonData;
      if (!this.get("buildData")) {
        quadrigram.router.appViews.uiView.showBlockBuilder(this);
      }
      this.on("change:buildData", this.handleNewBuildData);
      this.on("change:currentSheet", function() {
        return _this.buildFromRawData({
          resetBuildData: true
        });
      });
      return this.buildFromRawData();
    };

    ExternalBlockGroupModel.prototype.buildFromProcessedData = function(data) {
      var bdata, block, _i, _j, _len, _len1, _ref1, _ref2;
      log("building from", data);
      _ref1 = data.blocks;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        bdata = _ref1[_i];
        block = this.get("blocksCollection").findWhere({
          "id": bdata.id
        });
        block.staticData = true;
        block.set("data", bdata.data);
        block.set("metaData", bdata.metaData);
      }
      _ref2 = data.blocks;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        bdata = _ref2[_j];
        block = this.get("blocksCollection").findWhere({
          "id": bdata.id
        });
        block.set("fetchState", "ready");
      }
      return null;
    };

    ExternalBlockGroupModel.prototype.buildFromRawData = function(options) {
      var bd, colNames, jsonData, key, keyCandidates, row, sheet, _i, _len;
      if (this.rawData.multiSheet) {
        this.sheetOptions = Object.keys(this.rawData.sheets);
        if (this.get("currentSheet") == null) {
          this.set("currentSheet", Object.keys(this.rawData.sheets)[0], {
            silent: true
          });
        }
        sheet = this.rawData.sheets[this.get("currentSheet")];
        jsonData = sheet.data;
        this.consistency = sheet.consistency;
        if (this.consistency === "invalid") {
          this.invalidData = true;
        } else {
          this.invalidData = false;
        }
        colNames = sheet.colNames;
      } else {
        jsonData = this.rawData;
      }
      if ((colNames != null) && colNames.length > 0) {
        this.keys = colNames;
      } else {
        keyCandidates = {};
        for (_i = 0, _len = jsonData.length; _i < _len; _i++) {
          row = jsonData[_i];
          for (key in row) {
            keyCandidates[key] = true;
          }
        }
        this.keys = Object.keys(keyCandidates);
      }
      this.jsonData = jsonData;
      if (!this.invalidData) {
        this.createMainBlock(jsonData);
        this.dataTypeOptions = {};
        this.dataTypeOptions.network = NetworkUtils.checkIfNetwork(this.mainBlock);
        if (!this.get("buildData") || (options && options.resetBuildData)) {
          if (this.dataTypeOptions.network != null) {
            bd = {};
            bd.dataType = "network";
            bd.networkFormat = Object.keys(this.dataTypeOptions.network)[0];
            return this.set("buildData", bd);
          } else {
            return this.updateBuildData(this.resetBuildData(jsonData));
          }
        } else {
          return this.updateTypedBlock();
        }
      } else {
        this.get("blocksCollection").reset({
          silent: true
        });
        this.mainBlock = new quadrigram.Models.ExternalBlockModel({
          "blockGroup": this,
          "label": "ERROR",
          "role": "empty",
          "origin": "file"
        });
        this.dataTypeOptions = {};
        this.set({
          "fetchState": "ready"
        }, {
          silent: true
        });
        return this.trigger("change-block-structure");
      }
    };

    ExternalBlockGroupModel.prototype.createMainBlock = function(dataObject) {
      var currentId, idsDict, index, key, keyBlockData, keyData, mainBlock, mainData, nameOfTableBlock, object, qvalue, _i, _j, _len, _len1, _ref1;
      this.preBlocks = [];
      this.set("consistency", this.consistency, {
        "silent": true
      });
      if (this.get("blocksCollection").where({
        "role": "hidden"
      }).length <= 0) {
        nameOfTableBlock = this.get("label").split(".")[0];
        if (nameOfTableBlock.length > 25) {
          nameOfTableBlock = nameOfTableBlock.substring(0, 22) + "...";
        }
        mainBlock = new quadrigram.Models.ExternalBlockModel({
          "blockGroup": this,
          "label": nameOfTableBlock,
          "role": "hidden",
          "origin": "file"
        });
        mainBlock.set("metaData", {
          "idLabel": "Column",
          "valueLabel": nameOfTableBlock,
          "viewMode": "table"
        });
      } else {
        mainBlock = this.get("blocksCollection").where({
          "role": "hidden"
        })[0];
      }
      mainData = [];
      this.hasIdRepetition = {};
      _ref1 = this.keys;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        key = _ref1[_i];
        if (true) {
          keyData = [];
          idsDict = {};
          for (index = _j = 0, _len1 = dataObject.length; _j < _len1; index = ++_j) {
            object = dataObject[index];
            currentId = String(index);
            keyData.push({
              id: currentId,
              value: object[key]
            });
            if (idsDict[object[key]]) {
              this.hasIdRepetition[key] = true;
            }
            idsDict[object[key]] = true;
            keyBlockData = new quadrigram.Models.DataBlockData(keyData);
            keyBlockData.set("label", key);
            keyBlockData.set("metaData", {
              "idLabel": "Index",
              "valueLabel": key,
              "viewMode": "list",
              "viewDirection": "col"
            });
          }
          qvalue = new quadrigram.Models.QValue(keyBlockData, key);
          mainData.push(qvalue);
        }
      }
      if (mainData.length === 1) {
        mainBlock.get("metaData").viewMode = "list";
        mainBlock.get("metaData").valueLabel = mainData[0].value.get("metaData").valueLabel;
        mainBlock.get("metaData").idLabel = mainData[0].value.get("metaData").idLabel;
        mainData = mainData[0].value.get("data");
      } else {
        mainBlock.get("metaData").viewMode = "table";
      }
      mainBlock.get("metaData").idKey = "__Index__";
      mainBlock.set({
        "data": mainData,
        "fetchState": "ready"
      }, {
        "silent": true
      });
      return this.mainBlock = mainBlock;
    };

    ExternalBlockGroupModel.prototype.resetBuildData = function(jsonData) {
      var firstColKey, result;
      result = {};
      firstColKey = Object.keys(jsonData[0])[0];
      if (!QValueUtils.needsAggregation(jsonData, firstColKey)) {
        result.idKey = firstColKey;
      } else {
        result.idKey = "__Index__";
      }
      result.blocks = [];
      this.updateAggregators(result, jsonData);
      result.dataType = "dataTable";
      return result;
    };

    ExternalBlockGroupModel.prototype.updateAggregators = function(buildData, jsonData) {
      var key, _i, _len, _ref1, _results;
      buildData.blocks = [];
      _ref1 = this.keys;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        key = _ref1[_i];
        if (buildData.idKey !== "__Index__" && this.hasIdRepetition[buildData.idKey]) {
          _results.push(buildData.blocks.push({
            "id": key,
            value: QValueUtils.chooseBestAggregation(jsonData, key)
          }));
        } else {
          _results.push(buildData.blocks.push({
            "id": key,
            value: "none"
          }));
        }
      }
      return _results;
    };

    ExternalBlockGroupModel.prototype.updateBuildData = function(newData) {
      return this.set("buildData", newData);
    };

    ExternalBlockGroupModel.prototype.handleNewBuildData = function() {
      /*VERY IMPORTANT*/

      var _this = this;
      if ((this.lastIdKey == null) || this.lastIdKey !== this.get("buildData").idKey || this.get("buildData").blocks.length === 0) {
        this.updateAggregators(this.get("buildData"), this.jsonData);
      }
      this.lastIdKey = this.get("buildData").idKey;
      return this.updateTypedBlock(function() {
        return _this.trigger("change-block-structure");
      });
    };

    ExternalBlockGroupModel.prototype.updateTypedBlock = function(callback) {
      if (this.get("buildData").dataType == null) {
        this.get("buildData").dataType = "dataTable";
      }
      if (this.get("buildData").dataType === "network") {
        return this.updateNetworkBlocks(callback);
      } else {
        return this.updateAggregatedBlock(callback);
      }
    };

    ExternalBlockGroupModel.prototype.updateNetworkBlocks = function(callback) {
      var aggregatedMainBlock, aggregatedMainPreBlock, nodesBlock, relsBlock,
        _this = this;
      if (this.get("blocksCollection").where({
        "role": "all-network"
      }).length <= 0) {
        aggregatedMainPreBlock = new quadrigram.Models.PreFunctionBlockModel({
          "label": this.mainBlock.get("label"),
          "blockGroup": this,
          "role": "all-network",
          "order": 0,
          "operation": "Summarize",
          "origin": "file",
          "options": {
            "keySelector": {
              value: this.keys[0]
            },
            "originalBlock": this.mainBlock,
            "modesSelector": [
              {
                value: "first"
              }
            ]
          }
        });
        aggregatedMainPreBlock.on("replace-model", function(aggregatedMainBlock) {
          aggregatedMainPreBlock.off("replace-model");
          return aggregatedMainBlock.on("change:fetchState", function() {
            aggregatedMainBlock.off("change:fetchState");
            NetworkUtils.fillBlocks(_this.mainBlock, nodesBlock, relsBlock, _this.get("buildData").networkFormat, aggregatedMainBlock);
            _this.createNetworkSubBlocks(nodesBlock, relsBlock);
            if (callback) {
              callback(nodesBlock, relsBlock);
            }
            _this.set("fetchState", "ready");
            return _this.trigger("change-block-structure");
          });
        });
        aggregatedMainBlock = aggregatedMainPreBlock.activate();
      } else {
        aggregatedMainBlock = this.get("blocksCollection").findWhere({
          "role": "all-network"
        });
        aggregatedMainBlock.get("operator").setExpressionValues({
          "keySelector": {
            value: this.keys[0]
          },
          "originalBlock": this.mainBlock,
          "modesSelector": [
            {
              value: "first"
            }
          ]
        });
        aggregatedMainBlock.on("change:fetchState", function() {
          if (aggregatedMainBlock.get("fetchState") === "ready") {
            aggregatedMainBlock.off("change:fetchState");
            NetworkUtils.fillBlocks(_this.mainBlock, nodesBlock, relsBlock, _this.get("buildData").networkFormat, aggregatedMainBlock);
            _this.createNetworkSubBlocks(nodesBlock, relsBlock);
            if (callback) {
              callback(nodesBlock, relsBlock);
            }
            _this.set("fetchState", "ready");
            return _this.trigger("change-block-structure");
          }
        });
        aggregatedMainBlock.runOperator();
      }
      if (this.get("blocksCollection").where({
        "role": "nodes"
      }).length <= 0) {
        nodesBlock = new quadrigram.Models.ExternalBlockModel({
          "label": "Nodes of " + this.mainBlock.get("label"),
          "blockGroup": this,
          "role": "nodes",
          "order": 0,
          "origin": "file",
          "metaData": {
            "viewMode": "table",
            "idLabel": "Node id"
          }
        });
      } else {
        nodesBlock = this.get("blocksCollection").findWhere({
          "role": "nodes"
        });
      }
      if (this.get("blocksCollection").where({
        "role": "rels"
      }).length <= 0) {
        return relsBlock = new quadrigram.Models.ExternalBlockModel({
          "label": "Relations of " + this.mainBlock.get("label"),
          "blockGroup": this,
          "role": "rels",
          "order": 1,
          "origin": "file",
          "metaData": {
            "viewMode": "table",
            "idLabel": "Relation id"
          }
        });
      } else {
        return relsBlock = this.get("blocksCollection").findWhere({
          "role": "rels"
        });
      }
    };

    ExternalBlockGroupModel.prototype.updateAggregatedBlock = function(callback) {
      var aggregatedMainBlock, aggregatedMainPreBlock,
        _this = this;
      if (quadrigram.router.compareVersions(quadrigram.router.dataModels.currentProject.get("pversion"), "0.9") < 0) {
        this.updateBlocks();
        this.set("fetchState", "ready");
        this.trigger("change-block-structure");
        return;
      }
      if (this.get("blocksCollection").where({
        "role": "all"
      }).length <= 0) {
        aggregatedMainPreBlock = new quadrigram.Models.PreFunctionBlockModel({
          "label": this.mainBlock.get("label"),
          "blockGroup": this,
          "role": "all",
          "order": 0,
          "operation": "Summarize",
          "origin": "file",
          "options": {
            "keySelector": {
              value: this.get("buildData").idKey
            },
            "originalBlock": this.mainBlock,
            "modesSelector": this.get("buildData").blocks
          }
        });
        this.preBlocks.push(aggregatedMainPreBlock);
        aggregatedMainPreBlock.on("replace-model", function(aggregatedMainBlock) {
          aggregatedMainPreBlock.off("replace-model");
          aggregatedMainBlock.on("change:fetchState", function() {
            var indexCol;
            aggregatedMainBlock.off("change:fetchState");
            if (_this.get("buildData").idKey !== "__Index__") {
              indexCol = _.find(aggregatedMainBlock.get("data"), function(col) {
                return col.id === "__Index__";
              });
              if (indexCol != null) {
                aggregatedMainBlock.get("data").splice(aggregatedMainBlock.get("data").indexOf(indexCol), 1);
              }
            }
            _this.createSubBlocks(aggregatedMainBlock);
            if (callback) {
              callback(aggregatedMainBlock);
            }
            _this.set("fetchState", "ready");
            return _this.trigger("change-block-structure");
          });
          return aggregatedMainBlock.runOperator();
        });
        aggregatedMainBlock = aggregatedMainPreBlock.activate();
      } else {
        aggregatedMainBlock = this.get("blocksCollection").findWhere({
          "role": "all"
        });
        aggregatedMainBlock.get("operator").setExpressionValues({
          "keySelector": {
            value: this.get("buildData").idKey
          },
          "originalBlock": this.mainBlock,
          "modesSelector": this.get("buildData").blocks
        });
        aggregatedMainBlock.on("change:fetchState", function() {
          var indexCol;
          log("change:fetchState", _this.get("label"), " ", aggregatedMainBlock.get("fetchState"));
          if (aggregatedMainBlock.get("fetchState") === "ready") {
            aggregatedMainBlock.off("change:fetchState");
            if (_this.get("buildData").idKey !== "__Index__") {
              indexCol = _.find(aggregatedMainBlock.get("data"), function(col) {
                return col.id === "__Index__";
              });
              if (indexCol != null) {
                aggregatedMainBlock.get("data").splice(aggregatedMainBlock.get("data").indexOf(indexCol), 1);
              }
            }
            _this.createSubBlocks(aggregatedMainBlock);
            if (callback) {
              callback(aggregatedMainBlock);
            }
            log("change:fetchState setTo ready");
            _this.set("fetchState", "ready");
            return _this.trigger("change-block-structure");
          }
        });
        log("change:fetchState running op", this.get("label"), " ", aggregatedMainBlock.get("fetchState"));
        aggregatedMainBlock.runOperator();
      }
      return aggregatedMainBlock;
    };

    ExternalBlockGroupModel.prototype.createNetworkSubBlocks = function(nodesBlock, relsBlock) {
      var block, blocksToRemove, i, mainDepth, newBlockJsonKeys, preBlock, qv, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
      mainDepth = 2;
      /*
      @preBlocks = []
      blocksToRemove = []
      for block,i in @get("blocksCollection").models
        if block.get("role")!="nodes" && block.get("role")!="rels" && block.get("role")!="all-network" && block.get("role")!="hidden" 
          block.detachAndDestroy()
          blocksToRemove.push(block)
      @get("blocksCollection").remove(blocksToRemove)
      */

      newBlockJsonKeys = {};
      _ref1 = nodesBlock.get("data");
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        qv = _ref1[i];
        if (this.get("blocksCollection").where({
          "jsonKey": "node_" + qv.id
        }).length <= 0) {
          preBlock = new quadrigram.Models.PreFunctionBlockModel({
            "jsonKey": "node_" + qv.id,
            "label": "Node " + qv.id,
            "blockGroup": this,
            "role": "node-prop",
            "order": i,
            "operation": "Filter",
            "origin": "file",
            "options": {
              "originalBlock": nodesBlock,
              "keySelector": {
                "optId": "col",
                "type": "id",
                "level": 0
              },
              "relationSelector": {
                "optId": "eq",
                "label": "equal to",
                "value": "=="
              },
              "comparingValue": qv.id
            }
          });
          this.preBlocks.push(preBlock);
        } else {
          newBlockJsonKeys["node_" + qv.id] = true;
        }
      }
      _ref2 = relsBlock.get("data");
      for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
        qv = _ref2[i];
        if (this.get("blocksCollection").where({
          "jsonKey": "rel_" + qv.id
        }).length <= 0) {
          preBlock = new quadrigram.Models.PreFunctionBlockModel({
            "jsonKey": "rel_" + qv.id,
            "label": "Relation " + qv.id,
            "blockGroup": this,
            "role": "rel-prop",
            "order": i,
            "operation": "Filter",
            "origin": "file",
            "options": {
              "originalBlock": relsBlock,
              "keySelector": {
                "optId": "col",
                "type": "id",
                "level": 0
              },
              "relationSelector": {
                "optId": "eq",
                "label": "equal to",
                "value": "=="
              },
              "comparingValue": qv.id
            }
          });
          this.preBlocks.push(preBlock);
        } else {
          newBlockJsonKeys["rel_" + qv.id] = true;
        }
      }
      blocksToRemove = [];
      _ref3 = this.get("blocksCollection").models;
      for (i = _k = 0, _len2 = _ref3.length; _k < _len2; i = ++_k) {
        block = _ref3[i];
        if ((newBlockJsonKeys[block.get("jsonKey")] == null) && block.get("role") !== "nodes" && block.get("role") !== "rels" && block.get("role") !== "all-network" && block.get("role") !== "hidden") {
          block.detachAndDestroy();
          blocksToRemove.push(block);
        }
      }
      return this.get("blocksCollection").remove(blocksToRemove);
    };

    ExternalBlockGroupModel.prototype.createSubBlocks = function(sourceBlock) {
      var block, blocksToRemove, i, mainDepth, newBlockJsonKeys, preBlock, qv, retroValue, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
      mainDepth = BlockUtils.getBlockDepth(sourceBlock);
      this.preBlocks = [];
      /*
      Borrado antiguo, se cargaba los rows... lo ponemos al final
      #chapuzilla para no tener que hacer wheres
      tmpArray = sourceBlock.get("data")
      newBlockIds = {}
      for qv in tmpArray
        newBlockIds[qv.id]=true
      
      blocksToRemove = []
      for block,i in @get("blocksCollection").models
        if block.get("role")!="all" && block.get("role")!="hidden" && !newBlockIds[block.get("jsonKey")]? && block.get("role")!="level0names" && block.get("role")!="level1names"
          block.detachAndDestroy()
          blocksToRemove.push(block)
      
      @get("blocksCollection").remove(blocksToRemove)
      */

      newBlockJsonKeys = {};
      if (quadrigram.router.compareVersions(quadrigram.router.dataModels.currentProject.get("pversion"), "0.9.3") < 0) {
        retroValue = 1;
      } else {
        retroValue = 1;
      }
      if (this.get("blocksCollection").where({
        "jsonKey": "id-col"
      }).length <= 0) {
        preBlock = new quadrigram.Models.PreFunctionBlockModel({
          "jsonKey": "id-col",
          "label": "Column names",
          "blockGroup": this,
          "role": "level0names",
          "order": 0,
          "operation": "GetNames",
          "origin": "file",
          "options": {
            "levelSelector": {
              "optId": "col",
              "value": retroValue
            },
            "originalBlock": sourceBlock
          }
        });
        this.preBlocks.push(preBlock);
      }
      if (quadrigram.router.compareVersions(quadrigram.router.dataModels.currentProject.get("pversion"), "0.9.3") < 0) {
        retroValue = mainDepth;
      } else {
        retroValue = 0;
      }
      _ref1 = sourceBlock.get("data");
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        qv = _ref1[i];
        if (this.get("blocksCollection").where({
          "jsonKey": qv.id
        }).length <= 0 || this.get("blocksCollection").where({
          "jsonKey": qv.id
        })[0].get("operator").get("blockGroup") === null) {
          preBlock = new quadrigram.Models.PreFunctionBlockModel({
            "jsonKey": qv.id,
            "label": qv.id,
            "blockGroup": this,
            "role": "level0",
            "order": i,
            "operation": "Filter",
            "origin": "file",
            "options": {
              "originalBlock": sourceBlock,
              "keySelector": {
                "optId": "col",
                "type": "id",
                "level": retroValue
              },
              "relationSelector": {
                "optId": "eq",
                "label": "equal to",
                "value": "=="
              },
              "comparingValue": qv.id
            }
          });
          this.preBlocks.push(preBlock);
        } else {
          newBlockJsonKeys[qv.id] = true;
        }
      }
      if (mainDepth > 1) {
        if (quadrigram.router.compareVersions(quadrigram.router.dataModels.currentProject.get("pversion"), "0.9.3") < 0) {
          retroValue = 2;
        } else {
          retroValue = 2;
        }
        if (this.get("blocksCollection").where({
          "jsonKey": "id-row"
        }).length <= 0) {
          preBlock = new quadrigram.Models.PreFunctionBlockModel({
            "jsonKey": "id-row",
            "label": "Row names",
            "blockGroup": this,
            "role": "level1names",
            "order": 0,
            "operation": "GetNames",
            "origin": "file",
            "options": {
              "levelSelector": {
                "optId": "row",
                "value": retroValue
              },
              "originalBlock": sourceBlock
            }
          });
          this.preBlocks.push(preBlock);
        }
        if (quadrigram.router.compareVersions(quadrigram.router.dataModels.currentProject.get("pversion"), "0.9.3") < 0) {
          retroValue = mainDepth - 1;
        } else {
          retroValue = 1;
        }
        _ref2 = sourceBlock.get("data")[0].value.get("data");
        for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
          qv = _ref2[i];
          if (this.get("blocksCollection").where({
            "jsonKey": qv.id
          }).length <= 0) {
            preBlock = new quadrigram.Models.PreFunctionBlockModel({
              "jsonKey": qv.id,
              "label": qv.id,
              "blockGroup": this,
              "role": "level1",
              "order": i,
              "operation": "Filter",
              "origin": "file",
              "options": {
                "originalBlock": sourceBlock,
                "keySelector": {
                  "optId": "row",
                  "type": "id",
                  "level": retroValue
                },
                "relationSelector": {
                  "optId": "eq",
                  "label": "equal to",
                  "value": "=="
                },
                "comparingValue": qv.id
              }
            });
            this.preBlocks.push(preBlock);
          } else {
            newBlockJsonKeys[qv.id] = true;
          }
        }
      }
      blocksToRemove = [];
      _ref3 = this.get("blocksCollection").models;
      for (i = _k = 0, _len2 = _ref3.length; _k < _len2; i = ++_k) {
        block = _ref3[i];
        if (block.get("role") !== "all" && block.get("role") !== "hidden" && (newBlockJsonKeys[block.get("jsonKey")] == null) && block.get("role") !== "level0names" && block.get("role") !== "level1names") {
          block.detachAndDestroy();
          blocksToRemove.push(block);
        }
      }
      return this.get("blocksCollection").remove(blocksToRemove);
    };

    ExternalBlockGroupModel.prototype.toOptimizedResource = function() {
      var b, result, _i, _len, _ref1;
      result = {};
      result.id = this.get("id");
      result.rid = this.get("rid");
      _ref1 = this.get("blocksCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        b = _ref1[_i];
        result.blocks || (result.blocks = []);
        if (b.get("role") !== "hidden" && b.get("insideSlot").models.length > 0) {
          result.blocks.push(b.toJSON());
        }
      }
      return result;
    };

    ExternalBlockGroupModel.prototype.updateBlocks = function() {
      var b, currentAggr, currentId, dataObject, i, idsDict, index, key, keyBlockData, keyData, kqvalue, mainBlock, mainData, mainDepth, nameOfTableBlock, object, preBlock, qv, qvalue, shouldRemove, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref1, _ref2, _ref3, _ref4,
        _this = this;
      dataObject = this.jsonData;
      this.set("consistency", this.consistency, {
        "silent": true
      });
      if (this.get("blocksCollection").where({
        "role": "all"
      }).length <= 0) {
        nameOfTableBlock = this.get("label").split(".")[0];
        if (nameOfTableBlock.length > 25) {
          nameOfTableBlock = nameOfTableBlock.substring(0, 22) + "...";
        }
        mainBlock = new quadrigram.Models.ExternalBlockModel({
          "blockGroup": this,
          "label": nameOfTableBlock,
          "role": "all",
          "origin": "file"
        });
        mainBlock.set("metaData", {
          "idLabel": "Column",
          "valueLabel": nameOfTableBlock,
          "viewMode": "table"
        });
      } else {
        mainBlock = this.get("blocksCollection").where({
          "role": "all"
        })[0];
      }
      mainBlock.on("change-block-structure", function() {
        return _this.trigger("change-block-structure");
      });
      mainData = [];
      this.hasIdRepetition = false;
      _ref1 = this.keys;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        key = _ref1[_i];
        if (key !== this.get("buildData").idKey || this.keys.length === 1) {
          keyData = [];
          idsDict = {};
          for (index = _j = 0, _len1 = dataObject.length; _j < _len1; index = ++_j) {
            object = dataObject[index];
            if (this.get("buildData").idKey === "__Index__") {
              currentId = String(index);
            } else {
              currentId = object[this.get("buildData").idKey];
            }
            if (currentId == null) {
              continue;
            }
            if (idsDict[currentId] == null) {
              idsDict[currentId] = QValueUtils.aggregateInit(currentId);
            } else {
              this.hasIdRepetition = true;
            }
            if ((key !== this.get("buildData").idKey && object[key]) || this.keys.length === 1) {
              if (this.get("buildData").blocks[key]) {
                currentAggr = this.get("buildData").blocks[key].aggregateBy;
              } else {
                currentAggr = _.findWhere(this.get("buildData").blocks, {
                  "id": key
                }).value;
              }
              idsDict[currentId] = QValueUtils.aggregateStep(idsDict[currentId], object[key], currentAggr);
            }
          }
          for (index = _k = 0, _len2 = dataObject.length; _k < _len2; index = ++_k) {
            object = dataObject[index];
            if (this.get("buildData").idKey === "__Index__") {
              currentId = String(index);
            } else {
              currentId = object[this.get("buildData").idKey];
            }
            if (currentId == null) {
              continue;
            }
            if (idsDict[currentId] !== null) {
              if (this.get("buildData").blocks[key]) {
                currentAggr = this.get("buildData").blocks[key].aggregateBy;
              } else {
                currentAggr = _.findWhere(this.get("buildData").blocks, {
                  "id": key
                }).value;
              }
              kqvalue = QValueUtils.aggregateEnd(idsDict[currentId], currentAggr, key + "s of " + currentId);
              keyData.push(kqvalue);
              idsDict[currentId] = null;
            }
          }
          keyBlockData = new quadrigram.Models.DataBlockData(keyData);
          keyBlockData.set("label", key);
          keyBlockData.set("metaData", {
            "idLabel": this.get("buildData").idKey,
            "valueLabel": key,
            "viewMode": "list"
          });
          qvalue = new quadrigram.Models.QValue(keyBlockData, key);
          mainData.push(qvalue);
        }
      }
      if (mainData.length === 1) {
        mainBlock.get("metaData").viewMode = "list";
        mainBlock.get("metaData").valueLabel = mainData[0].value.get("metaData").valueLabel;
        mainBlock.get("metaData").idLabel = mainData[0].value.get("metaData").idLabel;
        mainData = mainData[0].value.get("data");
      } else {
        mainBlock.get("metaData").viewMode = "table";
      }
      mainBlock.get("metaData").idKey = this.get("buildData").idKey;
      mainBlock.set({
        "data": mainData,
        "fetchState": "ready"
      }, {
        "silent": true
      });
      mainBlock.trigger("dependency-change");
      shouldRemove = [];
      _ref2 = this.get("blocksCollection").models;
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        b = _ref2[_l];
        if (b.get("role") === "all") {
          continue;
        }
        if (b.get("role") === "level0names") {
          continue;
        }
        if (b.get("role") === "level1names") {
          continue;
        }
        if (_.find(mainBlock.get("data"), function(qv) {
          return qv.id === b.get("jsonKey");
        })) {
          continue;
        }
        if (mainDepth === 2 && _.find(mainBlock.get("data")[0].value.get("data"), function(qv) {
          return qv.id === b.get("jsonKey");
        })) {
          continue;
        }
        shouldRemove.push(b);
      }
      this.get("blocksCollection").remove(shouldRemove);
      mainDepth = BlockUtils.getBlockDepth(mainBlock);
      this.preBlocks = [];
      if (this.get("blocksCollection").where({
        "jsonKey": "id-col"
      }).length <= 0) {
        preBlock = new quadrigram.Models.PreFunctionBlockModel({
          "jsonKey": "id-col",
          "label": "Column names",
          "blockGroup": this,
          "role": "level0names",
          "order": 0,
          "operation": "GetNames",
          "origin": "file",
          "options": {
            "levelSelector": {
              "optId": "col",
              "value": mainDepth - 1
            },
            "originalBlock": mainBlock
          }
        });
        this.preBlocks.push(preBlock);
      }
      _ref3 = mainBlock.get("data");
      for (i = _m = 0, _len4 = _ref3.length; _m < _len4; i = ++_m) {
        qv = _ref3[i];
        if (this.get("blocksCollection").where({
          "jsonKey": qv.id
        }).length <= 0) {
          preBlock = new quadrigram.Models.PreFunctionBlockModel({
            "jsonKey": qv.id,
            "label": qv.id,
            "blockGroup": this,
            "role": "level0",
            "order": i,
            "operation": "Filter",
            "origin": "file",
            "options": {
              "originalBlock": mainBlock,
              "keySelector": {
                "optId": "col",
                "type": "id",
                "level": mainDepth
              },
              "relationSelector": {
                "optId": "eq",
                "label": "equal to",
                "value": "=="
              },
              "comparingValue": qv.id
            }
          });
          this.preBlocks.push(preBlock);
        }
      }
      if (mainDepth > 1) {
        if (this.get("blocksCollection").where({
          "jsonKey": "id-row"
        }).length <= 0) {
          preBlock = new quadrigram.Models.PreFunctionBlockModel({
            "jsonKey": "id-row",
            "label": "Row names",
            "blockGroup": this,
            "role": "level1names",
            "order": 0,
            "operation": "GetNames",
            "origin": "file",
            "options": {
              "levelSelector": {
                "optId": "row",
                "value": mainDepth - 2
              },
              "originalBlock": mainBlock
            }
          });
          this.preBlocks.push(preBlock);
        }
        _ref4 = mainBlock.get("data")[0].value.get("data");
        for (i = _n = 0, _len5 = _ref4.length; _n < _len5; i = ++_n) {
          qv = _ref4[i];
          if (this.get("blocksCollection").where({
            "jsonKey": qv.id
          }).length <= 0) {
            preBlock = new quadrigram.Models.PreFunctionBlockModel({
              "jsonKey": qv.id,
              "label": qv.id,
              "blockGroup": this,
              "role": "level1",
              "order": i,
              "operation": "Filter",
              "origin": "file",
              "options": {
                "originalBlock": mainBlock,
                "keySelector": {
                  "optId": "row",
                  "type": "id",
                  "level": mainDepth - 1
                },
                "relationSelector": {
                  "optId": "eq",
                  "label": "equal to",
                  "value": "=="
                },
                "comparingValue": qv.id
              }
            });
            this.preBlocks.push(preBlock);
          }
        }
      }
      return this.set("fetchState", "ready");
    };

    return ExternalBlockGroupModel;

  })(quadrigram.Models.BlockGroupModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.CustomBlockGroupModel = (function(_super) {
    __extends(CustomBlockGroupModel, _super);

    function CustomBlockGroupModel() {
      this.updateAndCreateSubBlocks = __bind(this.updateAndCreateSubBlocks, this);
      this.clearAllBlocks = __bind(this.clearAllBlocks, this);
      this.create = __bind(this.create, this);
      this.deleteBlock = __bind(this.deleteBlock, this);
      this.changeMainBlockLabel = __bind(this.changeMainBlockLabel, this);
      this.handleMainBlockLabelChange = __bind(this.handleMainBlockLabelChange, this);
      this.handleMainBlockFetchState = __bind(this.handleMainBlockFetchState, this);
      this.handleMainBlockSet = __bind(this.handleMainBlockSet, this);
      this.postModelSetup = __bind(this.postModelSetup, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = CustomBlockGroupModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CustomBlockGroupModel.prototype.create = function() {
      return this.set("type", "custom", {
        silent: true
      });
    };

    CustomBlockGroupModel.prototype.modelSetup = function(options) {
      this.loaded = true;
      if (this.get("mainBlock")) {
        this.handleMainBlockSet();
      }
      this.on("change:mainBlock", this.handleMainBlockSet);
      return this.on("change:label", this.changeMainBlockLabel);
    };

    CustomBlockGroupModel.prototype.postModelSetup = function() {
      if (this.get("mainBlock")) {
        this.get("mainBlock").on("change:fetchState", this.handleMainBlockFetchState);
        return this.latestOperation = this.get("mainBlock").get("operator").get("currentOperation");
      }
    };

    CustomBlockGroupModel.prototype.handleMainBlockSet = function() {
      if (this.get("mainBlock").get("defaultLabel") != null) {
        this.set("defaultLabel", this.get("mainBlock").get("defaultLabel"));
      }
      return this.get("mainBlock").on("change:label", this.handleMainBlockLabelChange);
    };

    CustomBlockGroupModel.prototype.handleMainBlockFetchState = function() {
      if (this.get("mainBlock").get("fetchState") === "ready") {
        if (this.latestOperation !== this.get("mainBlock").get("operator").get("currentOperation")) {
          this.latestOperation = this.get("mainBlock").get("operator").get("currentOperation");
          this.clearAllBlocks();
          return this.updateAndCreateSubBlocks(this.get("mainBlock"));
          /*
          _.defer(()=>
            @trigger("change-block-structure")
          )
          */

        } else {
          return this.updateAndCreateSubBlocks(this.get("mainBlock"));
          /*
          _.defer(()=>
            @trigger("change-block-content")
          )
          */

        }
      }
    };

    CustomBlockGroupModel.prototype.handleMainBlockLabelChange = function() {
      return this.set("label", this.get("mainBlock").get("label"));
    };

    CustomBlockGroupModel.prototype.changeMainBlockLabel = function() {
      if (this.get("mainBlock") != null) {
        return this.get("mainBlock").set("label", this.get("label"));
      }
    };

    CustomBlockGroupModel.prototype.deleteBlock = function(blockId) {
      var candidates;
      candidates = this.get("blocksCollection").where({
        "id": blockId
      });
      return this.get("blocksCollection").remove(candidates);
    };

    CustomBlockGroupModel.prototype.create = function() {
      var id;
      id = quadrigram.idManager.getId("customBlockGroup_");
      this.set("id", id);
      return this.set("type", "custom", {
        silent: true
      });
    };

    CustomBlockGroupModel.prototype.clearAllBlocks = function() {
      var block, blocksToRemove, i, _i, _len, _ref1;
      blocksToRemove = [];
      _ref1 = this.get("blocksCollection").models;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        block = _ref1[i];
        if (block !== this.get("mainBlock")) {
          block.detachAndDestroy();
          blocksToRemove.push(block);
        }
      }
      this.get("blocksCollection").remove(blocksToRemove);
      return this.preBlocks = [];
    };

    CustomBlockGroupModel.prototype.updateAndCreateSubBlocks = function(sourceBlock) {
      /*
      if !sourceBlock.get("metaData") || sourceBlock.get("metaData").viewMode == "cell"
        mainDepth = 0
      else if sourceBlock.get("metaData").viewMode == "list" 
        mainDepth = 1
      #else if sourceBlock.get("metaData").viewMode == "table" 
      #  mainDepth = 2
      else
        mainDepth = BlockUtils.getBlockDepth(sourceBlock)
      */

      var b, currentPreBlocks, i, j, keyId, label, lvl, mainDepth, maxLevel, newPreBlocks, origin, pb, pblvl, preBlock, qv, retroValue, role, sourceData, _i, _j, _k, _l, _len, _len1, _len2, _ref1, _ref2;
      mainDepth = BlockUtils.getBlockDepth(sourceBlock);
      origin = "formula";
      if (this.preBlocks == null) {
        this.preBlocks = [];
      }
      currentPreBlocks = {};
      _ref1 = this.preBlocks;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        pb = _ref1[_i];
        if (pb.get("operation") === "GetNames") {
          if (!currentPreBlocks[pb.get("options").levelSelector.value - 1]) {
            currentPreBlocks[pb.get("options").levelSelector.value - 1] = {};
          }
          currentPreBlocks[pb.get("options").levelSelector.value - 1]["__getNames__"] = pb;
        } else {
          if (!currentPreBlocks[pb.get("options").keySelector.level]) {
            currentPreBlocks[pb.get("options").keySelector.level] = {};
          }
          currentPreBlocks[pb.get("options").keySelector.level][pb.get("options").comparingValue] = pb;
        }
      }
      newPreBlocks = [];
      maxLevel = Math.min(Math.max(mainDepth - 1, Object.keys(currentPreBlocks).length - 1), 1);
      for (lvl = _j = 0; 0 <= maxLevel ? _j <= maxLevel : _j >= maxLevel; lvl = 0 <= maxLevel ? ++_j : --_j) {
        if (lvl === 0) {
          sourceData = sourceBlock.get("data");
          /*
          if maxLevel == 0
            sourceData = sourceBlock.get("data")
          else if sourceBlock.get("data").length>0 && sourceBlock.get("data")[0].value.get
            sourceData = sourceBlock.get("data")
          else
            sourceData = [{id:"CACA",value:sourceBlock.get("data")}]
          */

          keyId = "col";
          label = "Column";
          role = "level0";
        } else if (lvl === 1) {
          if (sourceBlock.get("data").length > 0 && (sourceBlock.get("data")[0].value != null) && sourceBlock.get("data")[0].value.get) {
            sourceData = sourceBlock.get("data")[0].value.get("data");
          } else {
            sourceData = [];
          }
          keyId = "row";
          label = "Row";
          role = "level1";
        }
        if (!BlockUtils.isEmpty(sourceBlock)) {
          if (this.get("blocksCollection").where({
            "jsonKey": "id-" + keyId
          }).length <= 0 && (!currentPreBlocks[lvl] || !currentPreBlocks[lvl]["__getNames__"])) {
            preBlock = new quadrigram.Models.PreFunctionBlockModel({
              "jsonKey": "id-" + keyId,
              "label": label + " names",
              "blockGroup": this,
              "role": "level" + lvl + "names",
              "order": 0,
              "operation": "GetNames",
              "origin": origin,
              "options": {
                "levelSelector": {
                  "optId": keyId,
                  "value": lvl + 1
                },
                "originalBlock": sourceBlock
              }
            });
            newPreBlocks.push(preBlock);
          } else if ((currentPreBlocks[lvl] != null) && currentPreBlocks[lvl]["__getNames__"]) {
            currentPreBlocks[lvl]["__getNames__"].state = "ready";
            newPreBlocks.push(currentPreBlocks[lvl]["__getNames__"]);
            currentPreBlocks[lvl]["__getNames__"] = null;
          }
        }
        if (quadrigram.router.compareVersions(quadrigram.router.dataModels.currentProject.get("pversion"), "0.9.3") < 0) {
          retroValue = mainDepth - lvl;
        } else {
          retroValue = lvl;
        }
        _ref2 = this.get("blocksCollection").models;
        for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
          b = _ref2[_k];
          if (b.get("role") === role) {
            b.set("state", "dead");
          }
        }
        for (i = _l = 0, _len2 = sourceData.length; _l < _len2; i = ++_l) {
          qv = sourceData[i];
          if (this.get("blocksCollection").where({
            "jsonKey": qv.id
          }).length <= 0 && (!currentPreBlocks[lvl] || !currentPreBlocks[lvl][qv.id])) {
            preBlock = new quadrigram.Models.PreFunctionBlockModel({
              "jsonKey": qv.id,
              "label": qv.id,
              "blockGroup": this,
              "role": role,
              "order": i,
              "operation": "Filter",
              "origin": origin,
              "options": {
                "originalBlock": sourceBlock,
                "keySelector": {
                  "optId": keyId,
                  "type": "id",
                  "level": retroValue
                },
                "relationSelector": {
                  "optId": "eq",
                  "label": "equal to",
                  "value": "=="
                },
                "comparingValue": qv.id
              }
            });
            newPreBlocks.push(preBlock);
          } else if ((currentPreBlocks[lvl] != null) && currentPreBlocks[lvl][qv.id]) {
            currentPreBlocks[lvl][qv.id].state = "ready";
            newPreBlocks.push(currentPreBlocks[lvl][qv.id]);
            currentPreBlocks[lvl][qv.id] = null;
          } else {
            this.get("blocksCollection").where({
              "jsonKey": qv.id
            })[0].set("state", "ready");
          }
        }
      }
      for (i in currentPreBlocks) {
        pblvl = currentPreBlocks[i];
        for (j in pblvl) {
          pb = pblvl[j];
          if (pb != null) {
            pb.state = "dead";
            newPreBlocks.push(pb);
          }
        }
      }
      return this.preBlocks = newPreBlocks;
    };

    /*
    updateSubBlocks:(sourceBlock)=>
      if !sourceBlock.get("data")? ||sourceBlock.get("data").length == 0
        for pb in @preBlocks
          pb.disabled = true
          pb.trigger("change:data")
      else
        for pb in @preBlocks
          if pb.get("jsonKey") == "id-col" || pb.get("jsonKey") == "id-row" 
            pb.disabled = false
          else if _.findWhere(sourceBlock.get("data")[0].value.get("data"),{id:pb.get("options").comparingValue})?
            pb.disabled = false
          else if _.findWhere(sourceBlock.get("data"),{id:pb.get("options").comparingValue})?
            pb.disabled = false
          else   
            pb.disabled = true
          pb.trigger("change:data")
        
    
        ##FALTA  ALGO COMO ESTO pero "entagled" con lo de antes para no repetir!!!
        #DEBERIA UNIFICARSE CON CREATE BLOCKS!!!!
        origin = "formula"
        mainDepth = BlockUtils.getBlockDepth(sourceBlock)
        for qv,i in sourceBlock.get("data")[0].value.get("data")
          if @get("blocksCollection").where({"jsonKey":qv.id}).length<=0
            preBlock = new quadrigram.Models.PreFunctionBlockModel "jsonKey":qv.id, "label":qv.id,"blockGroup":@,"role":"level1","order":i,"operation":"Filter", "origin":origin,"options":{
              "originalBlock":sourceBlock,
              "keySelector":{"optId":"row","type":"id" ,"level":mainDepth-1},
              "relationSelector":{"optId":"eq","label":"equal to","value":"=="},
              "comparingValue":qv.id,
            }
            @preBlocks.push(preBlock)
    
        @trigger("change-block-structure")
    */


    /*
    createSubBlocks:(sourceBlock)=>
      ##PREBLOCKS
      
      mainDepth = BlockUtils.getBlockDepth(sourceBlock)
      @preBlocks = []
    
      ##Remove disapeared blocks
      
      #chapuzilla para no tener que hacer wheres
      tmpArray = sourceBlock.get("data")
      newBlockIds = {}
      for qv in tmpArray
        newBlockIds[qv.id]=true
    
      blocksToRemove = []
      for block,i in @get("blocksCollection").models
        if block != @get("mainBlock")
          block.detachAndDestroy()
          blocksToRemove.push(block)
    
      @get("blocksCollection").remove(blocksToRemove)
      
      origin = "formula"
     
      if @get("blocksCollection").where({"jsonKey":"id-col"}).length<=0
        preBlock = new quadrigram.Models.PreFunctionBlockModel "jsonKey":"id-col", "label":"Column names","blockGroup":@,"role":"level0names","order":0, "operation":"GetNames", "origin":origin, "options":{
              "levelSelector": {"optId":"col","value":mainDepth-1}
              "originalBlock":sourceBlock
            }
        @preBlocks.push(preBlock)
    
      ##CREATE COLS AND ROWS preFunctions if they are not in the blocksCOllection
      ##FIRST LEVEL (COLS or ROWS depending on mainDetph)
      for qv,i in sourceBlock.get("data")
        if @get("blocksCollection").where({"jsonKey":qv.id}).length<=0
          preBlock = new quadrigram.Models.PreFunctionBlockModel "jsonKey":qv.id, "label":qv.id,"blockGroup":@,"role":"level0","order":i, "operation":"Filter", "origin":origin,"options":{
            "originalBlock":sourceBlock,
            "keySelector":{"optId":"col","type":"id" ,"level":mainDepth}
            "relationSelector":{"optId":"eq","label":"equal to","value":"=="},
            "comparingValue":qv.id
          }
          @preBlocks.push(preBlock)
    
    
      ##SECOND LEVEL (ROWS or Nothing depending on mainDetph) 
    
      if mainDepth > 1
        if @get("blocksCollection").where({"jsonKey":"id-row"}).length<=0
          preBlock = new quadrigram.Models.PreFunctionBlockModel "jsonKey":"id-row", "label":"Row names","blockGroup":@,"role":"level1names","order":0, "operation":"GetNames", "origin":origin,"options":{
              "levelSelector": {"optId":"row","value":mainDepth-2}
              "originalBlock":sourceBlock
            }
          @preBlocks.push(preBlock)
    
        for qv,i in sourceBlock.get("data")[0].value.get("data")
          if @get("blocksCollection").where({"jsonKey":qv.id}).length<=0
            preBlock = new quadrigram.Models.PreFunctionBlockModel "jsonKey":qv.id, "label":qv.id,"blockGroup":@,"role":"level1","order":i,"operation":"Filter", "origin":origin,"options":{
              "originalBlock":sourceBlock,
              "keySelector":{"optId":"row","type":"id" ,"level":mainDepth-1},
              "relationSelector":{"optId":"eq","label":"equal to","value":"=="},
              "comparingValue":qv.id,
            }
            @preBlocks.push(preBlock)
    */


    return CustomBlockGroupModel;

  })(quadrigram.Models.BlockGroupModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.VizBlockGroupModel = (function(_super) {
    __extends(VizBlockGroupModel, _super);

    function VizBlockGroupModel() {
      this.toJSON = __bind(this.toJSON, this);
      this.hasOutputs = __bind(this.hasOutputs, this);
      this.create = __bind(this.create, this);
      _ref = VizBlockGroupModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VizBlockGroupModel.prototype.create = function() {
      return this.set("type", "viz", {
        silent: true
      });
    };

    VizBlockGroupModel.prototype.hasOutputs = function() {
      if (this.get("ownerViz") instanceof quadrigram.Models.RectangleAreaModel || this.get("ownerViz") instanceof quadrigram.Models.TextAreaModel || this.get("ownerViz") instanceof quadrigram.Models.LinkControlModel || this.get("ownerViz") instanceof quadrigram.Models.DynamicTextControlModel || this.get("ownerViz") instanceof quadrigram.Models.IFrameControlModel || this.get("ownerViz") instanceof quadrigram.Models.ImageControlModel || this.get("ownerViz") instanceof quadrigram.Models.YoutubeControlModel || this.get("ownerViz") instanceof quadrigram.Models.ShareButtonsControlModel) {
        return false;
      } else {
        return true;
      }
    };

    VizBlockGroupModel.prototype.toJSON = function(options) {
      var result,
        _this = this;
      result = VizBlockGroupModel.__super__.toJSON.apply(this, arguments);
      if ((options != null) && options.ommitData) {
        result.blocksCollection = result.blocksCollection.filter(function(block) {
          if (block.type === "Editable") {
            return false;
          }
          if (block.role === "output" && block.insideSlot.length === 0) {
            return false;
          }
          return true;
        });
        if (result.blocksCollection.lenght === 0) {
          result = null;
        }
      }
      return result;
    };

    return VizBlockGroupModel;

  })(quadrigram.Models.BlockGroupModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.FunctionBlockGroupModel = (function(_super) {
    __extends(FunctionBlockGroupModel, _super);

    function FunctionBlockGroupModel() {
      this.create = __bind(this.create, this);
      _ref = FunctionBlockGroupModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FunctionBlockGroupModel.prototype.create = function() {
      return this.set("type", "function", {
        silent: true
      });
    };

    return FunctionBlockGroupModel;

  })(quadrigram.Models.BlockGroupModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.BlockGroupCollection = (function(_super) {
    __extends(BlockGroupCollection, _super);

    function BlockGroupCollection() {
      this.toJSON = __bind(this.toJSON, this);
      this.filterByType = __bind(this.filterByType, this);
      _ref = BlockGroupCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BlockGroupCollection.prototype.model = quadrigram.Models.BlockGroupModel;

    BlockGroupCollection.prototype.filterByType = function(type) {
      var output;
      output = new quadrigram.Collections.BlockGroupCollection(this.where({
        type: type
      }));
      return output;
    };

    BlockGroupCollection.prototype.toJSON = function(options) {
      var result,
        _this = this;
      result = BlockGroupCollection.__super__.toJSON.apply(this, arguments);
      if ((options != null) && options.ommitData) {
        result = result.filter(function(blockGroup) {
          var originalBG;
          if (blockGroup.type === "function") {
            originalBG = _this.find({
              "id": blockGroup.id
            });
            try {
              if (originalBG && originalBG.get("ownerOp") && originalBG.get("ownerOp").get("ownerBlock") && (originalBG.get("ownerOp").get("ownerBlock").get("ownerCustomBlockGroup") != null)) {
                return true;
              }
              if (!originalBG || !originalBG.get("ownerOp") || !originalBG.get("ownerOp").get("ownerBlock") || originalBG.get("ownerOp").get("ownerBlock").get("insideSlot").models.length === 0) {
                return false;
              }
            } catch (_error) {
              elog("error checking where to save or not a blockgroup");
            }
          }
          return true;
        });
      }
      return result;
    };

    return BlockGroupCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ProjectModel = (function(_super) {
    __extends(ProjectModel, _super);

    function ProjectModel() {
      this.getExternalBlockGroupsReportFromProject = __bind(this.getExternalBlockGroupsReportFromProject, this);
      this.toggleGuidelines = __bind(this.toggleGuidelines, this);
      this.togglePreview = __bind(this.togglePreview, this);
      this.deleteCustomBlock = __bind(this.deleteCustomBlock, this);
      this.createCustomBlock = __bind(this.createCustomBlock, this);
      this.deleteBlockGroup = __bind(this.deleteBlockGroup, this);
      this.getCustomBlocks = __bind(this.getCustomBlocks, this);
      this.createExternalGroup = __bind(this.createExternalGroup, this);
      this.updateVisualizerModelFrame = __bind(this.updateVisualizerModelFrame, this);
      this.updateModelFrames = __bind(this.updateModelFrames, this);
      this.removeVisualizer = __bind(this.removeVisualizer, this);
      this.createVisualizer = __bind(this.createVisualizer, this);
      this.errorWhileProjectWasSaving = __bind(this.errorWhileProjectWasSaving, this);
      this.projectWasSaved = __bind(this.projectWasSaved, this);
      this.checkIntegrity = __bind(this.checkIntegrity, this);
      this.getInitialData = __bind(this.getInitialData, this);
      this.save = __bind(this.save, this);
      this.startTracking = __bind(this.startTracking, this);
      this.redo = __bind(this.redo, this);
      this.undo = __bind(this.undo, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.updateRelations = __bind(this.updateRelations, this);
      this.postModelSetup = __bind(this.postModelSetup, this);
      this.postCreate = __bind(this.postCreate, this);
      this.hasPendingResources = __bind(this.hasPendingResources, this);
      this.create = __bind(this.create, this);
      this.requestSave = __bind(this.requestSave, this);
      this.requestShare = __bind(this.requestShare, this);
      this.setSaveState = __bind(this.setSaveState, this);
      this.autoSave = __bind(this.autoSave, this);
      this.checkSave = __bind(this.checkSave, this);
      this.handleDestruction = __bind(this.handleDestruction, this);
      this.startAutosave = __bind(this.startAutosave, this);
      this.initialize = __bind(this.initialize, this);
      this.urlRoot = __bind(this.urlRoot, this);
      _ref = ProjectModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ProjectModel.prototype.urlRoot = function() {
      return this.instanceUrl;
    };

    ProjectModel.prototype.relations = [
      {
        type: Backbone.HasMany,
        key: 'blockGroupsCollection',
        relatedModel: "quadrigram.Models.BlockGroupModel",
        includeInJSON: true,
        collectionType: "quadrigram.Collections.BlockGroupCollection",
        reverseRelation: {
          key: 'project',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }, {
        type: Backbone.HasMany,
        key: 'visualizersCollection',
        relatedModel: "quadrigram.Models.VisualizerModel",
        includeInJSON: true,
        collectionType: "quadrigram.Collections.VisualizerCollection",
        reverseRelation: {
          key: 'project',
          bubbleUp: true,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }
    ];

    ProjectModel.prototype.undoableEvents = ["add:blockGroupsCollection", "remove:blockGroupsCollection", "add:visualizersCollection", "remove:visualizersCollection"];

    ProjectModel.prototype.bubblingEvents = ["add:blockGroupsCollection", "remove:blockGroupsCollection", "add:visualizersCollection", "remove:visualizersCollection"];

    ProjectModel.prototype.initialize = function() {
      ProjectModel.__super__.initialize.apply(this, arguments);
      this.undoManager = new Backbone.UndoManager();
      this.undoManager.set("maximumStackLength", 200);
      this.undoManager.register(this);
      this.instanceUrl = quadrigram.baseUrl + "rs/google/project";
      return this.on("killProject", this.handleDestruction);
    };

    ProjectModel.prototype.startAutosave = function() {
      if (quadrigram.environment === "editor") {
        this.isSaved = "true";
        this.on("all", this.checkSave);
        quadrigram.router.appViews.headerView.setSaveState("success");
        return this.saveInterval || (this.saveInterval = setInterval(this.autoSave, 15000));
      }
    };

    ProjectModel.prototype.handleDestruction = function() {
      log("destroying project");
      return clearInterval(this.saveInterval);
    };

    ProjectModel.prototype.checkSave = function(e, target) {
      if ((this.autoSaveEnabled == null) || !this.autoSaveEnabled) {
        return;
      }
      if (e !== "childModified" && e !== "request" && e !== "sync" && e !== "save" && e !== "saved" && e !== "change:body") {
        if (e === "change" && target === this) {
          return;
        }
        this.isSaved = "false";
        return this.setSaveState();
      }
    };

    ProjectModel.prototype.autoSave = function(e) {
      if (this.isSaved !== "true" && this.autoSaveEnabled) {
        return this.requestSave();
      }
    };

    ProjectModel.prototype.setSaveState = function() {
      if (this.saveState !== "saving") {
        if (this.isSaved === "true") {
          return quadrigram.router.appViews.headerView.setSaveState("success");
        } else {
          return quadrigram.router.appViews.headerView.setSaveState("ready");
        }
      }
    };

    ProjectModel.prototype.requestShare = function(emailList) {
      return quadrigram.router.managers.serverManager.shareProject(emailList, this.get("id"));
    };

    ProjectModel.prototype.requestSave = function() {
      var _this = this;
      if (this.saveState !== "saving") {
        this.on("saved", function(success) {
          _this.off("saved");
          if (success) {
            if (_this.isSaved === "almost") {
              _this.isSaved = "true";
              quadrigram.router.appViews.headerView.setSaveState("success");
              return _this.saveState = "success";
            } else {
              _this.isSaved = "false";
              quadrigram.router.appViews.headerView.setSaveState("ready");
              return _this.saveState = "ready";
            }
          } else {
            _this.isSaved = "false";
            _this.saveState = "success";
            return quadrigram.router.appViews.headerView.setSaveState("error");
          }
        });
        this.saveState = "saving";
        this.isSaved = "almost";
        quadrigram.router.appViews.headerView.setSaveState("saving");
        return this.save();
      }
    };

    ProjectModel.prototype.create = function() {
      var defaultSettings;
      defaultSettings = LayoutUtils.presets["Web"];
      defaultSettings.backgroundColor = "#DDD";
      defaultSettings.foregroundColor = "#FFF";
      /*
      defaultSettings =
        backgroundColor: "#DDD",
        foregroundColor: "#FFF",
        layoutFormat: "web-layout",
        #width: 600,
        #height: 300,
        maxWidth: 900,
        minWidth: 600,
        #colWidth: 80,
        margins: 5,
        numCols: 12,
        numRows: 6
      */

      this.set("layout-settings", LayoutUtils.validateLayoutSettings(defaultSettings));
      this.set("pname", "Untitled Project");
      this.set({
        "pversion": quadrigram.version
      });
      return this.unset("id");
    };

    ProjectModel.prototype.hasPendingResources = function() {
      var blockGroup, output, _i, _len, _ref1;
      output = false;
      _ref1 = this.get("blockGroupsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        blockGroup = _ref1[_i];
        if (blockGroup instanceof quadrigram.Models.ExternalBlockGroupModel && blockGroup.fetchState !== "ready") {
          output = true;
        }
      }
      return output;
    };

    ProjectModel.prototype.postCreate = function() {
      return log("post create");
    };

    ProjectModel.prototype.postModelSetup = function() {
      log("postModelSetup");
      return this.fetchedAndReady = true;
    };

    ProjectModel.prototype.updateRelations = function(changedAttrs, options) {
      ProjectModel.__super__.updateRelations.call(this, changedAttrs, options);
      if (this.fetchedAndReady) {
        this.fetchedAndReady = false;
        return log("relations updated -> all created -> should upate all outputs");
      }
    };

    ProjectModel.prototype.modelSetup = function(options) {
      return this.on("change:layoutData", this.updateModelFrames);
    };

    ProjectModel.prototype.undo = function() {
      /*
      check for @undoManager.stack[@undoManager.pointer] para saber quien era modelo que cambió, i seleccionalro!
      de hecho no solo seleccionar, sino tambien "subseleccionar"
      Entonces hay que disparar un requestFocus des del modelo y la vista lo escucha (?)
      casos: subvistas de los inspectors (ok)
      */

      quadrigram.tracker.sendEvent({
        event_type: 303
      });
      return this.undoManager.undo(true);
    };

    ProjectModel.prototype.redo = function() {
      quadrigram.tracker.sendEvent({
        event_type: 303
      });
      return this.undoManager.redo(true);
    };

    ProjectModel.prototype.startTracking = function() {
      this.undoManager.startTracking();
      return this.autoSaveEnabled = true;
    };

    ProjectModel.prototype.save = function(attrs, options) {
      var _this = this;
      options || (options = {});
      options.beforeSend = function(xhr) {
        return xhr.setRequestHeader("pname", unescape(encodeURIComponent(_this.get("pname"))));
      };
      options.success = this.projectWasSaved;
      options.error = this.errorWhileProjectWasSaving;
      options.data = JSON.stringify(this.toJSON({
        "ommitData": true
      }));
      return Backbone.Model.prototype.save.call(this, attrs, options);
    };

    ProjectModel.prototype.getInitialData = function() {
      var bg, result, _i, _len, _ref1;
      result = [];
      _ref1 = this.get("blockGroupsCollection").where({
        "type": "external"
      });
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        bg = _ref1[_i];
        result.push(bg.toOptimizedResource());
      }
      return result;
    };

    ProjectModel.prototype.checkIntegrity = function() {
      if (this.get("layoutData").length !== this.get("visualizersCollection").models.length) {
        elog("Missing visualizer");
        return false;
      }
      return false;
    };

    ProjectModel.prototype.projectWasSaved = function(model, response) {
      if ((response.code != null) && response.code !== 200) {
        return this.errorWhileProjectWasSaving(model, response);
      } else {
        this.set("id", response.body.id);
        return this.trigger("saved", true);
      }
    };

    ProjectModel.prototype.errorWhileProjectWasSaving = function(model, response) {
      if (!this.get("id")) {
        this.set("pname", "Untitled Project");
      }
      /*quadrigram.router.appViews.loaderView.trigger("loaderErrorMessage","Error saving current project, please try again")
      setTimeout(()=>
        quadrigram.router.appViews.loaderView.hide()
      ,3000)
      */

      return this.trigger("saved", false);
    };

    /*DEPRECATED
    createText:(type,addMode,options)=>
      vizModel = @createVisualizer("TextArea",addMode,{"textType":type})
    
      log "should modify vizModel acording to type"
    */


    ProjectModel.prototype.createVisualizer = function(vizClassID, addMode, options) {
      var vizModel, vizModelClass;
      vizModelClass = eval("quadrigram.Models." + vizClassID + "Model");
      vizModel = new vizModelClass({
        "type": vizClassID,
        "config": options
      });
      vizModel.options = options;
      vizModel.addMode = addMode;
      vizModel.set("project", this);
      quadrigram.tracker.sendEvent({
        event_type: 201,
        event_subtype: 2,
        client_data: {
          vizType: vizClassID
        }
      });
      return vizModel;
    };

    ProjectModel.prototype.removeVisualizer = function(vizModel) {
      vizModel.unset("project");
      vizModel.get("blockGroup").unset("project");
      this.deleteBlockGroup(vizModel.get("blockGroup"));
      return this.set("layoutData", quadrigram.router.appViews.projectView.getLayoutData(), {
        silent: true
      });
    };

    ProjectModel.prototype.updateModelFrames = function() {
      var consistentLayoutData, e, i, vizFrame, vizModel, _i, _len, _ref1, _results;
      if (this.get("layoutData")) {
        consistentLayoutData = [];
        try {
          _ref1 = this.get("layoutData");
          _results = [];
          for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
            vizFrame = _ref1[i];
            vizModel = this.get("visualizersCollection").where({
              "id": vizFrame.vizID
            })[0];
            if (vizModel) {
              this.updateVisualizerModelFrame(vizModel, vizFrame);
              _results.push(consistentLayoutData.push(vizModel));
            } else {
              _results.push(this.trigger("abort"));
            }
          }
          return _results;
        } catch (_error) {
          e = _error;
          return this.trigger("abort");
        }
      }
    };

    ProjectModel.prototype.updateVisualizerModelFrame = function(vizModel, frame) {
      if (!vizModel) {
        elog("layoutData did not contain the model?");
        return;
      }
      if (+frame.col !== +vizModel.getProperty("col").getValues()) {
        vizModel.setProperty("col", {
          "value": +frame.col
        });
      }
      if (+frame.row !== +vizModel.getProperty("row").getValues()) {
        vizModel.setProperty("row", {
          "value": +frame.row
        });
      }
      if (+frame.size_x !== +vizModel.getProperty("size_x").getValues()) {
        vizModel.setProperty("size_x", {
          "value": +frame.size_x
        });
      }
      if (+frame.size_y !== +vizModel.getProperty("size_y").getValues()) {
        return vizModel.setProperty("size_y", {
          "value": +frame.size_y
        });
      }
    };

    ProjectModel.prototype.createExternalGroup = function(metadata) {
      var group;
      group = new quadrigram.Models.ExternalBlockGroupModel({
        "project": this,
        "rid": metadata.get("id"),
        "label": metadata.get("name"),
        "spreadsheet": metadata.get("spreadSheet"),
        "provider": metadata.get("providerName"),
        "exportedProvider": "local",
        "link": metadata.get("link")
      });
      quadrigram.tracker.sendEvent({
        event_type: 201,
        event_subtype: 1,
        client_data: {
          fileName: metadata.get("name")
        }
      });
      return group;
    };

    /*
    refreshExternalGroup:(group)=>
      group = new quadrigram.Models.ExternalBlockGroupModel({"project":@,"rid":metadata.get("rid"),"label":metadata.get("label"), "spreadsheet":metadata.get("spreadSheet"), "provider":metadata.get("provider"), "link":metadata.get("link")})
    */


    /*
    createCustomGroup:()=>
      group = new quadrigram.Models.CustomBlockGroupModel({"project":@})
    
    getCustomGroup:()=>
      @get("blockGroupsCollection").where({"type":"custom"})[0]
    */


    ProjectModel.prototype.getCustomBlocks = function() {
      var customGroups, g, result, _i, _len;
      customGroups = this.get("blockGroupsCollection").where({
        "type": "custom"
      });
      result = new quadrigram.Collections.DataBlockCollection;
      for (_i = 0, _len = customGroups.length; _i < _len; _i++) {
        g = customGroups[_i];
        result.add(g.get("blocksCollection").models[0]);
      }
      return result;
    };

    ProjectModel.prototype.deleteBlockGroup = function(group) {
      return group.removeFromProject();
    };

    ProjectModel.prototype.createCustomBlock = function() {
      /*
      if @.get("blockGroupsCollection").where({"type":"custom"}).length==0
        group = new quadrigram.Models.CustomBlockGroupModel({"project":@})
      else
        group = @.get("blockGroupsCollection").where({"type":"custom"})[0]
      */

      var block, group, label;
      label = quadrigram.labelManager.getPropperName("New formula");
      group = new quadrigram.Models.CustomBlockGroupModel({
        "project": this,
        "label": label
      });
      block = new quadrigram.Models.FunctionBlockModel({
        "blockGroup": group,
        "ownerCustomBlockGroup": group,
        "label": label,
        "defaultLabel": true,
        "origin": "formula",
        "role": "all"
      });
      quadrigram.tracker.sendEvent({
        event_type: 201,
        event_subtype: 3
      });
      return block;
    };

    ProjectModel.prototype.deleteCustomBlock = function(customBlockId) {
      var customGroup, customGroupCandidates;
      customGroupCandidates = this.get("blockGroupsCollection").where({
        "type": "custom"
      });
      if (customGroupCandidates.length === 0) {
        return;
      }
      customGroup = customGroupCandidates[0];
      return customGroup.deleteBlock(customBlockId);
    };

    ProjectModel.prototype.togglePreview = function() {
      if (this.mode === "preview") {
        this.mode = "edit";
      } else {
        this.mode = "preview";
      }
      return this.trigger("changedMode");
    };

    ProjectModel.prototype.toggleGuidelines = function() {
      if (this.showGuidelines === true) {
        this.showGuidelines = false;
      } else {
        this.showGuidelines = true;
      }
      return this.trigger("changedGuidelinesDisplay");
    };

    ProjectModel.prototype.getExternalBlockGroupsReportFromProject = function() {
      var block, blockGroup, blocks, externalBlockGroups, _i, _len, _results;
      externalBlockGroups = this.get("blockGroupsCollection").filterByType("external").models;
      _results = [];
      for (_i = 0, _len = externalBlockGroups.length; _i < _len; _i++) {
        blockGroup = externalBlockGroups[_i];
        log("\t- " + blockGroup.get("label") + " (" + blockGroup.get("fetchState") + ")");
        blocks = blockGroup.get("blocksCollection").models;
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = blocks.length; _j < _len1; _j++) {
            block = blocks[_j];
            _results1.push(log("\t\t* " + block.get("label")));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return ProjectModel;

  })(quadrigram.Models.QModel);

  quadrigram.Models.ProjectModel.setup();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.UIView = (function(_super) {
    __extends(UIView, _super);

    function UIView() {
      this.setDevMode = __bind(this.setDevMode, this);
      this.handleModeChange = __bind(this.handleModeChange, this);
      this.showExportOptions = __bind(this.showExportOptions, this);
      this.showProjects = __bind(this.showProjects, this);
      this.showFilePicker = __bind(this.showFilePicker, this);
      this.showImagePicker = __bind(this.showImagePicker, this);
      this.showBlockBuilder = __bind(this.showBlockBuilder, this);
      this.showBlockPreview = __bind(this.showBlockPreview, this);
      this.updateVizInspector = __bind(this.updateVizInspector, this);
      this.removeSubviews = __bind(this.removeSubviews, this);
      this.addSubViewEl = __bind(this.addSubViewEl, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = UIView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    UIView.prototype.template = JST['app/scripts/templates/UI/UI.hbs'];

    UIView.prototype._serializeData = function() {
      this.templateData = {};
      return this.templateData;
    };

    UIView.prototype.viewDidRender = function() {
      this.model.on("changedMode", this.handleModeChange);
      this.removeSubviews();
      this.topMenu = new quadrigram.Views.TopMenuView({
        model: this.model
      });
      $(".top-menu-container").append(this.topMenu.$el);
      this.topMenu.render();
      this.toolbar = new quadrigram.Views.Toolbar({
        model: this.model
      });
      $(".toolbar-container").append(this.toolbar.$el);
      this.toolbar.render();
      this.vizInspector = new quadrigram.Views.VizInspectorView({
        el: $(".viz-inspector-container"),
        model: null
      });
      this.vizInspector.render();
      return this.blockBuilder = new quadrigram.Views.BlockBuilderView();
    };

    UIView.prototype.addSubViewEl = function(view, selector) {
      this.subViews[selector] = view;
      view.render();
      $(selector).empty();
      return $(selector).append(view.$el);
    };

    UIView.prototype.removeSubviews = function() {
      if (this.topMenu) {
        this.topMenu.remove();
        return this.toolbar.remove();
      }
    };

    UIView.prototype.updateVizInspector = function(vizModel) {
      if (vizModel != null) {
        this.vizInspector.model = vizModel;
        this.vizInspector.update();
        return this.vizInspector.show();
      } else {
        return this.vizInspector.hide();
      }
    };

    /*
    updateBlockInspector:(blockModel)=>
      @blockInspector.setTarget(blockModel)
    
      if blockModel?
        @blockInspector.show()
      else
        @blockInspector.hide()
    */


    UIView.prototype.showBlockPreview = function(blockModel) {
      var blockPreviewer;
      blockPreviewer = new quadrigram.Views.BlockPreviewView();
      blockPreviewer.model = blockModel;
      return blockPreviewer.render();
    };

    /*
    toggleDataFactory:(value)=>
      @dataFactory.setVisible(value)
    */


    UIView.prototype.showBlockBuilder = function(blockGroupModel) {
      this.blockBuilder.model = blockGroupModel;
      return this.blockBuilder.render();
    };

    UIView.prototype.showImagePicker = function(pickerCallback) {
      var filePicker;
      filePicker = new quadrigram.Views.ImagePicker({
        model: this.model
      });
      filePicker.callBack = pickerCallback;
      return filePicker.render();
    };

    UIView.prototype.showFilePicker = function(pickerCallback) {
      var filePicker;
      filePicker = new quadrigram.Views.FilePicker({
        model: this.model
      });
      filePicker.callBack = pickerCallback;
      return filePicker.render();
    };

    UIView.prototype.showProjects = function() {
      var projectsPicker;
      projectsPicker = new quadrigram.Views.ProjectsPicker({
        model: this.model
      });
      projectsPicker.callBack = quadrigram.router.loadProject;
      return projectsPicker.render();
    };

    UIView.prototype.showExportOptions = function() {
      var projectsPicker;
      quadrigram.router.saveCurrentProject();
      quadrigram.router.optimizeCurrentProjectData();
      projectsPicker = new quadrigram.Views.ExportOptions({
        model: this.model
      });
      projectsPicker.callBack = quadrigram.router.exportProject;
      projectsPicker.render();
      return quadrigram.tracker.sendEvent({
        event_type: 307,
        client_data: {
          pname: quadrigram.router.dataModels.currentProject.get("pname")
        }
      });
      /*
      quadrigram.router.managers.serverManager.requestExportWindow()
      quadrigram.tracker.sendEvent({event_type: 307, client_data: {pname: quadrigram.router.dataModels.currentProject.get("pname")}})
      */

    };

    UIView.prototype.handleModeChange = function() {
      if (this.model.mode === "preview") {
        this.topMenu.hide();
        return quadrigram.router.appViews.headerView.$el.addClass("preview-mode");
      } else {
        this.topMenu.show();
        return quadrigram.router.appViews.headerView.$el.removeClass("preview-mode");
      }
    };

    UIView.prototype.setDevMode = function() {
      elog("Dev Mode activated!");
      this.devModeActive = true;
      return quadrigram.router.appViews.headerView.$el.addClass("dev-mode");
    };

    return UIView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.LoadableView = (function(_super) {
    __extends(LoadableView, _super);

    function LoadableView() {
      this.setLoading = __bind(this.setLoading, this);
      this.postRender = __bind(this.postRender, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.init = __bind(this.init, this);
      _ref = LoadableView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LoadableView.prototype.loadingTemplate = JST['app/scripts/templates/UI/loading.hbs'];

    LoadableView.prototype.init = function() {
      var _this = this;
      this.on("render", this.postRender);
      this.model.on("request", function(model) {
        return model.set("fetchState", "loading");
      });
      this.model.on("sync", function(model) {
        return model.set("fetchState", "ready");
      });
      return this.model.on("error", function(model) {
        return model.set("fetchState", "error");
      });
    };

    LoadableView.prototype.viewWillRemove = function() {
      this.off("render");
      this.model.off("request");
      this.model.off("sync");
      return this.model.off("error");
    };

    LoadableView.prototype.postRender = function() {
      return this.setLoading();
    };

    LoadableView.prototype.setLoading = function() {
      if (this.loaderView) {
        this.loaderView.remove();
        this.loaderView = null;
      }
      if (this.model.get("fetchState") === "error") {
        return elog("should display error as loading overlay");
      } else if (this.model.get("fetchState") === "loading") {
        this.loaderView = $(this.loadingTemplate());
        return this.$el.append(this.loaderView);
      }
    };

    return LoadableView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.HeaderView = (function(_super) {
    __extends(HeaderView, _super);

    function HeaderView() {
      this.updateVisibileState = __bind(this.updateVisibileState, this);
      this.setSaveState = __bind(this.setSaveState, this);
      this.userProfileClicked = __bind(this.userProfileClicked, this);
      this.helpClicked = __bind(this.helpClicked, this);
      this.redoClicked = __bind(this.redoClicked, this);
      this.undoClicked = __bind(this.undoClicked, this);
      this.togglePreview = __bind(this.togglePreview, this);
      this["export"] = __bind(this["export"], this);
      this.shareClicked = __bind(this.shareClicked, this);
      this.saveClicked = __bind(this.saveClicked, this);
      this.showProjectName = __bind(this.showProjectName, this);
      this.requestProjectLoad = __bind(this.requestProjectLoad, this);
      this.logout = __bind(this.logout, this);
      this.newProject = __bind(this.newProject, this);
      this.renameProject = __bind(this.renameProject, this);
      this.saveAsProject = __bind(this.saveAsProject, this);
      this.openProjects = __bind(this.openProjects, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = HeaderView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HeaderView.prototype.events = {
      "click .open-button": "openProjects",
      "click .new-button": "newProject",
      "click .save-as-button": "saveAsProject",
      "click .rename-button": "renameProject",
      "click .save-button": "saveClicked",
      "click .share-button": "shareClicked",
      "click .user-profile": "userProfileClicked",
      "click .logout-button": "logout",
      "click .export-button": "export",
      "click .save-btn": "saveClicked",
      "click #project-title": "renameProject",
      "click .toggle-preview-btn": "togglePreview",
      "click .undo": "undoClicked",
      "click .redo": "redoClicked",
      "click .help": "helpClicked"
    };

    HeaderView.prototype.template = JST['app/scripts/templates/UI/header.hbs'];

    HeaderView.prototype.viewWillRender = function() {
      return this.templateData.version = quadrigram.version;
    };

    HeaderView.prototype.viewDidRender = function() {
      this.$el.removeClass("hidden");
      return this.$el.find(".project-loader-btn").on("click", this.requestProjectLoad);
      /*
      @model.on("change:pname",()=>
        @showProjectName(@model.get("pname"))
      )
      */

    };

    HeaderView.prototype.openProjects = function() {
      return quadrigram.router.appViews.uiView.showProjects();
    };

    HeaderView.prototype.saveAsProject = function() {
      return quadrigram.router.saveAsCurrentProject();
    };

    HeaderView.prototype.renameProject = function() {
      return quadrigram.router.renameCurrentProject();
    };

    HeaderView.prototype.newProject = function() {
      return quadrigram.router.loadProject();
    };

    HeaderView.prototype.logout = function() {
      return quadrigram.router.managers.serverManager.logout();
    };

    HeaderView.prototype.requestProjectLoad = function() {
      return quadrigram.router.navigate("project", {
        trigger: true
      });
    };

    HeaderView.prototype.showProjectName = function(name) {
      if (name === "") {
        this.$el.find("#project-title").addClass("hidden");
        this.$el.find(".save-component").addClass("hidden");
        this.$el.find(".header-edit-tools").addClass("hidden");
      } else {
        this.$el.find("#project-title").removeClass("hidden");
        this.$el.find(".save-component").removeClass("hidden");
        this.$el.find(".header-edit-tools").removeClass("hidden");
      }
      return this.$el.find("#project-title").html(name);
    };

    HeaderView.prototype.saveClicked = function(e) {
      return quadrigram.router.saveCurrentProject();
    };

    HeaderView.prototype.shareClicked = function(e) {
      return quadrigram.router.shareCurrentProject();
    };

    HeaderView.prototype["export"] = function() {
      return quadrigram.router.appViews.uiView.showExportOptions();
    };

    HeaderView.prototype.togglePreview = function(e) {
      quadrigram.router.dataModels.currentProject.togglePreview();
      return $(e.currentTarget).find('a').toggleClass('active');
    };

    HeaderView.prototype.undoClicked = function(e) {
      log("undoClidkec");
      return quadrigram.router.dataModels.currentProject.undo();
    };

    HeaderView.prototype.redoClicked = function(e) {
      log("redoClicked");
      return quadrigram.router.dataModels.currentProject.redo();
    };

    HeaderView.prototype.helpClicked = function(e) {
      return window.open(quadrigram.webUrl + "#help", "_blank");
    };

    HeaderView.prototype.userProfileClicked = function(e) {
      return window.open(quadrigram.webUrl + "#profile", "_blank");
    };

    HeaderView.prototype.setSaveState = function(state, options) {
      return this.updateVisibileState(state);
    };

    HeaderView.prototype.updateVisibileState = function(state) {
      var _this = this;
      this.$el.find(".save-component").removeClass("saving");
      this.$el.find(".save-component").removeClass("ready");
      this.$el.find(".save-component").removeClass("error");
      this.$el.find(".save-component").removeClass("success");
      this.$el.find(".save-component").addClass(state);
      if (this.interval != null) {
        clearInterval(this.interval);
      }
      switch (state) {
        case "saving":
          this.$el.find(".save-component").find(".label").html("Saving");
          return this.interval = setInterval(function() {
            var dots;
            dots = _this.$el.find(".save-component").find(".label").html().replace("Saving", "");
            dots += ".";
            if (dots.length > 3) {
              dots = "";
            }
            return _this.$el.find(".save-component").find(".label").html("Saving" + dots);
          }, 500);
        case "success":
          return this.$el.find(".save-component").find(".label").html("Saved");
        case "ready":
          return this.$el.find(".save-component").find(".label").html("Save");
        case "error":
          return this.$el.find(".save-component").find(".label").html("Error saving!");
      }
    };

    return HeaderView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ProjectView = (function(_super) {
    __extends(ProjectView, _super);

    function ProjectView() {
      this.getRealSize = __bind(this.getRealSize, this);
      this.handleClickWatermark = __bind(this.handleClickWatermark, this);
      this.handleModeChange = __bind(this.handleModeChange, this);
      this.handleGuidelinesDisplay = __bind(this.handleGuidelinesDisplay, this);
      this.getViewByModel = __bind(this.getViewByModel, this);
      this.outputSelect = __bind(this.outputSelect, this);
      this.outputDeselectAll = __bind(this.outputDeselectAll, this);
      this.handleBlockSelection = __bind(this.handleBlockSelection, this);
      this.handleVizSelection = __bind(this.handleVizSelection, this);
      this.deselectBlock = __bind(this.deselectBlock, this);
      this.deselectViz = __bind(this.deselectViz, this);
      this.deselectAll = __bind(this.deselectAll, this);
      this.updateBackground = __bind(this.updateBackground, this);
      this.updateGridsterSettings = __bind(this.updateGridsterSettings, this);
      this.updateLayoutSettings = __bind(this.updateLayoutSettings, this);
      this.inIframe = __bind(this.inIframe, this);
      this.updateLayoutData = __bind(this.updateLayoutData, this);
      this.getLayoutData = __bind(this.getLayoutData, this);
      this.changeVisualizerFrame = __bind(this.changeVisualizerFrame, this);
      this.renderLastInQueue = __bind(this.renderLastInQueue, this);
      this.addToRenderQueue = __bind(this.addToRenderQueue, this);
      this.createVisualizer = __bind(this.createVisualizer, this);
      this.removeVisualizer = __bind(this.removeVisualizer, this);
      this.addVisualizer = __bind(this.addVisualizer, this);
      this.mouseOut = __bind(this.mouseOut, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.notifyChangeOfProjectName = __bind(this.notifyChangeOfProjectName, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.init = __bind(this.init, this);
      _ref = ProjectView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ProjectView.prototype.template = JST['app/scripts/templates/Project.hbs'];

    ProjectView.prototype.canvasTemplate = JST['app/scripts/templates/Grid.hbs'];

    ProjectView.prototype.watermarkTemplate = JST['app/scripts/templates/watermarkTemplate.hbs'];

    ProjectView.prototype.className = "project-content";

    ProjectView.prototype.events = {
      "click .watermark": "handleClickWatermark"
    };

    ProjectView.prototype._serializeData = function() {
      this.templateData = {};
      return this.templateData;
    };

    ProjectView.prototype.init = function(object) {
      var _this = this;
      object.model.on("change:layout-settings", function() {
        return _.defer(function() {
          return _this.updateLayoutSettings();
        });
      });
      object.model.on("change:layoutData", function() {
        return _this.updateLayoutData();
      });
      object.model.on("remove:visualizersCollection", function(model) {
        return _this.removeVisualizer(model);
      });
      object.model.on("add:visualizersCollection", function(model) {
        return _this.addVisualizer(model);
      });
      object.model.on("changedMode", this.handleModeChange);
      object.model.on("changedGuidelinesDisplay", this.handleGuidelinesDisplay);
      object.model.on("change:pname", this.notifyChangeOfProjectName);
      return this.vizViews = [];
    };

    ProjectView.prototype.viewDidRender = function() {
      var models, vizModel, _i, _len;
      this.$el.addClass(this.model.get("layout-settings").layoutFormat);
      this.layoutManager = new quadrigram.Managers.LayoutManager($(".gridster ul"), this.model.get("layout-settings"));
      this.toolTipManager = new quadrigram.Managers.ToolTipManager(this.model, this.model.get("tooltip-settings"));
      this.$el.prepend(this.canvasTemplate());
      if (quadrigram.environment === "exported") {
        this.$el.closest(".project-container").addClass("exported");
        this.$el.closest(".project-content").addClass("exported");
        this.$el.closest("#content").addClass("exported");
      } else {
        this.$el.closest(".project-container").css("height", this.$el.closest(".project-container").parent().height() + "px");
      }
      this.updateLayoutSettings();
      models = this.layoutManager.sortArrayOfVizForGridster(this.model.get("visualizersCollection").models);
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        vizModel = models[_i];
        this.addVisualizer(vizModel);
      }
      this.layoutManager.on("change:viz-frame", this.changeVisualizerFrame);
      this.$el.closest(".project-container").on("mousedown", this.mouseOut);
      this.$el.append(this.watermarkTemplate());
      this.layoutManager.setLoaded();
      this.notifyChangeOfProjectName();
      this.layoutManager.disable();
      return setTimeout(this.handleModeChange, 20);
      /*
      setTimeout(()=>
        @$el.parent().off("scroll")
      ,100)
      */

      /*if quadrigram.environment == "exported"
        @$el.closest(".project-container").addClass("exported")
        @$el.closest(".project-content").addClass("exported")
      */

    };

    ProjectView.prototype.notifyChangeOfProjectName = function() {
      if (quadrigram.router.appViews.headerView) {
        return quadrigram.router.appViews.headerView.showProjectName(this.model.get("pname"));
      }
    };

    /*
    resizeWithTopAt:(top)=>
      # log "Resizing with top"
      #@$el.closest(".project-container").css("height",@$el.closest(".project-container").parent().height()-top+"px")
      ##WARNING: solo servia para fullscreen y rascaba mucho
      #TODO: hacerlo mejor cuando recuperemos fullscreeen
      if @layoutManager
        @layoutManager.resizeGridster()
    */


    ProjectView.prototype.viewWillRemove = function() {
      var viz, _i, _len, _ref1;
      this.off();
      this.model.off();
      _ref1 = this.vizViews;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        viz = _ref1[_i];
        viz.remove();
      }
      this.vizViews = [];
      this.$el.closest(".project-container").off("mousedown", this.mouseOut);
      this.layoutManager.off("change:viz-frame", this.changeVisualizerFrame);
      return this.layoutManager.gridster.destroy(true);
    };

    ProjectView.prototype.mouseOut = function(e) {
      if ($(e.target).closest(".viz-container").length === 0) {
        return this.deselectAll();
      }
    };

    ProjectView.prototype.addVisualizer = function(model) {
      var $image, e, gridElement, vizContainerEl, vizContainerView,
        _this = this;
      vizContainerEl = $("<div class='viz-container'></div>");
      vizContainerView = this.createVisualizer(vizContainerEl, model);
      gridElement = this.layoutManager.addVisualizer(model);
      gridElement.prepend(vizContainerEl);
      if (model.addMode === "float") {
        gridElement.attr("hidden", "true");
        model.hidden = false;
        e = jQuery.Event("mousedown");
        e.target = gridElement[0];
        e.currentTarget = gridElement[0];
        e.clientX = gridElement.position().left + gridElement.offsetParent().offset().left + gridElement.width() / 2;
        e.clientY = gridElement.position().top + gridElement.offsetParent().offset().top + gridElement.height() / 5;
        e.which = 1;
        model.addMode = null;
        _.defer(function() {
          vizContainerEl.find(".viz-view").css({
            "opacity": 0
          });
          return _this.layoutManager.gridster.drag_api.drag_handler(e);
        });
        $image = $("<img class='viz-drag-icon' src='" + model.options.iconPath + "'></img>");
        $image.css({
          "top": gridElement.height() / 5 - 77 / 2,
          "left": gridElement.width() / 2 - 77 / 2
        });
        return vizContainerEl.append($image);
      } else if (model.addMode === "scroll") {
        return this.$el.parent().animate({
          scrollTop: gridElement.position().top
        }, 300, 'swing', function() {
          return _this.handleVizSelection(model);
        });
      }
    };

    ProjectView.prototype.removeVisualizer = function(model) {
      var k, vizView, _i, _len, _ref1;
      this.layoutManager.removeVisualizer(model);
      _ref1 = this.vizViews;
      for (k = _i = 0, _len = _ref1.length; _i < _len; k = ++_i) {
        vizView = _ref1[k];
        if (vizView.model === model) {
          vizView.remove();
          this.vizViews.splice(k, 1);
          break;
        }
      }
      return this.deselectAll();
    };

    ProjectView.prototype.createVisualizer = function(el, dataModel) {
      var type, viz;
      type = dataModel.get("model");
      viz = new quadrigram.Views.VisualizerContainerView({
        el: el,
        model: dataModel,
        binding: false
      });
      viz.setMode(this.model.mode);
      if (dataModel.addMode !== "float") {
        this.addToRenderQueue(viz);
      } else {
        viz.render();
      }
      this.listenTo(viz, "selected", this.handleVizSelection);
      this.vizViews.push(viz);
      return viz;
    };

    ProjectView.prototype.addToRenderQueue = function(viz) {
      if (this.renderQueue == null) {
        this.renderQueue = [];
      }
      this.renderQueue.unshift(viz);
      if (this.renderQueue.length === 1) {
        return _.delay(this.renderLastInQueue, 50);
      }
    };

    ProjectView.prototype.renderLastInQueue = function() {
      var currentViz;
      if (this.renderQueue.length > 0) {
        currentViz = this.renderQueue.pop();
        currentViz.once("renderFinished", this.renderLastInQueue);
        return currentViz.render();
      }
    };

    ProjectView.prototype.changeVisualizerFrame = function(hidden) {
      var lastModel, newLayoutData, stackModels;
      newLayoutData = Gridster.sort_by_row_asc(this.layoutManager.serialize());
      this.model.set("layoutData", newLayoutData);
      if (hidden) {
        stackModels = quadrigram.router.dataModels.currentProject.undoManager.stack.models;
        lastModel = stackModels[stackModels.length - 1];
        return lastModel.set("magicFusionIndex", lastModel.get("magicFusionIndex") - 1);
      }
    };

    ProjectView.prototype.getLayoutData = function() {
      return Gridster.sort_by_row_asc(this.layoutManager.serialize());
    };

    ProjectView.prototype.updateLayoutData = function() {
      if (this.model.get("layoutData")) {
        return this.layoutManager.redrawFrames(this.model.get("layoutData"));
      }
    };

    ProjectView.prototype.inIframe = function() {
      var e;
      try {
        return window.self !== window.top;
      } catch (_error) {
        e = _error;
        return true;
      }
    };

    ProjectView.prototype.updateLayoutSettings = function() {
      var layoutClass;
      layoutClass = this.model.get("layout-settings").layoutFormat;
      this.$el.removeClass("web-layout");
      this.$el.removeClass("full-screen-layout");
      this.$el.removeClass("embed-layout");
      this.$el.addClass(layoutClass);
      this.$el.parent().removeClass("web-layout");
      this.$el.parent().removeClass("full-screen-layout");
      this.$el.parent().removeClass("embed-layout");
      this.$el.parent().addClass(layoutClass);
      this.layoutManager.currentLayoutMode = layoutClass;
      return this.updateGridsterSettings();
    };

    ProjectView.prototype.updateGridsterSettings = function() {
      this.layoutManager.updateGridsterSettings(this.model.get("layout-settings"));
      return this.updateBackground();
    };

    ProjectView.prototype.updateBackground = function() {
      return this.$el.closest(".project-container").css("background", this.model.get("layout-settings").backgroundColor);
      /*
      #SHOULD USE Box9/jss o algo similar, para ponerla y quitarla
      #Quizas habria que hacerlo para todas las scrollbars ???
      c = @model.get("layout-settings").backgroundColor.substring(1)    
      rgb = parseInt(c, 16)
      r = (rgb >> 16) & 0xff
      g = (rgb >>  8) & 0xff 
      b = (rgb >>  0) & 0xff
      
      luma = 0.2126 * r + 0.7152 * g + 0.0722 * b
      luma = luma / 255
      
      if luma<0.35
        document.styleSheets[0].addRule('.project-container::-webkit-scrollbar-thumb','background: rgba(255,255,255,0.2)');
        document.styleSheets[0].addRule('.project-container::-webkit-scrollbar-thumb:hover','background: rgba(255,255,255,0.1)');
      else
        document.styleSheets[0].addRule('.project-container::-webkit-scrollbar-thumb','background: rgba(0,0,0,0.2)');
        document.styleSheets[0].addRule('.project-container::-webkit-scrollbar-thumb:hover','background: rgba(0,0,0,0.3)');
      */

    };

    ProjectView.prototype.deselectAll = function() {
      this.deselectViz();
      return this.deselectBlock();
    };

    ProjectView.prototype.deselectViz = function() {
      return this.handleVizSelection();
    };

    ProjectView.prototype.deselectBlock = function() {
      return this.handleBlockSelection();
    };

    ProjectView.prototype.handleVizSelection = function(vizModel) {
      var viz, _i, _len, _ref1;
      _ref1 = this.vizViews;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        viz = _ref1[_i];
        if (viz.model === vizModel) {
          viz.setSelected(true);
        } else {
          viz.setSelected(false);
        }
      }
      if (quadrigram.router.appViews.uiView) {
        return quadrigram.router.appViews.uiView.updateVizInspector(vizModel);
      }
    };

    ProjectView.prototype.handleBlockSelection = function(blockModel) {
      var b, bg, _i, _len, _ref1, _results;
      _ref1 = this.model.get("blockGroupsCollection").models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        bg = _ref1[_i];
        _results.push((function() {
          var _j, _len1, _ref2, _results1;
          _ref2 = bg.get("blocksCollection").models;
          _results1 = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            b = _ref2[_j];
            if (b === blockModel) {
              _results1.push(b.setSelected(true));
            } else {
              _results1.push(b.setSelected(false));
            }
          }
          return _results1;
        })());
      }
      return _results;
      /*
      if quadrigram.router.appViews.uiView
        quadrigram.router.appViews.uiView.updateBlockInspector blockModel
      */

    };

    ProjectView.prototype.outputDeselectAll = function() {
      var v, _i, _len, _ref1, _results;
      _ref1 = this.vizViews;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        _results.push(v.setOutputSelected(false));
      }
      return _results;
    };

    ProjectView.prototype.outputSelect = function(model) {
      var vizContainerView;
      this.outputDeselectAll();
      vizContainerView = this.getViewByModel(model);
      if (vizContainerView) {
        return vizContainerView.setOutputSelected(true);
      }
    };

    ProjectView.prototype.getViewByModel = function(model) {
      var v, _i, _len, _ref1;
      _ref1 = this.vizViews;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (v.model === model.get("ownerViz")) {
          return v;
        }
      }
    };

    ProjectView.prototype.handleGuidelinesDisplay = function(ev) {
      if (this.model.showGuidelines === true) {
        return this.$('.layout-guides-container').addClass("visible");
      } else {
        return this.$('.layout-guides-container').removeClass("visible");
      }
    };

    ProjectView.prototype.handleModeChange = function(e) {
      var v, _i, _len, _ref1, _results;
      if (this.model.mode === "preview") {
        quadrigram.tracker.sendEvent({
          event_type: 305
        });
        this.deselectAll();
        this.layoutManager.disable();
        if (quadrigram.router.appViews.uiView) {
          quadrigram.router.appViews.uiView.topMenu.hide();
        }
      } else {
        this.layoutManager.enable();
        if (quadrigram.router.appViews.uiView) {
          quadrigram.router.appViews.uiView.topMenu.show();
        }
      }
      _ref1 = this.vizViews;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        _results.push(v.setMode(this.model.mode));
      }
      return _results;
    };

    ProjectView.prototype.handleClickWatermark = function() {
      return window.open(quadrigram.webUrl, '_blank');
    };

    ProjectView.prototype.getRealSize = function() {
      return {
        width: $(".canvas-container").css("width"),
        height: $(".canvas-container").css("height")
      };
    };

    return ProjectView;

  })(quadrigram.Views.LoadableView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ListItemView = (function(_super) {
    __extends(ListItemView, _super);

    function ListItemView() {
      this.refreshIcon = __bind(this.refreshIcon, this);
      this.getIconClassFromModel = __bind(this.getIconClassFromModel, this);
      this.triggerDelete = __bind(this.triggerDelete, this);
      this.triggerEdit = __bind(this.triggerEdit, this);
      this.triggerDoubleClick = __bind(this.triggerDoubleClick, this);
      this.triggerSelected = __bind(this.triggerSelected, this);
      this.labelChanged = __bind(this.labelChanged, this);
      this.refreshLabel = __bind(this.refreshLabel, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = ListItemView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ListItemView.prototype.template = JST['app/scripts/templates/UI/listItem.hbs'];

    ListItemView.prototype.className = "list-item";

    ListItemView.prototype.defaultHeight = 30;

    ListItemView.prototype.events = {
      "click": "triggerSelected",
      "dblclick": "triggerDoubleClick",
      "click .delete": "triggerDelete",
      "click .edit": "triggerEdit"
    };

    ListItemView.prototype._serializeData = function() {
      this.templateData = {};
      this.templateData.model = {};
      this.templateData.model.id = this.model.get("id");
      this.templateData.model.label = this.model.get("label");
      return this.templateData;
    };

    ListItemView.prototype.viewWillRender = function() {
      return this.$el.addClass("hidden");
    };

    ListItemView.prototype.viewDidRender = function() {
      var groupDeletable, groupEditable, labelEditable;
      this.refreshLabel();
      labelEditable = true;
      groupDeletable = true;
      groupEditable = true;
      if (this.model instanceof quadrigram.Models.ExternalBlockGroupModel) {
        labelEditable = false;
      }
      if (this.model instanceof quadrigram.Models.VizBlockGroupModel) {
        groupDeletable = false;
        groupEditable = false;
      }
      this.$el.find(".icon").addClass(this.getIconClassFromModel());
      this.$el.find(".item-label").editableSpan();
      this.$el.find(".item-label").on("change", this.labelChanged);
      if (!labelEditable) {
        this.$el.find(".item-label").prop("disabled", true);
      }
      if (!groupDeletable) {
        this.$el.find(".delete").addClass("hidden");
      }
      if (!groupEditable) {
        this.$el.find(".edit").addClass("hidden");
      }
      this.$el.removeClass("hidden");
      if (this.model.get("defaultLabel") != null) {
        this.$el.find(".item-label").editableSpan("startEditing");
        this.model.unset("defaultLabel", {
          "silent": true
        });
        this.model.get("mainBlock").unset("defaultLabel", {
          "silent": true
        });
      }
      this.model.on("change:label", this.refreshLabel);
      if (this.model.constructor.name === "CustomBlockGroupModel") {
        return this.model.get("mainBlock").get("operator").on("change:currentOperation", this.refreshIcon);
      }
    };

    ListItemView.prototype.viewWillRemove = function() {
      this.model.off("change:label", this.refreshLabel);
      if (this.model.constructor.name === "CustomBlockGroupModel") {
        if (this.model.get("mainBlock") != null) {
          this.model.get("mainBlock").get("operator").off("change:currentOperation", this.refreshIcon);
        }
      }
      return this.$el.find(".item-label").off("change", this.labelChanged);
    };

    ListItemView.prototype.refreshLabel = function() {
      return this.$el.find(".item-label").val(this.model.get("label"));
    };

    ListItemView.prototype.labelChanged = function() {
      return this.model.set("label", this.$el.find(".item-label").val());
    };

    ListItemView.prototype.triggerSelected = function() {
      return this.trigger("selected", this);
    };

    ListItemView.prototype.triggerDoubleClick = function() {
      return this.$el.find(".item-label").editableSpan("startEditing");
    };

    ListItemView.prototype.triggerEdit = function() {
      return this.trigger("edit", this);
    };

    ListItemView.prototype.triggerDelete = function(e) {
      e.stopImmediatePropagation();
      return this.trigger("delete", this);
    };

    ListItemView.prototype.getIconClassFromModel = function() {
      switch (this.model.constructor.name) {
        case "CustomBlockGroupModel":
          return (this.model.get("mainBlock").get("operator").get("currentOperation") + "-icon").toLowerCase();
        case "VizBlockGroupModel":
          return (this.model.get("ownerViz").constructor.name.replace("Model", "") + "-icon").toLowerCase();
        case "ExternalBlockGroupModel":
          if (this.model.get("provider") !== void 0) {
            return (this.model.get("provider") + "-icon").toLowerCase();
          }
      }
      return "default-icon";
    };

    ListItemView.prototype.refreshIcon = function() {
      if (this.model.constructor.name === "CustomBlockGroupModel") {
        this.$el.find(".icon").removeClass().addClass("icon").addClass(this.getIconClassFromModel());
        return this.$el.find(".list-item-actions .edit").addClass("editing");
      }
    };

    return ListItemView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.VizInspectorView = (function(_super) {
    __extends(VizInspectorView, _super);

    function VizInspectorView() {
      this.dataSlotPosition = __bind(this.dataSlotPosition, this);
      this.toggleHidden = __bind(this.toggleHidden, this);
      this.inspectorCloseRequest = __bind(this.inspectorCloseRequest, this);
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.updatePanelName = __bind(this.updatePanelName, this);
      this.update = __bind(this.update, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = VizInspectorView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VizInspectorView.prototype.events = {
      "click .property-title": "toggleHidden"
    };

    VizInspectorView.prototype.template = JST['app/scripts/templates/UI/vizInspector.hbs'];

    VizInspectorView.prototype.viewWillRender = function() {};

    VizInspectorView.prototype.viewDidRender = function() {
      var _this = this;
      this.hide();
      this.$el.draggable({
        handle: this.$el.find(".header")
      });
      this.$el.find(".close").on("click", this.inspectorCloseRequest);
      this.$el.css({
        'left': ($(window).width() - 245) + "px",
        'top': ($(window).height() - 448) + "px"
      });
      this.$el.find(".viz-label").editableSpan({
        editOnDblClick: true
      });
      return this.$el.find(".viz-label").on("change", function() {
        return _this.model.get("blockGroup").set("label", _this.$el.find(".viz-label").val());
      });
    };

    VizInspectorView.prototype.viewWillRemove = function() {
      return this.$el.find(".close").off("click", this.inspectorCloseRequest);
    };

    VizInspectorView.prototype.update = function() {
      var lastContentView, lastHeight,
        _this = this;
      if (this.model === null) {
        elog("InspectorView:update -> HAS NO MODEL");
        return;
      }
      if (this.model !== this.latestModel) {
        this.latestModel = this.model;
        lastHeight = 0;
        lastContentView = this.contentView;
        this.updatePanelName();
        if (this.vizInspectorNameListener) {
          this.vizInspectorNameListener.off("change:label", this.updatePanelName);
        }
        this.vizInspectorNameListener = this.model.get("blockGroup");
        this.vizInspectorNameListener.on("change:label", this.updatePanelName);
        log(this.model);
        this.contentView = new quadrigram.Views.VizInspectorContentView({
          model: this.model,
          binding: false
        });
        this.contentView.render();
        return this.contentView.on("rendered", function() {
          var options;
          _this.contentView.off("rendered");
          if (lastContentView) {
            if (_this.contentView.toolbar && lastContentView.toolbar && _this.contentView.toolbar === lastContentView.toolbar) {
              options = {
                "preserveToolbar": true
              };
            } else {
              options = {};
            }
            lastContentView.unbind();
            lastContentView.remove(options);
          }
          return _this.$el.find("#viz-inspector-content").append(_this.contentView.$el);
        });
      }
    };

    VizInspectorView.prototype.updatePanelName = function() {
      return this.$el.find(".viz-label").val(this.model.get("blockGroup").get("label"));
    };

    VizInspectorView.prototype.hide = function() {
      this.latestModel = null;
      if (this.contentView) {
        this.contentView.unbind();
        this.contentView.remove();
      }
      return this.$el.fadeOut(60);
    };

    VizInspectorView.prototype.show = function() {
      return this.$el.fadeIn(60);
    };

    VizInspectorView.prototype.inspectorCloseRequest = function() {
      return quadrigram.router.appViews.projectView.deselectAll();
    };

    VizInspectorView.prototype.toggleHidden = function(event) {
      $(event.currentTarget).parent().find('.propertyBody').slideToggle(300);
      $(event.currentTarget).toggleClass('selected');
      return $(event.currentTarget).parent().toggleClass('collapsed');
    };

    VizInspectorView.prototype.dataSlotPosition = function() {
      return this.contentView.$el.find(".slot").offset();
    };

    return VizInspectorView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.BlockInspectorView = (function(_super) {
    __extends(BlockInspectorView, _super);

    function BlockInspectorView() {
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.blockNameChanged = __bind(this.blockNameChanged, this);
      this.changeOperator = __bind(this.changeOperator, this);
      this.updateView = __bind(this.updateView, this);
      this.setTarget = __bind(this.setTarget, this);
      this.onResize = __bind(this.onResize, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      this.init = __bind(this.init, this);
      _ref = BlockInspectorView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BlockInspectorView.prototype.template = JST['app/scripts/templates/UI/blockInspector.hbs'];

    BlockInspectorView.prototype.events = {
      "click .operator-selector-item": "changeOperator"
    };

    BlockInspectorView.prototype.init = function() {
      $(window).on("resize", this.onResize);
      return this.onResize();
    };

    BlockInspectorView.prototype._serializeData = function() {
      this.templateData = {};
      this.templateData.functionsLibrary = quadrigram.Models.OperatorModel.availableOperations;
      return this.templateData;
    };

    BlockInspectorView.prototype.viewWillRender = function() {};

    BlockInspectorView.prototype.viewDidRender = function() {
      this.currentMode = "view";
      return this.onResize();
      /*
      if @theBlockGroup
        @collectionView = new quadrigram.Views.CustomBlockCollectionView(collection:@model.getCustomBlocks(),model:@theBlockGroup,binding:true)
        @collectionView.render()
        @$el.find(".block-selector").append(@collectionView.$el)
        @collectionView.on("block-selected",@setTarget)
      
      @$el.find(".new-block-button").on("click",@createNewCustomBlock)
      */

    };

    /*
    createNewCustomBlock:(event)=>
      #NOTE: asume que solo hay un customBlockGroup, no hace falta pasarlo como parametro al creatCustmBlock
      event.preventDefault()
      event.stopPropagation()
      block = quadrigram.router.dataModels.currentProject.createCustomBlock()
    */


    BlockInspectorView.prototype.onResize = function(ev) {
      return this.$('.mega-slot-container').css({
        width: $(window).width() - 184
      });
    };

    BlockInspectorView.prototype.setTarget = function(blockModel) {
      if (this.model !== blockModel) {
        if (this.selectedBlockView != null) {
          this.selectedBlockView.remove();
        }
        this.selectedBlockView = new quadrigram.Views.DataBlockSourceView({
          model: blockModel,
          binding: false
        });
        this.selectedBlockView.render();
        this.$el.find(".block-selector .selected-block-container").append(this.selectedBlockView.$el);
        this.model = blockModel;
        return this.updateView();
      }
    };

    BlockInspectorView.prototype.updateView = function() {
      if (this.operatorView) {
        this.operatorView.remove();
      }
      this.$el.find(".function-mega-slot").empty();
      if (this.model && this.model instanceof quadrigram.Models.FunctionBlockModel) {
        this.$el.find(".operator-selector").removeClass("hidden");
        this.$el.find("option[value=" + this.model.get("operator").get("currentOperation") + "]").attr("selected", "selected");
        this.operatorView = new quadrigram.Views.DataBlockFunctionView({
          model: this.model,
          binding: false
        });
        this.$el.find(".mega-slot-container").append(this.operatorView.$el);
        this.operatorView.render();
      } else if (this.model) {
        this.$el.find(".operator-selector").addClass("hidden");
        this.$el.find(".mega-slot-container").append($("<div> Source: " + this.model.get("blockGroup").get("label") + " Content: " + this.model.get("data").length + " values. </div>"));
      } else {
        this.$el.find(".operator-selector").addClass("hidden");
        /*
        @$el.find(".mega-slot-container").append($("<div>CLick to select...</div>"))
        */

      }
      return this.onResize();
    };

    BlockInspectorView.prototype.changeOperator = function(e) {
      var operation;
      operation = $(e.currentTarget).attr("value");
      quadrigram.tracker.sendEvent({
        event_type: 202,
        event_subtype: 3,
        client_data: {
          operation: operation
        }
      });
      return this.model.setOperation(operation);
    };

    /*
    functionContainerClicked:()=>
      @currentMode="edit"
      @updateToCurrentState()
    
    updateToCurrentState:()=>
      if @currentMode == "edit"
        @$el.find(".function-mega-slot").addClass("active")
      else
        @$el.find(".function-mega-slot").removeClass("active")
    */


    BlockInspectorView.prototype.blockNameChanged = function(e, params) {
      return this.model.set("label", params.newValue);
    };

    /*
    handlePreviewClick:()=>
      #log "SHOULD PREVIEW BLOCK!",@model
      if @model
        quadrigram.router.appViews.uiView.showBlockPreview(@model)
    */


    BlockInspectorView.prototype.viewWillRemove = function() {
      this.$el.find(".block-name").off("save", this.blockNameChanged);
      return $(window).off("resize", this.onResize);
    };

    BlockInspectorView.prototype.hide = function() {
      return this.$el.slideUp(160);
    };

    BlockInspectorView.prototype.show = function() {
      return this.$el.slideDown(160);
    };

    return BlockInspectorView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataFactoryView = (function(_super) {
    __extends(DataFactoryView, _super);

    function DataFactoryView() {
      this.renderGroup = __bind(this.renderGroup, this);
      this.hanldeGroupEdited = __bind(this.hanldeGroupEdited, this);
      this.hanldeGroupDeleted = __bind(this.hanldeGroupDeleted, this);
      this.hanldeGroupSelected = __bind(this.hanldeGroupSelected, this);
      this._changeBlockGroupCollection = __bind(this._changeBlockGroupCollection, this);
      this._clickOnDataContainerMenuItem = __bind(this._clickOnDataContainerMenuItem, this);
      this.selectGroup = __bind(this.selectGroup, this);
      this.selectType = __bind(this.selectType, this);
      this.selectVisualizerOutput = __bind(this.selectVisualizerOutput, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = DataFactoryView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataFactoryView.prototype.template = JST['app/scripts/templates/UI/dataFactory.hbs'];

    DataFactoryView.prototype.selectedMenu = "";

    DataFactoryView.prototype.latestGroupIds = {};

    DataFactoryView.prototype.events = {
      "click .data-container-menu-item": "_clickOnDataContainerMenuItem"
    };

    DataFactoryView.prototype._serializeData = function() {
      this.templateData = {};
      return this.templateData;
    };

    DataFactoryView.prototype.viewDidRender = function() {
      this.selectedMenu = "file";
      return this.$el.find(".data-container-menu-item[menu=" + this.selectedMenu + "]").addClass("selected");
    };

    DataFactoryView.prototype.viewWillRemove = function() {
      if (this.blockGroupCollectionView) {
        this.blockGroupCollectionView.off("group:selected", this.hanldeGroupSelected);
        this.blockGroupCollectionView.remove();
      }
      if (this.blockGroupView) {
        return this.blockGroupView.remove();
      }
    };

    DataFactoryView.prototype.selectVisualizerOutput = function(group) {
      if (quadrigram.router.appViews.uiView.toolbar.$el.find(".tools-submenu").hasClass("closed")) {
        quadrigram.router.appViews.uiView.toolbar.openDataManager();
      }
      this.selectType("charts");
      return _.delay(this.selectGroup, 150, group);
    };

    DataFactoryView.prototype.selectType = function(type) {
      return this.$el.find(".data-container-menu-item[menu=" + type + "]").trigger("click");
    };

    DataFactoryView.prototype.selectGroup = function(group) {
      log("DataFactoryView::selectGroup -> ", group);
      return this.blockGroupCollectionView.selectById(group);
    };

    DataFactoryView.prototype._clickOnDataContainerMenuItem = function(e) {
      var type;
      $(".data-container-menu-item").removeClass("selected");
      $(e.currentTarget).addClass("selected");
      type = $(e.currentTarget).attr("menu");
      if (this.selectedMenu !== type) {
        return this._changeBlockGroupCollection(type);
      }
    };

    DataFactoryView.prototype._changeBlockGroupCollection = function(type) {
      var _this = this;
      this.selectedMenu = type;
      if (this.blockGroupCollectionView) {
        this.blockGroupCollectionView.off("group:selected", this.hanldeGroupSelected);
        this.blockGroupCollectionView.remove();
        this.renderGroup();
      }
      if (this.selectedMenu) {
        this.blockGroupCollectionView = new quadrigram.Views.BlockGroupCollectionView({
          collection: this.model
        });
        this.blockGroupCollectionView.$el.addClass("group-type-" + this.selectedMenu);
        $(this.el).find(".block-group-list-container").append(this.blockGroupCollectionView.$el);
        this.blockGroupCollectionView.on("group:selected", this.hanldeGroupSelected);
        this.blockGroupCollectionView.on("group:edit", this.hanldeGroupEdited);
        this.blockGroupCollectionView.on("group:delete", this.hanldeGroupDeleted);
      }
      this.blockGroupCollectionView.setFilter(this.selectedMenu);
      this.blockGroupCollectionView.render();
      quadrigram.router.appViews.projectView.outputDeselectAll();
      if (this.latestGroupIds[this.selectedMenu]) {
        this.blockGroupCollectionView.selectById(this.latestGroupIds[this.selectedMenu]);
      } else {
        this.blockGroupCollectionView.selectFirst();
      }
      if (quadrigram.router.appViews.uiView.toolbar.functionsExplorer.model != null) {
        return _.defer(function() {
          return _this.blockGroupCollectionView.setEditing(quadrigram.router.appViews.uiView.toolbar.functionsExplorer.model.get("blockGroup"));
        });
      }
    };

    DataFactoryView.prototype.hanldeGroupSelected = function(model) {
      this.renderGroup(model);
      if (model != null) {
        this.selectedGroupModel = model;
        this.latestGroupIds[this.selectedMenu] = model.get("id");
        return quadrigram.router.appViews.projectView.outputSelect(model);
      }
    };

    DataFactoryView.prototype.hanldeGroupDeleted = function(model) {
      quadrigram.router.dataModels.currentProject.deleteBlockGroup(model);
      if (quadrigram.router.appViews.uiView.toolbar.functionsExplorer.model === model.get("mainBlock")) {
        return quadrigram.router.appViews.uiView.toolbar.setFunctionBlockTarget();
      }
    };

    DataFactoryView.prototype.hanldeGroupEdited = function(model) {
      if (this.selectedMenu === "custom") {
        if (model.get("mainBlock") != null) {
          return quadrigram.router.appViews.uiView.toolbar.setFunctionBlockTarget(model.get("mainBlock"));
        } else {
          return quadrigram.router.appViews.uiView.toolbar.setFunctionBlockTarget(model.get("blocksCollection").models[0]);
        }
      } else {
        return quadrigram.router.appViews.uiView.showBlockBuilder(model);
      }
    };

    DataFactoryView.prototype.renderGroup = function(model) {
      if (this.selectedGroupModel !== model || (this.blockGroupView == null)) {
        if (this.blockGroupView != null) {
          this.blockGroupView.remove();
          this.blockGroupView = null;
        }
        if (model) {
          this.blockGroupView = new quadrigram.Views.BlockGroupView({
            model: model,
            binding: false
          });
          this.$el.find(".block-group-container").append(this.blockGroupView.$el);
          return this.blockGroupView.render();
        }
      }
    };

    return DataFactoryView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.BlockGroupView = (function(_super) {
    __extends(BlockGroupView, _super);

    function BlockGroupView() {
      this.onOut = __bind(this.onOut, this);
      this.onHover = __bind(this.onHover, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.createCustomBlock = __bind(this.createCustomBlock, this);
      this.roleToClass = __bind(this.roleToClass, this);
      this.compareOrders = __bind(this.compareOrders, this);
      this.renderBlockStack = __bind(this.renderBlockStack, this);
      this.adjustStacksWidth = __bind(this.adjustStacksWidth, this);
      this.updateLevelCount = __bind(this.updateLevelCount, this);
      this.renderVizGroup = __bind(this.renderVizGroup, this);
      this.renderTableBreakDown = __bind(this.renderTableBreakDown, this);
      this.renderNetworkBreakDown = __bind(this.renderNetworkBreakDown, this);
      this.renderInvalidBreakDown = __bind(this.renderInvalidBreakDown, this);
      this.renderNotReadyBreakDown = __bind(this.renderNotReadyBreakDown, this);
      this.renderBreakDownGroup = __bind(this.renderBreakDownGroup, this);
      this.updateBreakDownGroup = __bind(this.updateBreakDownGroup, this);
      this.viewDidRemove = __bind(this.viewDidRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = BlockGroupView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BlockGroupView.prototype.template = JST['app/scripts/templates/blocks/blockGroup.hbs'];

    BlockGroupView.prototype.stackTemplate = JST['app/scripts/templates/blocks/blockGroupBlockStack.hbs'];

    BlockGroupView.prototype.colTemplate = JST['app/scripts/templates/blocks/blockGroupColumn.hbs'];

    BlockGroupView.prototype.className = "block-group-content";

    BlockGroupView.prototype.events = {
      "click .add-block-button": "createCustomBlock"
    };

    BlockGroupView.isMouseOver = false;

    BlockGroupView.prototype.viewDidRender = function() {
      if (this.model instanceof quadrigram.Models.ExternalBlockGroupModel) {
        this.renderBreakDownGroup();
        this.model.on("change:fetchState", this.renderBreakDownGroup);
        return this.model.on("change-block-structure", this.renderBreakDownGroup);
      } else if (this.model instanceof quadrigram.Models.VizBlockGroupModel) {
        return this.renderVizGroup();
      } else if (this.model instanceof quadrigram.Models.CustomBlockGroupModel) {
        this.renderBreakDownGroup();
        this.model.get("mainBlock").on("change:fetchState", this.renderBreakDownGroup);
        return this.model.on("change-block-structure", this.renderBreakDownGroup);
      }
    };

    BlockGroupView.prototype.viewDidRemove = function() {
      this.model.off("change:fetchState", this.renderBreakDownGroup);
      return this.model.off("change-block-structure", this.renderBreakDownGroup);
    };

    BlockGroupView.prototype.updateBreakDownGroup = function() {
      elog("should update stacks instead of rendering the full breakdown again");
      return this.renderBreakDownGroup();
    };

    BlockGroupView.prototype.renderBreakDownGroup = function() {
      if (this.model.invalidData) {
        this.renderInvalidBreakDown();
        return;
      }
      if (this.model instanceof quadrigram.Models.CustomBlockGroupModel && this.model.get("mainBlock").get("fetchState") !== "ready") {
        this.renderNotReadyBreakDown();
        return;
      }
      if (!(this.model instanceof quadrigram.Models.CustomBlockGroupModel) && this.model.get("fetchState") !== "ready") {
        this.renderNotReadyBreakDown();
        return;
      }
      if (this.model.get("buildData") && this.model.get("buildData").dataType === "network") {
        this.renderNetworkBreakDown();
      } else {
        this.renderTableBreakDown();
      }
    };

    BlockGroupView.prototype.renderNotReadyBreakDown = function() {
      this.$el.children().remove();
      return this.$el.append("<div class='block-group-message'> Calculating... </div>");
    };

    BlockGroupView.prototype.renderInvalidBreakDown = function() {
      this.$el.children().remove();
      return this.$el.append("<div class='block-group-message'> The file could not be parsed. </div>");
    };

    BlockGroupView.prototype.renderNetworkBreakDown = function() {
      var collection, firstStack, nodesStack, relsStack;
      this.$el.children().remove();
      collection = this.model.get("blocksCollection").models.concat(this.model.preBlocks);
      this.currentCollection = collection;
      collection.sort(this.compareOrders);
      firstStack = $(this.colTemplate());
      firstStack.append(this.renderBlockStack(collection, {
        "role": "nodes"
      }, "Nodes"));
      firstStack.append(this.renderBlockStack(collection, {
        "role": "rels"
      }, "Relations"));
      this.$el.append(firstStack);
      nodesStack = $(this.colTemplate());
      nodesStack.append(this.renderBlockStack(collection, {
        "role": "node-prop"
      }, "Properties of nodes"));
      this.$el.append(nodesStack);
      relsStack = $(this.colTemplate());
      relsStack.append(this.renderBlockStack(collection, {
        "role": "rel-prop"
      }, "Properties of relations"));
      return this.$el.append(relsStack);
    };

    BlockGroupView.prototype.renderTableBreakDown = function() {
      var collection, depth, firstStack, level0Count, level1Count, mainLabel, namesLabels, namesStack, stack, stackIndex, stacksLabels, viewMode, _i,
        _this = this;
      this.$el.children().remove();
      if (this.model.preBlocks && this.model.preBlocks.length > 0) {
        collection = this.model.get("blocksCollection").models.concat(this.model.preBlocks);
      } else {
        collection = this.model.get("blocksCollection").models;
      }
      this.currentCollection = collection;
      collection.sort(this.compareOrders);
      if (this.model.get("blocksCollection").where({
        "role": "all"
      })[0] && (this.model.get("blocksCollection").where({
        "role": "all"
      })[0].get("metaData") != null)) {
        viewMode = this.model.get("blocksCollection").where({
          "role": "all"
        })[0].get("metaData").viewMode;
      } else {
        viewMode = "cell";
      }
      level0Count = 0;
      level1Count = 0;
      _.each(collection, function(m) {
        if (m.get("role") === "level0") {
          if (m instanceof quadrigram.Models.FunctionBlockModel) {
            if (m.get("state") !== "dead") {
              level0Count += 1;
            }
          } else if (!BlockUtils.isEmpty(m)) {
            level0Count += 1;
          }
        }
        if (m.get("role") === "level1") {
          if (m instanceof quadrigram.Models.FunctionBlockModel) {
            if (m.get("state") !== "dead") {
              return level1Count += 1;
            }
          } else if (!BlockUtils.isEmpty(m)) {
            return level1Count += 1;
          }
        }
      });
      depth = -1;
      if (level0Count > 1) {
        depth = 0;
      }
      if (level1Count > 0) {
        depth = 1;
      }
      if (depth === 1) {
        mainLabel = "Table";
        namesLabels = ["Column Names", "Row Names"];
        stacksLabels = ["Columns (" + level0Count + ")", "Rows (" + level1Count + ")"];
      } else if (depth === 0) {
        mainLabel = "Column";
        namesLabels = ["Row Names"];
        stacksLabels = ["Rows (" + level0Count + ")"];
      } else {
        mainLabel = "Value";
      }
      firstStack = $(this.colTemplate());
      firstStack.append(this.renderBlockStack(collection, {
        "role": "all"
      }, mainLabel));
      this.$el.append(firstStack);
      namesStack = $(this.colTemplate());
      this.$el.append(namesStack);
      if (depth >= 0) {
        for (stackIndex = _i = 0; 0 <= depth ? _i <= depth : _i >= depth; stackIndex = 0 <= depth ? ++_i : --_i) {
          namesStack.append(this.renderBlockStack(collection, {
            "role": "level" + stackIndex + "names"
          }, namesLabels[stackIndex]));
          stack = $(this.colTemplate());
          stack.append(this.renderBlockStack(collection, {
            "role": "level" + stackIndex
          }, stacksLabels[stackIndex]));
          this.$el.append(stack);
        }
      }
      return this.adjustStacksWidth();
    };

    BlockGroupView.prototype.renderVizGroup = function() {
      var col, vizBlock, vizBlockType, vizBlockTypes, vizBlocks, vizTypes, _i, _j, _len, _len1,
        _this = this;
      this.outputsOrder = ["selection", "OnOver", "styles", "geo"];
      vizBlocks = this.model.get("blocksCollection").models;
      vizBlockTypes = {};
      for (_i = 0, _len = vizBlocks.length; _i < _len; _i++) {
        vizBlock = vizBlocks[_i];
        if (vizBlock.get("role") === "output") {
          vizBlockType = vizBlock.get("outputType");
          if (!vizBlockType) {
            vizBlockType = "default";
          }
          if (!vizBlockTypes[vizBlockType]) {
            vizBlockTypes[vizBlockType] = [];
          }
          vizBlockTypes[vizBlockType].push(vizBlock);
        }
      }
      vizTypes = Object.keys(vizBlockTypes);
      vizTypes.sort(function(a, b) {
        return _this.outputsOrder.indexOf(a) > _this.outputsOrder.indexOf(b);
      });
      for (_j = 0, _len1 = vizTypes.length; _j < _len1; _j++) {
        vizBlockType = vizTypes[_j];
        col = $(this.colTemplate());
        col.append(this.renderBlockStack(vizBlocks, {
          "role": "output",
          "outputType": vizBlockType
        }, vizBlockType));
        this.$el.append(col);
      }
      return this.adjustStacksWidth();
    };

    /*
    renderCustomGroup:()=>
      collection = @model.get("blocksCollection").models
      firstCol = $(@colTemplate())
      firstCol.append(@renderBlockStack(collection,{},"Result formula"))
      @$el.append(firstCol)
    
      @adjustStacksWidth()
    */


    BlockGroupView.prototype.updateLevelCount = function() {
      return log("should update levelCount");
    };

    BlockGroupView.prototype.adjustStacksWidth = function() {
      var stackCount;
      stackCount = this.$el.find(".block-group-column").length;
      return this.$el.find(".block-group-column").css("width", 100 / stackCount + "%");
    };

    BlockGroupView.prototype.renderBlockStack = function(collection, filters, label) {
      var $newStack, col, colsCollectionView, self,
        _this = this;
      $newStack = $(this.stackTemplate());
      col = _.filter(collection, function(model) {
        var f, result;
        result = true;
        for (f in filters) {
          if (model.get(f) !== filters[f]) {
            result = false;
          }
        }
        return result;
      });
      self = this;
      colsCollectionView = new quadrigram.Views.DataBlockCollectionView({
        collection: col,
        fullCollection: this.model.get("blocksCollection"),
        filters: filters,
        model: this.model,
        binding: true,
        el: $newStack.find(".block-list")
      });
      colsCollectionView.render();
      $newStack.find(".name").html(label);
      return $newStack;
    };

    /*
    renderSpecialBlock:(collection,role,viewMode)=>
      block = _.filter(collection,(m)=> return m.get("role")==role)[0]
    
      blockClass = @roleToClass(role)
    
      if block? && (role=="all" || BlockUtils.viewModeToLevel(viewMode) >= Number(role.replace("level","").replace("names","")))
        specialBlockView = new quadrigram.Views.DataBlockSourceView(model: block, binding:false)
    
        specialBlockView.render()
        $(@el).find(".block-stack > .data-block-container"+blockClass).append(specialBlockView.$el)
    
      else
        $(@el).find(".block-stack > "+blockClass).addClass("hidden")
    */


    BlockGroupView.prototype.compareOrders = function(a, b) {
      if (a.state === "dead" && b.state !== "dead") {
        return 1;
      }
      if (b.state === "dead" && a.state !== "dead") {
        return -1;
      }
      a = a.get("order");
      b = b.get("order");
      if (a > b || a === void 0) {
        return 1;
      } else if (b > a || b === void 0) {
        return -1;
      } else {
        return 0;
      }
    };

    BlockGroupView.prototype.roleToClass = function(role) {
      var blockClass;
      if (role === "level0names") {
        blockClass = ".level-0-names";
      } else if (role === "level1names") {
        blockClass = ".level-1-names";
      } else if (role === "all") {
        blockClass = ".main-block";
      } else if (role === "level0") {
        blockClass = ".level-0";
      } else if (role === "level1") {
        blockClass = ".level-1";
      }
      return blockClass;
    };

    BlockGroupView.prototype.createCustomBlock = function() {
      return quadrigram.router.dataModels.currentProject.createCustomBlock(this.model);
    };

    BlockGroupView.prototype.viewWillRemove = function() {
      if (this.colsCollectionView) {
        this.colsCollectionView.remove();
      }
      if (this.rowsCollectionView) {
        return this.rowsCollectionView.remove();
      }
    };

    BlockGroupView.prototype.onHover = function(ev) {
      $(ev.currentTarget).children().trigger("mouseoverlist");
    };

    BlockGroupView.prototype.onOut = function(ev) {
      $(ev.currentTarget).children().trigger('mouseoutlist');
    };

    return BlockGroupView;

  })(Backbone.SmoothElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.BlockGroupCollectionView = (function(_super) {
    __extends(BlockGroupCollectionView, _super);

    function BlockGroupCollectionView() {
      this.removeByModel = __bind(this.removeByModel, this);
      this.currentCreationFunction = __bind(this.currentCreationFunction, this);
      this.handleCollectionAdd = __bind(this.handleCollectionAdd, this);
      this.handleCollectionRemove = __bind(this.handleCollectionRemove, this);
      this.updateFormulaSelection = __bind(this.updateFormulaSelection, this);
      this._clickOnEditGroup = __bind(this._clickOnEditGroup, this);
      this._clickOnDeleteGroup = __bind(this._clickOnDeleteGroup, this);
      this._dblClickOnBlockGroup = __bind(this._dblClickOnBlockGroup, this);
      this._clickOnBlockGroup = __bind(this._clickOnBlockGroup, this);
      this.selectById = __bind(this.selectById, this);
      this.selectFirst = __bind(this.selectFirst, this);
      this.setEditing = __bind(this.setEditing, this);
      this.filterVizBlockGroups = __bind(this.filterVizBlockGroups, this);
      this.setFilter = __bind(this.setFilter, this);
      this.renderElement = __bind(this.renderElement, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = BlockGroupCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BlockGroupCollectionView.prototype.template = JST['app/scripts/templates/blocks/blockGroupCollection.hbs'];

    BlockGroupCollectionView.prototype.modelView = quadrigram.Views.ListItemView;

    BlockGroupCollectionView.prototype.className = "block-group-list";

    BlockGroupCollectionView.prototype.bindModelViews = false;

    BlockGroupCollectionView.prototype.groupViews = {};

    BlockGroupCollectionView.prototype.elementEvents = {
      "selected": "_clickOnBlockGroup",
      "dblclick": "_dblClickOnBlockGroup",
      "delete": "_clickOnDeleteGroup",
      "edit": "_clickOnEditGroup"
    };

    BlockGroupCollectionView.prototype.events = {
      "click .add-group-button": "currentCreationFunction"
    };

    BlockGroupCollectionView.prototype.viewWillRender = function() {
      this.templateData.title = this.filterBy;
      if (this.filterBy === "file") {
        this.templateData.newText = "Import new file";
      } else if (this.filterBy === "custom") {
        this.templateData.newText = "Create new formula";
      }
      return this.$el.addClass("hidden");
    };

    BlockGroupCollectionView.prototype.viewDidRender = function() {
      var cid;
      this.$el.removeClass("hidden");
      this.collection.on("remove", this.handleCollectionRemove);
      this.collection.on("add", this.handleCollectionAdd);
      if (this.filterBy === "custom" && (quadrigram.router.appViews.uiView.toolbar.functionsExplorer.selectedBlockView != null)) {
        try {
          cid = quadrigram.router.appViews.uiView.toolbar.functionsExplorer.selectedBlockView.model.get("blockGroup").cid;
          return this.updateFormulaSelection(this.modelViews[cid]);
        } catch (_error) {
          return log("error selecting edited block");
        }
      }
    };

    BlockGroupCollectionView.prototype.renderElement = function(model) {
      var view;
      view = BlockGroupCollectionView.__super__.renderElement.call(this, model);
      switch (model.get("type")) {
        case "external":
          view.$el.find(".edit").addClass("ui-tip-target");
          view.$el.find(".edit").attr("data-ui-tip-id", "edit-external");
          break;
        case "custom":
          view.$el.find(".block-group").addClass("ui-tip-target");
          view.$el.find(".block-group").attr("data-ui-tip-id", "block-group-rename");
          view.$el.find(".edit").addClass("ui-tip-target");
          view.$el.find(".edit").attr("data-ui-tip-id", "edit-custom");
          break;
        case "viz":
          view.$el.find(".block-group").addClass("ui-tip-target");
          view.$el.find(".block-group").attr("data-ui-tip-id", "block-group-rename");
      }
      if (model === this.currentlyEditing) {
        view.$el.find(".edit").addClass("editing");
        view.$el.addClass("editing");
      }
      if (model === this.currentSelection) {
        view.$el.addClass("selected");
      }
      /*
      if @filterBy == "custom" && quadrigram.router.appViews.uiView.toolbar.functionsExplorer.selectedBlockView?
        model.cid = quadrigram.router.appViews.uiView.toolbar.functionsExplorer.selectedBlockView.model.get("blockGroup").cid
        @updateFormulaSelection(view)
      */

      return view;
    };

    BlockGroupCollectionView.prototype.setFilter = function(type) {
      this.filterBy = type;
      switch (type) {
        case "custom":
          return this._filterModels = "CustomBlockGroupModel";
        case "file":
          return this._filterModels = "ExternalBlockGroupModel";
        case "charts":
          return this._filterModels = this.filterVizBlockGroups;
        default:
          return this._filterModels = "BlockGroupModel";
      }
    };

    BlockGroupCollectionView.prototype.filterVizBlockGroups = function(model) {
      if (model.hasOutputs && model.hasOutputs()) {
        return true;
      } else {
        return false;
      }
      /*
      if model.constructor.name == "VizBlockGroupModel"
        if model.get("ownerViz") instanceof quadrigram.Models.RectangleAreaModel || model.get("ownerViz") instanceof quadrigram.Models.TextAreaModel
          return false
        else
          return true
      else
        return false
      */

    };

    BlockGroupCollectionView.prototype.setEditing = function(model) {
      var currentView;
      if (model != null) {
        this.currentlyEditing = model;
        if (this.currentlyEditing != null) {
          currentView = this.modelViews[this.currentlyEditing.cid];
          if (currentView != null) {
            currentView.$el.find(".edit").addClass("editing");
            return currentView.$el.addClass("editing");
          }
        }
      }
    };

    BlockGroupCollectionView.prototype.selectFirst = function() {
      if (this.filteredModels.length > 0) {
        this.currentSelection = this.filteredModels[0].get("id");
        return this.selectById(this.currentSelection);
      }
    };

    BlockGroupCollectionView.prototype.selectById = function(groupId) {
      if (this.collection.where({
        "id": groupId
      }).length > 0) {
        this.currentSelection = this.collection.where({
          "id": groupId
        })[0];
        return this.select(this.currentSelection);
      } else {
        return this.selectFirst();
      }
    };

    BlockGroupCollectionView.prototype._clickOnBlockGroup = function(itemView) {
      var group;
      group = itemView.model;
      this.currentSelection = group;
      $(".list-item").removeClass("selected");
      itemView.$el.addClass("selected");
      return this.trigger("group:selected", group);
    };

    BlockGroupCollectionView.prototype._dblClickOnBlockGroup = function(itemView) {
      var group;
      group = itemView.model;
      return quadrigram.router.appViews.uiView.showBlockBuilder(group);
    };

    BlockGroupCollectionView.prototype._clickOnDeleteGroup = function(itemView) {
      var group;
      group = itemView.model;
      if (group === this.currentSelection) {
        this.trigger("group:selected", null);
      }
      return this.trigger("group:delete", group);
    };

    BlockGroupCollectionView.prototype._clickOnEditGroup = function(itemView) {
      var group;
      group = itemView.model;
      this.trigger("group:edit", group);
      if (this.filterBy === "custom") {
        return this.updateFormulaSelection(itemView);
      }
    };

    BlockGroupCollectionView.prototype.updateFormulaSelection = function(selectedView) {
      var item, key, _ref1;
      _ref1 = this.modelViews;
      for (key in _ref1) {
        item = _ref1[key];
        if (item != null) {
          item.$el.find(".edit").removeClass("editing");
          item.$el.removeClass("editing");
        }
      }
      this.currentlyEditing = selectedView.model;
      selectedView.$el.find(".edit").addClass("editing");
      return selectedView.$el.addClass("editing");
    };

    BlockGroupCollectionView.prototype.handleCollectionRemove = function(model) {
      if (model === this.currentSelection) {
        return this.trigger("group:selected", null);
      }
    };

    BlockGroupCollectionView.prototype.handleCollectionAdd = function(model) {};

    BlockGroupCollectionView.prototype.currentCreationFunction = function() {
      var newBlock, newBlockGroup;
      if (this.filterBy === "file") {
        return quadrigram.router.managers.serverManager.createPicker();
      } else if (this.filterBy === "custom") {
        newBlock = quadrigram.router.dataModels.currentProject.createCustomBlock();
        newBlockGroup = newBlock.get("blockGroup");
        this.selectById(newBlockGroup.get("id"));
        this.trigger("group:edit", newBlockGroup);
        return this.updateFormulaSelection(this.modelViews[this.currentSelection.cid]);
      }
    };

    BlockGroupCollectionView.prototype.removeByModel = function(model) {
      if (model == null) {
        return;
      }
      return this.collection.remove(model);
    };

    return BlockGroupCollectionView;

  })(Backbone.BetterCollectionView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockView = (function(_super) {
    __extends(DataBlockView, _super);

    function DataBlockView() {
      this.showDataChange = __bind(this.showDataChange, this);
      this.previewBlock = __bind(this.previewBlock, this);
      this.selectBlock = __bind(this.selectBlock, this);
      this.replaceModel = __bind(this.replaceModel, this);
      this.firstClickBlock = __bind(this.firstClickBlock, this);
      this.handleLabelChange = __bind(this.handleLabelChange, this);
      this.loopAnimation = __bind(this.loopAnimation, this);
      this.handleFetchState = __bind(this.handleFetchState, this);
      this.handleDataChange = __bind(this.handleDataChange, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);
      _ref = DataBlockView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockView.prototype.events = {
      "mousedown": "firstClickBlock",
      "click": "selectBlock",
      "dblclick": "previewBlock"
    };

    DataBlockView.prototype.init = function() {
      DataBlockView.__super__.init.call(this);
      this.model.on("change:fetchState", this.handleFetchState);
      this.model.on("change:data", this.handleDataChange);
      this.model.on("change:label", this.handleLabelChange);
      return this.model.on("replace-model", this.replaceModel);
    };

    DataBlockView.prototype.render = function() {
      var origin;
      if (!this.isNew) {
        DataBlockView.__super__.render.apply(this, arguments);
      }
      delete this.isNew;
      if (BlockUtils.isEmpty(this.model)) {
        this.$el.addClass("empty");
      } else {
        this.$el.removeClass("empty");
      }
      /*
      if @model instanceof quadrigram.Models.PreFunctionBlockModel
        @$el.css("opacity","0.2")
      else
        @$el.css("opacity","1")
      */

      origin = this.model.get("origin");
      if (origin !== null) {
        if (origin === "formula") {
          this.$el.addClass("formula-block");
        } else if (origin === "visualizer") {
          this.$el.addClass("visualizer-block");
        } else if (origin === "internal") {
          this.$el.addClass("internal-block");
        } else if (origin === "file") {
          this.$el.addClass("file-block");
        } else if (origin === "url") {
          this.$el.addClass("url-block");
        }
      }
      return this.handleFetchState();
    };

    DataBlockView.prototype.handleDataChange = function() {
      if (BlockUtils.isEmpty(this.model)) {
        this.$el.addClass("empty");
      } else {
        this.$el.removeClass("empty");
      }
      this.$el.find(".data-block-processing").stop();
      if (!this.$el.find(".data-block-processing").hasClass("active")) {
        this.$el.find(".data-block-processing").addClass("active");
        return this.loopAnimation();
      }
    };

    DataBlockView.prototype.handleFetchState = function() {
      this.$el.find(".data-block-processing").stop();
      if (this.model.get("fetchState") !== "ready") {
        this.$el.find(".data-block-processing").addClass("active");
        this.loopAnimation();
      } else {
        this.$el.find(".data-block-processing").removeClass("active");
      }
      if (BlockUtils.isEmpty(this.model)) {
        return this.$el.addClass("empty");
      } else {
        return this.$el.removeClass("empty");
      }
    };

    DataBlockView.prototype.loopAnimation = function(duration) {
      var _this = this;
      if (duration == null) {
        duration = 800;
      }
      return this.$el.find(".data-block-processing .processing-bar").animate({
        "margin-left": "100%"
      }, duration, function() {
        _this.$el.find(".data-block-processing .processing-bar").css("margin-left", "-100%");
        if (_this.model.get("fetchState") !== "ready") {
          return _this.loopAnimation(800);
        } else {
          return _this.$el.find(".data-block-processing").removeClass("active");
        }
      });
    };

    DataBlockView.prototype.handleLabelChange = function() {
      return this.$el.find(".data-block-name span").html(this.model.get("label"));
    };

    DataBlockView.prototype.firstClickBlock = function() {
      if (this.model.activate != null) {
        this.isNew = true;
        return this.model.activate();
      }
    };

    DataBlockView.prototype.replaceModel = function(model) {
      var e, oldModel;
      oldModel = this.model;
      this.model = model;
      for (e in oldModel._events) {
        if (!this.model._events[e]) {
          this.model._events[e] = [];
        }
        this.model._events[e] = this.model._events[e].concat(oldModel._events[e]);
      }
      oldModel.off();
      if (this.$el.hasClass("ui-draggable")) {
        this.$el.data("originalModel", this.model);
      }
      return this.handleFetchState();
    };

    DataBlockView.prototype.selectBlock = function(e) {
      return this.trigger("selected", this);
    };

    DataBlockView.prototype.previewBlock = function() {
      return quadrigram.router.appViews.uiView.showBlockPreview(this.model);
    };

    DataBlockView.prototype.showDataChange = function() {
      var oldColor,
        _this = this;
      oldColor = this.$el.find(".data-block-background").css("background");
      this.$el.find(".data-block-background").stop(true, true);
      this.$el.find(".data-block-background").css("background", "#0f0");
      return setTimeout(function() {
        return _this.$el.find(".data-block-background").css("background", "");
      }, 200);
      /*
      @$el.find(".data-block-background").animate({
        "background":"#f00"
      }, 1000)
      */

    };

    return DataBlockView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockSourceView = (function(_super) {
    __extends(DataBlockSourceView, _super);

    function DataBlockSourceView() {
      this.startDrag = __bind(this.startDrag, this);
      this.stopDrag = __bind(this.stopDrag, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      this.displayPill = __bind(this.displayPill, this);
      this.onOut = __bind(this.onOut, this);
      this.onHover = __bind(this.onHover, this);
      _ref = DataBlockSourceView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockSourceView.prototype.template = JST['app/scripts/templates/blocks/dataBlock.hbs'];

    DataBlockSourceView.prototype.className = "data-block";

    DataBlockSourceView.prototype.editMode = false;

    DataBlockSourceView.prototype.events = {
      'mouseover': 'onHover',
      'mouseout': 'onOut',
      "mousedown": "firstClickBlock",
      "click": "selectBlock",
      "dblclick": "previewBlock"
    };

    DataBlockSourceView.prototype.onHover = function(ev) {
      var _this = this;
      ev.stopImmediatePropagation;
      this.hoverState = true;
      this.funcHover || (this.funcHover = _.throttle(function() {
        if (_this.hoverState === true && _this.mouseState !== _this.hoverState) {
          _this.mouseState = _this.hoverState;
          return _this.displayPill(true);
        }
      }, 300, {
        trailing: true,
        leading: false
      }));
      return this.funcHover();
    };

    DataBlockSourceView.prototype.onOut = function(ev) {
      var _this = this;
      ev.stopImmediatePropagation;
      this.hoverState = false;
      this.funcOut || (this.funcOut = _.throttle(function() {
        if (_this.hoverState === false && _this.mouseState !== _this.hoverState) {
          _this.mouseState = _this.hoverState;
          return _this.displayPill(false);
        }
      }, 120, {
        trailing: true,
        leading: false
      }));
      return this.funcOut();
    };

    DataBlockSourceView.prototype.displayPill = function(state) {
      if (state === true) {
        this.$(".data-block-background").addClass("pill-background", 125, "easeOutCirc");
        return this.$(".data-block-name > p").addClass("pill", 125, "easeOutCirc");
      } else {
        this.$(".data-block-background").removeClass("pill-background", 125, "easeInCirc");
        return this.$(".data-block-name > p").removeClass("pill", 125, "easeInCirc");
      }
    };

    DataBlockSourceView.prototype.viewWillRender = function() {};

    DataBlockSourceView.prototype.viewDidRender = function() {
      return this.$el.draggable({
        appendTo: 'body',
        zIndex: 3000,
        start: this.startDrag,
        stop: this.stopDrag,
        helper: "clone",
        revert: "invalid",
        cursorAt: {
          left: 10 + 50,
          top: 10
        },
        revertDuration: 200
      }).data("originalModel", this.model);
    };

    DataBlockSourceView.prototype.checkMustRevert = function(e, ui) {
      return true;
    };

    DataBlockSourceView.prototype.stopDrag = function(e, ui) {
      return $(ui.helper).remove();
    };

    DataBlockSourceView.prototype.startDrag = function(e, ui) {
      ui.helper.css("width", "100px");
      ui.helper.css("height", "20px");
      ui.helper.css({
        'margin-left': 50 - e.offsetX + 'px'
      });
      ui.helper.animate({
        'width': '20px',
        "height": "20px",
        'margin-left': "50px"
      }, 120);
      return ui.helper.html("+");
    };

    return DataBlockSourceView;

  })(quadrigram.Views.DataBlockView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockReferenceView = (function(_super) {
    __extends(DataBlockReferenceView, _super);

    function DataBlockReferenceView() {
      this.stopDrag = __bind(this.stopDrag, this);
      this.startDrag = __bind(this.startDrag, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = DataBlockReferenceView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockReferenceView.prototype.template = JST['app/scripts/templates/blocks/dataBlock.hbs'];

    DataBlockReferenceView.prototype.className = "data-block reference";

    DataBlockReferenceView.prototype.viewDidRender = function() {
      return this.$el.draggable({
        zIndex: 3000,
        start: this.startDrag,
        stop: this.stopDrag,
        cursorAt: {
          left: 10 + 50,
          top: 10
        }
      }).data("originalModel", this.model);
    };

    DataBlockReferenceView.prototype.startDrag = function(e, ui) {
      this.$el.css({
        'position': "absolute",
        'margin-left': ui.offset.left + 50 - e.offsetX,
        'margin-top': ui.offset.top - 30,
        'z-index': 3000,
        "width": "100px",
        "height": "20px",
        "cursor": "pointer"
      });
      this.$el.appendTo($(".front-container"));
      this.$el.animate({
        'width': '20px',
        "height": "20px",
        'margin-left': ui.offset.left + 50
      }, 120);
      return this.$el.html("+");
    };

    DataBlockReferenceView.prototype.stopDrag = function(e, ui) {
      $(ui.helper).remove();
      return this.remove();
    };

    return DataBlockReferenceView;

  })(quadrigram.Views.DataBlockView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockEditableView = (function(_super) {
    __extends(DataBlockEditableView, _super);

    function DataBlockEditableView() {
      this.showDataChange = __bind(this.showDataChange, this);
      this.previewBlock = __bind(this.previewBlock, this);
      this.selectBlock = __bind(this.selectBlock, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.changeFromModel = __bind(this.changeFromModel, this);
      this.changeFromEditor = __bind(this.changeFromEditor, this);
      this.resetToOneValue = __bind(this.resetToOneValue, this);
      this.activateListInput = __bind(this.activateListInput, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = DataBlockEditableView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockEditableView.prototype.template = JST['app/scripts/templates/blocks/dataBlockEditable.hbs'];

    DataBlockEditableView.prototype.viewDidRender = function() {
      this.inputEl = $("<input></input>");
      $(this.el).find(".input-component").append(this.inputEl);
      this.inputEl.val(this.model.getValue);
      if (this.model.get("internalOfSlot")) {
        switch (this.model.get("internalOfSlot").get("dataType")) {
          case "text":
            this.inputEl.inputWithFormat({
              "forceValueToFormat": /(.+)/
            });
            break;
          case "number":
            this.inputEl.inputWithFormat({
              "forceValueToFormat": /(-)?\s?(\d*[\.,]?\d*)/,
              "formatDefaults": "|"
            });
            break;
          case "number_px":
            this.inputEl.inputWithFormat({
              "forceValueToFormat": /(-)?(\d+)\s?(px)?/,
              "formatDefaults": "||px"
            });
            break;
          case "color":
            this.inputEl.colorInput({
              "contextualContainer": $(".front-container")
            });
            break;
          case "colorscale":
            this.inputEl.colorGradientInput({
              "contextualContainer": $(".viz-inspector-ui-front")
            });
            break;
          case "options":
            this.inputEl.inputWithOptions({
              "options": this.model.get("internalOfSlot").options,
              "contextualContainer": $(".viz-inspector-ui-front"),
              "autoOpenContextual": true,
              "forceValueToOption": true
            });
            break;
          case "percentage":
            this.inputEl.percentageInput();
            break;
          case "date":
            elog("input date not available");
            break;
          case "boolean":
            this.inputEl.booleanInput();
            break;
          case "noinput":
            this.inputEl.noInput({
              "label": "Drop data here",
              "background": "#CCC",
              "color": "#FFF",
              "opacity": 0.6
            });
            break;
          case "imageurl":
            this.inputEl.imageUrl({
              "contextualContainer": $(".front-container")
            });
            break;
          default:
            this.inputEl.inputWithFormat({
              "forceValueToFormat": /(.+)/
            });
        }
      } else {
        this.inputEl.inputWithFormat({
          "forceValueToFormat": /(.+)/
        });
      }
      if (this.model.get("internalOfSlot").get("multiValue")) {
        this.$el.find(".list-editor-toggle").on("mousedown", this.activateListInput);
      } else {
        this.$el.find(".list-editor-toggle").addClass("hidden");
        this.$el.find(".qm-input-wrapper").addClass("no-table-toggler");
      }
      this.inputEl.on("change", this.changeFromEditor);
      this.model.on("change", this.changeFromModel);
      this.pseudoBlockView = new quadrigram.Views.DataBlockEditableTable({
        model: this.model,
        binding: true
      });
      this.pseudoBlockView.render();
      $(this.el).find(".data-drop-value").append(this.pseudoBlockView.$el);
      this.pseudoBlockView.on("popped", this.resetToOneValue);
      return this.changeFromModel();
    };

    DataBlockEditableView.prototype.activateListInput = function() {
      var _this = this;
      this.inputEl.blur();
      if (this.model.activate != null) {
        this.isNew = true;
        this.model.activate();
      }
      return setTimeout(function() {
        if (_this.model.get("data").length > 0) {
          _this.model.setDataManual([new quadrigram.Models.QValue(_this.model.get("data")[0].value, _this.model.get("data")[0].id), new quadrigram.Models.QValue("", "")]);
        } else {
          _this.model.setDataManual([new quadrigram.Models.QValue("", ""), new quadrigram.Models.QValue("", "")]);
        }
        return _this.pseudoBlockView.previewBlock();
      }, 100);
    };

    DataBlockEditableView.prototype.resetToOneValue = function() {
      return this.model.setDataManual([new quadrigram.Models.QValue(this.model.get("data")[0].value, this.model.get("data")[0].id)]);
    };

    DataBlockEditableView.prototype.changeFromEditor = function(value) {
      return this.model.setDataManual([new quadrigram.Models.QValue(this.inputEl.val(), 0)]);
    };

    DataBlockEditableView.prototype.changeFromModel = function() {
      if (this.model.get("data").length > 1) {
        this.pseudoBlockView.$el.removeClass("hidden");
        return this.inputEl.parent().addClass("hidden");
      } else {
        this.pseudoBlockView.$el.addClass("hidden");
        this.inputEl.val(this.model.getValue());
        return this.inputEl.parent().removeClass("hidden");
      }
    };

    DataBlockEditableView.prototype.viewWillRemove = function() {
      if (this.inputEl) {
        this.inputEl.off("change", this.changeFromEditor);
        this.inputEl.remove();
      }
      if (this.pseudoBlockView) {
        this.pseudoBlockView.remove();
      }
      return this.model.off("change", this.changeFromModel);
    };

    DataBlockEditableView.prototype.selectBlock = function() {};

    DataBlockEditableView.prototype.previewBlock = function() {};

    DataBlockEditableView.prototype.showDataChange = function() {};

    return DataBlockEditableView;

  })(quadrigram.Views.DataBlockView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockCollectionElementView = (function(_super) {
    __extends(DataBlockCollectionElementView, _super);

    function DataBlockCollectionElementView() {
      this.displayPill = __bind(this.displayPill, this);
      this.onOut = __bind(this.onOut, this);
      this.onHover = __bind(this.onHover, this);
      this.replaceModel = __bind(this.replaceModel, this);
      this.viewDidRemove = __bind(this.viewDidRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = DataBlockCollectionElementView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockCollectionElementView.prototype.template = JST['app/scripts/templates/blocks/dataBlockCollectionElement.hbs'];

    DataBlockCollectionElementView.prototype.events = {
      "mouseover": "onHover",
      "mouseout": "onOut"
    };

    DataBlockCollectionElementView.prototype.viewDidRender = function() {
      if (!this.blockView) {
        this.blockView = new quadrigram.Views.DataBlockSourceView({
          "model": this.model,
          "binding": false
        });
        this.blockView.render();
        this.blockView.$el.find(".data-block-background").addClass("minimized");
        this.blockView.$el.find(".data-block-name > span").addClass("minimized");
        this.$el.find(".data-block-item-container").append(this.blockView.$el);
        return this.model.on("replace-model", this.replaceModel);
      }
    };

    DataBlockCollectionElementView.prototype.viewDidRemove = function() {
      if (this.blockView != null) {
        return this.blockView.remove();
      }
    };

    DataBlockCollectionElementView.prototype.replaceModel = function(model) {
      return this.model = model;
    };

    DataBlockCollectionElementView.prototype.onHover = function(ev) {
      var _this = this;
      this.hoverState = true;
      this.funcHover || (this.funcHover = _.throttle(function() {
        if (_this.hoverState === true && _this.mouseState !== _this.hoverState) {
          _this.mouseState = _this.hoverState;
          return _this.displayPill(true);
        } else {

        }
      }, 300, {
        trailing: true,
        leading: false
      }));
      return this.funcHover();
    };

    DataBlockCollectionElementView.prototype.onOut = function() {
      var _this = this;
      this.hoverState = false;
      this.funcOut || (this.funcOut = _.throttle(function() {
        if (_this.hoverState === false && _this.mouseState !== _this.hoverState) {
          _this.mouseState = _this.hoverState;
          return _this.displayPill(false);
        } else {

        }
      }, 300, {
        trailing: true,
        leading: false
      }));
      return this.funcOut();
    };

    DataBlockCollectionElementView.prototype.displayPill = function(state) {
      if (state === true) {
        this.$(".data-block-name > span").removeClass("minimized", 100);
        return this.$(".data-block-background").removeClass("minimized", 200);
      } else {
        this.$(".data-block-name > span").addClass("minimized", 100);
        return this.$(".data-block-background").addClass("minimized", 200);
      }
    };

    return DataBlockCollectionElementView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.CustomBlockCollectionElementView = (function(_super) {
    __extends(CustomBlockCollectionElementView, _super);

    function CustomBlockCollectionElementView() {
      this.selectElement = __bind(this.selectElement, this);
      this.doNothing = __bind(this.doNothing, this);
      this.editBlock = __bind(this.editBlock, this);
      this.deleteBlock = __bind(this.deleteBlock, this);
      this.startChangingName = __bind(this.startChangingName, this);
      this.viewDidRemove = __bind(this.viewDidRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = CustomBlockCollectionElementView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CustomBlockCollectionElementView.prototype.template = JST['app/scripts/templates/blocks/customBlockCollectionElement.hbs'];

    CustomBlockCollectionElementView.prototype.events = {
      "click .delete": "deleteBlock",
      "click .edit": "editBlock",
      "click .list-item": "doNothing"
    };

    CustomBlockCollectionElementView.prototype.viewDidRender = function() {
      this.blockView = new quadrigram.Views.DataBlockLabelable({
        "model": this.model,
        "binding": true
      });
      this.blockView.render();
      this.blockView.$el.on("click", this.selectElement);
      return this.$el.find(".list-item").prepend(this.blockView.$el);
    };

    CustomBlockCollectionElementView.prototype.viewDidRemove = function() {
      return this.blockView.remove();
    };

    CustomBlockCollectionElementView.prototype.startChangingName = function() {
      return this.blockView.startChangingName();
    };

    CustomBlockCollectionElementView.prototype.deleteBlock = function(event) {
      event.preventDefault();
      event.stopPropagation();
      return quadrigram.router.dataModels.currentProject.deleteCustomBlock(this.model.get("id"));
    };

    CustomBlockCollectionElementView.prototype.editBlock = function(event) {
      event.preventDefault();
      event.stopPropagation();
      this.trigger("select", this);
      return this.startChangingName();
    };

    CustomBlockCollectionElementView.prototype.doNothing = function(event) {
      event.preventDefault();
      event.stopPropagation();
      return this.trigger("select", this);
    };

    CustomBlockCollectionElementView.prototype.selectElement = function(event) {
      event.preventDefault();
      event.stopPropagation();
      return this.trigger("select", this);
    };

    return CustomBlockCollectionElementView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockCollectionView = (function(_super) {
    __extends(DataBlockCollectionView, _super);

    function DataBlockCollectionView() {
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.replaceOneModel = __bind(this.replaceOneModel, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.init = __bind(this.init, this);
      _ref = DataBlockCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockCollectionView.prototype.template = JST['app/scripts/templates/blocks/dataBlockCollection.hbs'];

    DataBlockCollectionView.prototype.modelView = quadrigram.Views.DataBlockCollectionElementView;

    DataBlockCollectionView.prototype.bindModelViews = false;

    DataBlockCollectionView.prototype.init = function(options) {
      DataBlockCollectionView.__super__.init.call(this, options);
      this.fullCollection = options.fullCollection;
      return this.filters = options.filters;
    };

    DataBlockCollectionView.prototype.viewDidRender = function() {
      return this.fullCollection.on("add", this.replaceOneModel);
    };

    DataBlockCollectionView.prototype.replaceOneModel = function(activatedModel) {
      var f, idx, preblock, skip;
      for (f in this.filters) {
        if (activatedModel.get(f) !== this.filters[f]) {
          skip = true;
        }
      }
      if (!skip) {
        preblock = _.find(this.collection, function(el) {
          return el.get("jsonKey") === activatedModel.get("jsonKey");
        });
        if (preblock) {
          idx = this.collection.indexOf(preblock);
          this.collection.splice(idx, 1, activatedModel);
        }
      }
      return this.replaceModels(this.collection);
    };

    /*
    replaceArray:(newArray)=>
      @replaceModels(newArray)
      @renderVisible()
    */


    DataBlockCollectionView.prototype.viewWillRemove = function() {
      return this.fullCollection.off("add", this.replaceOneModel);
    };

    return DataBlockCollectionView;

  })(Backbone.ArrayOfModelsView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.VisualizerView = (function(_super) {
    __extends(VisualizerView, _super);

    function VisualizerView() {
      this.startDownload = __bind(this.startDownload, this);
      this.canRender = __bind(this.canRender, this);
      this.requestDownloadImageURL = __bind(this.requestDownloadImageURL, this);
      this.calculateNumberDomain = __bind(this.calculateNumberDomain, this);
      this.remove = __bind(this.remove, this);
      this.updateOutput = __bind(this.updateOutput, this);
      this.setMode = __bind(this.setMode, this);
      this.setSelected = __bind(this.setSelected, this);
      this.visualizerDidResize = __bind(this.visualizerDidResize, this);
      this.visualizerAfterDidUpdateItems = __bind(this.visualizerAfterDidUpdateItems, this);
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      this.visualizerWillExecBehaviors1 = __bind(this.visualizerWillExecBehaviors1, this);
      this._cleanChanges = __bind(this._cleanChanges, this);
      this._execBehaviorsAfterDidUpdate = __bind(this._execBehaviorsAfterDidUpdate, this);
      this._execBehaviorsAfterResize = __bind(this._execBehaviorsAfterResize, this);
      this._execBehaviorsAfterUpdate = __bind(this._execBehaviorsAfterUpdate, this);
      this._execBehaviorsBeforeUpdate = __bind(this._execBehaviorsBeforeUpdate, this);
      this.setIdsAndValues = __bind(this.setIdsAndValues, this);
      this._creatingVisualizerStructures = __bind(this._creatingVisualizerStructures, this);
      this.didResize = __bind(this.didResize, this);
      this._handleResize = __bind(this._handleResize, this);
      this._updateContentResize = __bind(this._updateContentResize, this);
      this._updateContent = __bind(this._updateContent, this);
      this.createBehavior = __bind(this.createBehavior, this);
      this.createBehaviors = __bind(this.createBehaviors, this);
      this._finishRender = __bind(this._finishRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = VisualizerView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VisualizerView.prototype.template = JST['app/scripts/templates/visualizers/visualizer.hbs'];

    VisualizerView.prototype.className = "viz-view";

    VisualizerView.prototype.firstResize = true;

    VisualizerView.prototype.resizing = false;

    VisualizerView.prototype.init = function() {
      /*
      @lazyResize = _.debounce ()->
          @didResize()
        , 600
      */

      /*
        Use this listener to update the graphic after the layout manager
        has completely resize the container, this avoid slow rendering sensations
      */

    };

    VisualizerView.prototype.viewWillRender = function() {
      return log("testing log");
    };

    VisualizerView.prototype._serializeData = function() {
      this.templateData = {};
      return this.templateData;
    };

    VisualizerView.prototype._finishRender = function() {
      this.$el.parents('li.gridster-item.gs-w').on('qresize', this._handleResize);
      this.$el.parents('li.gridster-item.gs-w').on('qresizeEnd', this.didResize);
      this.$el.prepend("<div class='viz-view-background'></div>");
      this.model.on("change", this._updateContent);
      this.createBehaviors();
      VisualizerView.__super__._finishRender.call(this);
      return this.didResize();
    };

    /*
    handleOrientationChange:(e) =>
      _.delay(@didResize,500)
    */


    VisualizerView.prototype.createBehaviors = function() {
      var behavior, behaviorPath, _i, _len, _ref1, _results;
      if (this.behaviors == null) {
        this.behaviors = {};
      }
      _ref1 = this.model.behaviors;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        behaviorPath = _ref1[_i];
        behavior = this.createBehavior(behaviorPath);
        _results.push(this.behaviors[behavior.constructor.field] = behavior);
      }
      return _results;
    };

    VisualizerView.prototype.createBehavior = function(behaviorPath, storeInBehaviors) {
      var behavior, behaviorClass, childrenBehavior, childrenBehaviorPath, childrenBehaviors, _i, _len, _ref1;
      behaviorClass = eval(behaviorPath);
      childrenBehaviors = {};
      _ref1 = behaviorClass.behaviors;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        childrenBehaviorPath = _ref1[_i];
        childrenBehavior = this.createBehavior(childrenBehaviorPath);
        childrenBehaviors[childrenBehavior.constructor.field] = childrenBehavior;
      }
      behavior = new behaviorClass(this, childrenBehaviors);
      return behavior;
    };

    /*
    checkInView:()=>
      element = this.$el
      parent = this.$el.closest(".gridster")
      if element.offset().top > window.innerHeight
        return false
      return true
    */


    VisualizerView.prototype._updateContent = function() {
      this._creatingVisualizerStructures();
      if (!this.values || !this.ids) {
        return;
      }
      this.visualizerWillExecBehaviors1();
      this._execBehaviorsBeforeUpdate();
      this.visualizerWillUpdateItems();
      this.updateItems();
      this._execBehaviorsAfterUpdate();
      this.visualizerDidUpdateItems();
      this._execBehaviorsAfterDidUpdate();
      this._cleanChanges();
      this.$el.css("display", "none");
      return this.$el.css("display", "inherit");
    };

    VisualizerView.prototype._updateContentResize = function() {
      if (!this.values || !this.ids) {
        return;
      }
      this.visualizerWillExecBehaviors1();
      this._execBehaviorsBeforeUpdate();
      this.visualizerWillUpdateItems();
      this.updateItems();
      this._execBehaviorsAfterResize();
      return this.visualizerDidResize();
    };

    VisualizerView.prototype._handleResize = function() {
      /*
      if(@firstResize)
        @_updateContent()
        @firstResize = false
        return
      else
        @$el.trigger('onResize')
        #porque este lazyREsize????
        #@lazyResize()
      */

      this.$el.trigger('onResize');
      if (!this.resizing) {
        $('.layout-guides-container').addClass("resizing", 200);
        this.$el.parents(".viz-container").addClass("resizing", 200);
      }
      return this.resizing = true;
    };

    VisualizerView.prototype.didResize = function() {
      $('.layout-guides-container').removeClass("resizing");
      this.$el.parents(".viz-container").removeClass("resizing");
      if (this.firstResize) {
        this._updateContent();
        this.firstResize = false;
      } else {
        this._updateContentResize();
      }
      this.$el.trigger('didResize');
      return this.resizing = false;
    };

    VisualizerView.prototype._creatingVisualizerStructures = function() {
      var behavior, behaviorKey;
      for (behaviorKey in this.behaviors) {
        behavior = this.behaviors[behaviorKey];
        if (behavior.executeStructureStage) {
          behavior.executeStructureStage();
        }
      }
      return this.setIdsAndValues();
    };

    VisualizerView.prototype.setIdsAndValues = function() {
      this.model.original._ids = this.ids;
      return this.model.original._values = this.values;
    };

    VisualizerView.prototype._execBehaviorsBeforeUpdate = function() {
      var behavior, behaviorKey, _results;
      _results = [];
      for (behaviorKey in this.behaviors) {
        behavior = this.behaviors[behaviorKey];
        if (behavior.executeBeforeUpdateStage) {
          _results.push(behavior.executeBeforeUpdateStage());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    VisualizerView.prototype._execBehaviorsAfterUpdate = function() {
      var behavior, behaviorKey, _results;
      _results = [];
      for (behaviorKey in this.behaviors) {
        behavior = this.behaviors[behaviorKey];
        if (behavior.executeAfterUpdateStage) {
          _results.push(behavior.executeAfterUpdateStage());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    VisualizerView.prototype._execBehaviorsAfterResize = function() {
      var behavior, behaviorKey, _results;
      _results = [];
      for (behaviorKey in this.behaviors) {
        behavior = this.behaviors[behaviorKey];
        if (behavior.executeAfterResize) {
          _results.push(behavior.executeAfterResize());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    VisualizerView.prototype._execBehaviorsAfterDidUpdate = function() {
      var behavior, behaviorKey, _results;
      _results = [];
      for (behaviorKey in this.behaviors) {
        behavior = this.behaviors[behaviorKey];
        if (behavior.executeAfterDidUpdateStage) {
          _results.push(behavior.executeAfterDidUpdateStage());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    VisualizerView.prototype._cleanChanges = function() {
      this.changedData = false;
      this.model.changed = {};
      return this.model.original.changed = {};
    };

    VisualizerView.prototype.visualizerWillExecBehaviors1 = function() {};

    VisualizerView.prototype.visualizerWillUpdateItems = function() {};

    VisualizerView.prototype.updateItems = function() {};

    VisualizerView.prototype.visualizerDidUpdateItems = function() {};

    VisualizerView.prototype.visualizerAfterDidUpdateItems = function() {};

    VisualizerView.prototype.visualizerDidResize = function() {};

    VisualizerView.prototype.setSelected = function(value) {};

    VisualizerView.prototype.setMode = function(value) {};

    VisualizerView.prototype.updateOutput = function(behaviorName, newValue, newMeta) {
      return this.model.original.updateOutput(behaviorName, newValue, newMeta);
    };

    VisualizerView.prototype.remove = function() {
      /*
      try
        @$el.removeResize(@_handleResize)
      catch e
        log "visualizerView:remove Eception:",e
      */

      this.model.off("childModified");
      this.model.off("change", this._updateContent);
      this.$el.parents('li.gridster-item.gs-w').off('qresize', this._handleResize);
      this.$el.parents('li.gridster-item.gs-w').off('qresizeEnd', this.didResize);
      /*
      @$el.parents('.gridster-item.gs-w').off('resizeEnd',@didResize)
      @$el.parents('.gridster ul').off('gridsterResize', @didResize)
      */

      if (this.svg) {
        $(this.svg[0][0]).find("*").remove();
        this.svg.remove();
        this.$el.remove();
      }
      return VisualizerView.__super__.remove.apply(this, arguments);
    };

    VisualizerView.prototype.calculateNumberDomain = function(values, accumulate, field) {
      var item, max, min, output, _i, _len;
      if (values.length === 0) {
        return [0, 1];
      }
      if (!field) {
        field = "value";
      }
      output = [];
      min = Infinity;
      max = -Infinity;
      if (_.isArray(values[0].value)) {
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          item = values[_i];
          min = Math.min(min, d3.min(item.value, function(item2, index) {
            output = 0;
            if (!accumulate) {
              output = +item2.value;
            } else {
              if (isNaN(item2.value0)) {
                output = parseFloat(item2.value);
              } else {
                output = parseFloat(item2.value) + parseFloat(item2.value0);
              }
            }
            if (isNaN(output)) {
              output = 0;
            }
            return output;
          }));
          max = Math.max(max, d3.max(item.value, function(item2, index) {
            output = 0;
            if (!accumulate) {
              output = +item2.value;
            } else {
              if (isNaN(item2.value0)) {
                output = parseFloat(item2.value);
              } else {
                output = parseFloat(item2.value) + parseFloat(item2.value0);
              }
            }
            if (isNaN(output)) {
              output = 0;
            }
            return output;
          }));
        }
        output = [min, max];
      } else {
        output = d3.extent(values, function(item, index) {
          return +item[field];
        });
      }
      return output;
    };

    VisualizerView.prototype.requestDownloadImageURL = function(type) {
      if (this.behaviors.svg) {
        return this.behaviors.svg.requestDownloadImageURL(this.startDownload, type);
      } else if (this.behaviors.axis) {
        return this.behaviors.axis.behaviors.svg.requestDownloadImageURL(this.startDownload, type);
      } else if (this.behaviors.map) {
        return this.behaviors.map.requestDownloadImageURL(this.startDownload);
      }
    };

    VisualizerView.prototype.canRender = function(type) {
      if (this.behaviors.map && type === "png") {
        return true;
      }
      if ((this.behaviors.svg != null) || (this.behaviors.axis != null)) {
        return true;
      }
      return false;
    };

    VisualizerView.prototype.startDownload = function(url, extension) {
      var a;
      a = document.createElement("a");
      document.body.appendChild(a);
      a.setAttribute("download", this.model.original.get("blockGroup").get("label") + "." + extension);
      a.setAttribute("href", url);
      a.style["display"] = "none";
      a.click();
      return a.remove();
      /*
      if @vizView && @vizView.behaviors.axis
        @vizView.behaviors.axis.behaviors.svg.openSVGDownloadImage()
      */

    };

    return VisualizerView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.VisualizerContainerView = (function(_super) {
    __extends(VisualizerContainerView, _super);

    function VisualizerContainerView() {
      this.encode_as_img_and_link = __bind(this.encode_as_img_and_link, this);
      this.submit_download_form = __bind(this.submit_download_form, this);
      this.handlePrintViz = __bind(this.handlePrintViz, this);
      this._hideCurrentSize = __bind(this._hideCurrentSize, this);
      this.updateSizeFeedback = __bind(this.updateSizeFeedback, this);
      this.showCurrentSize = __bind(this.showCurrentSize, this);
      this.setMode = __bind(this.setMode, this);
      this.requestDownloadURL = __bind(this.requestDownloadURL, this);
      this.handleDownloadViz = __bind(this.handleDownloadViz, this);
      this.handleRemoveViz = __bind(this.handleRemoveViz, this);
      this.handleOutputViz = __bind(this.handleOutputViz, this);
      this.setOutputSelected = __bind(this.setOutputSelected, this);
      this.setSelected = __bind(this.setSelected, this);
      this.selectOnClick = __bind(this.selectOnClick, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.handleNewLabel = __bind(this.handleNewLabel, this);
      this.handleDrop = __bind(this.handleDrop, this);
      this.handleDropAccept = __bind(this.handleDropAccept, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = VisualizerContainerView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VisualizerContainerView.prototype.template = JST['app/scripts/templates/visualizers/visualizerContainer.hbs'];

    VisualizerContainerView.prototype.downloadButtonsTemplate = JST['app/scripts/templates/visualizers/downloadButtons.hbs'];

    VisualizerContainerView.prototype.events = {
      "click .delete-viz-button": "handleRemoveViz",
      "click .output-viz-button": "handleOutputViz",
      "click .print-viz-button": "handlePrintViz",
      "click .download-viz-button": "handleDownloadViz"
    };

    VisualizerContainerView.prototype._serializeData = function() {
      this.templateData = {};
      return this.templateData;
    };

    VisualizerContainerView.prototype.viewWillRender = function() {
      return log("testing log");
    };

    VisualizerContainerView.prototype.viewDidRender = function() {
      var className, viewClass, vizModel,
        _this = this;
      className = this.model.constructor.name.replace("Model", "");
      viewClass = eval("quadrigram.Views." + className + "View");
      vizModel = this.model.getFlatModel();
      this.vizView = new viewClass({
        model: vizModel
      });
      this.vizView.render();
      _.defer(function() {
        if (!_this.vizView.canRender("svg") && !_this.vizView.canRender("png")) {
          return _this.$el.find(".download-viz-button").addClass("hidden");
        }
      });
      this.$el.find(".viz-view-container").append(this.vizView.$el);
      this.$el.find(".viz-label").html(this.model.get("blockGroup").get("label"));
      this.model.get("blockGroup").on("change:label", this.handleNewLabel);
      if (className === "TextArea" || className === "RectangleArea") {
        this.$el.find(".viz-label").addClass("hidden");
      }
      if (!this.model.get("blockGroup").hasOutputs || !this.model.get("blockGroup").hasOutputs()) {
        this.$el.find(".output-viz-button").addClass("hidden");
      }
      this.$el.on("click", this.selectOnClick);
      this.$el.parent().find(".gs-resize-handle-both").on("mouseover", function() {
        return _this.showCurrentSize();
      });
      this.vizView.$el.on("onResize", this.showCurrentSize);
      this.hideCurrentSize = _.debounce(this._hideCurrentSize, 1000);
      return this.trigger("renderFinished");
      /*
      _.defer( ()=>
        @$el.droppable({
          drop: @handleDrop,
          #over: @handleDrag
          #hoverClass: "drop-hover"
          ##TODO: here we can filter for things like "datablock-edtiable-table"
          #accept: ".data-block"
          accept: @handleDropAccept
            
          greedy: true
        })
      )
      */

    };

    VisualizerContainerView.prototype.handleDropAccept = function(draggEl) {
      if (!draggEl.hasClass("reference") && (draggEl.hasClass("file-block") || draggEl.hasClass("formula-block") || draggEl.hasClass("visualizer-block"))) {
        if (this.model.get("propertiesCollection").findWhere({
          "propId": "data"
        }) || this.model.prePropertiesCollection.findWhere({
          "propId": "data"
        })) {
          return true;
        }
      }
      return false;
    };

    VisualizerContainerView.prototype.handleDrop = function(e, ui) {
      var classesBefore, newClone, parentBefore, pos1,
        _this = this;
      if (this.model.get("propertiesCollection").findWhere({
        "propId": "data"
      }) == null) {
        this.model.prePropertiesCollection.findWhere({
          "propId": "data"
        }).activate();
      }
      log("detected a block drop", $(ui.draggable).data("originalModel"));
      this.trigger('selected', this.model);
      parentBefore = ui.helper.parent();
      classesBefore = ui.helper.attr("class");
      newClone = $(ui.helper).clone(true);
      parentBefore.append(newClone);
      log("parent before", parentBefore);
      newClone.stop();
      pos1 = quadrigram.router.appViews.uiView.vizInspector.$el.offset();
      newClone.animate({
        "top": pos1.top + 100,
        "left": pos1.left
      }, 200, 'easeInQuart', function() {
        var pos2;
        pos2 = quadrigram.router.appViews.uiView.vizInspector.dataSlotPosition();
        quadrigram.router.appViews.uiView.vizInspector.contentView.$el.find("li[data='data']").trigger("click");
        return newClone.animate({
          "top": pos2.top + 6,
          "left": pos2.left + 70,
          "margin-left": 0
        }, 200, 'easeOutQuart', function() {
          newClone.remove();
          return _this.vizView.model.original.insertToDataSlot($(ui.draggable).data("originalModel"));
        });
      });
      return true;
    };

    VisualizerContainerView.prototype.handleNewLabel = function() {
      return this.$el.find(".viz-label").html(this.model.get("blockGroup").get("label"));
    };

    VisualizerContainerView.prototype.viewWillRemove = function() {
      log("VisualizerContainerView:remove ?");
      this.$el.closest("li").addClass("hidden");
      this.$el.off("click", this.selectOnClick);
      this.model.get("blockGroup").off("change:label", this.handleNewLabel);
      if (this.vizView) {
        return this.vizView.remove();
      }
    };

    VisualizerContainerView.prototype.selectOnClick = function(e) {
      if (this.$el.hasClass("edit-mode") && !$(e.target).hasClass("delete-viz-button") && !$(e.target).hasClass("output-viz-button")) {
        return this.trigger("selected", this.model);
      }
    };

    VisualizerContainerView.prototype.setSelected = function(value) {
      if (value) {
        this.$el.addClass("selected");
      } else {
        this.$el.removeClass("selected");
      }
      if (this.vizView) {
        return this.vizView.setSelected(value);
      }
    };

    VisualizerContainerView.prototype.setOutputSelected = function(value) {
      if (value) {
        return this.$el.addClass("output-selected");
      } else {
        return this.$el.removeClass("output-selected");
      }
    };

    VisualizerContainerView.prototype.handleOutputViz = function() {
      quadrigram.tracker.sendEvent({
        event_type: 301
      });
      return quadrigram.router.appViews.uiView.toolbar.filesExplorer.selectVisualizerOutput(this.model.get("blockGroup").id);
    };

    VisualizerContainerView.prototype.handleRemoveViz = function() {
      return quadrigram.router.dataModels.currentProject.removeVisualizer(this.model);
    };

    VisualizerContainerView.prototype.handleDownloadViz = function() {
      var buttons, cover, ctx, downloadMenu,
        _this = this;
      downloadMenu = $(this.downloadButtonsTemplate());
      $("body").append(downloadMenu);
      cover = downloadMenu.find(".cover");
      /*
      cover.css({
        position: "absolute";
        top: "0px";
        left: "0px";
        "z-index": 999999;
      })
      */

      cover.attr("width", $(window).innerWidth());
      cover.attr("height", $(window).innerHeight());
      ctx = cover[0].getContext('2d');
      ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
      ctx.fillRect(0, 0, $(window).innerWidth(), $(window).innerHeight());
      ctx.clearRect(this.$el.offset().left, this.$el.offset().top, this.$el.width(), this.$el.height());
      cover.on("click", function() {
        return downloadMenu.remove();
      });
      buttons = downloadMenu.find(".button-container");
      buttons.css("left", this.$el.offset().left + this.$el.width() / 2 - 120);
      buttons.css("top", this.$el.offset().top - 50);
      if (!this.vizView.canRender("svg")) {
        buttons.find(".svg").css("display", "none");
      }
      buttons.find(".svg").on("click", function() {
        _this.requestDownloadURL("svg");
        return downloadMenu.remove();
      });
      return buttons.find(".png").on("click", function() {
        _this.requestDownloadURL("png");
        return downloadMenu.remove();
      });
    };

    VisualizerContainerView.prototype.requestDownloadURL = function(type) {
      return this.vizView.requestDownloadImageURL(type);
    };

    VisualizerContainerView.prototype.setMode = function(newMode) {
      this.currentMode = newMode;
      if (this.vizView) {
        this.vizView.setMode(newMode);
      }
      if (this.currentMode === "preview") {
        this.$el.find(".context-menu").css("display", "none");
        return this.$el.removeClass("edit-mode");
      } else {
        this.$el.find(".context-menu").css("display", "");
        return this.$el.addClass("edit-mode");
      }
    };

    VisualizerContainerView.prototype.showCurrentSize = function() {
      if (!quadrigram.environment === "editor") {
        return;
      }
      this.$el.find(".size-feedback-container").removeClass("hidden");
      this.updateSizeFeedback();
      return this.hideCurrentSize();
    };

    VisualizerContainerView.prototype.updateSizeFeedback = function() {
      return this.$el.find(".size-feedback").html(this.$el.width() + "px x " + this.$el.height() + "px");
    };

    VisualizerContainerView.prototype._hideCurrentSize = function() {
      return this.$el.find(".size-feedback-container").addClass("hidden");
    };

    VisualizerContainerView.prototype.handlePrintViz = function() {};

    VisualizerContainerView.prototype.submit_download_form = function(output_format) {
      var form, svg, svg_xml;
      svg = this.$el.find('.bkg-svg')[0];
      svg_xml = (new XMLSerializer).serializeToString(svg);
      this.$el.parent().append('<form id="svgform">\
      <input type="hidden" id="output_format" name="output_format" value="svg">\
      <input type="hidden" id="data" name="data">\
      </form>');
      form = document.getElementById('svgform');
      form['output_format'].value = output_format;
      form['data'].value = svg_xml;
      form.submit();
    };

    VisualizerContainerView.prototype.encode_as_img_and_link = function() {
      var b64, svg;
      $('svg').attr({
        version: '1.1',
        xmlns: 'http://www.w3.org/2000/svg'
      });
      svg = this.$el.find('.bkg-svg').parent().html();
      b64 = unescape(encodeURIComponent(svg));
      this.$el.parent().append($('<a href=\'data:image/svg+xml;base64,\n' + b64 + '\' title=\'file.svg\'>Download</a>'));
    };

    return VisualizerContainerView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.VizInspectorContentView = (function(_super) {
    __extends(VizInspectorContentView, _super);

    function VizInspectorContentView() {
      this.remove = __bind(this.remove, this);
      this.detachToolbar = __bind(this.detachToolbar, this);
      this.filterInternal = __bind(this.filterInternal, this);
      this.renderFamily = __bind(this.renderFamily, this);
      this.selectFamily = __bind(this.selectFamily, this);
      this.familyClicked = __bind(this.familyClicked, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      this.render = __bind(this.render, this);
      _ref = VizInspectorContentView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VizInspectorContentView.prototype.template = JST['app/scripts/templates/UI/vizInspectorContent.hbs'];

    VizInspectorContentView.prototype.render = function() {
      return VizInspectorContentView.__super__.render.call(this);
    };

    VizInspectorContentView.prototype.viewWillRender = function() {
      var famName, famOb, prop, _i, _len, _ref1,
        _this = this;
      this.familiesOrder = ["data", "style", "select", "axis", "features", "geo", "tooltip", "textstyles"];
      famOb = {};
      _ref1 = this.model.getPropertiesCollection().models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        prop = _ref1[_i];
        if (!prop.get("internal")) {
          famOb[prop.get("family")] = true;
        }
      }
      this.families = [];
      for (famName in famOb) {
        this.families.push(famName);
      }
      this.families.splice(this.families.indexOf("layout"), 1);
      this.families.sort(function(a, b) {
        if (_this.familiesOrder.indexOf(a) < 0) {
          return 1;
        }
        if (_this.familiesOrder.indexOf(b) < 0) {
          return -1;
        }
        return _this.familiesOrder.indexOf(a) > _this.familiesOrder.indexOf(b);
      });
      if (this.model.constructor.name === "TextAreaModel") {
        this.families.unshift("text");
        this.families.splice(this.families.indexOf("data"), 1);
      }
      return this.templateData.families = this.families;
    };

    VizInspectorContentView.prototype.viewDidRender = function() {
      this.$el.find("li").on("click", this.familyClicked);
      if (this.model.latestFamilyId) {
        return this.selectFamily(this.model.latestFamilyId);
      } else {
        return this.$el.find("[data=" + this.families[0] + "]").trigger("click");
      }
    };

    VizInspectorContentView.prototype.familyClicked = function(e) {
      return this.selectFamily($(e.currentTarget).attr("data"));
    };

    VizInspectorContentView.prototype.selectFamily = function(familyId) {
      if (this.currentId !== familyId) {
        this.model.latestFamilyId = familyId;
        this.$el.find("li").removeClass("selected");
        this.renderFamily(familyId);
        return this.$el.find("li[data ='" + familyId + "']").addClass("selected");
      }
    };

    VizInspectorContentView.prototype.renderFamily = function(familyId) {
      var lastFamily, subCol,
        _this = this;
      lastFamily = this.currentFamily;
      if (this.toolbar) {
        $(this.toolbar).detach();
      }
      subCol = new Backbone.Collection(this.model.getPropertiesCollection().where({
        "family": familyId
      }));
      this.currentId = familyId;
      subCol = this.filterInternal(subCol);
      subCol.comparator = "sortingWeight";
      subCol.sort();
      if (familyId === "text") {
        this.toolbar = quadrigram.router.managers.fontManager.textbarManager.theToolbar.container;
        this.$el.find(".family-container").append(this.toolbar);
        this.trigger("rendered");
        if (lastFamily) {
          return lastFamily.remove();
        }
      } else {
        this.currentFamily = new quadrigram.Views.PropertiesFamily({
          collection: subCol
        });
        if (this.toolbar) {
          $(this.toolbar).trigger("detach");
          $(this.toolbar).detach();
          this.toolbar = null;
        }
        this.currentFamily.render();
        return this.currentFamily.on("rendered", function() {
          _this.currentFamily.off("rendered");
          if (lastFamily) {
            lastFamily.remove();
          }
          _this.$el.find(".family-container").append(_this.currentFamily.$el);
          _this.$el.find(".family-container").off('scroll');
          _this.$el.find(".family-container").on('scroll', function() {
            $(this).closest(".viz-inspector-container").find('.viz-inspector-ui-front').css("top", "-" + $(this).scrollTop() + "px");
            return $(this).closest(".viz-inspector-container").find('.viz-inspector-ui-front').css("clip", "rect(" + ($(this).scrollTop() + 52) + "px 230px 1000px 0px");
          });
          return _this.trigger("rendered");
        });
      }
    };

    VizInspectorContentView.prototype.filterInternal = function(propertiesCollection) {
      var filteredCollection, prop, _i, _len, _ref1;
      filteredCollection = new Backbone.Collection;
      _ref1 = propertiesCollection.models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        prop = _ref1[_i];
        if ((prop.get("internal") == null) || prop.get("internal") === false) {
          filteredCollection.add(prop);
        }
      }
      return filteredCollection;
    };

    VizInspectorContentView.prototype.detachToolbar = function() {
      if (this.toolbar) {
        $(this.toolbar).trigger("detach");
        return $(this.toolbar).detach();
      }
    };

    VizInspectorContentView.prototype.remove = function(options) {
      if (this.toolbar && (!options || !options.preserveToolbar)) {
        $(this.toolbar).trigger("detach");
        $(this.toolbar).detach();
      }
      if (this.currentFamily) {
        this.currentFamily.remove();
      }
      return VizInspectorContentView.__super__.remove.call(this);
    };

    return VizInspectorContentView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.SlotView = (function(_super) {
    __extends(SlotView, _super);

    function SlotView() {
      this.animateWrongData = __bind(this.animateWrongData, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.focusOutSlot = __bind(this.focusOutSlot, this);
      this.focusOnSlot = __bind(this.focusOnSlot, this);
      this.renderInternalBlock = __bind(this.renderInternalBlock, this);
      this.renderBlock = __bind(this.renderBlock, this);
      this.handleDrag = __bind(this.handleDrag, this);
      this.handleDrop = __bind(this.handleDrop, this);
      this.toggleFunctionBlock = __bind(this.toggleFunctionBlock, this);
      this.updateView = __bind(this.updateView, this);
      this.replaceModel = __bind(this.replaceModel, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = SlotView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SlotView.prototype.template = JST['app/scripts/templates/blocks/slot.hbs'];

    SlotView.prototype.className = "slot";

    SlotView.prototype.events = {
      "click": "focusOnSlot",
      "focusout": "focusOutSlot"
    };

    SlotView.prototype.functionAvailable = true;

    SlotView.prototype.allowBlockPreview = true;

    SlotView.prototype.viewWillRender = function() {
      this.templateData.needsLabel = this.needsLabel;
      return this.templateData.label = this.model.get("slotLabel") ? this.model.get("slotLabel") : this.model.get("slotId");
    };

    SlotView.prototype.viewDidRender = function() {
      this.$el.find(".slot-container").droppable({
        drop: this.handleDrop,
        over: this.handleDrag,
        hoverClass: "drop-hover",
        accept: ".data-block",
        greedy: true
      });
      if (this.functionAvailable) {
        this.$el.find(".function-btn").on("click", this.toggleFunctionBlock);
        this.$el.find(".function-btn").removeClass("not-available");
      }
      this.model.on("change", this.updateView);
      this.model.on("replace-model", this.replaceModel);
      this.model.on("wrongData", this.animateWrongData);
      return this.updateView();
    };

    SlotView.prototype.replaceModel = function(model) {
      var e, oldModel;
      oldModel = this.model;
      this.model = model;
      for (e in oldModel._events) {
        if (!this.model._events[e]) {
          this.model._events[e] = [];
        }
        this.model._events[e] = this.model._events[e].concat(oldModel._events[e]);
      }
      return oldModel.off();
    };

    SlotView.prototype.updateView = function() {
      if (this.currentView) {
        this.currentView.remove();
      }
      if (this.model.get("externalBlock")) {
        return this.renderBlock(this.model.get("externalBlock"));
      } else {
        return this.renderInternalBlock(this.model.get("internalBlock"));
      }
    };

    SlotView.prototype.toggleFunctionBlock = function(e) {
      return this.model.createAndInsertFunctionBlock();
    };

    SlotView.prototype.handleDrop = function(e, ui) {
      var block;
      block = $(ui.draggable).data("originalModel");
      if (block) {
        if (block.constructor.name === "FunctionBlockModel" && block.dependsOn(this.model.get("ownerSlotGroup").get("ownerBlock"))) {
          return elog("Should never put a block inside of itself!!!!");
        } else {
          return this.model.setExternalBlock(block);
        }
      } else {
        $(ui.helper).remove();
        throw "Dropped block has lost its data... (Firefox issue)";
      }
    };

    SlotView.prototype.handleDrag = function(e, ui) {
      if (this.currentView && this.currentView.el === ui.draggable[0]) {
        this.currentView = null;
        return this.model.popBlock();
      }
    };

    SlotView.prototype.renderBlock = function(dataModel) {
      var blockView;
      blockView = new quadrigram.Views.DataBlockReferenceView({
        model: dataModel,
        binding: false
      });
      blockView.render();
      $(this.el).find(".slot-container .slot-body").html($(blockView.el));
      return this.currentView = blockView;
    };

    SlotView.prototype.renderInternalBlock = function(dataModel) {
      var blockView;
      blockView = new quadrigram.Views.DataBlockEditableView({
        model: dataModel
      });
      blockView.render();
      $(this.el).find(".slot-container .slot-body").html($(blockView.el));
      return this.currentView = blockView;
    };

    SlotView.prototype.focusOnSlot = function() {
      return $(this.el).addClass('selected');
    };

    SlotView.prototype.focusOutSlot = function() {
      return $(this.el).removeClass('selected');
    };

    SlotView.prototype.viewWillRemove = function() {
      this.currentView.remove();
      this.currentView = null;
      this.model.off("change", this.updateView);
      this.model.off("replace-model", this.replaceModel);
      return this.model.off("wrongData", this.animateWrongData);
    };

    SlotView.prototype.animateWrongData = function() {
      var _this = this;
      log("should animate pop");
      $(this.el).find(".slot-body").addClass('wrong-data');
      $(this.el).find(".data-block").effect("shake", {
        distance: 5,
        times: 6
      });
      $(this.el).find(".slot-body").qtip({
        style: {
          classes: "error-tip",
          tip: {
            corner: true,
            offset: 5
          }
        },
        content: {
          text: "Wrong kind of data for this visualizer!"
        },
        position: {
          my: "top center",
          at: "bottom center",
          viewport: $("body"),
          adjust: {
            mouse: false,
            method: 'flip flip',
            resize: false
          }
        },
        hide: {
          event: "remove"
        },
        show: {
          event: "none",
          ready: true
        }
      });
      return _.delay(function() {
        $(_this.el).find(".slot-body").removeClass('wrong-data');
        return $(_this.el).find(".slot-body").qtip("destroy", true);
      }, 2000);
    };

    return SlotView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockLabelable = (function(_super) {
    __extends(DataBlockLabelable, _super);

    function DataBlockLabelable() {
      this.blockNameChanged = __bind(this.blockNameChanged, this);
      this.startChangingName = __bind(this.startChangingName, this);
      this.labelChanged = __bind(this.labelChanged, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = DataBlockLabelable.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockLabelable.prototype.template = JST['app/scripts/templates/blocks/dataBlockLabelable.hbs'];

    DataBlockLabelable.prototype.viewDidRender = function() {
      var _this = this;
      DataBlockLabelable.__super__.viewDidRender.call(this);
      this.$el.find(".data-block-name").val(this.model.get("label"));
      return _.defer(function() {
        _this.$el.find(".data-block-name").editableSpan();
        _this.$el.find(".data-block-name").on("change", _this.labelChanged);
        if (_this.model.get("defaultLabel")) {
          _this.startChangingName();
          return _this.model.unset("defaultLabel", {
            "silent": true
          });
        }
      });
    };

    DataBlockLabelable.prototype.viewWillRemove = function() {
      return this.$el.find(".data-block-name").off("change", this.labelChanged);
    };

    DataBlockLabelable.prototype.labelChanged = function() {
      return this.blockNameChanged(this.$el.find(".data-block-name")[0].value);
    };

    DataBlockLabelable.prototype.startChangingName = function() {
      return this.$el.find(".data-block-name").editableSpan("startEditing");
    };

    DataBlockLabelable.prototype.blockNameChanged = function(newValue) {
      return this.model.set("label", newValue);
    };

    return DataBlockLabelable;

  })(quadrigram.Views.DataBlockSourceView);

}).call(this);

(function() {
  'use strict';
  var IdManager,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  IdManager = (function() {
    function IdManager() {
      this.getId = __bind(this.getId, this);
      this.addToList = __bind(this.addToList, this);
    }

    IdManager.prototype._exclude = [];

    IdManager.prototype.addToList = function(idsToList) {
      if (_.isArray(idsToList)) {
        return this._exclude = this._exclude.concat(idsToList);
      } else {
        return this._exclude.push(idsToList);
      }
    };

    IdManager.prototype.getId = function(prefix) {
      var candidate;
      candidate = _.uniqueId(prefix);
      while (this._exclude.indexOf(candidate) !== -1) {
        candidate = _.uniqueId();
      }
      this.addToList(candidate);
      return candidate;
    };

    return IdManager;

  })();

  quadrigram.idManager = new IdManager();

}).call(this);

(function() {
  'use strict';
  var LabelManager,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LabelManager = (function() {
    function LabelManager() {
      this.isEmptyObject = __bind(this.isEmptyObject, this);
      this.getPropperName = __bind(this.getPropperName, this);
      this.removeFromList = __bind(this.removeFromList, this);
      this.addToList = __bind(this.addToList, this);
    }

    LabelManager.prototype._exclude = {};

    LabelManager.prototype.addToList = function(nameWithIndex) {
      var index, name;
      if (nameWithIndex.lastIndexOf("(") > 0) {
        name = nameWithIndex.substring(0, nameWithIndex.lastIndexOf("("));
        index = +nameWithIndex.substring(nameWithIndex.lastIndexOf("(") + 1, nameWithIndex.lastIndexOf(")"));
      } else {
        name = nameWithIndex;
        index = 0;
      }
      if (!this._exclude[name]) {
        this._exclude[name] = {};
      }
      return this._exclude[name][index] = true;
    };

    LabelManager.prototype.removeFromList = function(nameWithIndex) {
      var index, name;
      if (!nameWithIndex) {
        return;
      }
      if (nameWithIndex.lastIndexOf("(") > 0) {
        name = nameWithIndex.substring(0, nameWithIndex.lastIndexOf("("));
        index = +nameWithIndex.substring(nameWithIndex.lastIndexOf("(") + 1, nameWithIndex.lastIndexOf(")"));
      } else {
        name = nameWithIndex;
        index = 0;
      }
      return delete this._exclude[name][index];
    };

    LabelManager.prototype.getPropperName = function(name) {
      var index, result;
      if (!this._exclude[name] || this.isEmptyObject(this._exclude[name])) {
        result = name;
      } else {
        index = 1;
        while (this._exclude[name][index] === true) {
          index = index + 1;
        }
        result = name + "(" + index + ")";
      }
      this.addToList(result);
      return result;
    };

    LabelManager.prototype.isEmptyObject = function(obj) {
      var prop;
      for (prop in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, prop)) {
          return false;
        }
      }
      return true;
    };

    return LabelManager;

  })();

  quadrigram.labelManager = new LabelManager();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.PropertyView = (function(_super) {
    __extends(PropertyView, _super);

    function PropertyView() {
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.toggleHidden = __bind(this.toggleHidden, this);
      this.setCollapsed = __bind(this.setCollapsed, this);
      this.addFormatSlots = __bind(this.addFormatSlots, this);
      this.formatChanged = __bind(this.formatChanged, this);
      this.changeFormat = __bind(this.changeFormat, this);
      this.replaceModel = __bind(this.replaceModel, this);
      this.requestActivation = __bind(this.requestActivation, this);
      this.setSelectWidth = __bind(this.setSelectWidth, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = PropertyView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PropertyView.prototype.template = JST['app/scripts/templates/blocks/property.hbs'];

    PropertyView.prototype.viewWillRender = function() {
      var f, formats, label, _i, _j, _len, _len1, _ref1, _ref2;
      if (_.isArray(this.model.propDef.formats)) {
        formats = [];
        _ref1 = this.model.propDef.formats;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          f = _ref1[_i];
          formats.push({
            "value": f,
            "label": f
          });
        }
        return this.templateData.formats = formats;
      } else {
        formats = [];
        _ref2 = Object.keys(this.model.propDef.formats);
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          f = _ref2[_j];
          if (this.model.propDef.formats[f].label != null) {
            label = this.model.propDef.formats[f].label;
          } else if (quadrigram.router.managers.formatManager.formatDefinitions[f].label != null) {
            label = quadrigram.router.managers.formatManager.formatDefinitions[f].label;
          } else {
            label = f;
          }
          if (!this.model.propDef.formats[f].hidden && !this.model.propDef.formats[f].deprecated) {
            formats.push({
              "value": f,
              "label": label
            });
          } else if (this.model.get("currentFormat") === f && this.model.propDef.formats[f].deprecated) {
            formats.push({
              "value": f,
              "label": label + " (deprecated)"
            });
          }
        }
        return this.templateData.formats = formats;
      }
    };

    PropertyView.prototype.viewDidRender = function() {
      var f,
        _this = this;
      if (this.model.propDef.uiTipContent != null) {
        this.$el.find(".property-label.ui-tip-target").attr("data-ui-tip-id", this.model.propDef.label);
        quadrigram.router.managers.uiTooltipManager.resgisterContent(this.model.propDef.label, this.model.propDef.uiTipContent);
      }
      for (f in this.model.propDef.formats) {
        if (quadrigram.router.managers.formatManager.formatDefinitions[f].uiTipContent != null) {
          quadrigram.router.managers.uiTooltipManager.resgisterContent(f, quadrigram.router.managers.formatManager.formatDefinitions[f].uiTipContent);
        }
      }
      this.slotViews = [];
      this.addFormatSlots();
      this.$el.find(".format-selector").selectmenuWithTooltips({
        width: 100,
        change: function(e) {
          var format;
          format = e.target.value;
          _this.requestActivation();
          return _this.changeFormat(format);
        },
        appendTo: this.$el.find(".propertyBody")
      });
      this.model.on("change:slotsCollection", this.formatChanged);
      this.$el.find('h5').on('click', this.toggleHidden);
      this.$el.find(".format-selector").val(this.model.get("currentFormat"));
      this.$el.find(".format-selector").selectmenuWithTooltips("refresh");
      _.defer(function() {
        if (Object.keys(_this.model.propDef.formats).length > 1) {
          _this.$el.find(".format-selector").selectmenuWithTooltips("widget").attr("data-ui-tip-id", "format-selector");
        } else {
          _this.$el.find(".format-selector").selectmenuWithTooltips("widget").attr("data-ui-tip-id", Object.keys(_this.model.propDef.formats)[0]);
        }
        return _this.$el.find(".format-selector").selectmenuWithTooltips("widget").addClass("ui-tip-target");
      });
      this.setCollapsed(this.model.get("hidden"));
      this.model.on("replace-model", this.replaceModel);
      return this.setSelectWidth();
    };

    PropertyView.prototype.setSelectWidth = function() {};

    PropertyView.prototype.requestActivation = function() {
      if (this.model.activate) {
        return this.model.activate();
      }
    };

    PropertyView.prototype.replaceModel = function(model) {
      var e, oldModel;
      oldModel = this.model;
      this.model = model;
      for (e in oldModel._events) {
        if (!this.model._events[e]) {
          this.model._events[e] = [];
        }
        this.model._events[e] = this.model._events[e].concat(oldModel._events[e]);
      }
      return oldModel.off();
    };

    PropertyView.prototype.changeFormat = function(format) {
      return this.model.set("currentFormat", format);
    };

    PropertyView.prototype.formatChanged = function(e) {
      this.$el.find("option[value=" + this.model.get("currentFormat") + "]").attr("selected", "selected");
      this.setSelectWidth();
      return this.addFormatSlots();
    };

    PropertyView.prototype.addFormatSlots = function() {
      var slotModel, slotTipId, slotView, tipContent, _i, _j, _len, _len1, _ref1, _ref2, _results;
      _ref1 = this.slotViews;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slotView = _ref1[_i];
        slotView.remove();
      }
      this.slotViews = [];
      _ref2 = this.model.get("slotsCollection").models;
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        slotModel = _ref2[_j];
        slotView = new quadrigram.Views.SlotView({
          model: slotModel,
          binding: false
        });
        if (this.model.get("slotsCollection").models.length > 1) {
          slotView.needsLabel = true;
        }
        this.$el.find(".property-container").append(slotView.$el);
        slotView.render();
        slotTipId = this.model.get("currentFormat") + "_" + slotModel.get("slotId");
        slotView.$el.find(".slot-label").attr("data-ui-tip-id", slotTipId);
        if ((this.model.propDef.formats[this.model.get("currentFormat")].uiTipContents != null) && (this.model.propDef.formats[this.model.get("currentFormat")].uiTipContents[slotModel.get("slotId")] != null)) {
          tipContent = this.model.propDef.formats[this.model.get("currentFormat")].uiTipContents[slotModel.get("slotId")];
        } else {
          tipContent = _.findWhere(quadrigram.router.managers.formatManager.formatDefinitions[this.model.get("currentFormat")].slots, {
            "id": slotModel.get("slotId")
          }).uiTipContent;
        }
        if (tipContent != null) {
          quadrigram.router.managers.uiTooltipManager.resgisterContent(slotTipId, tipContent);
        }
        _results.push(this.slotViews.push(slotView));
      }
      return _results;
    };

    PropertyView.prototype.setCollapsed = function(value) {
      if (value) {
        this.$el.find('.property-list-item').addClass("collapsed");
        this.$el.find('.propertyBody').css("display", "none");
        return this.$el.find('h5').addClass('selected');
      }
    };

    PropertyView.prototype.toggleHidden = function(e) {
      this.model.set("hidden", !this.model.get("hidden"));
      if (this.model.get("hidden")) {
        this.$el.find('.propertyBody').slideUp(300);
        this.$el.find('h5').addClass('selected');
        return this.$el.find('.property-list-item').addClass("collapsed");
      } else {
        this.$el.find('.propertyBody').slideDown(300);
        this.$el.find('h5').removeClass('selected');
        return this.$el.find('.property-list-item').removeClass("collapsed");
      }
    };

    PropertyView.prototype.viewWillRemove = function() {
      var slotView, _i, _len, _ref1;
      this.model.off("change:slotsCollection", this.formatChanged);
      if (this.slotViews != null) {
        _ref1 = this.slotViews;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          slotView = _ref1[_i];
          slotView.remove();
        }
      }
      return this.slotViews = [];
    };

    return PropertyView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.PropertiesFamily = (function(_super) {
    __extends(PropertiesFamily, _super);

    function PropertiesFamily() {
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = PropertiesFamily.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PropertiesFamily.prototype.template = JST['app/scripts/templates/UI/propertiesFamily.hbs'];

    PropertiesFamily.prototype.modelView = quadrigram.Views.PropertyView;

    PropertiesFamily.prototype.className = "family-content";

    PropertiesFamily.prototype.bindModelViews = false;

    PropertiesFamily.prototype.viewWillRender = function() {};

    PropertiesFamily.prototype.viewDidRender = function() {
      var _this = this;
      return _.delay(function() {
        return _this.trigger("rendered");
      }, 80);
    };

    return PropertiesFamily;

  })(Backbone.CollectionView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.Toolbar = (function(_super) {
    __extends(Toolbar, _super);

    function Toolbar() {
      this.setFunctionBlockTarget = __bind(this.setFunctionBlockTarget, this);
      this.closeBlockEditor = __bind(this.closeBlockEditor, this);
      this.openBlockEditor = __bind(this.openBlockEditor, this);
      this.closeDataManager = __bind(this.closeDataManager, this);
      this.openDataManager = __bind(this.openDataManager, this);
      this.toggleBlockEditor = __bind(this.toggleBlockEditor, this);
      this.toggleDataManager = __bind(this.toggleDataManager, this);
      this.datamanagerClicked = __bind(this.datamanagerClicked, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.closeToolsTooltip = __bind(this.closeToolsTooltip, this);
      this.init = __bind(this.init, this);
      _ref = Toolbar.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Toolbar.prototype.template = JST['app/scripts/templates/UI/toolbar.hbs'];

    Toolbar.prototype.events = {
      "click .draw": "shapeClicked",
      "click .data-manager-toggle": "datamanagerClicked",
      "click .function-manager-toggle": "functionmanagerClicked",
      "click .layout": "layoutClicked"
    };

    Toolbar.prototype.init = function() {
      var _this = this;
      $(window).on("viz:dragging", this.closeToolsTooltip);
      return $(window).on("tools:leave", function() {
        return _this.closeToolsTooltip();
      });
    };

    Toolbar.prototype._serializeData = function() {
      this.templateData = {};
      return this.templateData;
    };

    Toolbar.prototype.closeToolsTooltip = function(delay) {
      /*
      quadrigram.tester=@$el
      $('.qtip-tools').animate
        opacity:0
      , delay||100, "swing", ()=>
        $('.qtip-tools').hide()
      */

      return $('.qtip-tools').hide();
    };

    Toolbar.prototype.viewDidRender = function() {
      var tooltipTools,
        _this = this;
      this.dataFactoryEl = $("<div class='data-factory-container'></div>");
      this.filesExplorer = new quadrigram.Views.DataFactoryView({
        model: this.model.get("blockGroupsCollection")
      });
      this.filesExplorer.render();
      this.functionsExplorer = new quadrigram.Views.BlockInspectorView({
        model: this.model
      });
      this.functionsExplorer.render();
      this.dataFactoryEl.append(this.filesExplorer.$el);
      this.dataFactoryEl.append(this.functionsExplorer.$el);
      this.$el.find(".tools-submenu").append(this.dataFactoryEl);
      tooltipTools = [
        {
          "class": '.basic',
          group: 'charts'
        }, {
          "class": '.text',
          group: 'text'
        }, {
          "class": '.draw',
          group: 'draw'
        }, {
          "class": '.media',
          group: 'media'
        }, {
          "class": '.controls',
          group: 'controls'
        }
      ];
      _.each(tooltipTools, function(tooldata) {
        return _this.$(tooldata["class"]).qtip({
          style: 'qtip-tools',
          content: {
            text: function() {
              var toolsDrag;
              $('.qtip-tools').stop();
              toolsDrag = new quadrigram.Views.ToolsDragTipList({
                model: new Backbone.Model({
                  "group": tooldata.group
                })
              });
              toolsDrag.render();
              tooldata.view = toolsDrag;
              return toolsDrag.$el;
            }
          },
          hide: {
            event: 'unfocus',
            delay: 600
          },
          show: {
            delay: 100
          },
          events: {
            show: function(event, api) {
              $('.qtip-tools').stop();
              return $('.qtip-tools').hide();
            }
          },
          position: {
            my: 'top center',
            at: 'bottom center'
          }
        });
      });
      this.$el.find(".tools-submenu").hide();
      this.$el.find(".tools-submenu").addClass("closed");
      this.functionsExplorer.$el.hide();
      return this.functionsExplorer.$el.addClass("closed");
    };

    Toolbar.prototype.viewWillRender = function() {};

    Toolbar.prototype.viewWillRemove = function() {
      log("will remove");
      $(window).off("viz:dragging", this.closeToolsTooltip);
      $(window).off("tools:leave", this.closeToolsTooltip);
      this.filesExplorer.remove();
      return this.functionsExplorer.remove();
    };

    Toolbar.prototype.datamanagerClicked = function(e) {
      return this.toggleDataManager();
    };

    Toolbar.prototype.toggleDataManager = function() {
      this.$el.find(".tools-submenu").toggleClass("closed");
      if (this.$el.find(".tools-submenu").hasClass("closed")) {
        this.$el.find(".data-manager-toggle").removeClass("open");
        return this.closeDataManager();
      } else {
        this.$el.find(".data-manager-toggle").addClass("open");
        return this.openDataManager();
      }
    };

    Toolbar.prototype.toggleBlockEditor = function() {};

    Toolbar.prototype.openDataManager = function() {
      this.$el.find(".data-manager-toggle").find(".title-icon").css("transform", "rotate(90deg)");
      this.filesExplorer._changeBlockGroupCollection(this.filesExplorer.selectedMenu);
      this.$el.find(".tools-submenu").removeClass("closed");
      return this.$el.find(".tools-submenu").slideDown(300);
    };

    Toolbar.prototype.closeDataManager = function() {
      quadrigram.router.appViews.projectView.outputDeselectAll();
      this.$el.find(".tools-submenu").addClass("closed");
      this.$el.find(".data-manager-toggle").find(".title-icon").css("transform", "rotate(0deg)");
      return this.$el.find(".tools-submenu").slideUp(300);
    };

    Toolbar.prototype.openBlockEditor = function() {
      this.functionsExplorer.$el.removeClass("closed");
      return this.functionsExplorer.$el.slideDown(100);
    };

    Toolbar.prototype.closeBlockEditor = function() {
      this.functionsExplorer.$el.addClass("closed");
      return this.functionsExplorer.$el.slideUp(100);
    };

    Toolbar.prototype.setFunctionBlockTarget = function(block) {
      if (block == null) {
        return this.closeBlockEditor();
      } else {
        this.functionsExplorer.setTarget(block);
        if (this.functionsExplorer.$el.hasClass("closed")) {
          return this.openBlockEditor();
        }
      }
    };

    Toolbar.prototype.layoutClicked = function(e) {
      var settings;
      settings = new quadrigram.Views.SettingsDialog();
      return settings.render();
    };

    return Toolbar;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.FunctionBlockModel = (function(_super) {
    __extends(FunctionBlockModel, _super);

    function FunctionBlockModel() {
      this.removeFromProject = __bind(this.removeFromProject, this);
      this.dependenciesFetchState = __bind(this.dependenciesFetchState, this);
      this.dependsOn = __bind(this.dependsOn, this);
      this.toJSON = __bind(this.toJSON, this);
      this.handleOperationEnd = __bind(this.handleOperationEnd, this);
      this.runOperator = __bind(this.runOperator, this);
      this.setOperation = __bind(this.setOperation, this);
      this.postModelSetup = __bind(this.postModelSetup, this);
      this.modelSetup = __bind(this.modelSetup, this);
      this.create = __bind(this.create, this);
      _ref = FunctionBlockModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FunctionBlockModel.prototype.relations = [
      {
        type: Backbone.HasOne,
        key: 'operator',
        relatedModel: "quadrigram.Models.OperatorModel",
        includeInJSON: true,
        reverseRelation: {
          type: Backbone.HasOne,
          key: 'ownerBlock',
          bubbleUp: false,
          includeInJSON: Backbone.Model.prototype.idAttribute
        }
      }
    ];

    FunctionBlockModel.prototype.create = function() {
      var date;
      date = new Date();
      this.set("creation_date", date.getTime());
      return this.set("operator", new quadrigram.Models.OperatorModel());
    };

    FunctionBlockModel.prototype.modelSetup = function(options) {
      FunctionBlockModel.__super__.modelSetup.call(this, options);
      return this.set("fetchState", "processing", {
        silent: true
      });
    };

    FunctionBlockModel.prototype.postModelSetup = function() {
      var _this = this;
      this.get("operator").on("change:currentOperation", function() {
        return _this.runOperator();
      });
      /*
      @.get("operator").on("change:currentExpression",()=>
        #log "+++++++++ fb-changed:currentExpression"
        @runOperator()
      )
      */

      this.get("operator").on("childModified", function() {
        return _this.runOperator();
      });
      return this.runOperator();
    };

    FunctionBlockModel.prototype.setOperation = function(opKey, silent) {
      return this.get("operator").set("currentOperation", opKey, {
        "silent": silent
      });
    };

    FunctionBlockModel.prototype.runOperator = function() {
      var depfetchstate;
      if (this.staticData) {
        this.set("fetchState", "ready");
        return;
      }
      depfetchstate = this.dependenciesFetchState();
      log("fetchstate:runOperator - ", this.get("label"), "depfetchstate=", depfetchstate);
      if (depfetchstate === "ready") {
        this.set("fetchState", "processing");
        if (this._events["operation-end"] == null) {
          this.on("operation-end", this.handleOperationEnd);
        }
        return this.get("operator").getOperationResult(this);
      } else {
        return this.handleOperationEnd({
          data: null,
          metaData: null
        });
      }
    };

    FunctionBlockModel.prototype.handleOperationEnd = function(resultObject) {
      log("operationEnded, setting data", resultObject);
      this.set({
        "metaData": resultObject.metaData,
        "data": resultObject.data
      }, {
        "silent": true
      });
      this.set({
        "fetchState": this.dependenciesFetchState()
      }, {
        "silent": true
      });
      return this.trigger("change:fetchState");
    };

    FunctionBlockModel.prototype.toJSON = function(options) {
      return FunctionBlockModel.__super__.toJSON.call(this, options);
    };

    FunctionBlockModel.prototype.dependsOn = function(targetBlock) {
      var slot, _i, _len, _ref1;
      if (targetBlock === this) {
        return true;
      }
      _ref1 = this.get("operator").get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        if (targetBlock === slot.get("externalBlock")) {
          return true;
        } else if ((slot.get("externalBlock") != null) && slot.get("externalBlock").constructor.name === "FunctionBlockModel") {
          if (slot.get("externalBlock").dependsOn(targetBlock)) {
            return true;
          }
        }
      }
      return false;
    };

    FunctionBlockModel.prototype.dependenciesFetchState = function() {
      var b, bstate, result, slot, _i, _len, _ref1;
      result = "ready";
      _ref1 = this.get("operator").get("slotsCollection").models;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slot = _ref1[_i];
        b = slot.get("externalBlock");
        if (b) {
          bstate = b.get("fetchState");
          if (bstate !== "ready") {
            result = "waiting";
          }
        }
      }
      return result;
    };

    FunctionBlockModel.prototype.removeFromProject = function() {
      if (this.get("operator") != null) {
        this.get("operator").removeFromProject();
      }
      return FunctionBlockModel.__super__.removeFromProject.call(this);
    };

    /*
    detachAndDestroy:()=>
      super()
      #@get("operator").unregister()
      @get("operator").destoryR()
    
    
    destroyR:()=>
      
      if @get("operator")?
        @get("operator").destroyR()
      super()
    */


    return FunctionBlockModel;

  })(quadrigram.Models.DataBlockModel);

  quadrigram.Models.FunctionBlockModel.setup();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.EditableBlockModel = (function(_super) {
    __extends(EditableBlockModel, _super);

    function EditableBlockModel() {
      this.create = __bind(this.create, this);
      _ref = EditableBlockModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    EditableBlockModel.prototype.create = function() {
      EditableBlockModel.__super__.create.call(this);
      return this.set("metaData", {
        "valueLabel": "Custom value",
        "idLabel": "Custom id",
        "viewMode": "cell"
      }, {
        silent: true
      });
    };

    return EditableBlockModel;

  })(quadrigram.Models.DataBlockModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ExternalBlockModel = (function(_super) {
    __extends(ExternalBlockModel, _super);

    function ExternalBlockModel() {
      this.modelSetup = __bind(this.modelSetup, this);
      _ref = ExternalBlockModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExternalBlockModel.prototype.modelSetup = function(options) {
      ExternalBlockModel.__super__.modelSetup.call(this);
      return this.set("fetchState", "loading", {
        silent: true
      });
    };

    return ExternalBlockModel;

  })(quadrigram.Models.DataBlockModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.BarChartView = (function(_super) {
    __extends(BarChartView, _super);

    function BarChartView() {
      this.updateItems = __bind(this.updateItems, this);
      this.setAxisDirection = __bind(this.setAxisDirection, this);
      _ref = BarChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BarChartView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    BarChartView.prototype.yAxisType = "bands";

    BarChartView.prototype.xAxisType = "linear";

    BarChartView.prototype.followMouse = false;

    BarChartView.prototype.chartType = "barchart";

    BarChartView.prototype.init = function() {
      BarChartView.__super__.init.call(this);
      if (quadrigram.router.getDevice() !== "Desktop") {
        return this.followMouse = true;
      }
    };

    BarChartView.prototype.setAxisDirection = function() {
      var axeIds;
      axeIds = this.model.get("IdsOnAxis");
      if (!axeIds) {
        axeIds = "Vertical";
      }
      if (axeIds === "Vertical") {
        this.yAxisType = "linear";
        return this.xAxisType = "bands";
      } else {
        this.yAxisType = "bands";
        return this.xAxisType = "linear";
      }
    };

    BarChartView.prototype.updateItems = function() {
      var self, size, transitionTime, transitionType, updateD3Object,
        _this = this;
      this.items = this.behaviors.axis.graph.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsEnter.append("rect").attr("class", "bar");
      this.items.exit().remove();
      size = this.items.size();
      if (size < 200 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        updateD3Object = this.items.select(".bar").transition().duration(transitionTime).ease(transitionType);
      } else {
        updateD3Object = this.items.select(".bar");
      }
      self = this;
      if (this.yAxisType === "bands") {
        return updateD3Object.attr("x", function(d) {
          return Math.max(0, self.behaviors.axis.xScale(Math.min(0, d.value)));
        }).attr("width", function(d) {
          var domainValue, domainWidth, realWidth, realX;
          realWidth = _this.behaviors.axis.xScale(d.value) - _this.behaviors.axis.xScale(Math.max(0, _this.behaviors.axis.xScale.domain()[0]));
          realX = self.behaviors.axis.xScale(Math.min(0, d.value));
          if (d.value < 0) {
            domainValue = _this.behaviors.axis.xScale.domain()[0];
            if (domainValue > 0) {
              realWidth = 0;
            } else {
              domainWidth = _this.behaviors.axis.xScale(domainValue) - _this.behaviors.axis.xScale(0);
              realWidth = Math.abs(Math.max(domainWidth, realWidth));
            }
          } else {
            realWidth = Math.max(0, realWidth);
          }
          return realWidth;
        }).attr("y", function(d) {
          return _this.behaviors.axis.yScale(d.id);
        }).attr("height", this.behaviors.axis.yScale.rangeBand());
      } else {
        return updateD3Object.attr("x", function(d, i) {
          return _this.behaviors.axis.xScale(d.id);
        }).attr("width", this.behaviors.axis.xScale.rangeBand()).attr("y", function(d) {
          var limit, value;
          value = self.behaviors.axis.yScale(Math.max(0, d.value));
          limit = self.behaviors.axis.yScale.range()[0];
          if (value > limit) {
            d3.select(this).style("display", "none");
          } else {
            d3.select(this).style("display", "");
          }
          return value;
        }).attr("height", function(d) {
          return Math.abs(_this.behaviors.axis.yScale(d.value) - _this.behaviors.axis.yScale(Math.max(0, _this.behaviors.axis.yScale.domain()[0])));
        });
      }
    };

    return BarChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DonutChartView = (function(_super) {
    __extends(DonutChartView, _super);

    function DonutChartView() {
      this.updateItems = __bind(this.updateItems, this);
      this.checkShowLabels = __bind(this.checkShowLabels, this);
      this.calculateRadiusWithLabel = __bind(this.calculateRadiusWithLabel, this);
      this.calculateRadiusWithoutLabel = __bind(this.calculateRadiusWithoutLabel, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      _ref = DonutChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DonutChartView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    DonutChartView.prototype.followMouse = true;

    DonutChartView.prototype.chartType = "donut";

    DonutChartView.prototype.showLabel = true;

    DonutChartView.prototype.labelMaxLength = 25;

    DonutChartView.prototype.init = function() {
      DonutChartView.__super__.init.call(this);
      this.arc = d3.svg.arc();
      this.outerArc = d3.svg.arc();
      return this.pie = d3.layout.pie().value(function(d) {
        return d.value;
      }).sort(null);
    };

    DonutChartView.prototype.visualizerWillUpdateItems = function() {
      var valueEntry, _i, _len, _ref1, _results;
      if (!this.canvas) {
        this.canvas = this.behaviors.svg.root.append("g").attr("class", "donut-canvas");
      }
      this.filteredValues = [];
      _ref1 = this.values;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        valueEntry = _ref1[_i];
        if (valueEntry.value > 0) {
          _results.push(this.filteredValues.push(valueEntry));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    DonutChartView.prototype.calculateRadiusWithoutLabel = function() {
      this.radius = Math.min(this.behaviors.svg.size.width, this.behaviors.svg.size.height) / 2 - 20;
      return this.arc.outerRadius(this.radius).innerRadius(parseFloat(this.model.get("innerRadius")) / 100 * this.radius);
    };

    DonutChartView.prototype.calculateRadiusWithLabel = function() {
      var maxLengthLabel;
      maxLengthLabel = 0;
      d3.selectAll(".item").selectAll(".label").each(function(d) {
        return maxLengthLabel = Math.max(this.getComputedTextLength(), maxLengthLabel);
      });
      this.maxLengthLabel = Math.min(this.behaviors.svg.size.width / 0.3, maxLengthLabel);
      this.radius = Math.min(this.behaviors.svg.size.width - 2 * this.maxLengthLabel, this.behaviors.svg.size.height) / 2 - 40;
      this.arc.outerRadius(this.radius).innerRadius(parseFloat(this.model.get("innerRadius")) / 100 * this.radius);
      return this.outerArc.innerRadius(this.radius + 20).outerRadius(this.radius + 20);
    };

    DonutChartView.prototype.checkShowLabels = function() {
      var size;
      if (this.model.get("labelsOption") === "force to show") {
        this.showLabel = true;
        return;
      }
      if (this.model.get("labelsOption") === "hide labels") {
        this.showLabel = false;
        return;
      }
      if (this.model.get("labelsOption") === "auto") {
        size = this.items.size();
        if (size > 20) {
          this.showLabel = false;
        } else {
          this.showLabel = true;
        }
      }
    };

    DonutChartView.prototype.updateItems = function() {
      var arc, labelMaxLength, maxLengthLabel, midAngle, outerArc, radius, self, size, transitionTime, transitionType, visHeight, visWidth;
      this.canvas.style("transform", "translate(" + this.behaviors.svg.size.width / 2 + "px," + this.behaviors.svg.size.height / 2 + "px)");
      this.items = this.canvas.selectAll(".item").data(this.pie(this.filteredValues), function(d, i) {
        return d.id = d.data.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsEnter.append("path").attr("class", "sector");
      this.itemsEnter.append("text").attr("class", "label").attr("dy", ".35em");
      this.itemsEnter.append("polyline").attr("class", "line");
      this.items.exit().remove();
      arc = this.arc;
      outerArc = this.outerArc;
      visWidth = this.behaviors.svg.size.width;
      visHeight = this.behaviors.svg.size.height;
      size = this.items.size();
      this.checkShowLabels();
      midAngle = function(d) {
        return d.startAngle + (d.endAngle - d.startAngle) / 2;
      };
      labelMaxLength = this.labelMaxLength;
      if (size < 100 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        if (this.showLabel) {
          this.items.select(".label").style("display", "inherit");
          this.items.select(".line").style("display", "inherit");
          this.items.select(".label ").attr("stroke", "#000").attr("stroke-width", "0px").text(function(d) {
            return d.id.substring(0, labelMaxLength);
          });
          this.calculateRadiusWithLabel();
          maxLengthLabel = this.maxLengthLabel;
          radius = this.radius;
          this.items.select(".label ").transition().duration(transitionTime).ease(transitionType).attrTween("transform", function(d) {
            var interpolate;
            this._current = this._current || d;
            interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
              var d2, pos;
              d2 = interpolate(t);
              pos = outerArc.centroid(d2);
              pos[0] = visWidth / 2 - maxLengthLabel - 10;
              if (midAngle(d2) > Math.PI) {
                pos[0] = -pos[0];
              }
              return "translate(" + pos + ")";
            };
          }).styleTween("text-anchor", function(d) {
            var interpolate;
            this._current = this._current || d;
            interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            return function(t) {
              var d2;
              d2 = interpolate(t);
              if (midAngle(d2) > Math.PI) {
                return "end";
              } else {
                return "start";
              }
            };
          });
          this.items.select(".line").transition().duration(transitionTime).ease(transitionType).attr("stroke", "#000").attr("stroke-width", "1px").attr("fill", "none").attr("stroke-opacity", "1").attr("points", function(d) {
            var interpolate, posA, posB, posC;
            this._current = this._current || d;
            interpolate = d3.interpolate(this._current, d);
            this._current = interpolate(0);
            posA = arc.centroid(d);
            posB = outerArc.centroid(d);
            posC = outerArc.centroid(d);
            if (midAngle(d) > Math.PI) {
              posC[0] = -visWidth / 2 + maxLengthLabel + 20;
            } else {
              posC[0] = visWidth / 2 - maxLengthLabel - 20;
            }
            return [posA, posB, posC];
          });
        } else {
          this.items.select(".label").style("display", "none");
          this.items.select(".line").style("display", "none");
          this.calculateRadiusWithoutLabel();
          radius = this.radius;
        }
        this.items.select(".sector").transition().duration(transitionTime).ease(transitionType).attrTween("d", function(d) {
          var interpolate;
          this._current = this._current || d;
          interpolate = d3.interpolate(this._current, d);
          this._current = interpolate(0);
          return function(t) {
            return arc(interpolate(t));
          };
        });
      } else {
        if (this.showLabel) {
          this.items.select(".label").style("display", "inherit");
          this.items.select(".line").style("display", "inherit");
          this.items.select(".label").text(function(d) {
            return d.id.substring(0, labelMaxLength);
          });
          this.calculateRadiusWithLabel();
          maxLengthLabel = this.maxLengthLabel;
          radius = this.radius;
          this.items.select(".label").attr("stroke", "#000").attr("stroke-width", "0px").attr("transform", function(d) {
            var pos;
            pos = outerArc.centroid(d);
            pos[0] = visWidth / 2 - 20;
            if (midAngle(d) > Math.PI) {
              pos[0] = -pos[0];
            }
            return "translate(" + pos + ")";
          }).style("text-anchor", function(d) {
            if (midAngle(d) < Math.PI) {
              return "end";
            } else {
              return "start";
            }
          });
          this.items.select(".line").attr("stroke", "#000").attr("stroke-width", "1px").attr("fill", "none").attr("stroke-opacity", "1").attr("points", function(d) {
            var posA, posB, posC;
            posA = arc.centroid(d);
            posB = outerArc.centroid(d);
            posC = outerArc.centroid(d);
            if (midAngle(d) > Math.PI) {
              posC[0] = -visWidth / 2 + maxLengthLabel + 25;
            } else {
              posC[0] = visWidth / 2 - maxLengthLabel - 25;
            }
            return [posA, posB, posC];
          });
        } else {
          this.items.select(".label").style("display", "none");
          this.items.select(".line").style("display", "none");
          this.calculateRadiusWithoutLabel();
          radius = this.radius;
        }
        this.items.select(".sector").attr("d", function(d) {
          return arc(d);
        });
      }
      return self = this;
    };

    return DonutChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.HistogramView = (function(_super) {
    __extends(HistogramView, _super);

    function HistogramView() {
      this._handleResize = __bind(this._handleResize, this);
      this.updateBins = __bind(this.updateBins, this);
      this.updateItems = __bind(this.updateItems, this);
      this.setBins = __bind(this.setBins, this);
      this.setAxisDirection = __bind(this.setAxisDirection, this);
      this.visualizerWillExecBehaviors1 = __bind(this.visualizerWillExecBehaviors1, this);
      _ref = HistogramView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HistogramView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    HistogramView.prototype.yAxisType = "bands";

    HistogramView.prototype.xAxisType = "linear";

    HistogramView.prototype.followMouse = false;

    HistogramView.prototype.chartType = "barchart";

    HistogramView.prototype.firstExec = true;

    HistogramView.prototype.init = function() {
      HistogramView.__super__.init.call(this);
      if (quadrigram.router.getDevice() !== "Desktop") {
        this.followMouse = true;
      }
      return this.histogram = d3.layout.histogram().value(function(d) {
        return +d.value;
      });
    };

    HistogramView.prototype.visualizerWillExecBehaviors1 = function() {
      var generalLabel, generalMetadata, itemMetadata,
        _this = this;
      if (this.firstExec) {
        this.behaviors.selection.on("selection:change", this.updateBins);
      }
      if (this.resizing) {
        return;
      }
      this.serieValues = JSON.parse(JSON.stringify(this.values));
      itemMetadata = this.serieValues[0].metadata;
      if (itemMetadata.value.label = "Bins") {
        itemMetadata.value.label = "Items on bin:";
      }
      generalMetadata = this.serieValues.metadata;
      generalLabel = this.serieValues.label;
      this.setBins();
      this.values = this.histogram(this.serieValues);
      this.ids = [];
      this.values.forEach(function(valueEntry) {
        valueEntry.id = "[" + Math.round(valueEntry.x * 100) / 100 + ", " + Math.round((valueEntry.x + valueEntry.dx) * 100) / 100 + "]";
        valueEntry.value = valueEntry.y;
        valueEntry.metadata = itemMetadata;
        return _this.ids.push(valueEntry.id);
      });
      this.values.metadata = generalMetadata;
      return this.values.label = generalLabel;
    };

    HistogramView.prototype.setAxisDirection = function() {
      var axeIds;
      axeIds = this.model.get("IdsOnAxis");
      if (!axeIds) {
        axeIds = "Vertical";
      }
      if (axeIds === "Vertical") {
        this.yAxisType = "linear";
        return this.xAxisType = "bands";
      } else {
        this.yAxisType = "bands";
        return this.xAxisType = "linear";
      }
    };

    HistogramView.prototype.setBins = function() {
      var bin, bins, cleanedBins, _i, _len;
      bins = this.model.get("bins");
      if (bins === quadrigram.Models.VisualizerModel.DEACTIVATED || !bins) {
        return this.histogram.bins();
      } else {
        if (_.isArray(bins)) {
          cleanedBins = [];
          for (_i = 0, _len = bins.length; _i < _len; _i++) {
            bin = bins[_i];
            cleanedBins.push(+bin.value);
          }
          bins = cleanedBins;
        } else {
          bins = +bins;
        }
        return this.histogram.bins(bins);
      }
    };

    HistogramView.prototype.updateItems = function() {
      var bins, self, size, transitionTime, transitionType, updateD3Object,
        _this = this;
      bins = this.model.get("bins");
      this.items = this.behaviors.axis.graph.selectAll(".item").data(this.values, function(d, i) {
        if (bins === quadrigram.Models.VisualizerModel.DEACTIVATED || !bins) {
          return i;
        } else {
          return d.id;
        }
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsEnter.append("rect").attr("class", "bar");
      this.items.exit().remove();
      size = this.items.size();
      if (size < 200 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        updateD3Object = this.items.select(".bar").transition().duration(transitionTime).ease(transitionType);
      } else {
        updateD3Object = this.items.select(".bar");
      }
      self = this;
      if (this.yAxisType === "bands") {
        return updateD3Object.attr("x", function(d) {
          return self.behaviors.axis.xScale(0);
        }).attr("width", function(d) {
          var realWidth;
          return realWidth = _this.behaviors.axis.xScale(d.value);
        }).attr("y", function(d) {
          return _this.behaviors.axis.yScale(d.id);
        }).attr("height", this.behaviors.axis.yScale.rangeBand());
      } else {
        return updateD3Object.attr("x", function(d, i) {
          return _this.behaviors.axis.xScale(d.id);
        }).attr("width", this.behaviors.axis.xScale.rangeBand()).attr("y", function(d) {
          return self.behaviors.axis.yScale(Math.max(0, d.value));
        }).attr("height", function(d) {
          return Math.abs(_this.behaviors.axis.yScale(d.value) - _this.behaviors.axis.yScale(Math.max(0, _this.behaviors.axis.yScale.domain()[0])));
        });
      }
    };

    HistogramView.prototype.updateBins = function() {
      var selectedBinCandidate, selectedItem, selectedItemsInBin, selectedMaxBin, selectedMinBin, _i, _len, _ref1;
      selectedItemsInBin = [];
      selectedMinBin = Infinity;
      selectedMaxBin = -Infinity;
      _ref1 = this.behaviors.selection.selectedItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        selectedItem = _ref1[_i];
        selectedBinCandidate = _.findWhere(this.values, {
          id: selectedItem
        });
        if (selectedBinCandidate) {
          selectedItemsInBin = selectedItemsInBin.concat(selectedBinCandidate);
          selectedMinBin = Math.min(selectedMinBin, selectedBinCandidate.x);
          selectedMaxBin = Math.max(selectedMinBin, selectedBinCandidate.x + selectedBinCandidate.dx);
        }
      }
      this.updateOutput("selectedItemsInBin", selectedItemsInBin);
      this.updateOutput("minimumBinValue", selectedMinBin);
      return this.updateOutput("maximumBinValue", selectedMaxBin);
    };

    HistogramView.prototype._handleResize = function() {
      this.resizing = true;
      return HistogramView.__super__._handleResize.call(this);
    };

    return HistogramView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.LineChartView = (function(_super) {
    __extends(LineChartView, _super);

    function LineChartView() {
      this.updateCircles = __bind(this.updateCircles, this);
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      this.createLineFunction = __bind(this.createLineFunction, this);
      this.setIdsAndValues = __bind(this.setIdsAndValues, this);
      _ref = LineChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LineChartView.prototype.template = JST['app/scripts/templates/visualizers/lineChart.hbs'];

    LineChartView.prototype.xAxisType = "points";

    LineChartView.prototype.yAxisType = "linear";

    LineChartView.prototype.followMouse = true;

    LineChartView.prototype.mainColorDimension = "lineColors";

    LineChartView.prototype.setIdsAndValues = function() {
      this.model.original._ids = this.idsItems;
      return this.model.original._values = this.values;
    };

    LineChartView.prototype.createLineFunction = function() {
      var _this = this;
      return this.lineFunction = d3.svg.line().x(function(d, i) {
        return _this.behaviors.axis.xScale(d.id);
      }).y(function(d, i) {
        return _this.behaviors.axis.yScale(d.value);
      });
    };

    LineChartView.prototype.visualizerWillUpdateItems = function() {
      this.displayBreakpoints = this.model.get("displayBreakpoints") === true || this.model.get("displayBreakpoints") === "true";
      this.lineInterpolation = "cardinal";
      if (this.displayBreakpoints === true) {
        this.lineInterpolation = "linear";
      }
      if (this.lineFunction == null) {
        this.createLineFunction();
      }
      return this.lineFunction.interpolate(this.lineInterpolation).tension(0.9);
    };

    LineChartView.prototype.updateItems = function() {
      var self, size, transitionTime, transitionType, updateD3Object,
        _this = this;
      this.items = this.behaviors.axis.graph.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsEnter.append("path").attr("class", "line-path").attr("fill", "none").attr("pointer-events", "stroke");
      this.itemsEnter.append("path").attr("class", "hit-area-path dont-render").attr("fill", "none").attr("pointer-events", "stroke").attr("stroke", "rgba(255,0,0,0)").attr("stroke-width", "5px");
      this.itemsEnter.append("g").attr("class", "breakpoints");
      this.items.exit().remove();
      size = this.ids.length * this.idsItems.length;
      if (size < 1000 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        updateD3Object = this.items.select(".line-path").transition().duration(transitionTime).ease(transitionType);
      } else {
        updateD3Object = this.items.select(".line-path");
      }
      self = this;
      updateD3Object.attr("d", function(d) {
        return self.lineFunction(d.value);
      });
      return this.items.select(".hit-area-path").attr("d", function(d) {
        return self.lineFunction(d.value);
      });
    };

    LineChartView.prototype.visualizerDidUpdateItems = function() {
      if (this.displayBreakpoints === true) {
        return this.updateCircles();
      } else {
        return this.items.each(function(objectLine, indexLine) {
          return d3.select(this).select(".breakpoints").selectAll(".dot").remove();
        });
      }
    };

    LineChartView.prototype.updateCircles = function() {
      var self;
      self = this;
      return this.items.each(function(objectLine, indexLine) {
        var circles, circlesEnter, radius,
          _this = this;
        radius = 2;
        circles = d3.select(this).select(".breakpoints").selectAll(".dot").data(objectLine.value, function(objectBreakpoint, indexBreakpoint) {
          return objectBreakpoint.id;
        });
        circlesEnter = circles.enter().append("circle").attr("class", "dot");
        circles.exit().remove();
        return circles.attr("cx", function(objectBreakpoint, indexBreakpoint) {
          return self.behaviors.axis.xScale(objectBreakpoint.id);
        }).attr("cy", function(objectBreakpoint, indexBreakpoint) {
          return self.behaviors.axis.yScale(objectBreakpoint.value);
        }).attr("fill", function(objectBreakpoint, indexBreakpoint) {
          return "#FFF";
        }).attr("r", radius);
      });
    };

    return LineChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.RadarChartView = (function(_super) {
    __extends(RadarChartView, _super);

    function RadarChartView() {
      this.setAxis = __bind(this.setAxis, this);
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      this.createRadarFunction = __bind(this.createRadarFunction, this);
      this.setIdsAndValues = __bind(this.setIdsAndValues, this);
      _ref = RadarChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RadarChartView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    RadarChartView.prototype.xAxisType = "points";

    RadarChartView.prototype.yAxisType = "linear";

    RadarChartView.prototype.followMouse = true;

    RadarChartView.prototype.setIdsAndValues = function() {
      this.model.original._ids = this.idsItems;
      return this.model.original._values = this.values;
    };

    RadarChartView.prototype.createRadarFunction = function() {
      return this.radarFunction = RadarChart.chart();
    };

    RadarChartView.prototype.visualizerWillUpdateItems = function() {
      this.values.forEach(function(valueEntry) {
        valueEntry.value.forEach(function(valueEntry2) {
          valueEntry2.axis = valueEntry2.id + "";
          return valueEntry2.value = Math.max(valueEntry2.value + 0, 0);
        });
        return valueEntry.axes = valueEntry.value;
      });
      this.createRadarFunction();
      return this.radarConfig = {
        containerClass: this.behaviors.svg.root[0],
        w: this.$el.width(),
        h: this.$el.height() - 20,
        factor: 0.9,
        factorLegend: 1,
        levels: 3,
        maxValue: 0,
        radians: 2 * Math.PI,
        color: function() {},
        axisLine: true,
        axisText: true,
        circles: true,
        radius: 3,
        axisJoin: function(d, i) {
          return d.id;
        },
        transitionDuration: 300
      };
    };

    RadarChartView.prototype.updateItems = function() {
      var radarFunction, size, transitionTime, transitionType;
      this.items = this.behaviors.svg.root.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsEnter.append("g").attr("class", "line");
      this.items.exit().remove();
      size = this.ids.length * this.idsItems.length;
      if (size < 5 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        this.radarConfig.transitionDuration = transitionTime;
      } else {
        this.radarConfig.transitionDuration = -1;
      }
      this.radarFunction.config(this.radarConfig);
      radarFunction = this.radarFunction;
      this.items.attr("transform", "translate(0,10)");
      this.items.each(function(d) {
        return d3.select(this).select('.line').datum([d]).call(radarFunction);
      });
      return this.setAxis();
    };

    RadarChartView.prototype.setAxis = function() {
      var axis, axisColor, axisOpacity, axisThickness, labelColor, labelFontSize, level;
      d3.select(this.el).selectAll(".line").each(function(d, i) {
        if (i !== 0) {
          d3.select(this).selectAll(".axis").remove();
          d3.select(this).selectAll(".level-group").remove();
        }
        return d3.select(this).selectAll("g").each(function(d, i) {
          if (d3.select(this).select(".tooltip").size() > 0) {
            return d3.select(this).remove();
          }
        });
      });
      axisColor = this.model.get("axisColor");
      axisThickness = this.model.get("axisThickness");
      axisOpacity = this.model.get("axisOpacity") / 100;
      labelColor = this.model.get("labelColor");
      labelFontSize = this.model.get("labelfontSize");
      axis = d3.select(this.el).selectAll(".axis");
      axis.selectAll(".legend").style("font-size", labelFontSize).style("stroke-width", "0px").style("stroke", "rgba(0,0,0,0)").style("fill", labelColor);
      axis.selectAll("line").style("stroke", axisColor).style("stroke-width", axisThickness).style("stroke-opacity", axisOpacity);
      level = d3.select(this.el).selectAll(".level-group");
      return level.selectAll(".level").style("stroke", axisColor).style("stroke-width", axisThickness).style("stroke-opacity", axisOpacity);
    };

    return RadarChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.StackedAreaChartView = (function(_super) {
    __extends(StackedAreaChartView, _super);

    function StackedAreaChartView() {
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      this.visualizerWillExecBehaviors1 = __bind(this.visualizerWillExecBehaviors1, this);
      this.createStackFunction = __bind(this.createStackFunction, this);
      this.createAreaFunction = __bind(this.createAreaFunction, this);
      this.setIdsAndValues = __bind(this.setIdsAndValues, this);
      _ref = StackedAreaChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StackedAreaChartView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    StackedAreaChartView.prototype.xAxisType = "points";

    StackedAreaChartView.prototype.yAxisType = "linear";

    StackedAreaChartView.prototype.accumulate = true;

    StackedAreaChartView.prototype.followMouse = true;

    StackedAreaChartView.prototype.chartType = "stackedareachart";

    StackedAreaChartView.prototype.extraAmplitudeDomain = 0.30;

    StackedAreaChartView.prototype.setIdsAndValues = function() {
      this.model.original._ids = this.idsItems;
      return this.model.original._values = this.values;
    };

    StackedAreaChartView.prototype.createAreaFunction = function() {
      var _this = this;
      return this.areaFunction = d3.svg.area().x(function(d, i) {
        return _this.behaviors.axis.xScale(d.id);
      }).y0(function(d, i) {
        return _this.behaviors.axis.yScale(Math.max(d.value0, 0));
      }).y1(function(d, i) {
        return _this.behaviors.axis.yScale(Math.max(d.value0 + d.value, d.value0));
      });
    };

    StackedAreaChartView.prototype.createStackFunction = function() {
      return this.stack = d3.layout.stack().values(function(d) {
        return d.value;
      }).y(function(d) {
        return d.value;
      }).out(function(d, y0, y) {
        if (!isNaN(y0) && y0 !== "") {
          d.value0 = parseFloat(y0);
        } else {
          d.value0 = 0;
        }
        if (!isNaN(y) && y !== "") {
          return d.value = parseFloat(y);
        } else {
          return d.value = 0;
        }
      });
    };

    StackedAreaChartView.prototype.visualizerWillExecBehaviors1 = function() {
      if (!this.stack) {
        this.createStackFunction();
      }
      return this.values = this.stack(this.values);
    };

    StackedAreaChartView.prototype.visualizerWillUpdateItems = function() {
      if (this.areaFunction == null) {
        this.createAreaFunction();
        this.lineInterpolation = "cardinal";
        return this.areaFunction.interpolate(this.lineInterpolation).tension(0.9);
      }
    };

    StackedAreaChartView.prototype.updateItems = function() {
      var self,
        _this = this;
      self = this;
      this.items = this.behaviors.axis.graph.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsEnter.append("path").attr("class", "area-path");
      this.items.exit().remove();
      return this.items.select(".area-path").attr("d", function(d) {
        return self.areaFunction(d.value);
      });
    };

    return StackedAreaChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.PictoGramView = (function(_super) {
    __extends(PictoGramView, _super);

    function PictoGramView() {
      this.bestGridSize = __bind(this.bestGridSize, this);
      this.cloneSelection = __bind(this.cloneSelection, this);
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.updateItems = __bind(this.updateItems, this);
      this.loadSVG = __bind(this.loadSVG, this);
      this.iconUrlFromId = __bind(this.iconUrlFromId, this);
      this._updateContent = __bind(this._updateContent, this);
      _ref = PictoGramView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PictoGramView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    PictoGramView.prototype.yAxisType = "bands";

    PictoGramView.prototype.xAxisType = "linear";

    PictoGramView.prototype.followMouse = false;

    PictoGramView.prototype.chartType = "pictogram";

    PictoGramView.prototype._updateContent = function() {
      var _this = this;
      if (!this.graph) {
        this.graph = this.behaviors.svg.root.append("g").attr("class", "graph");
      }
      return this.loadSVG(function() {
        return PictoGramView.__super__._updateContent.apply(_this, arguments);
      });
    };

    PictoGramView.prototype.iconUrlFromId = function(id) {
      switch (id) {
        case "person":
          return "./images/control_parts/man.svg";
        case "bus":
          return "./images/control_parts/pictogram/pictogram_icons_bus.svg";
        case "car":
          return "./images/control_parts/pictogram/pictogram_icons_car.svg";
        case "clock":
          return "./images/control_parts/pictogram/pictogram_icons_clock.svg";
        case "bar":
          return "./images/control_parts/pictogram/pictogram_icons_bar.svg";
        case "boat":
          return "./images/control_parts/pictogram/pictogram_icons_boat.svg";
        case "calendar":
          return "./images/control_parts/pictogram/pictogram_icons_calendar.svg";
        case "check":
          return "./images/control_parts/pictogram/pictogram_icons_check.svg";
        case "coin":
          return "./images/control_parts/pictogram/pictogram_icons_coin.svg";
        case "country":
          return "./images/control_parts/pictogram/pictogram_icons_country.svg";
        case "credit_card":
          return "./images/control_parts/pictogram/pictogram_icons_credit_card.svg";
        case "document":
          return "./images/control_parts/pictogram/pictogram_icons_document.svg";
        case "down":
          return "./images/control_parts/pictogram/pictogram_icons_down.svg";
        case "flight":
          return "./images/control_parts/pictogram/pictogram_icons_flight.svg";
        case "hotel":
          return "./images/control_parts/pictogram/pictogram_icons_hotel.svg";
        case "heart":
          return "./images/control_parts/pictogram/pictogram_icons_heart.svg";
        case "house":
          return "./images/control_parts/pictogram/pictogram_icons_house.svg";
        case "music":
          return "./images/control_parts/pictogram/pictogram_icons_music.svg";
        case "next":
          return "./images/control_parts/pictogram/pictogram_icons_next.svg";
        case "not_interested":
          return "./images/control_parts/pictogram/pictogram_icons_not_interested.svg";
        case "note":
          return "./images/control_parts/pictogram/pictogram_icons_note.svg";
        case "radio":
          return "./images/control_parts/pictogram/pictogram_icons_radio.svg";
        case "shopping_car":
          return "./images/control_parts/pictogram/pictogram_icons_shopping-car.svg";
        case "star":
          return "./images/control_parts/pictogram/pictogram_icons_star.svg";
        case "train":
          return "./images/control_parts/pictogram/pictogram_icons_train.svg";
        case "up":
          return "./images/control_parts/pictogram/pictogram_icons_up.svg";
        case "walk":
          return "./images/control_parts/pictogram/pictogram_icons_walk.svg";
      }
      return id;
    };

    PictoGramView.prototype.loadSVG = function(callback) {
      var imgURL,
        _this = this;
      if ((this.model.changed["icon_url"] != null) || !this.iconDef) {
        imgURL = this.iconUrlFromId(this.model.get("icon_url"));
        this.iconDef = this.graph.append("g");
        return jQuery.get(imgURL, (function(data) {
          var $svg, DOMElementBBox, self;
          $svg = d3.select(data).selectAll("rect,circle,ellipse,line,polyline,polygon,path");
          $svg.attr("fill", null);
          $svg.attr("stroke", null);
          self = _this;
          $svg.each(function() {
            var _this = this;
            return self.iconDef.append((function() {
              return _this;
            }));
          });
          DOMElementBBox = _this.iconDef[0][0].getBBox();
          _this.originalSize = [DOMElementBBox.width, DOMElementBBox.height];
          _this.originalPos = [DOMElementBBox.x, DOMElementBBox.y];
          $(_this.iconDef[0][0]).detach();
          return callback();
        }), 'xml');
      } else {
        return callback();
      }
    };

    PictoGramView.prototype.updateItems = function() {
      var barValues, dx, dy, gridObject, item, preBarValues, row, rowDx, scale, self, sum, v, val, width, _i, _j, _k, _l, _len, _len1, _len2, _ref1, _ref2, _ref3;
      this.iconValues = [];
      this.iconCount = this.model.get("numIcons");
      this.percentPadding = this.model.get("iconPadding") / 100;
      this.pixelPadding = [this.originalSize[0] * this.percentPadding, this.originalSize[0] * this.percentPadding];
      this.iconRatio = (this.originalSize[1] + 2 * this.pixelPadding[0]) / (this.originalSize[0] + 2 * this.pixelPadding[1]);
      gridObject = this.bestGridSize(this.behaviors.svg.size.width, this.behaviors.svg.size.height, this.iconCount, this.iconRatio);
      preBarValues = [];
      sum = 0;
      _ref1 = this.values;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        sum += +v.value;
      }
      width = 0;
      dx = 0;
      _ref2 = this.values;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        item = _ref2[_j];
        width = this.iconCount * (+item.value) / sum;
        preBarValues.push({
          id: item.id,
          dx: dx,
          width: width
        });
        dx = dx + width;
        width = 0;
      }
      barValues = [];
      for (row = _k = 0, _ref3 = gridObject.rows - 1; 0 <= _ref3 ? _k <= _ref3 : _k >= _ref3; row = 0 <= _ref3 ? ++_k : --_k) {
        rowDx = row * gridObject.cols;
        for (_l = 0, _len2 = preBarValues.length; _l < _len2; _l++) {
          val = preBarValues[_l];
          barValues.push({
            pictoId: row + "_" + val.id,
            id: val.id,
            width: val.width,
            dx: val.dx - rowDx,
            height: 1,
            dy: row
          });
        }
      }
      this.items = this.graph.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.items.exit().remove();
      self = this;
      scale = gridObject.size[0] / (self.originalSize[0] + 2 * self.pixelPadding[0]);
      if (this.model.changed["icon_url"] != null) {
        this.items.selectAll(".icon").remove();
      }
      this.items.each(function(itemData, itemIndex) {
        var bar, globaldx, globaldy, segmentItems, segmentItemsEnter, thisItemBarValues, transition, transitionTime, transitionType, _len3, _m;
        thisItemBarValues = [];
        for (_m = 0, _len3 = barValues.length; _m < _len3; _m++) {
          bar = barValues[_m];
          if (bar.id === itemData.id) {
            thisItemBarValues.push(bar);
          }
        }
        segmentItems = d3.select(this).selectAll(".segment-item").data(thisItemBarValues, function(d, i) {
          return d.pictoId;
        });
        segmentItemsEnter = segmentItems.enter().append("g").attr("class", "segment-item");
        segmentItemsEnter.append("clipPath").attr("class", "clip-path").attr("id", function(d) {
          return d.pictoId;
        }).append("rect").attr("class", "rectangle").attr("fill", "#ddd").attr("opacity", "0.5").attr("stroke-width", "3px").attr("stroke", "#000000");
        segmentItemsEnter.append("g").attr("class", "icon-container").attr("clip-path", function(d, i) {
          return "url(#" + d.pictoId + ")";
        });
        segmentItemsEnter.each(function(d, i) {
          return this._current = {
            width: d.width,
            dx: d.dx
          };
        });
        globaldx = -self.originalPos[0];
        globaldy = -self.originalPos[1];
        if (self.animationActive && (self.model.changed["icon_url"] == null)) {
          transitionType = self.model.get("transition")[0];
          transitionTime = self.model.get("transition")[1];
          transition = segmentItems.transition().duration(transitionTime).ease(transitionType);
        } else {
          transition = segmentItems.transition().duration(0);
        }
        /*
        transitionType = self.model.get("transition")[0]
        transitionTime = self.model.get("transition")[1]
        
        transition = segmentItems.transition().duration(transitionTime).ease(transitionType)
        */

        transition.select(".rectangle").attr("width", function(d, i) {
          return d.width * gridObject.size[0];
        }).attr("height", function(d, i) {
          return d.height * gridObject.size[1];
        }).attr("x", function(d, i) {
          return d.dx * gridObject.size[0];
        }).attr("y", function(d, i) {
          return d.dy * gridObject.size[1];
        });
        transition.tween("myTween", function(newd, i) {
          var interpolation;
          interpolation = d3.interpolate(this._current, newd);
          this._current = interpolation(0);
          return function(t) {
            var currentIcons, d, d3Object, icon, _n, _ref4, _results;
            d = interpolation(t);
            d3Object = d3.select(this);
            currentIcons = d3.select(this);
            _results = [];
            for (i = _n = 0, _ref4 = self.iconCount - 1; 0 <= _ref4 ? _n <= _ref4 : _n >= _ref4; i = 0 <= _ref4 ? ++_n : --_n) {
              if (i > Math.ceil(self.iconCount / gridObject.rows) - 1 || i < Math.floor(d.dx) || i > Math.ceil(d.dx + d.width - 1)) {
                _results.push(currentIcons.select("#icon_" + i).remove());
              } else if (i < Math.ceil(self.iconCount / gridObject.rows)) {
                if (currentIcons.select("#icon_" + i)[0][0] == null) {
                  icon = d3Object.select(".icon-container").append("g").attr("class", "icon").attr("id", "icon_" + i);
                  self.cloneSelection(icon, self.iconDef, 1);
                } else {
                  icon = currentIcons.select("#icon_" + i);
                }
                _results.push(icon.attr("transform", "scale(" + scale + ") translate(" + (globaldx + i * gridObject.size[0] / scale) + "," + (globaldy + d.dy * gridObject.size[1] / scale) + ")"));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };
        });
        return segmentItems.exit().remove();
      });
      dx = this.pixelPadding[0] * scale + (this.behaviors.svg.size.width - gridObject.cols * gridObject.size[0]) / 2;
      dy = this.pixelPadding[1] * scale + (this.behaviors.svg.size.height - gridObject.rows * gridObject.size[1]) / 2;
      return this.graph.attr("transform", "translate(" + dx + "," + dy + ")");
    };

    PictoGramView.prototype.visualizerDidUpdateItems = function() {
      return this.behaviors.selection.behaviors.items.update();
    };

    PictoGramView.prototype.cloneSelection = function(appendTo, toCopy, times) {
      toCopy.each(function() {
        var clone, i;
        i = 0;
        while (i < times) {
          clone = appendTo.node().appendChild(this.cloneNode(true));
          d3.select(clone).attr('class', 'clone');
          i++;
        }
      });
      return appendTo.selectAll('.clone');
    };

    PictoGramView.prototype.bestGridSize = function(width, height, items, iconRatio) {
      var actualBest, best, bestExact, bestExactValue, bestValue, computedSize, dSize, f, factors, h, hSize, size, w, wSize, _i, _j, _len, _ref1, _results;
      best = [1, items];
      bestValue = Infinity;
      bestExact = [1, items];
      bestExactValue = Infinity;
      factors = (function() {
        _results = [];
        for (var _i = 1, _ref1 = Math.ceil(Math.sqrt(items)); 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 1 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      for (_j = 0, _len = factors.length; _j < _len; _j++) {
        f = factors[_j];
        computedSize = Math.max(width / f, height / (items / f));
        if (width < height) {
          w = f;
          h = Math.ceil(items / f);
        } else {
          h = f;
          w = Math.ceil(items / f);
        }
        wSize = width / w;
        hSize = height / h;
        if (iconRatio * wSize * h < height) {
          wSize = width / w;
          hSize = wSize * iconRatio;
        } else {
          hSize = height / h;
          wSize = hSize / iconRatio;
        }
        dSize = width * height - w * h * wSize * hSize;
        if (items % f === 0) {
          if (bestExactValue > dSize) {
            bestExactValue = dSize;
            bestExact = [w, h];
          }
        } else {
          if (bestValue > dSize) {
            bestValue = dSize;
            best = [w, h];
          }
        }
      }
      if (bestExactValue < bestValue) {
        actualBest = bestExact;
      } else {
        actualBest = best;
      }
      if ((width / actualBest[0]) * iconRatio < height / actualBest[1]) {
        size = [width / actualBest[0], (width / actualBest[0]) * iconRatio];
      } else {
        size = [(height / actualBest[1]) / iconRatio, height / actualBest[1]];
      }
      return {
        size: size,
        cols: actualBest[0],
        rows: actualBest[1]
      };
    };

    return PictoGramView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.Dialog = (function(_super) {
    __extends(Dialog, _super);

    function Dialog() {
      this.close = __bind(this.close, this);
      this._createDialog = __bind(this._createDialog, this);
      this._showDialog = __bind(this._showDialog, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      this.init = __bind(this.init, this);
      _ref = Dialog.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Dialog.prototype.title = "Dialog";

    Dialog.prototype.iconClass = "no-icon";

    Dialog.prototype.resizable = false;

    Dialog.prototype.appendToSelector = ".front-container";

    Dialog.prototype.width = 940;

    Dialog.prototype.height = 400;

    Dialog.prototype.maxHeight = 560;

    Dialog.prototype.init = function(options) {
      this.options = options;
      return Dialog.__super__.init.call(this);
    };

    Dialog.prototype.viewWillRender = function() {
      var _this = this;
      return this.buttons = {
        "Ok": function() {
          return _this.close();
        }
      };
    };

    Dialog.prototype._finishRender = function() {
      this._createDialog();
      this.$el.closest(".ui-dialog").find(".ui-dialog-titlebar").append("<div class='title-container'></div>");
      this.$el.closest(".ui-dialog").find(".title-container").append("<div class='dialog-icon " + this.iconClass + "'></div>");
      this.$el.closest(".ui-dialog").find(".title-container").append(this.$el.closest(".ui-dialog").find(".ui-dialog-titlebar .ui-dialog-title"));
      Dialog.__super__._finishRender.apply(this, arguments);
      this.$el.closest(".ui-dialog").css("opacity", "0");
      return _.defer(this._showDialog);
    };

    Dialog.prototype._showDialog = function() {
      var dialogCount;
      dialogCount = $(".stackable-dialog").length - 1;
      this.$el.dialog("option", "position", {
        my: "center",
        at: "center+" + 15 * dialogCount + " center+" + 15 * dialogCount,
        of: window
      });
      return this.$el.closest(".ui-dialog").animate({
        opacity: 1
      }, 300);
    };

    Dialog.prototype._createDialog = function() {
      var dialog;
      dialog = this.$el.find(".dialog").dialog({
        modal: true,
        autoOpen: true,
        appendTo: $(this.appendToSelector),
        resizable: this.resizable,
        maxHeight: this.maxHeight,
        width: this.width,
        buttons: this.buttons,
        title: this.title,
        close: this.close
      });
      this.$el = $(dialog);
      if (this.zindexClass != null) {
        this.$el.closest(".ui-dialog").addClass(this.zindexClass);
      }
      return this.$el.addClass("stackable-dialog");
    };

    /*
    open:()=>
      log "Dialog:open"
      @$el.dialog("open")
    */


    Dialog.prototype.close = function() {
      this.$el.dialog("destroy").remove();
      return this.remove();
    };

    return Dialog;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.dataTypeOptions = (function(_super) {
    __extends(dataTypeOptions, _super);

    function dataTypeOptions() {
      this.handleOptionChange = __bind(this.handleOptionChange, this);
      this.handleDataTypeChange = __bind(this.handleDataTypeChange, this);
      this.renderSubOptions = __bind(this.renderSubOptions, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = dataTypeOptions.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    dataTypeOptions.prototype.template = JST['app/scripts/templates/UI/dialogs/BlockPreview/dataTypeOptionsTemplate.hbs'];

    dataTypeOptions.prototype.className = "data-type-options-container";

    dataTypeOptions.prototype.viewDidRender = function() {
      /*
      @$el.find(".data-type-selector-container select").append("<option value='dataTable'> Data Table </option>")
      if @parentGroup.dataTypeOptions.network?
        @$el.find(".data-type-selector-container select").append("<option value='network'> Network </option>")
      
      @currentDataType = @parentGroup.get("buildData").dataType
      @$el.find(".data-type-selector-container select").val(@currentDataType)
      @$el.find(".data-type-selector-container select").selectmenu(
          width: 100
          change: @handleDataTypeChange
        )
      */

      var _this = this;
      this.$el.find(".learn-more-link").on("click", function() {
        return window.open(quadrigram.webUrl + "#helpContent/networks", "_blank");
      });
      this.currentDataType = this.parentGroup.get("buildData").dataType;
      if (this.parentGroup.dataTypeOptions.network != null) {
        this.$el.find(".is-network-checkbox-container").removeClass("hidden");
        if (this.currentDataType === "network") {
          this.$el.find(".checkbox-input").attr("checked", "checked");
        }
        if (this.parentGroup.dataTypeOptions.network.pairsTable != null) {
          this.$el.find(".detected-format").html("pairs table");
        }
        if (this.parentGroup.dataTypeOptions.network.adjMatrix != null) {
          this.$el.find(".detected-format").html("adjacencies matrix");
        }
        this.$el.find(".checkbox-input").on("change", this.handleDataTypeChange);
      } else {
        this.$el.find(".data-type-selector-container").addClass("hidden");
      }
      return this.renderSubOptions();
    };

    dataTypeOptions.prototype.renderSubOptions = function() {
      if (this.currentOptions != null) {
        this.currentOptions.remove();
      }
      if (this.currentDataType === "dataTable") {
        this.currentOptions = new quadrigram.Views.dataTableOptions({
          model: this.model,
          binding: false
        });
        this.currentOptions.parentGroup = this.parentGroup;
        this.currentOptions.render();
        this.currentOptions.on("change:option", this.handleOptionChange);
        this.$el.find(".specific-options-container").append(this.currentOptions.$el);
        return this.$el.find(".specific-options-container").removeClass("hidden");
      }
      /*
      else if @currentDataType == "network"
        @currentOptions = new quadrigram.Views.networkOptions model: @model, binding: false
        @currentOptions.parentGroup = @parentGroup
        
        #if @parentGroup.get("buildData").networkFormat?
        #  @currentOptions.networkFormat = @parentGroup.get("buildData").networkFormat
        @currentOptions.render()
      */

    };

    dataTypeOptions.prototype.handleDataTypeChange = function() {
      /*
      selectEl = @$el.find(".data-type-selector-container select")[0]
      @parentGroup.get("buildData").dataType = selectEl.options[selectEl.selectedIndex].value
      
      @currentDataType = selectEl.options[selectEl.selectedIndex].value
      @renderSubOptions()
      */

      var checkboxEl;
      checkboxEl = this.$el.find(".checkbox-input");
      if (checkboxEl.is(":checked")) {
        this.currentDataType = "network";
      } else {
        this.currentDataType = "dataTable";
      }
      this.renderSubOptions();
      return this.trigger("change:option");
    };

    dataTypeOptions.prototype.handleOptionChange = function() {
      return this.trigger("change:option");
    };

    return dataTypeOptions;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.dataTableOptions = (function(_super) {
    __extends(dataTableOptions, _super);

    function dataTableOptions() {
      this.getIdKey = __bind(this.getIdKey, this);
      this.changeIdKey = __bind(this.changeIdKey, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = dataTableOptions.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    dataTableOptions.prototype.template = JST['app/scripts/templates/UI/dialogs/BlockPreview/dataTableOptionsTemplate.hbs'];

    dataTableOptions.prototype.className = "data-table-options-container";

    dataTableOptions.prototype.viewDidRender = function() {
      var idSelector, key, _i, _len, _ref1;
      if (this.$el.find(".table-viewer-header-id-selector").length === 0) {
        idSelector = $("<div class='table-viewer-header-id-selector table-viewer-cell'><select class='id-selector' name='id-selector'></select></div>");
        _ref1 = this.parentGroup.keys;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          key = _ref1[_i];
          idSelector.find("select").append($("<option value='" + key + "'>" + key + "</option>"));
        }
        idSelector.find("select").append($("<option value='__Index__'> Indexes </option>"));
        idSelector.find("select").val(this.parentGroup.get("buildData").idKey);
        this.$el.find(".id-selector-container").append(idSelector);
        return idSelector.find("select").selectmenu({
          width: 100,
          change: this.changeIdKey
        });
      }
    };

    dataTableOptions.prototype.changeIdKey = function() {
      this.model.dismissedAggregate = false;
      return this.trigger("change:option");
    };

    dataTableOptions.prototype.getIdKey = function() {
      var idSelectorEl;
      idSelectorEl = this.$el.find(".id-selector")[0];
      return idSelectorEl.options[idSelectorEl.selectedIndex].value;
    };

    return dataTableOptions;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.networkOptions = (function(_super) {
    __extends(networkOptions, _super);

    function networkOptions() {
      this.getFormat = __bind(this.getFormat, this);
      this.changeFormat = __bind(this.changeFormat, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = networkOptions.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    networkOptions.prototype.template = JST['app/scripts/templates/UI/dialogs/BlockPreview/networkOptionsTemplate.hbs'];

    networkOptions.prototype.className = "network-options";

    networkOptions.prototype.viewDidRender = function() {
      var formatSelector;
      this.$el.find("select").append("<option value='pairsTable'>Pairs table</option>");
      if ((this.parentGroup.dataTypeOptions.network != null) && (this.parentGroup.dataTypeOptions.network.adjMatrix != null)) {
        this.$el.find("select").append("<option value='adjMatrix'>Adjacency matrix</option>");
      }
      if (this.parentGroup.get("buildData").networkFormat) {
        this.$el.find("select").find("option[value='" + this.parentGroup.get("buildData").networkFormat + "']").prop("selected", true);
      }
      this.$el.find("select").selectmenu({
        width: 100,
        change: this.changeFormat
      });
      formatSelector = this.$el.find(".format-selector")[0];
      this.$el.find(".learn-more-link").addClass("hidden");
      return this.$el.find(".learn-more-link").on("click", function() {
        return window.open(quadrigram.webUrl + "#helpContent/networks", "_blank");
      });
    };

    networkOptions.prototype.changeFormat = function() {
      return this.trigger("change:option");
    };

    networkOptions.prototype.getFormat = function() {
      var formatSelector;
      formatSelector = this.$el.find(".format-selector")[0];
      return formatSelector.options[formatSelector.selectedIndex].value;
    };

    return networkOptions;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.BlockPreviewView = (function(_super) {
    __extends(BlockPreviewView, _super);

    function BlockPreviewView() {
      this.blockNameChanged = __bind(this.blockNameChanged, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = BlockPreviewView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BlockPreviewView.prototype.template = JST['app/scripts/templates/UI/dialogs/BlockPreview/BlockPreview.hbs'];

    BlockPreviewView.prototype.resizable = true;

    BlockPreviewView.prototype.height = 300;

    BlockPreviewView.prototype.maxHeight = 600;

    BlockPreviewView.prototype.width = 900;

    BlockPreviewView.prototype.title = "Block preview";

    BlockPreviewView.prototype.viewWillRender = function() {
      return this.title = this.model.get("label");
    };

    BlockPreviewView.prototype.viewDidRender = function() {
      this.$el.css("width", this.width);
      this.$el.css("height", this.height);
      this.tableView = new quadrigram.Views.TableView({
        model: this.model
      });
      this.tableView.render();
      return this.$el.find(".preview-container").append(this.tableView.$el);
    };

    BlockPreviewView.prototype.viewWillRemove = function() {
      return this.tableView.remove();
    };

    BlockPreviewView.prototype.blockNameChanged = function(e, params) {
      return this.model.set("label", params.newValue);
    };

    return BlockPreviewView;

  })(quadrigram.Views.Dialog);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockFunctionView = (function(_super) {
    __extends(DataBlockFunctionView, _super);

    function DataBlockFunctionView() {
      this.expressionMoveRight = __bind(this.expressionMoveRight, this);
      this.expressionMoveLeft = __bind(this.expressionMoveLeft, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.renderOperator = __bind(this.renderOperator, this);
      this.expressionChanged = __bind(this.expressionChanged, this);
      this.operationChanged = __bind(this.operationChanged, this);
      this.updateContainment = __bind(this.updateContainment, this);
      this.onDrag = __bind(this.onDrag, this);
      this.onResize = __bind(this.onResize, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = DataBlockFunctionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockFunctionView.prototype.template = JST['app/scripts/templates/blocks/dataBlockFunction.hbs'];

    DataBlockFunctionView.prototype.className = "function-mega-slot";

    DataBlockFunctionView.prototype.events = {
      "click .scroll-left": "expressionMoveLeft",
      "click .scroll-right": "expressionMoveRight"
    };

    DataBlockFunctionView.prototype.viewWillRender = function() {
      var _this = this;
      return Handlebars.registerHelper('if_eq', function(a, b, options) {
        if (a === b) {
          return options.fn(_this);
        } else {
          return options.inverse(_this);
        }
      });
    };

    DataBlockFunctionView.prototype.viewDidRender = function() {
      this.model.get("operator").on("change:currentExpression", this.expressionChanged);
      this.model.get("operator").on("change:currentOperation", this.operationChanged);
      this.draggable = this.$(".expression-container").draggable({
        axis: "x",
        drag: this.onDrag
      });
      this.renderOperator();
      this.updateContainment();
      return $(window).on("resize", this.onResize);
    };

    DataBlockFunctionView.prototype.onResize = function() {
      return this.updateContainment();
    };

    DataBlockFunctionView.prototype.onDrag = function() {
      return this.updateContainment();
    };

    DataBlockFunctionView.prototype.updateContainment = function() {
      var maxX, maxY, minX, minY,
        _this = this;
      maxX = 240;
      minX = 0;
      maxY = 0;
      minY = 0;
      return _.delay(function() {
        var currPos, expressionWidth, megaSlotWidth, part, _i, _len, _ref1;
        megaSlotWidth = $(".mega-slot-container").width();
        expressionWidth = 0;
        _ref1 = _this.$(".expression-collection").children();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          part = _ref1[_i];
          expressionWidth += $(part).width();
        }
        if (expressionWidth >= megaSlotWidth + 15) {
          minX = maxX + megaSlotWidth - expressionWidth - 15;
          _this.$(".expression-container").draggable("option", "containment", [minX, minY, maxX, maxY]);
          _this.$(".expression-container").draggable("option", "disabled", false);
          _this.$(".expression-collection").addClass("show-drag");
          $('.scroll-right.scroller').css({
            left: megaSlotWidth - 15 + "px"
          });
          $(".mega-slot-container").find('.scroller').show();
          currPos = _this.$el.find(".expression-container").position();
          if (expressionWidth + currPos.left < megaSlotWidth + 15) {
            $(".mega-slot-container").find('.scroll-right').hide();
          }
          if (currPos.left >= 0) {
            return $(".mega-slot-container").find('.scroll-left').hide();
          }
        } else {
          _this.$(".expression-container").draggable("option", "disabled", true);
          _this.$(".expression-collection").removeClass("show-drag");
          $(".mega-slot-container").find('.scroller').hide();
          return $('.function-mega-slot').css({
            "padding-left": "0px"
          });
        }
      }, 100);
    };

    DataBlockFunctionView.prototype.operationChanged = function(e) {
      this.renderOperator();
      return this.expressionMoveLeft();
    };

    DataBlockFunctionView.prototype.expressionChanged = function(e) {
      var _this = this;
      $(".mega-slot-container").find('.scroller').css({
        display: "none"
      });
      this.updateContainment();
      return _.delay(function() {
        return _this.expressionMoveRight();
      }, 200);
    };

    DataBlockFunctionView.prototype.renderOperator = function() {
      var expressionCollection;
      this.$el.find(".expression-container").empty();
      expressionCollection = this.model.get("operator").get("currentExpression");
      if (this.expressionView) {
        this.expressionView.remove();
      }
      this.expressionView = new quadrigram.Views.ExpressionPartCollectionView({
        model: this.model,
        collection: expressionCollection,
        binding: true
      });
      this.expressionView.render();
      this.$(".expression-container").append(this.expressionView.$el);
      return log("rendered operator");
    };

    DataBlockFunctionView.prototype.viewWillRemove = function() {
      $(window).off("resize", this.onResize);
      this.model.get("operator").off("change:currentExpression", this.expressionChanged);
      this.model.get("operator").off("change:currentOperation", this.operationChanged);
      if (this.expressionView) {
        return this.expressionView.remove();
      }
    };

    DataBlockFunctionView.prototype.expressionMoveLeft = function() {
      var _this = this;
      return _.delay(function() {
        return _this.$el.find(".expression-container").animate({
          "left": Math.min(-240 + 15 + _this.$(".expression-container").draggable("option", "containment")[2], _this.$el.find(".expression-container").position().left + $(".mega-slot-container").width() * 0.8)
        }, 400, function() {
          return _this.updateContainment();
        });
      }, 50);
    };

    DataBlockFunctionView.prototype.expressionMoveRight = function(ev) {
      var _this = this;
      return _.delay(function() {
        if (_this.$(".expression-container").draggable("option", "disabled") === false) {
          return _this.$el.find(".expression-container").animate({
            "left": Math.max(-240 + 15 + _this.$(".expression-container").draggable("option", "containment")[0], _this.$el.find(".expression-container").position().left - $(".mega-slot-container").width() * 0.8)
          }, 400, function() {
            return _this.updateContainment();
          });
        }
      }, 50);
    };

    return DataBlockFunctionView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.BlockBuilderView = (function(_super) {
    __extends(BlockBuilderView, _super);

    function BlockBuilderView() {
      this.gotoSource = __bind(this.gotoSource, this);
      this.refreshSource = __bind(this.refreshSource, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.handleBlockStrcutre = __bind(this.handleBlockStrcutre, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.close = __bind(this.close, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = BlockBuilderView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BlockBuilderView.prototype.template = JST['app/scripts/templates/UI/dialogs/blockBuilder.hbs'];

    BlockBuilderView.prototype.title = "Create blocks from the file";

    BlockBuilderView.prototype.resizable = true;

    BlockBuilderView.prototype.height = 420;

    BlockBuilderView.prototype.maxHeight = 600;

    BlockBuilderView.prototype.width = 900;

    BlockBuilderView.prototype.viewWillRender = function() {
      var _this = this;
      this.title = this.model.get("label");
      this.iconClass = "google-icon";
      return this.buttons = {
        "Ok": {
          click: function() {
            return _this.close();
          },
          text: 'OK',
          "class": 'ok-button'
        }
      };
    };

    BlockBuilderView.prototype.close = function() {
      quadrigram.router.appViews.uiView.toolbar.filesExplorer.blockGroupCollectionView.select(this.model);
      return BlockBuilderView.__super__.close.call(this);
    };

    BlockBuilderView.prototype.viewDidRender = function() {
      var builderModel;
      this.$el.css("width", this.width);
      this.$el.css("height", this.height);
      this.$el.closest(".ui-dialog").find(".title-container").append($("<div class='refresh-btn'>  </div>"));
      this.$el.closest(".ui-dialog").find(".refresh-btn").on("click", this.refreshSource);
      this.$el.closest(".ui-dialog").find(".refresh-btn").addClass("ui-tip-target");
      this.$el.closest(".ui-dialog").find(".refresh-btn").attr("data-ui-tip-id", "refresh-file");
      this.$el.closest(".ui-dialog").find(".ui-dialog-title").on("click", this.gotoSource);
      this.$el.closest(".ui-dialog").find(".ui-dialog-title").addClass("ui-tip-target");
      this.$el.closest(".ui-dialog").find(".ui-dialog-title").attr("data-ui-tip-id", "view-on-drive");
      this.$el.closest(".ui-dialog").find(".dialog-icon").on("click", this.gotoSource);
      this.$el.closest(".ui-dialog").find(".ui-dialog-title").addClass("clickable");
      if (this.model.invalidData) {
        builderModel = this.model.get("blocksCollection").where({
          "role": "empty"
        })[0];
      } else if (this.model.get("buildData").dataType === "dataTable") {
        builderModel = this.model.get("blocksCollection").where({
          "role": "all"
        })[0];
      } else {
        builderModel = this.model.get("blocksCollection").where({
          "role": "all-network"
        })[0];
      }
      this.model.on("change-block-structure", this.handleBlockStrcutre);
      this.tableView = new quadrigram.Views.TableView({
        model: builderModel
      });
      this.tableView.isBuilder = true;
      this.tableView.parentGroup = this.model;
      this.tableView.container = this;
      this.tableView.render();
      return this.$el.find(".table-container").append(this.tableView.$el);
    };

    BlockBuilderView.prototype.handleBlockStrcutre = function() {
      var builderModel;
      if (this.model.invalidData) {
        builderModel = this.model.get("blocksCollection").where({
          "role": "empty"
        })[0];
      } else if (this.model.get("buildData").dataType === "dataTable") {
        builderModel = this.model.get("blocksCollection").where({
          "role": "all"
        })[0];
      } else {
        builderModel = this.model.get("blocksCollection").where({
          "role": "all-network"
        })[0];
      }
      return this.tableView.model = builderModel;
    };

    BlockBuilderView.prototype.viewWillRemove = function() {
      this.tableView.remove();
      return this.model.off("change-block-structure", this.handleBlockStrcutre);
    };

    BlockBuilderView.prototype.refreshSource = function() {
      return this.model.requestData({
        useFullLoader: false
      });
    };

    BlockBuilderView.prototype.gotoSource = function() {
      return window.open(this.model.get("link"), "_blank");
    };

    return BlockBuilderView;

  })(quadrigram.Views.Dialog);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.TextAreaView = (function(_super) {
    __extends(TextAreaView, _super);

    function TextAreaView() {
      this.getScrollDomElement = __bind(this.getScrollDomElement, this);
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.updateValue = __bind(this.updateValue, this);
      this.handleClick = __bind(this.handleClick, this);
      this.didResize = __bind(this.didResize, this);
      this._handleResize = __bind(this._handleResize, this);
      this.setMode = __bind(this.setMode, this);
      this.setSelected = __bind(this.setSelected, this);
      this.updatePaddings = __bind(this.updatePaddings, this);
      this.textChanged = __bind(this.textChanged, this);
      this.setHidden = __bind(this.setHidden, this);
      this.createQuillEditor = __bind(this.createQuillEditor, this);
      this.createFlatText = __bind(this.createFlatText, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = TextAreaView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextAreaView.prototype.template = JST['app/scripts/templates/visualizers/textArea.hbs'];

    TextAreaView.prototype.viewWillRender = function() {
      this.values = [];
      this.ids = [];
      return this.quillEditorAttributes = {
        Title112: {
          quillText: "Enter a large title here",
          quillSize: "84px",
          quillAlign: "center",
          quillFont: "Roboto",
          quillBold: false,
          quillVAlign: "top"
        },
        Title56: {
          quillText: "Enter a medium title here",
          quillSize: "40px",
          quillAlign: "center",
          quillFont: "Roboto",
          quillBold: false,
          quillVAlign: "top"
        },
        Title45: {
          quillText: "Enter an small title here",
          quillSize: "32px",
          quillAlign: "center",
          quillFont: "Roboto",
          quillBold: false,
          quillVAlign: "top"
        },
        Subtitle36: {
          quillText: "Enter a large subtitle here",
          quillSize: "32px",
          quillAlign: "left",
          quillFont: "Roboto",
          quillBold: false,
          quillVAlign: "top"
        },
        Subtitle24: {
          quillText: "Enter a medium subtitle here",
          quillSize: "24px",
          quillAlign: "left",
          quillFont: "Roboto",
          quillBold: false,
          quillVAlign: "top"
        },
        Quote18: {
          quillText: "Enter a quote text here",
          quillSize: "18px",
          quillAlign: "left",
          quillFont: "Roboto",
          quillBold: true,
          quillVAlign: "top"
        },
        Body16: {
          quillText: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce at lacus ullamcorper, vehicula odio a, volutpat metus. Nam sed laoreet felis. Cras ullamcorper fermentum risus aliquet convallis. Pellentesque at pellentesque dui. Suspendisse porttitor maximus erat, non egestas leo congue id. Duis sit amet convallis urna. Donec scelerisque, diam a volutpat tempus, metus augue imperdiet est, vel aliquam nulla libero eget lorem. Nunc neque metus, tempus at est venenatis, auctor aliquet purus.",
          quillSize: "16px",
          quillAlign: "left",
          quillFont: "Georgia",
          quillBold: false,
          quillVAlign: "top"
        },
        Caption12: {
          quillText: "Enter a caption text here",
          quillSize: "12px",
          quillAlign: "left",
          quillFont: "Roboto",
          quillBold: false,
          quillVAlign: "top"
        },
        Footnote12: {
          quillText: "Enter a footnote text here",
          quillSize: "12px",
          quillAlign: "right",
          quillFont: "Roboto",
          quillBold: false,
          quillVAlign: "bottom"
        }
      };
    };

    TextAreaView.prototype.viewDidRender = function() {
      if (quadrigram.environment === "editor") {
        return this.createQuillEditor();
      } else {
        this.createFlatText();
        return this.dontUpdate = true;
      }
    };

    TextAreaView.prototype.createFlatText = function() {
      this.$el.find(".quill-container").html(this.model.get("value"));
      this.$el.addClass("exported-quill");
      if (this.model.get("scroll_enabled") === "true" || this.model.get("scroll_enabled") === true) {
        return this.$el.addClass("no-scroll");
      }
    };

    TextAreaView.prototype.createQuillEditor = function() {
      var configs,
        _this = this;
      configs = {
        styles: {
          '.editor-container': {
            'height': 'auto'
          },
          'body': {
            'padding': '0px 0px'
          },
          'span': {}
        }
      };
      this.quillEditor = new Quill(this.$el.find(".quill-container").get(0), configs);
      this.dontUpdate = true;
      this.setHidden(true);
      quadrigram.router.managers.fontManager.loadInFrame(this.quillEditor.editor.renderer.iframe.contentWindow, function() {
        return _this.setHidden(false);
      });
      if (quadrigram.router.appViews.uiView) {
        quadrigram.router.managers.fontManager.textbarManager.createBarForEditor(this.quillEditor, this.model);
        this.model.original.quillId = this.quillEditor.id;
      }
      this.quillEditor.on("text-change", this.textChanged);
      $(this.quillEditor.editor.root).closest("body").on("mousedown", this.handleClick);
      $(this.quillEditor.editor.root).attr("spellcheck", false);
      if (this.model.original.options && this.model.original.options.textType) {
        this.quillEditor.setContents([
          {
            insert: this.quillEditorAttributes[this.model.get("quillEditorAttributes")].quillText,
            attributes: {
              size: this.quillEditorAttributes[this.model.get("quillEditorAttributes")].quillSize,
              font: this.quillEditorAttributes[this.model.get("quillEditorAttributes")].quillFont,
              align: this.quillEditorAttributes[this.model.get("quillEditorAttributes")].quillAlign,
              bold: this.quillEditorAttributes[this.model.get("quillEditorAttributes")].quillBold,
              valign: this.quillEditorAttributes[this.model.get("quillEditorAttributes")].quillVAlign
            }
          }
        ]);
        this.model.original.options.texType = void 0;
        return this.textChanged();
      } else {
        return this.updateValue();
      }
    };

    TextAreaView.prototype.setHidden = function(value) {
      if (value) {
        return $(this.quillEditor.editor.root).closest("body").css("opacity", "0");
      } else {
        return $(this.quillEditor.editor.root).closest("body").css("opacity", "1");
      }
    };

    TextAreaView.prototype.textChanged = function(delta, source) {
      var contents, targetBlock;
      if (source !== "api") {
        if (this.model.original.getProperty("value") instanceof quadrigram.Models.PreProperty) {
          this.model.original.getProperty("value").activate();
        }
        targetBlock = this.model.original.getProperty("value").get("slotsCollection").where({
          "slotId": "value"
        })[0].get("internalBlock");
        contents = this.quillEditor.editor.innerHTML;
        targetBlock.setDataManual(contents);
        this.dontUpdate = true;
        return this.updatePaddings();
      }
    };

    TextAreaView.prototype.updatePaddings = function() {
      var $quillRoot, DEFAULT_PADDING, line, linesHeight, _i, _len, _ref1;
      DEFAULT_PADDING = 0;
      if (this.quillEditor != null) {
        $quillRoot = $(this.quillEditor.editor.root);
      } else {
        $quillRoot = $(this.$el.find(".quill-container"));
      }
      linesHeight = 0;
      _ref1 = $quillRoot.children();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        line = _ref1[_i];
        if ($(line)[0].innerText !== "\n") {
          linesHeight += $(line).height();
        }
      }
      if ($quillRoot.find(".valigned-middle").length > 0) {
        $quillRoot.css("min-height", linesHeight + "px");
        return $quillRoot.css("padding-top", Math.floor((this.$el.height() - linesHeight) / 2) - 1 + "px");
      } else if ($quillRoot.find(".valigned-bottom").length > 0) {
        $quillRoot.css("min-height", linesHeight + "px");
        return $quillRoot.css("padding-top", Math.floor((this.$el.height() - linesHeight) - 1 - DEFAULT_PADDING) + "px");
      } else {
        $quillRoot.css("min-height", "auto");
        return $quillRoot.css("padding-top", DEFAULT_PADDING + "px");
      }
      /*
      textScale = quadrigram.router.dataModels.currentProject.textScale
      if !@originalStyles
        @originalStyles = {}
      self = @
      if textScale?
        @$el.find(".quill-container").find("*").each((i)->
          if !self.originalStyles[i]
            self.originalStyles[i] = {}
            if !$(this).isInheritedStyle("font-size")
              self.originalStyles[i]["font-size"] = Math.round($(this).css("font-size").replace("px",""))
            if !$(this).isInheritedStyle("line-height")
              self.originalStyles[i]["line-height"] = Math.round($(this).css("line-height").replace("px",""))
            if !$(this).isInheritedStyle("letter-spacing")
              self.originalStyles[i]["letter-spacing"] = Math.round($(this).css("letter-spacing").replace("px",""))
          for prop,value of self.originalStyles[i]
            $(this).css(prop,Math.round(value*textScale)+"px")
        )
      */

    };

    TextAreaView.prototype.setSelected = function(value) {
      if (this.quillEditor) {
        $(this.quillEditor.editor.root).attr("contenteditable", value);
        if (value) {
          quadrigram.router.managers.fontManager.textbarManager.setActiveTarget(this.quillEditor);
          this.quillEditor.editor.focus();
          this.quillEditor.editor.quill.setSelection(this.quillEditor.editor.quill.getLength(), this.quillEditor.editor.quill.getLength());
          return this.$el.css("pointer-events", "all");
        } else {
          if (this.currentMode !== "preview" && quadrigram.environment !== "exported") {
            this.$el.css("pointer-events", "none");
          }
          return this.quillEditor.editor.quill.setSelection(this.quillEditor.editor.quill.getLength(), this.quillEditor.editor.quill.getLength());
        }
      }
    };

    TextAreaView.prototype.setMode = function(newMode) {
      this.currentMode = newMode;
      if (this.currentMode === "preview") {
        return this.$el.css("pointer-events", "all");
      } else {
        return this.$el.css("pointer-events", "none");
      }
    };

    TextAreaView.prototype._handleResize = function() {
      if (quadrigram.environment !== "exported") {
        this.$el.css("pointer-events", "none");
      } else {
        this.$el.find("iframe").contents().find("body").css({
          "font-family": "Oswald",
          "line-height": "normal",
          "font-size": "18px",
          "letter-spacing": "0px",
          "color": "#000000",
          "background-color": "none",
          "text-align": "left"
        });
      }
      return TextAreaView.__super__._handleResize.apply(this, arguments);
    };

    TextAreaView.prototype.didResize = function() {
      TextAreaView.__super__.didResize.apply(this, arguments);
      return this.updatePaddings();
    };

    TextAreaView.prototype.handleClick = function(e) {
      if (e.target === e.currentTarget) {
        return this.quillEditor.editor.quill.setSelection(this.quillEditor.editor.quill.getLength(), this.quillEditor.editor.quill.getLength());
      }
    };

    TextAreaView.prototype.updateValue = function() {
      var contents;
      contents = this.model.get("value");
      if (quadrigram.environment !== "exported") {
        return this.quillEditor.setHTML(contents);
      }
    };

    TextAreaView.prototype.visualizerDidUpdateItems = function() {
      if (!this.dontUpdate) {
        this.updateValue();
      } else {
        this.dontUpdate = false;
      }
      return this.updatePaddings();
    };

    TextAreaView.prototype.getScrollDomElement = function() {
      return $(this.behaviors.layout.root[0]).find("iframe").contents().find(".scroll_enabled");
    };

    return TextAreaView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TextAreaModel = (function(_super) {
    __extends(TextAreaModel, _super);

    function TextAreaModel() {
      this.updateMetaSizeProperties = __bind(this.updateMetaSizeProperties, this);
      this.info = __bind(this.info, this);
      _ref = TextAreaModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextAreaModel.behaviors = ["quadrigram.Models.LayoutBehavior"];

    TextAreaModel.meta = {
      name: "TextArea",
      properties: {
        value: {
          label: "Content",
          family: "data",
          hidden: true,
          formats: {
            Text: {
              defaults: {
                value: ""
              }
            }
          }
        },
        size_x: {
          formats: {
            Number: {
              defaults: {
                value: "1"
              }
            }
          }
        },
        size_y: {
          formats: {
            Number: {
              defaults: {
                value: "1"
              }
            }
          }
        },
        scroll_enabled: {
          internal: false
        },
        quillEditorAttributes: {
          label: "Quill editor attributes",
          family: "style",
          hidden: true,
          internal: true,
          formats: {
            Text: {
              defaults: {
                value: ""
              }
            }
          }
        }
      }
    };

    /*
    @info:(config) =>
      output = quadrigram.Models.VisualizerModel.mergeInfo(@meta,@behaviors)
      if config && config.textType?
        output = @updateMetaSizeProperties(config.textType, output)
    
      output
    */


    TextAreaModel.prototype.info = function(config) {
      if (this.output == null) {
        this.output = quadrigram.Models.VisualizerModel.mergeInfo(this.constructor.meta, this.constructor.behaviors);
        if (config && (config.textType != null)) {
          this.output = this.updateMetaSizeProperties(config.textType, this.output);
        }
      }
      return this.output;
    };

    TextAreaModel.prototype.updateMetaSizeProperties = function(textType, source) {
      var output;
      output = source;
      output.properties.quillEditorAttributes.formats.Text.defaults.value = textType;
      switch (textType) {
        case "Title112":
          output.properties.size_x.formats.Number.defaults.value = 14;
          output.properties.size_y.formats.Number.defaults.value = 2;
          break;
        case "Title56":
          output.properties.size_x.formats.Number.defaults.value = 8;
          output.properties.size_y.formats.Number.defaults.value = 1;
          break;
        case "Title45":
          output.properties.size_x.formats.Number.defaults.value = 6;
          output.properties.size_y.formats.Number.defaults.value = 1;
          break;
        case "Subtitle36":
          output.properties.size_x.formats.Number.defaults.value = 6;
          output.properties.size_y.formats.Number.defaults.value = 1;
          break;
        case "Subtitle24":
          output.properties.size_x.formats.Number.defaults.value = 5;
          output.properties.size_y.formats.Number.defaults.value = 1;
          break;
        case "Quote18":
          output.properties.size_x.formats.Number.defaults.value = 3;
          output.properties.size_y.formats.Number.defaults.value = 1;
          break;
        case "Body16":
          output.properties.size_x.formats.Number.defaults.value = 10;
          output.properties.size_y.formats.Number.defaults.value = 3;
          break;
        case "Caption12":
          output.properties.size_x.formats.Number.defaults.value = 3;
          output.properties.size_y.formats.Number.defaults.value = 1;
          break;
        case "Footnote12":
          output.properties.size_x.formats.Number.defaults.value = 3;
          output.properties.size_y.formats.Number.defaults.value = 1;
      }
      return output;
    };

    return TextAreaModel;

  })(quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Views.Textbar = (function() {
    Textbar.prototype.template = JST['app/scripts/templates/UI/textBar.hbs'];

    Textbar.prototype.toolbarTemplate = JST['app/scripts/templates/UI/textBarToolBar.hbs'];

    function Textbar() {
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.setActiveTarget = __bind(this.setActiveTarget, this);
      this.createBarForEditor = __bind(this.createBarForEditor, this);
      this.targets = [];
      this.toolbars = {};
      this.currentTarget = null;
      this.theToolbar = null;
    }

    Textbar.prototype.createBarForEditor = function(quillEditor) {
      var contextual, toolbarEl,
        _this = this;
      if (this.theToolbar == null) {
        toolbarEl = $(this.toolbarTemplate({
          fontFamilies: quadrigram.router.managers.fontManager.fontsList()
        }));
        $(toolbarEl).find("[qm-input-type]").each(function(i) {
          var camelCased, format, style, styleCC;
          camelCased = $(this).attr("qm-input-type").replace(/-([a-z])/g, function(g) {
            return g[1].toUpperCase();
          });
          $(this)[camelCased]();
          format = $(this).attr("class").replace("ql-", "");
          styleCC = quillEditor.editor.doc.formats[format].config.style;
          if (styleCC) {
            style = styleCC.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
            return quillEditor.options.styles.body[style] = $(this).attr("qm-option-default-value");
          }
        });
        contextual = $(toolbarEl).find(".ql-font").inputWithOptions("instance").contextual;
        contextual.find("li").each(function(i, el) {
          return $(el).css("font-family", $(el).html());
        });
        $(toolbarEl).find(".ql-font-container .ql-font").on("valset", function() {
          var fontFamilyStyles;
          $(toolbarEl).find(".ql-font-container .qm-input-element").css("font-family", $(this).val());
          fontFamilyStyles = quadrigram.router.managers.fontManager.getFontStyles($(this).val());
          return $(toolbarEl).find(".ql-fontstyle").inputWithOptions("instance").updateOptions(fontFamilyStyles, $(this).val());
        });
        quillEditor.addModule('toolbar', {
          container: toolbarEl.get(0)
        });
        return this.theToolbar = quillEditor.modules['toolbar'];
      } else {
        quillEditor.modules['toolbar'] = this.theToolbar;
        return quillEditor.on(quillEditor.constructor.events.SELECTION_CHANGE, function(range) {
          if (range != null) {
            return _this.theToolbar.updateActive(range);
          }
        });
      }
    };

    Textbar.prototype.hideToolbar = function() {
      return $(window).find("[qm-input-type]").blur();
    };

    Textbar.prototype.setActiveTarget = function(quillEditor, selected, model) {
      $(this.theToolbar.container).find(".ql-link").unbind("click");
      this.theToolbar.quill = quillEditor;
      return this.theToolbar.initFormat('link', _.bind(this.theToolbar.quill.modules["link-tooltip"]._onToolbar, this.theToolbar.quill.modules["link-tooltip"]));
    };

    Textbar.prototype.viewWillRemove = function() {};

    return Textbar;

  })();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.TopMenuView = (function(_super) {
    __extends(TopMenuView, _super);

    function TopMenuView() {
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = TopMenuView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TopMenuView.prototype.template = JST['app/scripts/templates/UI/topMenu.hbs'];

    TopMenuView.prototype.viewDidRender = function() {};

    /*
    handleMenuResize:(e)=>
    
      ##WRONG: the +27 comes from the fact that the header is outside the uiview <- SHOULD BE INSIDE ???? la gracia es que si esta fuera se puede cargar independientemente de /rs/project...
      ##WRONG: this gets called on rollovers!?!??
      ##TODO: there is also a revise about "resize and shit"...
    
      if quadrigram.router.appViews.projectView?
        if @$el.css("display")!="none"
          quadrigram.router.appViews.projectView.resizeWithTopAt(@$el.height())
        else
          quadrigram.router.appViews.projectView.resizeWithTopAt()
    */


    TopMenuView.prototype._serializeData = function() {
      this.templateData = {};
      return this.templateData;
    };

    TopMenuView.prototype.hide = function() {
      return this.$el.slideUp(300);
    };

    TopMenuView.prototype.show = function() {
      return this.$el.slideDown(300);
    };

    TopMenuView.prototype.viewWillRemove = function() {};

    return TopMenuView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.FilePicker = (function(_super) {
    __extends(FilePicker, _super);

    function FilePicker() {
      this.cleanPicker = __bind(this.cleanPicker, this);
      this.retryServerRequest = __bind(this.retryServerRequest, this);
      this.offerRetry = __bind(this.offerRetry, this);
      this.resourceDeleted = __bind(this.resourceDeleted, this);
      this.resourceWasNotDeleted = __bind(this.resourceWasNotDeleted, this);
      this.resourceWasDeleted = __bind(this.resourceWasDeleted, this);
      this.handleFilePicked = __bind(this.handleFilePicked, this);
      this.resourceSelected = __bind(this.resourceSelected, this);
      this.fetchOnAllDrive = __bind(this.fetchOnAllDrive, this);
      this.fetchOnQFolder = __bind(this.fetchOnQFolder, this);
      this.setupDropZone = __bind(this.setupDropZone, this);
      this.filterResourceList = __bind(this.filterResourceList, this);
      this.setupResList = __bind(this.setupResList, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = FilePicker.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FilePicker.prototype.template = JST['app/scripts/templates/UI/dialogs/filePicker.hbs'];

    FilePicker.prototype.errorTemplate = JST['app/scripts/templates/UI/errors/pickerError.hbs'];

    FilePicker.prototype.errorMessageTemplate = JST['app/scripts/templates/UI/errors/messageError.hbs'];

    FilePicker.prototype.dropzonePreviewTemplate = JST['app/scripts/templates/UI/dialogs/dropzonePreviewTemplate.hbs'];

    FilePicker.prototype.title = "Load files";

    FilePicker.prototype.iconClass = 'files-icon';

    FilePicker.prototype.acceptedFiles = "application/vnd.ms-excel,text/csv,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,.xls,.xlsx,.csv";

    FilePicker.prototype.viewWillRender = function() {
      return this.templateData.folderUrl = quadrigram.router.dataModels.user.get("userDriveFolder");
    };

    FilePicker.prototype.viewDidRender = function() {
      this.setupResList();
      this.$el.find(".list-container").append(this.resListView.$el);
      this.resListView.on("resource-selected", this.resourceSelected);
      this.resListView.on("resource-deleted", this.resourceDeleted);
      this.$el.find(".source-q").on("click", this.fetchOnQFolder);
      this.$el.find(".source-google").on("click", this.fetchOnAllDrive);
      this.$el.find(".file-list-search-input").on("keyup", this.filterResourceList);
      return this.setupDropZone();
    };

    FilePicker.prototype.setupResList = function() {
      var resList;
      resList = quadrigram.router.managers.serverManager.getResourcesList();
      resList.on("error", this.offerRetry);
      this.resListView = new quadrigram.Views.ResourcesListView({
        collection: resList
      });
      this.resListView.actionLabel = "Load file";
      this.resListView.render();
      return resList.fetch({
        success: this.cleanPicker
      });
    };

    FilePicker.prototype.filterResourceList = function() {
      var term;
      term = this.$el.find(".file-list-search-input").val();
      return this.resListView.filterList(term);
    };

    FilePicker.prototype.setupDropZone = function() {
      var dropZoneEl,
        _this = this;
      dropZoneEl = this.$el.find(".file-upload");
      return dropZoneEl.dropzone({
        url: function(files) {
          return quadrigram.baseUrl + "rs/google/resource";
        },
        maxFilesize: 20,
        addedfile: function(file) {
          _this.$el.find(".fake-progress-container").removeClass("hidden");
          _this.$el.find(".dz-default").addClass("hidden");
          _this.$el.find(".fake-progress").removeClass("success");
          return _this.$el.find(".fake-progress").css("width", "10%");
        },
        success: function(file, response) {
          if (_this.$el.find(".message-server-error").length) {
            _this.$el.find(".message-server-error").remove();
          }
          if ((response.code != null) && response.code !== 200) {
            _this.$el.find(".pb-container").append(_this.errorMessageTemplate("Error uploading new resource"));
            return _this.$el.find(".fake-progress-container").addClass("hidden");
          } else {
            _this.$el.find(".fake-progress").css("width", "100%");
            _this.$el.find(".fake-progress").addClass("success");
            setTimeout(function() {
              _this.$el.find(".fake-progress-container").addClass("hidden");
              return _this.$el.find(".dz-default").removeClass("hidden");
            }, 2000);
            return _this.resListView.refresh();
          }
        },
        withCredentials: true,
        uploadprogress: function(file, percent, bytes) {
          if (percent < 100) {
            log("setting progress to", Math.min(90, percent));
            return _this.$el.find(".fake-progress").css("width", Math.min(Math.max(percent, 10), 90) + "%");
          }
        },
        error: function(file, message) {
          if (file.accepted === false) {
            elog("This file type is not accepted!");
            if (file.type.indexOf("image") >= 0) {
              message = "Use the image picker to upload images";
            } else {
              message = "Sorry, Quadrigram can't process this type of file...";
            }
            _this.$el.find(".error-container").append(_this.errorMessageTemplate(message));
            _this.$el.find(".error-container").removeClass("hidden");
            _this.$el.find(".fake-progress-container").addClass("hidden");
            _this.$el.find(".dz-default").addClass("hidden");
            return setTimeout(function() {
              _this.$el.find(".fake-progress-container").addClass("hidden");
              _this.$el.find(".dz-default").removeClass("hidden");
              _this.$el.find(".error-container").empty();
              return _this.$el.find(".error-container").addClass("hidden");
            }, 2000);
          }
        },
        previewTemplate: this.dropzonePreviewTemplate(),
        dictDefaultMessage: "Drop files or click to upload.",
        acceptedFiles: this.acceptedFiles
      });
    };

    FilePicker.prototype.fetchOnQFolder = function() {
      var resList;
      resList = this.resListView.collection;
      resList.url = quadrigram.baseUrl + "rs/google/resources";
      this.resListView.render();
      this.resListView.showOverlay("loading");
      return resList.fetch({
        success: this.cleanPicker
      });
    };

    FilePicker.prototype.fetchOnAllDrive = function() {
      var resList;
      resList = this.resListView.collection;
      resList.url = quadrigram.baseUrl + "rs/google/resources?root=all";
      this.resListView.render();
      this.resListView.showOverlay("loading");
      return resList.fetch({
        success: this.cleanPicker
      });
    };

    FilePicker.prototype.resourceSelected = function(metadata) {
      return this.handleFilePicked(metadata);
    };

    FilePicker.prototype.handleFilePicked = function(metadata) {
      log("file picked metadata", metadata);
      this.callBack(metadata);
      return this.close();
    };

    FilePicker.prototype.resourceWasDeleted = function(response) {
      if (!(response && (response.code != null) && response.code === 200)) {
        return this.resourceWasNotDeleted(response);
      } else {
        return this.resListView.collection.fetch({
          success: this.cleanPicker
        });
      }
    };

    FilePicker.prototype.resourceWasNotDeleted = function(response) {
      var _this = this;
      this.resListView.setState("custom", {
        "message": "Error deleting file, please try again"
      });
      return setTimeout(function() {
        return _this.resListView.hideOverlay();
      }, 3000);
    };

    FilePicker.prototype.resourceDeleted = function(metadata) {
      this.resListView.setState("custom", {
        "message": "Deleting file..."
      });
      return quadrigram.router.managers.serverManager.deleteFile(metadata, this.resourceWasDeleted, this.resourceWasNotDeleted);
    };

    FilePicker.prototype.offerRetry = function(error) {
      this.$el.find(".list-container").append(this.errorTemplate());
      return this.$el.find(".retry-overlay-message").on("click", this.retryServerRequest);
    };

    FilePicker.prototype.retryServerRequest = function(e) {
      this.$el.find(".retry-overlay").remove();
      this.$el.find(".retry-overlay-message").off("click", this.retryServerRequest);
      return this.resListView.collection.fetch({
        success: this.cleanPicker
      });
    };

    FilePicker.prototype.cleanPicker = function() {
      this.$el.find(".file-list-search-input").removeClass("disabled");
      return this.resListView.hideOverlay();
    };

    FilePicker.prototype.remove = function() {
      FilePicker.__super__.remove.call(this);
      this.$el.find(".retry-overlay-message").off("click", this.retryServerRequest);
      this.$el.find(".source-q").off("click", this.fetchOnQFolder);
      this.$el.find(".source-google").off("click", this.fetchOnAllDrive);
      return this.$el.find(".file-list-search-input").off("keyup", this.filterResourceList);
    };

    return FilePicker;

  })(quadrigram.Views.Dialog);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ImagePicker = (function(_super) {
    __extends(ImagePicker, _super);

    function ImagePicker() {
      this.fetchOnAllDrive = __bind(this.fetchOnAllDrive, this);
      this.fetchOnQFolder = __bind(this.fetchOnQFolder, this);
      this.setupResList = __bind(this.setupResList, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = ImagePicker.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ImagePicker.prototype.acceptedFiles = "image/*";

    ImagePicker.prototype.title = "Load images";

    ImagePicker.prototype.viewDidRender = function() {
      ImagePicker.__super__.viewDidRender.call(this);
      return this.$el.find(".file-list").addClass("image-file-list");
    };

    ImagePicker.prototype.setupResList = function() {
      var resList;
      resList = quadrigram.router.managers.serverManager.getResourcesList();
      resList.on("error", this.offerRetry);
      resList.instanceUrl = quadrigram.baseUrl + "rs/google/images";
      this.resListView = new quadrigram.Views.ImageResourceListView({
        collection: resList
      });
      this.resListView.actionLabel = "Load image";
      this.resListView.render();
      resList.fetch({
        success: this.cleanPicker
      });
      return this.$el.find(".file-list-header").addClass("hidden");
    };

    ImagePicker.prototype.fetchOnQFolder = function() {
      var resList;
      resList = this.resListView.collection = quadrigram.router.managers.serverManager.getResourcesList();
      resList.instanceUrl = quadrigram.baseUrl + "rs/google/images";
      this.resListView.render();
      this.resListView.showOverlay("loading");
      return resList.fetch({
        success: this.cleanPicker
      });
    };

    ImagePicker.prototype.fetchOnAllDrive = function() {
      var resList;
      resList = this.resListView.collection = quadrigram.router.managers.serverManager.getResourcesList();
      resList.instanceUrl = quadrigram.baseUrl + "rs/google/images?root=all";
      this.resListView.render();
      this.resListView.showOverlay("loading");
      return resList.fetch({
        success: this.cleanPicker
      });
    };

    return ImagePicker;

  })(quadrigram.Views.FilePicker);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ProjectsPicker = (function(_super) {
    __extends(ProjectsPicker, _super);

    function ProjectsPicker() {
      this.handleProjectPicked = __bind(this.handleProjectPicked, this);
      this.projectDeleted = __bind(this.projectDeleted, this);
      this.projectSelected = __bind(this.projectSelected, this);
      this.projectWasNotDeleted = __bind(this.projectWasNotDeleted, this);
      this.projectWasDeleted = __bind(this.projectWasDeleted, this);
      this.retryServerRequest = __bind(this.retryServerRequest, this);
      this.offerRetry = __bind(this.offerRetry, this);
      this.newProject = __bind(this.newProject, this);
      this.showProjectList = __bind(this.showProjectList, this);
      this.filterResourceList = __bind(this.filterResourceList, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = ProjectsPicker.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ProjectsPicker.prototype.template = JST['app/scripts/templates/UI/dialogs/projectsPicker.hbs'];

    ProjectsPicker.prototype.errorTemplate = JST['app/scripts/templates/UI/errors/pickerError.hbs'];

    ProjectsPicker.prototype.title = "Open project";

    ProjectsPicker.prototype.iconClass = 'projects-icon';

    ProjectsPicker.prototype.appendToSelector = "#content";

    ProjectsPicker.prototype.zindexClass = "open-front";

    ProjectsPicker.prototype.ERROR_RENAME_MESSAGE = "Error renaming project, please try again";

    ProjectsPicker.prototype.viewWillRender = function() {
      var _this = this;
      ProjectsPicker.__super__.viewWillRender.call(this);
      this.$el.empty();
      return this.buttons = {
        "New Project": {
          click: function() {
            return _this.newProject();
          },
          text: 'New Project',
          "class": 'ok-button'
        }
      };
    };

    ProjectsPicker.prototype.viewDidRender = function() {
      var projectsList;
      log("ProjectsPicker::createContent -> contentEl = ", this.$el);
      projectsList = quadrigram.router.managers.serverManager.getProjectsList();
      projectsList.on("error", this.offerRetry);
      this.projectsListView = new quadrigram.Views.ResourcesListView({
        collection: projectsList
      });
      this.projectsListView.actionLabel = "Open";
      this.projectsListView.labelsEditable = true;
      this.projectsListView.render();
      this.$el.find(".list-container").append(this.projectsListView.$el);
      this.projectsListView.on("loaded", this.showProjectList);
      this.projectsListView.on("resource-selected", this.projectSelected);
      this.projectsListView.on("resource-deleted", this.projectDeleted);
      this.$el.find(".file-list-search-input").on("keyup", this.filterResourceList);
      return projectsList.fetch();
    };

    ProjectsPicker.prototype.filterResourceList = function() {
      var term;
      term = this.$el.find(".file-list-search-input").val();
      return this.projectsListView.filterList(term);
    };

    ProjectsPicker.prototype.showProjectList = function() {
      if (this.projectsListView.collection.models.length > 0) {
        this.$el.find(".meta-data-item[data-id='" + quadrigram.router.dataModels.currentProject.get("id") + "']").addClass("current-project");
        return this.$el.find(".file-list-search-input").removeClass("disabled");
        /*
        d3.select(@projectsListView.el).selectAll(".list-item").classed("current-project",() ->
          itemProject = d3.select(@).select(".block-group").attr("data-id")
          currentProject = quadrigram.router.dataModels.currentProject.get("id")
          return itemProject == currentProject
        )
        */

      }
    };

    ProjectsPicker.prototype.newProject = function() {
      quadrigram.router.loadProject();
      return this.close();
    };

    ProjectsPicker.prototype.offerRetry = function(error) {
      this.$el.find(".list-container").append(this.errorTemplate());
      return this.$el.find(".retry-overlay-message").on("click", this.retryServerRequest);
    };

    ProjectsPicker.prototype.retryServerRequest = function(e) {
      this.$el.find(".error-retry-button").off("click", this.retryServerRequest);
      this.$el.find(".retry-overlay").remove();
      return this.projectsListView.collection.fetch({
        success: this.showProjectList
      });
    };

    ProjectsPicker.prototype.projectWasDeleted = function(response) {
      if (!(response && (response.code != null) && response.code === 200)) {
        return this.projectWasNotDeleted(response);
      } else {
        return this.projectsListView.collection.fetch({
          success: this.showProjectList
        });
      }
    };

    ProjectsPicker.prototype.projectWasNotDeleted = function(response) {
      var _this = this;
      this.projectsListView.setState("custom", {
        "message": "Error deleting project, please try again"
      });
      return setTimeout(function() {
        return _this.projectsListView.hideOverlay();
      }, 3000);
    };

    /*
    projectWasRenamed:(response)=>
      #@projectsListView.errorDeleting = 1
      if not (response && response.code? && response.code == 200)
        @projectWasNotRenamed(response)
    
    projectWasNotRenamed:(response)=>
      @$el.append(@errorMessage(@ERROR_RENAME_MESSAGE))
    */


    ProjectsPicker.prototype.projectSelected = function(metadata) {
      this.$el.find(".message-server-error").remove();
      return this.handleProjectPicked(metadata);
    };

    ProjectsPicker.prototype.projectDeleted = function(metadata) {
      this.projectsListView.setState("custom", {
        "message": "Deleting project..."
      });
      return quadrigram.router.managers.serverManager.deleteProject(metadata, this.projectWasDeleted, this.projectWasNotDeleted);
    };

    /*
    projectRenamed:(metadata)=>
      log "PROJECT SHOUD BE RENAMED!"
      quadrigram.router.managers.serverManager.renameProject(metadata,@projectWasRenamed,@projectWasNotRenamed)
    */


    ProjectsPicker.prototype.handleProjectPicked = function(metadata) {
      log("ProjectsPicker::handleProjectPicked -> metadata = ", metadata);
      this.callBack(metadata);
      return this.close();
    };

    ProjectsPicker.prototype.remove = function() {
      ProjectsPicker.__super__.remove.call(this);
      this.$el.find(".error-retry-button").off("click", this.retryServerRequest);
      return this.$el.find(".file-list-search-input").off("keyup", this.filterResourceList);
    };

    return ProjectsPicker;

  })(quadrigram.Views.Dialog);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.MetaProject = (function(_super) {
    __extends(MetaProject, _super);

    function MetaProject() {
      _ref = MetaProject.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return MetaProject;

  })(Backbone.Model);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.MetaResource = (function(_super) {
    __extends(MetaResource, _super);

    function MetaResource() {
      _ref = MetaResource.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return MetaResource;

  })(Backbone.Model);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.metaResourceCollection = (function(_super) {
    __extends(metaResourceCollection, _super);

    function metaResourceCollection() {
      this.parse = __bind(this.parse, this);
      this.retryErrorHandler = __bind(this.retryErrorHandler, this);
      this.url = __bind(this.url, this);
      _ref = metaResourceCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    metaResourceCollection.prototype.url = function() {
      return this.instanceUrl;
    };

    metaResourceCollection.prototype.model = quadrigram.Models.MetaResource;

    metaResourceCollection.prototype.initialize = function() {
      return this.instanceUrl = quadrigram.baseUrl + "rs/google/resources";
    };

    metaResourceCollection.prototype.retryErrorHandler = function(data) {
      console.log('error on fetch resource list: ' + data.error);
      this.trigger('error', data.error);
      return null;
    };

    metaResourceCollection.prototype.parse = function(data) {
      if ((data.code != null) && data.code !== 200) {
        return this.retryErrorHandler(data);
      } else {
        return data.body;
      }
    };

    return metaResourceCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.metaProjectCollection = (function(_super) {
    __extends(metaProjectCollection, _super);

    function metaProjectCollection() {
      this.parse = __bind(this.parse, this);
      this.retryErrorHandler = __bind(this.retryErrorHandler, this);
      this.url = __bind(this.url, this);
      _ref = metaProjectCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    metaProjectCollection.prototype.url = function() {
      return this.instanceUrl;
    };

    metaProjectCollection.prototype.model = quadrigram.Models.MetaProject;

    metaProjectCollection.prototype.initialize = function() {
      return this.instanceUrl = quadrigram.baseUrl + "rs/google/projects";
    };

    metaProjectCollection.prototype.retryErrorHandler = function(data) {
      console.log('error on fetch project list: ' + data.error);
      this.trigger('error', data.error);
      return null;
    };

    metaProjectCollection.prototype.parse = function(data) {
      if ((data.code != null) && data.code !== 200) {
        return this.retryErrorHandler(data);
      } else {
        return data.body;
      }
    };

    return metaProjectCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.MetadataItem = (function(_super) {
    __extends(MetadataItem, _super);

    function MetadataItem() {
      this.triggerEdited = __bind(this.triggerEdited, this);
      this.triggerDelete = __bind(this.triggerDelete, this);
      this.triggerPreview = __bind(this.triggerPreview, this);
      this.triggerSelected = __bind(this.triggerSelected, this);
      this.getTypeFromMimeType = __bind(this.getTypeFromMimeType, this);
      this.getFormattedDate = __bind(this.getFormattedDate, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = MetadataItem.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MetadataItem.prototype.template = JST['app/scripts/templates/UI/metadataItem.hbs'];

    MetadataItem.prototype.className = "list-item";

    MetadataItem.prototype.events = {
      "click .action-btn": "triggerSelected",
      "click .delete-btn": "triggerDelete"
    };

    MetadataItem.prototype.viewWillRender = function() {
      var _this = this;
      Handlebars.registerHelper('convertToDate', function(ms, options) {
        return _this.getFormattedDate(new Date(ms));
      });
      return Handlebars.registerHelper('convertToType', function(mimeType, options) {
        return _this.getTypeFromMimeType(mimeType);
      });
    };

    MetadataItem.prototype.getFormattedDate = function(date) {
      var day, month, year;
      year = date.getFullYear();
      month = (1 + date.getMonth()).toString();
      if (month.length === 1) {
        month = '0' + month;
      }
      day = date.getDate().toString();
      if (day.length === 1) {
        day = '0' + day;
      }
      return day + '/' + month + '/' + year;
    };

    MetadataItem.prototype.getTypeFromMimeType = function(mimeType) {
      switch (mimeType) {
        case "text/csv":
          return "CSV";
        case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
          return "XLSX";
        case "application/vnd.ms-excel":
          return "XLS";
        default:
          return "none";
      }
    };

    MetadataItem.prototype.triggerSelected = function() {
      return this.trigger("selected", this);
    };

    MetadataItem.prototype.triggerPreview = function() {
      return this.trigger("preview", this);
    };

    MetadataItem.prototype.triggerDelete = function(e) {
      e.stopImmediatePropagation();
      return this.trigger("delete", this);
    };

    MetadataItem.prototype.triggerEdited = function(e) {
      this.model.set("name", this.$el.find(".item-label").val());
      return this.trigger("edited", this);
    };

    return MetadataItem;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ImageMetadataItem = (function(_super) {
    __extends(ImageMetadataItem, _super);

    function ImageMetadataItem() {
      this.triggerEdited = __bind(this.triggerEdited, this);
      this.triggerDelete = __bind(this.triggerDelete, this);
      this.triggerPreview = __bind(this.triggerPreview, this);
      this.triggerSelected = __bind(this.triggerSelected, this);
      this.getTypeFromMimeType = __bind(this.getTypeFromMimeType, this);
      this.getFormattedDate = __bind(this.getFormattedDate, this);
      this.hideButton = __bind(this.hideButton, this);
      this.showButton = __bind(this.showButton, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = ImageMetadataItem.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ImageMetadataItem.prototype.template = JST['app/scripts/templates/UI/imageMetadataItem.hbs'];

    ImageMetadataItem.prototype.className = "image-list-item";

    ImageMetadataItem.prototype.events = {
      "click .action-btn": "triggerSelected",
      "click .delete-btn": "triggerDelete",
      "mouseover": "showButton",
      "mouseout": "hideButton"
    };

    ImageMetadataItem.prototype.viewWillRender = function() {
      var _this = this;
      Handlebars.registerHelper('convertToDate', function(ms, options) {
        return _this.getFormattedDate(new Date(ms));
      });
      return Handlebars.registerHelper('convertToType', function(mimeType, options) {
        return _this.getTypeFromMimeType(mimeType);
      });
    };

    ImageMetadataItem.prototype.showButton = function() {
      return this.$el.find(".action-btn").removeClass("hidden");
    };

    ImageMetadataItem.prototype.hideButton = function() {
      return this.$el.find(".action-btn").addClass("hidden");
    };

    ImageMetadataItem.prototype.getFormattedDate = function(date) {
      var day, month, year;
      year = date.getFullYear();
      month = (1 + date.getMonth()).toString();
      if (month.length === 1) {
        month = '0' + month;
      }
      day = date.getDate().toString();
      if (day.length === 1) {
        day = '0' + day;
      }
      return day + '/' + month + '/' + year;
    };

    ImageMetadataItem.prototype.getTypeFromMimeType = function(mimeType) {
      switch (mimeType) {
        case "text/csv":
          return "CSV";
        case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
          return "XLSX";
        case "application/vnd.ms-excel":
          return "XLS";
        default:
          return "none";
      }
    };

    ImageMetadataItem.prototype.triggerSelected = function() {
      return this.trigger("selected", this);
    };

    ImageMetadataItem.prototype.triggerPreview = function() {
      return this.trigger("preview", this);
    };

    ImageMetadataItem.prototype.triggerDelete = function(e) {
      e.stopImmediatePropagation();
      return this.trigger("delete", this);
    };

    ImageMetadataItem.prototype.triggerEdited = function(e) {
      this.model.set("name", this.$el.find(".item-label").val());
      return this.trigger("edited", this);
    };

    return ImageMetadataItem;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.LoadableCollectionView = (function(_super) {
    __extends(LoadableCollectionView, _super);

    function LoadableCollectionView() {
      this.hideOverlay = __bind(this.hideOverlay, this);
      this.showOverlay = __bind(this.showOverlay, this);
      this.setState = __bind(this.setState, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.init = __bind(this.init, this);
      _ref = LoadableCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LoadableCollectionView.prototype.template = JST['app/scripts/templates/UI/loadableCollectionView.hbs'];

    LoadableCollectionView.prototype.loadingTemplate = JST['app/scripts/templates/UI/loadingOverlay.hbs'];

    LoadableCollectionView.prototype.messageTemplate = JST['app/scripts/templates/UI/messageOverlay.hbs'];

    LoadableCollectionView.prototype.emptyTemplate = JST['app/scripts/templates/visualizers/empty.hbs'];

    LoadableCollectionView.prototype.NO_DATA_MESSAGE = "No data";

    LoadableCollectionView.prototype.ERROR_MESSAGE = "Error connecting to the server";

    LoadableCollectionView.prototype.className = "loadable-list";

    LoadableCollectionView.prototype.init = function() {
      var _this = this;
      this.collection.on("request", function(model) {
        return _this.setState("loading");
      });
      /*
      @collection.on("reset",(model)=>
        @setState("loaded")
      )
      */

      this.collection.on("sync", function(model) {
        _this.setState("loaded");
        return _this.trigger("loaded");
      });
      return this.collection.on("error", function(model) {
        return _this.setState("error");
      });
      /*
      @collection.on("fetch",(model)=>
        @setState("loading")
      )
      */

    };

    LoadableCollectionView.prototype.viewDidRender = function() {
      var e, elEvents,
        _this = this;
      this.collectionView = new Backbone.CollectionView({
        collection: this.collection,
        el: this.$el.find(".items-container")
      });
      this.collectionView.template = this.emptyTemplate;
      this.collectionView.modelView = this.modelView;
      this.collectionView.on("all", function(e, options) {
        return _this.trigger(e, options);
      });
      this.collectionView.elementViewDidRender = this.elementViewDidRender;
      elEvents = _.extend({}, this.elementEvents);
      for (e in elEvents) {
        elEvents[e] = this[elEvents[e]];
      }
      this.collectionView.elementEvents = elEvents;
      return this.collectionView.render();
    };

    LoadableCollectionView.prototype.viewWillRemove = function() {
      this.off("render");
      this.collection.off();
      return this.collectionView.off();
    };

    LoadableCollectionView.prototype.setState = function(state, options) {
      if (state === "loading") {
        return this.showOverlay("loading");
      } else if (state === "loaded") {
        if (this.collection.models.length > 0) {
          return this.hideOverlay();
        } else if ((this.collection.error != null) && this.collection.models.length === 0) {
          return this.showOverlay("message", this.ERROR_MESSAGE);
        } else {
          return this.showOverlay("message", this.NO_DATA_MESSAGE);
        }
      } else if (state === "error") {
        return this.showOverlay("message", this.ERROR_MESSAGE);
      } else if (state === "custom") {
        return this.showOverlay("message", options.message);
      }
    };

    LoadableCollectionView.prototype.showOverlay = function(type, msg) {
      if (this.$overlay) {
        this.$overlay.remove();
      }
      if (type === "loading") {
        this.$overlay = $(this.loadingTemplate());
        this.$el.find(".overlay-container").append(this.$overlay);
      } else if (type === "message") {
        this.$overlay = $(this.messageTemplate(msg));
        this.$el.find(".overlay-container").append(this.$overlay);
      }
      return this.$el.find(".overlay-container").removeClass("hidden");
    };

    LoadableCollectionView.prototype.hideOverlay = function() {
      if (this.$overlay) {
        this.$overlay.remove();
      }
      return this.$el.find(".overlay-container").addClass("hidden");
    };

    return LoadableCollectionView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ResourcesListView = (function(_super) {
    __extends(ResourcesListView, _super);

    function ResourcesListView() {
      this.refresh = __bind(this.refresh, this);
      this._clickOnDeleteItem = __bind(this._clickOnDeleteItem, this);
      this._clickOnItem = __bind(this._clickOnItem, this);
      this.filterList = __bind(this.filterList, this);
      this.elementViewDidRender = __bind(this.elementViewDidRender, this);
      _ref = ResourcesListView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ResourcesListView.prototype.modelView = quadrigram.Views.MetadataItem;

    ResourcesListView.prototype.NO_DATA_MESSAGE = "No files have been uploaded yet!";

    ResourcesListView.prototype.className = "file-list";

    ResourcesListView.prototype.actionLabel = "Action";

    ResourcesListView.prototype.labelsEditable = false;

    ResourcesListView.prototype.elementEvents = {
      "selected": "_clickOnItem",
      "delete": "_clickOnDeleteItem"
    };

    ResourcesListView.prototype.elementViewDidRender = function(view) {
      view.$el.find(".action-btn").html(this.actionLabel);
      view.$el.find(".action-btn").addClass("ui-tip-target");
      view.$el.find(".action-btn").attr("data-ui-tip-id", this.actionLabel);
      view.$el.find(".delete-btn").addClass("ui-tip-target");
      return view.$el.find(".delete-btn").attr("data-ui-tip-id", "delete-file");
    };

    ResourcesListView.prototype.filterList = function(term) {
      term = term.toLowerCase();
      return d3.select(this.el).selectAll(".list-item").style("display", function(d, i) {
        var name;
        name = d3.select(this).select(".meta-data-item").attr("data-name").toLowerCase();
        if (name.indexOf(term) !== -1) {
          return "inherit";
        } else {
          return "none";
        }
      });
    };

    ResourcesListView.prototype._clickOnItem = function(itemView) {
      return this.trigger("resource-selected", itemView.model);
    };

    ResourcesListView.prototype._clickOnDeleteItem = function(itemView) {
      return this.trigger("resource-deleted", itemView.model);
    };

    ResourcesListView.prototype.refresh = function(callback) {
      var _this = this;
      this.showOverlay("loading");
      return this.collection.fetch({
        success: function() {
          _this.render();
          if (callback) {
            return callback();
          }
        }
      });
    };

    return ResourcesListView;

  })(quadrigram.Views.LoadableCollectionView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ImageResourceListView = (function(_super) {
    __extends(ImageResourceListView, _super);

    function ImageResourceListView() {
      this.refresh = __bind(this.refresh, this);
      this._clickOnDeleteItem = __bind(this._clickOnDeleteItem, this);
      this._clickOnItem = __bind(this._clickOnItem, this);
      this.elementViewDidRender = __bind(this.elementViewDidRender, this);
      this.filterList = __bind(this.filterList, this);
      _ref = ImageResourceListView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ImageResourceListView.prototype.modelView = quadrigram.Views.ImageMetadataItem;

    ImageResourceListView.prototype.NO_DATA_MESSAGE = "No files have been uploaded yet!";

    ImageResourceListView.prototype.className = "file-list";

    ImageResourceListView.prototype.actionLabel = "Action";

    ImageResourceListView.prototype.labelsEditable = false;

    ImageResourceListView.prototype.elementEvents = {
      "selected": "_clickOnItem",
      "delete": "_clickOnDeleteItem"
    };

    ImageResourceListView.prototype.filterList = function(term) {
      term = term.toLowerCase();
      return d3.select(this.el).selectAll(".image-list-item").style("display", function(d, i) {
        var name;
        name = d3.select(this).select(".image-meta-data-item").attr("data-name").toLowerCase();
        if (name.indexOf(term) !== -1) {
          return "inline-block";
        } else {
          return "none";
        }
      });
    };

    ImageResourceListView.prototype.elementViewDidRender = function(view) {
      view.$el.find(".action-btn").html(this.actionLabel);
      view.$el.find(".action-btn").addClass("ui-tip-target");
      view.$el.find(".action-btn").attr("data-ui-tip-id", this.actionLabel);
      view.$el.find(".delete-btn").addClass("ui-tip-target");
      return view.$el.find(".delete-btn").attr("data-ui-tip-id", "delete-file");
    };

    ImageResourceListView.prototype._clickOnItem = function(itemView) {
      return this.trigger("resource-selected", itemView.model);
    };

    ImageResourceListView.prototype._clickOnDeleteItem = function(itemView) {
      return this.trigger("resource-deleted", itemView.model);
    };

    ImageResourceListView.prototype.refresh = function(callback) {
      var _this = this;
      this.showOverlay("loading");
      return this.collection.fetch({
        success: function() {
          _this.render();
          if (callback) {
            return callback();
          }
        }
      });
    };

    return ImageResourceListView;

  })(quadrigram.Views.LoadableCollectionView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.SaveAsDialog = (function(_super) {
    __extends(SaveAsDialog, _super);

    function SaveAsDialog() {
      this.saveClicked = __bind(this.saveClicked, this);
      this.cancelClicked = __bind(this.cancelClicked, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = SaveAsDialog.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SaveAsDialog.prototype.template = JST['app/scripts/templates/UI/dialogs/saveAsDialog.hbs'];

    SaveAsDialog.prototype.title = "Save as...";

    SaveAsDialog.prototype.width = 400;

    SaveAsDialog.prototype.viewWillRender = function() {
      var _this = this;
      this.buttons = {
        "Ok": {
          click: function() {
            _this.saveClicked();
            return _this.close();
          },
          text: 'OK',
          "class": 'ok-button'
        }
      };
      switch (this.options.type) {
        case "saveas":
          return this.title = "Save as...";
        case "rename":
          return this.title = "Rename...";
        case "save":
          return this.title = "Save";
      }
    };

    SaveAsDialog.prototype.viewDidRender = function() {
      var _this = this;
      this.$el.find(".pname-input").qmInput();
      this.$el.find(".pname-input").val(quadrigram.router.dataModels.currentProject.get("pname"));
      this.$el.find(".pname-input").on("qm:enter", function() {
        _this.saveClicked();
        return _this.close();
      });
      return this.$el.find(".pname-input").focus();
    };

    SaveAsDialog.prototype.cancelClicked = function() {
      return this.close();
    };

    SaveAsDialog.prototype.saveClicked = function() {
      var opt;
      opt = {};
      if (this.$el.find(".pname-input")[0].value != null) {
        opt.newName = this.$el.find(".pname-input")[0].value;
      }
      return this.options.callBack(opt);
    };

    return SaveAsDialog;

  })(quadrigram.Views.Dialog);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ShareDialog = (function(_super) {
    __extends(ShareDialog, _super);

    function ShareDialog() {
      this.showMessageError = __bind(this.showMessageError, this);
      this.shareClicked = __bind(this.shareClicked, this);
      this.cancelClicked = __bind(this.cancelClicked, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = ShareDialog.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ShareDialog.prototype.template = JST['app/scripts/templates/UI/dialogs/shareDialog.hbs'];

    ShareDialog.prototype.title = "Share the project";

    ShareDialog.prototype.width = 400;

    ShareDialog.prototype.viewWillRender = function() {
      var _this = this;
      this.buttons = {
        "Ok": {
          click: function() {
            return _this.shareClicked();
          },
          text: 'OK',
          "class": 'ok-button'
        }
      };
      return this.title = "Share the project";
    };

    ShareDialog.prototype.viewDidRender = function() {
      this.emailList = JSON.parse(localStorage.getItem('emailList'));
      if (!this.emailList || this.emailList === "") {
        this.emailList = [];
      }
      this.tokenfield = this.$('#tokenfield').tokenfield({
        autocomplete: {
          source: this.emailList,
          delay: 100
        }
      }).on('tokenfield:createdtoken', function(e) {
        var re, valid;
        re = /\S+@\S+\.\S+/;
        valid = re.test(e.attrs.value);
        if (!valid) {
          return $(e.relatedTarget).addClass('invalid');
        }
      });
      return this.$('#tokenfield').data('bs.tokenfield').$input.attr('autocomplete', false);
    };

    ShareDialog.prototype.cancelClicked = function() {
      return this.close();
    };

    ShareDialog.prototype.shareClicked = function() {
      var currentText, inputValue, inputValues, opt, re, valid, _i, _len;
      opt = {};
      opt.mails = [];
      inputValues = this.$("#tokenfield").tokenfield("getTokens");
      currentText = this.$('#tokenfield').data('bs.tokenfield').$input.val();
      if (currentText.length !== 0) {
        this.$('#tokenfield').tokenfield('createToken', currentText);
        inputValues = this.$("#tokenfield").tokenfield("getTokens");
      }
      re = /\S+@\S+\.\S+/;
      for (_i = 0, _len = inputValues.length; _i < _len; _i++) {
        inputValue = inputValues[_i];
        valid = re.test(inputValue.value);
        if (valid) {
          opt.mails.push(inputValue.value);
          if (this.emailList.indexOf(inputValue.value) === -1) {
            this.emailList.push(inputValue.value);
          }
        } else {
          this.showMessageError("Sorry, " + inputValue.value + " is not a valid email");
          return;
        }
      }
      if (opt.mails.length > 0) {
        this.options.callBack(opt);
        localStorage.setItem('emailList', JSON.stringify(this.emailList));
        return this.close();
      } else {
        return this.showMessageError("You must enter an email to share the project");
      }
    };

    ShareDialog.prototype.showMessageError = function(message) {
      return this.$(".message-error").css("display", "block").text(message);
    };

    return ShareDialog;

  })(quadrigram.Views.Dialog);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.RectangleAreaView = (function(_super) {
    __extends(RectangleAreaView, _super);

    function RectangleAreaView() {
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = RectangleAreaView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RectangleAreaView.prototype.template = JST['app/scripts/templates/visualizers/rectangle.hbs'];

    RectangleAreaView.prototype.viewWillRender = function() {
      this.values = [];
      return this.ids = [];
    };

    return RectangleAreaView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.SettingsDialog = (function(_super) {
    __extends(SettingsDialog, _super);

    function SettingsDialog() {
      this.saveChanges = __bind(this.saveChanges, this);
      this.showView = __bind(this.showView, this);
      this.handleClick = __bind(this.handleClick, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = SettingsDialog.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SettingsDialog.prototype.template = JST['app/scripts/templates/UI/dialogs/settingsDialog.hbs'];

    SettingsDialog.prototype.title = "Layout Settings";

    SettingsDialog.prototype.iconClass = "settings-icon";

    SettingsDialog.prototype.tabViews = {};

    SettingsDialog.prototype.width = 620;

    SettingsDialog.prototype.height = 450;

    SettingsDialog.prototype.viewWillRender = function() {
      var _this = this;
      return this.buttons = {
        "Ok": {
          click: function() {
            _this.saveChanges();
            return _this.close();
          },
          text: 'OK',
          "class": 'ok-button'
        }
        /*
        "Cancel":
          click: ()=>
            @close()
          text: 'Cancel'
          class:'cancel-button'
        */

      };
    };

    SettingsDialog.prototype.viewDidRender = function() {
      this.$el.find(".settings-tab-btn").on("click", this.handleClick);
      this.tabViews["layout"] = new quadrigram.Views.LayoutSettings(new Backbone.Model);
      this.$el.find(".settings-container").append(this.tabViews["layout"].$el);
      this.tabViews["layout"].render();
      this.tabViews["style"] = new quadrigram.Views.StyleSettings(new Backbone.Model);
      this.tabViews["style"].render();
      this.$el.find(".settings-container").append(this.tabViews["style"].$el);
      this.tabViews["tooltip"] = new quadrigram.Views.TooltipSettings(new Backbone.Model);
      this.$el.find(".settings-container").append(this.tabViews["tooltip"].$el);
      this.tabViews["tooltip"].render();
      return this.showView("layout");
    };

    SettingsDialog.prototype.handleClick = function(e) {
      var tabId;
      tabId = $(e.target).attr("data-id");
      this.$el.find(".settings-tab-btn").removeClass('current-tab');
      $(e.target).addClass('current-tab');
      return this.showView(tabId);
    };

    SettingsDialog.prototype.showView = function(tabId) {
      var tabView, tabViewKey, _ref1;
      _ref1 = this.tabViews;
      for (tabViewKey in _ref1) {
        tabView = _ref1[tabViewKey];
        tabView.$el.hide();
      }
      this.currentView = this.tabViews[tabId];
      if (this.currentView) {
        this.currentView.$el.show();
        return this.currentView.showAsTab();
      }
    };

    SettingsDialog.prototype.saveChanges = function() {
      this.$el.find("input").trigger("focusout");
      quadrigram.tracker.sendEvent({
        event_type: 304
      });
      quadrigram.router.dataModels.currentProject.set("layout-settings", this.tabViews["layout"].tempSettings);
      return quadrigram.router.dataModels.currentProject.set("tooltip-settings", this.tabViews["tooltip"].tempSettings);
    };

    return SettingsDialog;

  })(quadrigram.Views.Dialog);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ToolsDragList = (function(_super) {
    __extends(ToolsDragList, _super);

    function ToolsDragList() {
      _ref = ToolsDragList.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ToolsDragList.prototype.template = JST['app/scripts/templates/UI/toolsDragList.hbs'];

    ToolsDragList.prototype.events = {
      "mousedown .visualizers-menu a": "downOnBtn"
    };

    return ToolsDragList;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ToolsDragTipList = (function(_super) {
    __extends(ToolsDragTipList, _super);

    function ToolsDragTipList() {
      this.createViz = __bind(this.createViz, this);
      this.clickOnBtn = __bind(this.clickOnBtn, this);
      this.onLeave = __bind(this.onLeave, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = ToolsDragTipList.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ToolsDragTipList.prototype.template = JST['app/scripts/templates/UI/toolsDragTipList.hbs'];

    ToolsDragTipList.prototype.className = "tool-tooltip visualizers-menu";

    ToolsDragTipList.prototype.events = {
      "mousedown li .viz-drag-button": "downOnBtn",
      "mouseleave": "onLeave"
    };

    ToolsDragTipList.prototype.viewWillRender = function() {
      if (this.model.get("group") === "charts") {
        return this.templateData.dragOptions = [
          {
            "dataClass": "BarChart",
            "label": "Bar Chart",
            "icon": "chart_thumbnails/chart_thumbnails_bar-chart.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "LineChart",
            "label": "Line Chart",
            "icon": "chart_thumbnails/chart_thumbnails_line-chart.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "DonutChart",
            "label": "Donut Chart",
            "icon": "chart_thumbnails/chart_thumbnails_donut.svg",
            "stateClass": "disabled"
          }, {
            "dataClass": "ScatterPlot",
            "label": "Scatter Plot",
            "icon": "chart_thumbnails/chart_thumbnails_scatterplot.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "StackedAreaChart",
            "label": "Stacked Area Chart",
            "icon": "chart_thumbnails/chart_thumbnails_stacekd-area.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "StackedBarChart",
            "label": "Stacked Bar Chart",
            "icon": "chart_thumbnails/chart_thumbnails_stacked-bar-chart.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "GroupedBarChart",
            "label": "Grouped Bar Chart",
            "icon": "chart_thumbnails/chart_thumbnails_grouped-barchart.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "Histogram",
            "label": "Histogram",
            "icon": "chart_thumbnails/chart_thumbnails_histogram.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "StacksOnTime",
            "label": "Stacks On Time",
            "icon": "chart_thumbnails/shapes_thumbnails_rectangle_normal.svg",
            "stateClass": "disabled"
          }, {
            "dataClass": "PointsInAMap",
            "label": "Points In A Map",
            "icon": "chart_thumbnails/chart_thumbnails_points-in-map.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "HeatMap",
            "label": "Heat Map",
            "icon": "chart_thumbnails/chart_thumbnails_heatmap.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "TreeMap",
            "label": "Quadrification",
            "icon": "chart_thumbnails/chart_thumbnails_tree-map.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "NetworkVisualizer",
            "label": "Network",
            "icon": "chart_thumbnails/chart_thumbnails_network.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "Deondogram",
            "label": "Deondogram",
            "icon": "chart_thumbnails/shapes_thumbnails_rectangle_normal.svg",
            "stateClass": "disabled"
          }, {
            "dataClass": "RadarChart",
            "label": "Radar Chart",
            "icon": "chart_thumbnails/chart_thumbnails_radar.svg",
            "stateClass": "disabled"
          }, {
            "dataClass": "PictoGram",
            "label": "Pictogram",
            "icon": "chart_thumbnails/chart_thumbnails_pictogram.svg",
            "stateClass": "disabled"
          }
        ];
      } else if (this.model.get("group") === "text") {
        return this.templateData.dragOptions = [
          {
            "dataClass": "Title112",
            "label": "Title 112pt",
            "icon": "text_thumbnails/Title112pt_Thmbnail.png"
          }, {
            "dataClass": "Title56",
            "label": "Title 56pt",
            "icon": "text_thumbnails/Title56pt_Thmbnail.png"
          }, {
            "dataClass": "Title45",
            "label": "Title 45pt",
            "icon": "text_thumbnails/Title45pt_Thmbnail.png"
          }, {
            "dataClass": "Subtitle36",
            "label": "Subtitle 36pt",
            "icon": "text_thumbnails/Subtitle34pt_Thmbnail.png"
          }, {
            "dataClass": "Subtitle24",
            "label": "Subtitle 24pt",
            "icon": "text_thumbnails/Subtitle24pt_Thmbnail.png"
          }, {
            "dataClass": "Quote18",
            "label": "Quote 18pt",
            "icon": "text_thumbnails/Quote18pt_Thmbnail.png"
          }, {
            "dataClass": "Body16",
            "label": "Body Text 16pt",
            "icon": "text_thumbnails/Bodytext_16pt_Thmbnail.png"
          }, {
            "dataClass": "Caption12",
            "label": "Caption 12pt",
            "icon": "text_thumbnails/Caption12pt_Thmbnail.png"
          }, {
            "dataClass": "Footnote12",
            "label": "Footnote 12pt",
            "icon": "text_thumbnails/Footnote_Thmbnail.png"
          }
        ];
      } else if (this.model.get("group") === "draw") {
        return this.templateData.dragOptions = [
          {
            "dataClass": "RectangleArea",
            "label": "Rectangle",
            "icon": "shape_thumbnails/shapes_thumbnails_rectangle.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "EllipseShape",
            "label": "Ellipse",
            "icon": "shape_thumbnails/shapes_thumbnails_ellipse.svg",
            "stateClass": "disabled"
          }, {
            "dataClass": "LineShape",
            "label": "Line",
            "icon": "shape_thumbnails/shapes_thumbnails_line.svg",
            "stateClass": "disabled"
          }, {
            "dataClass": "ArrowShape",
            "label": "Arrow",
            "icon": "shape_thumbnails/shapes_thumbnails_arrow.svg",
            "stateClass": "disabled"
          }
        ];
      } else if (this.model.get("group") === "media") {
        return this.templateData.dragOptions = [
          {
            "dataClass": "ImageControl",
            "label": "Image",
            "icon": "control_thumbnails/media_thumbnails_image.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "YoutubeControl",
            "label": "Video",
            "icon": "control_thumbnails/media_thumbnails_video.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "IFrameControl",
            "label": "IFrame",
            "icon": "control_thumbnails/media_thumbnails_iframe.svg",
            "stateClass": "enabled"
          }
        ];
      } else if (this.model.get("group") === "controls") {
        return this.templateData.dragOptions = [
          {
            "dataClass": "ListChart",
            "label": "List",
            "icon": "control_thumbnails/controls_thumbnails_list.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "DropDown",
            "label": "Dropdown",
            "icon": "control_thumbnails/controls_thumbnails_dropdown.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "LinkControl",
            "label": "Link",
            "icon": "control_thumbnails/controls_thumbnails_link.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "SliderControl",
            "label": "Slider",
            "icon": "control_thumbnails/controls_thumbnails_slider.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "RangeControl",
            "label": "Range selector",
            "icon": "control_thumbnails/controls_thumbnails_range-selector.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "PlayPauseControl",
            "label": "Animator",
            "icon": "control_thumbnails/controls_thumbnails_animator.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "DynamicTextControl",
            "label": "Dynamic text",
            "icon": "control_thumbnails/controls_thumbnails_dynamic-text.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "LegendControl",
            "label": "Legend",
            "icon": "control_thumbnails/controls_thumbnails_legend.svg",
            "stateClass": "enabled"
          }, {
            "dataClass": "ShareButtonsControl",
            "label": "Share buttons",
            "icon": "control_thumbnails/media_thumbnails_sharebuttons.svg",
            "stateClass": "enabled"
          }
        ];
      }
    };

    ToolsDragTipList.prototype.viewDidRender = function() {};

    ToolsDragTipList.prototype.downOnBtn = function(e) {
      var p0,
        _this = this;
      e.preventDefault();
      p0 = {
        "x": e.pageX,
        "y": e.pageY
      };
      this.$el.mousemove(function(em) {
        var d, p1;
        p1 = {
          "x": em.pageX,
          "y": em.pageY
        };
        d = Math.sqrt(Math.pow(p1.x - p0.x, 2) + Math.pow(p1.y - p0.y, 2));
        if (d > 5) {
          _this.$el.unbind("mousemove");
          _this.$el.unbind("mouseup");
          return _this.createViz(e, "float");
        }
      });
      return this.$el.mouseup(function() {
        _this.$el.unbind("mousemove");
        _this.$el.unbind("mouseup");
        return _this.createViz(e, "scroll");
      });
    };

    ToolsDragTipList.prototype.onLeave = function(ev) {
      return $(window).trigger("tools:leave");
    };

    ToolsDragTipList.prototype.clickOnBtn = function(e) {};

    ToolsDragTipList.prototype.createViz = function(e, addMode) {
      var chartName, options;
      options = {};
      options.iconPath = $(e.currentTarget).find("img").attr("src");
      options.initialPos = {
        "x": e.clientX,
        "y": e.clientY
      };
      if (this.model.get("group") !== "text") {
        chartName = $(e.currentTarget).attr("data-class");
        quadrigram.router.dataModels.currentProject.createVisualizer(chartName, addMode, options);
      } else if (this.model.get("group") === "text") {
        options.textType = $(e.currentTarget).attr("data-class");
        quadrigram.router.dataModels.currentProject.createVisualizer("TextArea", addMode, options);
      }
      return $(window).trigger("tools:leave");
    };

    return ToolsDragTipList;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.User = (function(_super) {
    __extends(User, _super);

    function User() {
      this.defaultErrorHandler = __bind(this.defaultErrorHandler, this);
      this.url = __bind(this.url, this);
      _ref = User.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    User.prototype.url = function() {
      quadrigram.router.performance.trackStep("Start Loading user", ["user", "load", "qdr"], {});
      return this.instanceUrl;
    };

    User.prototype.initialize = function() {
      this.bind("error", this.defaultErrorHandler);
      return this.instanceUrl = quadrigram.baseUrl + "rs/user/profile";
    };

    User.prototype.defaults = {};

    User.prototype.defaultErrorHandler = function(model, error) {
      if (error.status === 401 || error.status === 403 || error.status === 500 || error.status === 503) {
        window.location.href = quadrigram.webUrl;
      }
      if (error.status === 423) {
        return quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
          message: 2,
          type: 1,
          priority: 1,
          timeout: 0,
          mode: 0,
          "class": "userError"
        });
      }
    };

    User.prototype.validate = function(attrs, options) {};

    User.prototype.parse = function(response, options) {
      var content;
      if (response.code === 200) {
        quadrigram.router.performance.trackStep("user loaded", ["user", "load", "qdr"], {});
        content = response.body;
      } else {
        if (response.code === 423) {
          quadrigram.router.appViews.loaderView.trigger("loaderMessage", {
            message: 2,
            type: 1,
            priority: 1,
            timeout: 0,
            mode: 0,
            "class": "userError"
          });
        } else {
          elog("El usuario no está autentificado");
          window.location.href = quadrigram.webUrl;
        }
      }
      return content;
    };

    return User;

  })(Backbone.Model);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ExpressionPart = (function(_super) {
    __extends(ExpressionPart, _super);

    function ExpressionPart() {
      _ref = ExpressionPart.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExpressionPart.prototype.undoableEvents = ["change:selected"];

    ExpressionPart.prototype.bubblingEvents = ["change:selected"];

    return ExpressionPart;

  })(quadrigram.Models.QModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Collections.ExpressionPartCollection = (function(_super) {
    __extends(ExpressionPartCollection, _super);

    function ExpressionPartCollection() {
      this.add = __bind(this.add, this);
      this.initialize = __bind(this.initialize, this);
      _ref = ExpressionPartCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExpressionPartCollection.prototype.model = quadrigram.Models.ExpressionPart;

    ExpressionPartCollection.prototype.initialize = function(options) {};

    ExpressionPartCollection.prototype.add = function(model) {
      return ExpressionPartCollection.__super__.add.apply(this, arguments);
    };

    return ExpressionPartCollection;

  })(Backbone.Collection);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ExpressionPartView = (function(_super) {
    __extends(ExpressionPartView, _super);

    function ExpressionPartView() {
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = ExpressionPartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExpressionPartView.prototype.template = JST['app/scripts/templates/blocks/operators/expressionPart.hbs'];

    ExpressionPartView.prototype.optionTemplate = JST['app/scripts/templates/blocks/operators/operatorOptions.hbs'];

    ExpressionPartView.prototype.className = "expression-part";

    ExpressionPartView.prototype.viewDidRender = function() {
      var part,
        _this = this;
      part = this.model;
      this.$el.empty();
      if (part.get("type") === "slot") {
        this.slotView = new quadrigram.Views.SlotView({
          model: part.get("ownerOperator").get("slotsCollection").where({
            "slotId": part.get("partId")
          })[0],
          binding: false
        });
        this.slotView.functionAvailable = false;
        this.slotView.render();
        return this.$el.append(this.slotView.el);
        /*
        if part.get("updateDynamic")?
          ##WILL LEAK MEMEORY!!!
          @slotView.model.on("change childModified",()=>
            # log "Slot changed"
            if part.get("ownerOperator")?
              part.get("ownerOperator").updateDynamicParts()
          )
        */

      } else if (part.get("type") === "label") {
        return this.$el.append('<span class="operation-name">' + part.get("label") + '</span>');
      } else if (part.get("type") === "dynamic" && !part.get("hidden")) {
        this.optionSelector = $($.parseHTML(this.optionTemplate(part.toJSON())));
        this.$el.append(this.optionSelector);
        if (part.get("options").length > 0 && (part.get("selected") != null)) {
          this.optionSelector.find("option[data-opt-id='" + part.get("selected").optId + "']").attr("selected", "selected");
        }
        /*
        @optionSelector.on("change", (e)=>
          # log "part of expression changed",part,e.currentTarget
        
          selectedOption = $.grep(part.get("options"),(o)=>
            o.optId == $(e.currentTarget).find("option:selected").attr("data-opt-id")
          )[0]
        
        
          part.get("ownerOperator").changeExpressionPart($(e.currentTarget).attr("data-id"),selectedOption)
          ##WARNING: may not needed on option change, only on slot change...
          #part.get("ownerOperator").updateDynamicParts()
        )
        */

        this.$el.find("select").selectmenu({
          width: 100,
          change: function(e, ui) {
            var selectedOption;
            selectedOption = $.grep(part.get("options"), function(o) {
              return o.optId === ui.item.element.attr("data-opt-id");
            })[0];
            return part.get("ownerOperator").changeExpressionPart(ui.item.element.closest("select").attr("data-id"), selectedOption);
          }
        });
        return this.$el.find(".ui-selectmenu-button").addClass("expression-part-selector");
      }
    };

    ExpressionPartView.prototype.viewWillRemove = function() {
      if (this.slotView) {
        this.slotView.remove();
      }
      if (this.optionSelector) {
        return this.optionSelector.off("change");
      }
    };

    return ExpressionPartView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ExpressionPartCollectionView = (function(_super) {
    __extends(ExpressionPartCollectionView, _super);

    function ExpressionPartCollectionView() {
      this.updateButton = __bind(this.updateButton, this);
      this.elementViewDidRender = __bind(this.elementViewDidRender, this);
      this.handleKeyUp = __bind(this.handleKeyUp, this);
      this.handleKeyDown = __bind(this.handleKeyDown, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = ExpressionPartCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExpressionPartCollectionView.prototype.template = JST['app/scripts/templates/blocks/operators/expressionPartCollection.hbs'];

    ExpressionPartCollectionView.prototype.modelView = quadrigram.Views.ExpressionPartView;

    ExpressionPartCollectionView.prototype.bindModelViews = true;

    ExpressionPartCollectionView.prototype.addButtonTemplate = JST['app/scripts/templates/blocks/operators/addLoopButton.hbs'];

    ExpressionPartCollectionView.prototype.className = "expression-collection";

    ExpressionPartCollectionView.prototype.viewDidRender = function() {
      return this.updateButton();
    };

    ExpressionPartCollectionView.prototype.handleKeyDown = function(e) {
      if (event.shiftKey) {
        if (this.model.get("operator").hasLoopGroup()) {
          log("shift pressed");
          return this.$el.find(".add-more").addClass("remove-state");
        }
      }
    };

    ExpressionPartCollectionView.prototype.handleKeyUp = function(e) {
      if (event.shiftKey) {
        log("shift unpressed");
      }
      return this.$el.find(".add-more").removeClass("remove-state");
    };

    ExpressionPartCollectionView.prototype.elementViewDidRender = function() {
      return this.updateButton();
    };

    ExpressionPartCollectionView.prototype.updateButton = function() {
      var _this = this;
      if (this.model.get("operator").getOperationClass().loopGroup) {
        if (!this.addButton) {
          this.addButton = $(this.addButtonTemplate());
          this.addButton.on("click", function() {
            if (_this.addButton.find(".add-more").hasClass("remove-state")) {
              return _this.model.get("operator").removeLoopGroup();
            } else {
              return _this.model.get("operator").addLoopGroup();
            }
          });
        }
        return this.$el.append(this.addButton);
      } else {
        if (this.addButton) {
          return this.addButton.detach();
        }
      }
    };

    return ExpressionPartCollectionView;

  })(Backbone.CollectionView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.RectangleAreaModel = (function(_super) {
    __extends(RectangleAreaModel, _super);

    function RectangleAreaModel() {
      _ref = RectangleAreaModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RectangleAreaModel.behaviors = ["quadrigram.Models.LayoutBehavior"];

    RectangleAreaModel.meta = {
      "name": "Rectangle",
      "properties": {}
    };

    RectangleAreaModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(RectangleAreaModel.meta, RectangleAreaModel.behaviors);
      return output;
    };

    return RectangleAreaModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TreeMapModel = (function(_super) {
    __extends(TreeMapModel, _super);

    function TreeMapModel() {
      _ref = TreeMapModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TreeMapModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.OneDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.SvgBehavior", "quadrigram.Models.TooltipBehavior"];

    TreeMapModel.meta = {
      "name": "TreeMap",
      "properties": {
        "data": {
          "uiTipContent": "Insert a list of numbers to represent as rectangles",
          "label": "Area of each rectangle",
          "family": "data",
          "sortingWeight": "1",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example data"
              },
              "defaults": {
                "value": [
                  {
                    "id": "Region 1",
                    "value": 50
                  }, {
                    "id": "Region 2",
                    "value": 10
                  }, {
                    "id": "Region 3",
                    "value": 10
                  }, {
                    "id": "Region 4",
                    "value": 20
                  }, {
                    "id": "Region 5",
                    "value": 30
                  }, {
                    "id": "Region 6",
                    "value": 40
                  }, {
                    "id": "Region 7",
                    "value": 50
                  }, {
                    "id": "Region 8",
                    "value": 60
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each rectangle",
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(26,35,126),   rgb(13,113,146) 12.5%,  rgb(0,191,165)  25%,    rgb(127,204,109) 37.5%, rgb(253,216,53) 50%,     rgb(246,149,67) 62.5%,   rgb(239,83,80) 75%, rgb(187,48,80) 87.5%,    rgb(136,14,79) 100%)"
              }
            }
          }
        },
        "fillOpacities": {
          "label": "Fill opacity of each rectangle",
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "100"
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each rectangle",
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        },
        "lineThickness": {
          "label": "Outline thickness of each rectangle",
          "formats": {
            "Px": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "1px"
              }
            }
          }
        },
        "lineOpacities": {
          "label": "Outline opacity of each rectangle",
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "100"
              }
            }
          }
        },
        "marginItems": {
          "uiTipContent": "Defines the margin among items",
          "label": "Defines the margin among items",
          "family": "style",
          "sortingWeight": "28",
          "hidden": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "0px"
              }
            }
          }
        },
        "roundedCorners": {
          "uiTipContent": "Defines the radius of the corner",
          "label": "Defines the radius of the corner",
          "family": "style",
          "sortingWeight": "29",
          "hidden": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "0px"
              }
            }
          }
        },
        "textMode": {
          "label": "Display labels",
          "uiTipContent": "Defines how to show labels on each box",
          "family": "style",
          "sortingWeight": "30",
          "hidden": true,
          "formats": {
            "Options": {
              "options": {
                "value": ["No labels", "Small labels", "Labels fit to the rectangle area"]
              },
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "No labels"
              }
            }
          }
        },
        "textColors": {
          "label": "Text color of each rectangle",
          "uiTipContent": "Text color of each rectangle",
          "sortingWeight": "31",
          "family": "style",
          "hidden": true,
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        },
        "transitionMode": {
          "label": "Transition algorithm",
          "uiTipContent": "Choose between a geometric transition or a data interpolation",
          "family": "style",
          "sortingWeight": "999",
          "hidden": true,
          "formats": {
            "Options": {
              "options": {
                "value": ["Geometric", "Data interpolation"]
              },
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "Geometric"
              }
            }
          }
        }
      }
    };

    TreeMapModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(TreeMapModel.meta, TreeMapModel.behaviors);
      return output;
    };

    return TreeMapModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PointsInAMapModel = (function(_super) {
    __extends(PointsInAMapModel, _super);

    function PointsInAMapModel() {
      _ref = PointsInAMapModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PointsInAMapModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.PlacesDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.CirclesBehavior", "quadrigram.Models.MapBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.MapTooltipBehavior"];

    PointsInAMapModel.meta = {
      "name": "PointsInAMap",
      "properties": {
        "places": {
          "uiTipContent": "Insert a list of latitudes and a list of longitudes to represent theese cordinates in the map",
          "sortingWeight": "1",
          "label": "Places",
          "family": "data",
          "hidden": false,
          "formats": {
            "Place": {
              "multiValues": {
                "lat": true,
                "lon": true
              },
              "defaults": {
                "lon": [
                  {
                    "id": "Barcelona",
                    "value": 2.1833
                  }, {
                    "id": "Paris",
                    "value": 2.3508
                  }, {
                    "id": "London",
                    "value": 0.1275
                  }, {
                    "id": "Rome",
                    "value": 12.5000
                  }
                ],
                "lat": [
                  {
                    "id": "Barcelona",
                    "value": 41.3833
                  }, {
                    "id": "Paris",
                    "value": 48.8567
                  }, {
                    "id": "London",
                    "value": 51.5072
                  }, {
                    "id": "Rome",
                    "value": 41.9000
                  }
                ]
              }
            },
            "PlaceUTM": {
              "multiValues": {
                "utmx": true,
                "utmy": true,
                "utmzone": true,
                "hemisphere": true
              },
              "options": {
                "hemisphere": ["S", "N"]
              },
              "defaults": {
                "utmx": [
                  {
                    "id": "Barcelona",
                    "value": 431713.4
                  }, {
                    "id": "Paris",
                    "value": 452379.9
                  }, {
                    "id": "London",
                    "value": 300662.1
                  }, {
                    "id": "Rome",
                    "value": 292624.9
                  }
                ],
                "utmy": [
                  {
                    "id": "Barcelona",
                    "value": 4581630.2
                  }, {
                    "id": "Paris",
                    "value": 5411729.2
                  }, {
                    "id": "London",
                    "value": 5710142.3
                  }, {
                    "id": "Rome",
                    "value": 4641695.9
                  }
                ],
                "utmzone": [
                  {
                    "id": "Barcelona",
                    "value": 31
                  }, {
                    "id": "Paris",
                    "value": 31
                  }, {
                    "id": "London",
                    "value": 31
                  }, {
                    "id": "Rome",
                    "value": 33
                  }
                ]
              }
            }
          }
        },
        "values": {
          "uiTipContent": "Insert a list of values that will determine the size of each point",
          "label": "Point sizes",
          "family": "data",
          "sortingWeight": "3",
          "hidden": false,
          "formats": {
            "PxByValues": {
              "defaultsNames": {
                "values": "Dummy radius"
              },
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "min": 5,
                "max": 10,
                "values": 10
              }
            },
            "PxByValuesAndDomain": {
              "defaultsNames": {
                "values": "Dummy radius"
              },
              "multiValues": {
                "values": true,
                "min": false,
                "max": false,
                "minValues": false,
                "maxValues": false
              },
              "defaults": {
                "min": 5,
                "max": 10,
                "minValues": 0,
                "maxValues": "",
                "values": 10
              }
            }
          }
        },
        "labels": {
          "uiTipContent": "Insert a list of texts that will determine the name of each point",
          "label": "Items Labels",
          "family": "data",
          "sortingWeight": "4",
          "hidden": false,
          "internal": true,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": "Barcelona"
                  }, {
                    "id": "2",
                    "value": "Paris"
                  }, {
                    "id": "3",
                    "value": "London"
                  }, {
                    "id": "4",
                    "value": "Rome"
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each point",
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(26,35,126),   rgb(13,113,146) 12.5%,  rgb(0,191,165)  25%,    rgb(127,204,109) 37.5%, rgb(253,216,53) 50%,     rgb(246,149,67) 62.5%,   rgb(239,83,80) 75%, rgb(187,48,80) 87.5%,    rgb(136,14,79) 100%)"
              }
            },
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    id: "0",
                    value: "#8D91B9"
                  }, {
                    id: "1",
                    value: "#989FC9"
                  }, {
                    id: "2",
                    value: "#CFD4EB"
                  }, {
                    id: "3",
                    value: "#8D91B9"
                  }
                ]
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each point",
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        },
        "bkg_color": {
          "hidden": true,
          "formats": {
            "Color": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#d9d9d9"
              }
            }
          }
        }
      }
    };

    PointsInAMapModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(PointsInAMapModel.meta, PointsInAMapModel.behaviors);
      return output;
    };

    return PointsInAMapModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.StackedBarChartModel = (function(_super) {
    __extends(StackedBarChartModel, _super);

    function StackedBarChartModel() {
      _ref = StackedBarChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StackedBarChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TwoDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.AxisBehavior", "quadrigram.Models.StackedTooltipBehavior"];

    StackedBarChartModel.meta = {
      "name": "StackedBarChart",
      "properties": {
        "data": {
          "uiTipContent": "Insert a block with columns of numbers. Each column will be represented as a stacked bar",
          "label": "Data to plot in bar",
          "family": "data",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example data"
              },
              "defaults": {
                "value": [
                  {
                    "id": 0,
                    "name": "dummy data 1",
                    "value": [
                      {
                        "id": 1,
                        "value": 20
                      }, {
                        "id": 2,
                        "value": 10
                      }, {
                        "id": 3,
                        "value": 15
                      }, {
                        "id": 4,
                        "value": 30
                      }, {
                        "id": 5,
                        "value": 20
                      }, {
                        "id": 6,
                        "value": 50
                      }, {
                        "id": 7,
                        "value": 50
                      }, {
                        "id": 8,
                        "value": 60
                      }
                    ]
                  }, {
                    "id": 1,
                    "name": "dummy data 2",
                    "value": [
                      {
                        "id": 1,
                        "value": 40
                      }, {
                        "id": 2,
                        "value": 10
                      }, {
                        "id": 3,
                        "value": 32
                      }, {
                        "id": 4,
                        "value": 21
                      }, {
                        "id": 5,
                        "value": 31
                      }, {
                        "id": 6,
                        "value": 40
                      }, {
                        "id": 7,
                        "value": 19
                      }, {
                        "id": 8,
                        "value": 32
                      }
                    ]
                  }, {
                    "id": 2,
                    "name": "dummy data 3",
                    "value": [
                      {
                        "id": 1,
                        "value": 10
                      }, {
                        "id": 2,
                        "value": 20
                      }, {
                        "id": 3,
                        "value": 21
                      }, {
                        "id": 4,
                        "value": 14
                      }, {
                        "id": 5,
                        "value": 31
                      }, {
                        "id": 6,
                        "value": 12
                      }, {
                        "id": 7,
                        "value": 43
                      }, {
                        "id": 8,
                        "value": 22
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each area",
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(255,82,82),   rgb(128,137,124) 16.67%, rgb(0,191,165) 33.33%,  rgb(127,204,109) 50%,   rgb(253,216,53) 66.67%,  rgb(127,181,144) 83.33%, rgb(0,145,234) 100%)"
              }
            },
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    id: "0",
                    value: "#8D91BC"
                  }, {
                    id: "1",
                    value: "#989FCC"
                  }, {
                    id: "2",
                    value: "#CFD4EC"
                  }
                ]
              }
            }
          }
        },
        "lineOpacities": {
          "label": "Line opacity of each bar",
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 0
              }
            }
          }
        },
        "selectionLineThickness": {
          "formats": {
            "Number": {
              "defaults": {
                "value": "1"
              }
            }
          }
        },
        "IdsOnAxis": {
          "label": "Direction of the bars",
          "family": "axis",
          "sortingWeight": "10",
          "hidden": false,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "Vertical"
              },
              "options": {
                "value": ["Vertical", "Horizontal"]
              }
            }
          }
        },
        "gapBetweenBars": {
          "label": "Gap between bars",
          "family": "style",
          "sortingWeight": "29",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "10"
              }
            }
          }
        }
      }
    };

    StackedBarChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(StackedBarChartModel.meta, StackedBarChartModel.behaviors);
      return output;
    };

    return StackedBarChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.GroupedBarChartModel = (function(_super) {
    __extends(GroupedBarChartModel, _super);

    function GroupedBarChartModel() {
      _ref = GroupedBarChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GroupedBarChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TwoDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.AxisBehavior", "quadrigram.Models.StackedTooltipBehavior"];

    GroupedBarChartModel.meta = {
      name: "GroupedBarChart",
      properties: {
        data: {
          uiTipContent: "Insert a block with columns of numbers. Each column will be represented as a bar and will be grouped together.",
          label: "Data to plot in grouped bars",
          family: "data",
          hidden: false,
          formats: {
            Number: {
              multiValues: {
                value: true
              },
              defaultsNames: {
                value: "Example data"
              },
              defaults: {
                value: [
                  {
                    id: 0,
                    name: "dummy data 1",
                    value: [
                      {
                        id: 0,
                        value: 20
                      }, {
                        id: 1,
                        value: 10
                      }, {
                        id: 2,
                        value: 15
                      }, {
                        id: 3,
                        value: 30
                      }
                    ]
                  }, {
                    id: 1,
                    name: "dummy data 2",
                    value: [
                      {
                        id: 0,
                        value: 40
                      }, {
                        id: 1,
                        value: 10
                      }, {
                        id: 2,
                        value: 32
                      }, {
                        id: 3,
                        value: 21
                      }
                    ]
                  }, {
                    id: 2,
                    name: "dummy data 3",
                    value: [
                      {
                        id: 0,
                        value: 10
                      }, {
                        id: 1,
                        value: 20
                      }, {
                        id: 2,
                        value: 21
                      }, {
                        id: 3,
                        value: 14
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        IdsOnAxis: {
          label: "Direction of the bars",
          family: "axis",
          sortingWeight: 10,
          hidden: false,
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Vertical"
              },
              options: {
                value: ["Vertical", "Horizontal"]
              }
            }
          }
        },
        fillColors: {
          label: "Fill colors of each area",
          formats: {
            ColorsByScale: {
              multiValues: {
                value: true
              },
              defaults: {
                value: "linear-gradient(90deg, rgb(255,82,82),   rgb(128,137,124) 16.67%, rgb(0,191,165) 33.33%,  rgb(127,204,109) 50%,   rgb(253,216,53) 66.67%,  rgb(127,181,144) 83.33%, rgb(0,145,234) 100%)"
              }
            },
            Color: {
              multiValues: {
                value: true
              },
              defaults: {
                value: [
                  {
                    id: 0,
                    value: "8D91BC"
                  }, {
                    id: 1,
                    value: "989FCC"
                  }, {
                    id: 2,
                    value: "CFD4EC"
                  }
                ]
              }
            }
          }
        },
        lineOpacities: {
          label: "Line opacity of each bar",
          formats: {
            Percentage: {
              multiValues: {
                value: true
              },
              defauts: {
                value: 0
              }
            }
          }
        },
        selectionLineThickness: {
          formats: {
            Number: {
              defaults: {
                value: 1
              }
            }
          }
        },
        gapBetweenGroups: {
          label: "Gap between bar groups",
          family: "style",
          sortingWeight: 29,
          hidden: true,
          formats: {
            Percentage: {
              multiValues: {
                value: true
              },
              defaults: {
                value: 10
              }
            }
          }
        }
      }
    };

    GroupedBarChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(GroupedBarChartModel.meta, GroupedBarChartModel.behaviors);
      return output;
    };

    return GroupedBarChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.StacksOnTimeModel = (function(_super) {
    __extends(StacksOnTimeModel, _super);

    function StacksOnTimeModel() {
      _ref = StacksOnTimeModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StacksOnTimeModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.AxisBehavior", "quadrigram.Models.TooltipBehavior"];

    StacksOnTimeModel.meta = {
      "name": "StacksOnTime",
      "properties": {
        "dates": {
          "label": "Dates",
          "family": "data",
          "hidden": false,
          "formats": {
            "Date": {
              "defaults": {
                "value": [
                  {
                    id: "0",
                    value: "01/10/2014"
                  }, {
                    id: "1",
                    value: "02/09/2014"
                  }, {
                    id: "2",
                    value: "04/10/2014"
                  }, {
                    id: "3",
                    value: "01/11/2014"
                  }, {
                    id: "4",
                    value: "02/12/2014"
                  }, {
                    id: "5",
                    value: "14/11/2014"
                  }, {
                    id: "6",
                    value: "11/09/2014"
                  }, {
                    id: "7",
                    value: "24/11/2014"
                  }, {
                    id: "8",
                    value: "14/10/2014"
                  }, {
                    id: "9",
                    value: "01/11/2014"
                  }, {
                    id: "10",
                    value: "12/12/2014"
                  }, {
                    id: "11",
                    value: "30/10/2014"
                  }, {
                    id: "12",
                    value: "16/10/2014"
                  }, {
                    id: "13",
                    value: "02/12/2014"
                  }, {
                    id: "14",
                    value: "04/08/2014"
                  }, {
                    id: "15",
                    value: "01/08/2014"
                  }, {
                    id: "16",
                    value: "22/09/2014"
                  }, {
                    id: "17",
                    value: "01/08/2014"
                  }, {
                    id: "18",
                    value: "11/10/2014"
                  }, {
                    id: "19",
                    value: "03/12/2014"
                  }, {
                    id: "20",
                    value: "14/08/2014"
                  }, {
                    id: "21",
                    value: "01/12/2014"
                  }, {
                    id: "22",
                    value: "18/12/2014"
                  }, {
                    id: "23",
                    value: "29/09/2014"
                  }
                ]
              }
            }
          }
        },
        "objects": {
          "label": "names",
          "family": "data",
          "hidden": false,
          "formats": {
            "Text": {
              "defaults": {
                "value": [
                  {
                    id: "0",
                    value: "01/10/2014"
                  }, {
                    id: "1",
                    value: "02/10/2014"
                  }, {
                    id: "2",
                    value: "04/10/2014"
                  }, {
                    id: "3",
                    value: "01/11/2014"
                  }, {
                    id: "4",
                    value: "02/12/2014"
                  }, {
                    id: "5",
                    value: "14/10/2014"
                  }, {
                    id: "6",
                    value: "11/09/2014"
                  }, {
                    id: "7",
                    value: "24/11/2014"
                  }, {
                    id: "8",
                    value: "14/10/2014"
                  }, {
                    id: "9",
                    value: "01/11/2014"
                  }, {
                    id: "10",
                    value: "12/12/2014"
                  }, {
                    id: "11",
                    value: "30/10/2014"
                  }, {
                    id: "12",
                    value: "16/10/2014"
                  }, {
                    id: "13",
                    value: "02/10/2014"
                  }, {
                    id: "14",
                    value: "04/08/2014"
                  }, {
                    id: "15",
                    value: "01/08/2014"
                  }, {
                    id: "16",
                    value: "22/09/2014"
                  }, {
                    id: "17",
                    value: "01/10/2014"
                  }, {
                    id: "18",
                    value: "11/10/2014"
                  }, {
                    id: "19",
                    value: "03/12/2014"
                  }, {
                    id: "20",
                    value: "14/08/2014"
                  }, {
                    id: "21",
                    value: "01/12/2014"
                  }, {
                    id: "22",
                    value: "18/12/2014"
                  }, {
                    id: "23",
                    value: "29/09/2014"
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each item",
          "formats": {
            "Color": {
              "defaults": {
                "value": "#CCCCCC"
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each item",
          "formats": {
            "Color": {
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        }
      }
    };

    StacksOnTimeModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(StacksOnTimeModel.meta, StacksOnTimeModel.behaviors);
      return output;
    };

    return StacksOnTimeModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PieChartModel = (function(_super) {
    __extends(PieChartModel, _super);

    function PieChartModel() {
      _ref = PieChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PieChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.OneDimDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.SvgBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.TooltipBehavior"];

    PieChartModel.meta = {
      "name": "PieChart",
      "properties": {
        "data": {
          "uiTipContent": "Insert a list of numbers to represent as sectors",
          "label": "Size of each sector",
          "family": "data",
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    "id": 1,
                    "value": 50
                  }, {
                    "id": 2,
                    "value": 10
                  }, {
                    "id": 3,
                    "value": 10
                  }, {
                    "id": 4,
                    "value": 20
                  }, {
                    "id": 5,
                    "value": 30
                  }, {
                    "id": 6,
                    "value": 40
                  }, {
                    "id": 7,
                    "value": 50
                  }, {
                    "id": 8,
                    "value": 60
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each sector",
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    id: "0",
                    value: "#91BDDD"
                  }, {
                    id: "1",
                    value: "#3B4D5F"
                  }, {
                    id: "2",
                    value: "#29A089"
                  }, {
                    id: "3",
                    value: "#9154A2"
                  }, {
                    id: "4",
                    value: "#F1CA2D"
                  }, {
                    id: "5",
                    value: "#3D88BA"
                  }, {
                    id: "6",
                    value: "#E58C3B"
                  }, {
                    id: "7",
                    value: "#9EC39C"
                  }, {
                    id: "8",
                    value: "#C14C3E"
                  }
                ]
              }
            }
          }
        },
        "fillOpacities": {
          "label": "Fill opacity of each sector",
          "formats": {
            "multiValues": {
              "value": true
            },
            "Percentage": {
              "defaults": {
                "value": "100"
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each sector",
          "formats": {
            "multiValues": {
              "value": true
            },
            "Number": {
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        },
        "lineThickness": {
          "label": "Outline thickness of each sector",
          "formats": {
            "multiValues": {
              "value": true
            },
            "Number": {
              "defaults": {
                "value": "1"
              }
            }
          }
        },
        "lineOpacities": {
          "label": "Outline opacity of each sector",
          "formats": {
            "multiValues": {
              "value": true
            },
            "Percentage": {
              "defaults": {
                "value": "100"
              }
            }
          }
        }
      }
    };

    PieChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(PieChartModel.meta, PieChartModel.behaviors);
      return output;
    };

    return PieChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ScatterPlotModel = (function(_super) {
    __extends(ScatterPlotModel, _super);

    function ScatterPlotModel() {
      _ref = ScatterPlotModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ScatterPlotModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.ScatterDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.CirclesBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.SelectionSVGBehavior", "quadrigram.Models.AxisBehavior", "quadrigram.Models.TooltipBehavior"];

    ScatterPlotModel.meta = {
      "name": "ScatterPlot",
      "properties": {
        "dataXAxis": {
          "uiTipContent": "Insert a list of numbers that will determine the X coordinate of each point",
          "label": "Values at X Axis",
          "family": "data",
          "hidden": false,
          "sortingWeight": 1,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Dummy X data"
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": 50
                  }, {
                    "id": "2",
                    "value": 10
                  }, {
                    "id": "3",
                    "value": 10
                  }, {
                    "id": "4",
                    "value": 20
                  }, {
                    "id": "5",
                    "value": 30
                  }, {
                    "id": "6",
                    "value": 40
                  }, {
                    "id": "7",
                    "value": 50
                  }, {
                    "id": "8",
                    "value": 60
                  }
                ]
              }
            }
          }
        },
        "dataYAxis": {
          "uiTipContent": "Insert a list of numbers that will determine the Y coordinate of each point",
          "label": "Values at Y Axis",
          "family": "data",
          "hidden": false,
          "sortingWeight": 2,
          "formats": {
            "Number": {
              "defaultsNames": {
                "value": "Dummy Y data"
              },
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": 20
                  }, {
                    "id": "2",
                    "value": 30
                  }, {
                    "id": "3",
                    "value": 40
                  }, {
                    "id": "4",
                    "value": 60
                  }, {
                    "id": "5",
                    "value": 20
                  }, {
                    "id": "6",
                    "value": 80
                  }, {
                    "id": "7",
                    "value": 30
                  }, {
                    "id": "8",
                    "value": 20
                  }
                ]
              }
            }
          }
        },
        "dataRadius": {
          "uiTipContent": "Insert a list of numbers that will determine the radius of each point",
          "label": "Values as Radius of each dot",
          "family": "data",
          "hidden": false,
          "sortingWeight": 3,
          "formats": {
            "PxByValues": {
              "defaultsNames": {
                "values": "Dummy radius"
              },
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "min": 5,
                "max": 10,
                "values": [
                  {
                    "id": "1",
                    "value": 10
                  }, {
                    "id": "2",
                    "value": 60
                  }, {
                    "id": "3",
                    "value": 20
                  }, {
                    "id": "4",
                    "value": 30
                  }, {
                    "id": "5",
                    "value": 40
                  }, {
                    "id": "6",
                    "value": 10
                  }, {
                    "id": "7",
                    "value": 70
                  }, {
                    "id": "8",
                    "value": 30
                  }
                ]
              }
            },
            "PxByValuesAndDomain": {
              "defaultsNames": {
                "values": "Dummy radius"
              },
              "multiValues": {
                "values": true,
                "min": false,
                "minValues": false,
                "maxValues": false
              },
              "defaults": {
                "min": 5,
                "max": 10,
                "minValues": 0,
                "maxValues": "",
                "values": [
                  {
                    "id": "1",
                    "value": 10
                  }, {
                    "id": "2",
                    "value": 60
                  }, {
                    "id": "3",
                    "value": 20
                  }, {
                    "id": "4",
                    "value": 30
                  }, {
                    "id": "5",
                    "value": 40
                  }, {
                    "id": "6",
                    "value": 10
                  }, {
                    "id": "7",
                    "value": 70
                  }, {
                    "id": "8",
                    "value": 30
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each dot",
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(26,35,126),   rgb(13,113,146) 12.5%,  rgb(0,191,165)  25%,    rgb(127,204,109) 37.5%, rgb(253,216,53) 50%,     rgb(246,149,67) 62.5%,   rgb(239,83,80) 75%, rgb(187,48,80) 87.5%,    rgb(136,14,79) 100%)"
              }
            },
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#989FCC"
              }
            }
          }
        },
        "fillOpacities": {
          "label": "Fill opacity of each dot",
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "100"
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each dot",
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#ffffff"
              }
            }
          }
        },
        "lineThickness": {
          "label": "Outline thickness of each dot",
          "formats": {
            "Px": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "1px"
              }
            }
          }
        },
        "lineOpacities": {
          "label": "Outline opacity of each dot",
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "100"
              }
            }
          }
        },
        "tooltipValue": {
          "target": "xValue",
          "label": "Tooltip's X Value"
        },
        "axisLabels": {
          "internal": true
        },
        "tooltipValueY": {
          "target": "yValue",
          "label": "Tooltip's Y Value",
          "role": "value",
          "family": "tooltip",
          "hidden": false,
          "sortingWeight": "72",
          "multivalue": false,
          "formats": {
            "PrefixSufix": {
              "multiValues": {
                "prefix": false,
                "sufix": false
              },
              "defaults": {
                "label": "",
                "prefix": "",
                "sufix": ""
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "tooltipValueRadius": {
          "target": "radiusValue",
          "label": "Tooltip's Radius Value",
          "role": "value",
          "family": "tooltip",
          "hidden": false,
          "sortingWeight": "72",
          "multivalue": false,
          "formats": {
            "PrefixSufix": {
              "multiValues": {
                "prefix": false,
                "sufix": false
              },
              "defaults": {
                "label": "",
                "prefix": "",
                "sufix": ""
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        axisRange: {
          "uiTipContent": "Defines the visible range of values on X Axe",
          label: "Visible Range at X Axe"
        },
        axisYRange: {
          internal: false
        }
      }
    };

    ScatterPlotModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(ScatterPlotModel.meta, ScatterPlotModel.behaviors);
      return output;
    };

    return ScatterPlotModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.NetworkVisualizerModel = (function(_super) {
    __extends(NetworkVisualizerModel, _super);

    function NetworkVisualizerModel() {
      _ref = NetworkVisualizerModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NetworkVisualizerModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.SvgBehavior", "quadrigram.Models.NetworkDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.CirclesBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.RelationsBehavior", "quadrigram.Models.SelectionNetworkBehavior", "quadrigram.Models.ZoomableBehavior", "quadrigram.Models.NetworkTooltipBehavior"];

    NetworkVisualizerModel.meta = {
      "name": "Network",
      "properties": {
        "network": {
          "uiTipContent": "Insert a list of nodes and a its relations",
          "sortingWeight": "1",
          "label": "Network",
          "family": "data",
          "hidden": false,
          "formats": {
            "Network": {
              "multiValues": {
                "nodes": true,
                "relations": true
              },
              "defaults": {
                "nodes": [
                  {
                    "id": "name",
                    "name": "Names",
                    "value": [
                      {
                        "id": 1,
                        "value": "Node 1"
                      }, {
                        "id": 2,
                        "value": "Node 2"
                      }, {
                        "id": 3,
                        "value": "Node 3"
                      }, {
                        "id": 4,
                        "value": "Node 4"
                      }
                    ]
                  }, {
                    "id": "weight",
                    "name": "Weights",
                    "value": [
                      {
                        "id": 1,
                        "value": "3"
                      }, {
                        "id": 2,
                        "value": "5"
                      }, {
                        "id": 3,
                        "value": "2"
                      }, {
                        "id": 4,
                        "value": "4"
                      }
                    ]
                  }
                ],
                relations: [
                  {
                    "id": "name",
                    "name": "Names",
                    "value": [
                      {
                        "id": "1->2",
                        "value": "From Node 1 to Node 2"
                      }, {
                        "id": "1->3",
                        "value": "From Node 1 to Node 3"
                      }, {
                        "id": "2->4",
                        "value": "From Node 2 to Node 4"
                      }, {
                        "id": "3->2",
                        "value": "From Node 3 to Node 2"
                      }
                    ]
                  }, {
                    "id": "Weight",
                    "name": "Weights",
                    "value": [
                      {
                        "id": "1->2",
                        "value": "5"
                      }, {
                        "id": "1->3",
                        "value": "10"
                      }, {
                        "id": "2->4",
                        "value": "20"
                      }, {
                        "id": "3->2",
                        "value": "15"
                      }
                    ]
                  }, {
                    "id": "Origin",
                    "name": "Origin",
                    "value": [
                      {
                        "id": "1->2",
                        "value": "1"
                      }, {
                        "id": "1->3",
                        "value": "1"
                      }, {
                        "id": "2->4",
                        "value": "2"
                      }, {
                        "id": "3->2",
                        "value": "3"
                      }
                    ]
                  }, {
                    "id": "Destination",
                    "name": "Destination",
                    "value": [
                      {
                        "id": "1->2",
                        "value": "2"
                      }, {
                        "id": "1->3",
                        "value": "3"
                      }, {
                        "id": "2->4",
                        "value": "4"
                      }, {
                        "id": "3->2",
                        "value": "2"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "values": {
          "uiTipContent": "Insert a list of values that will determine the size of each node",
          "label": "Node Values",
          "family": "data",
          "sortingWeight": "3",
          "hidden": false,
          "formats": {
            "PxRange": {
              "multiValues": {
                "min": false,
                "max": false
              },
              "defaults": {
                "min": 5,
                "max": 10
              }
            },
            "PxByValues": {
              "defaultsNames": {
                "values": "Values"
              },
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "min": 5,
                "max": 10,
                "values": 10
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each node",
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(26,35,126),   rgb(13,113,146) 12.5%,  rgb(0,191,165)  25%,    rgb(127,204,109) 37.5%, rgb(253,216,53) 50%,     rgb(246,149,67) 62.5%,   rgb(239,83,80) 75%, rgb(187,48,80) 87.5%,    rgb(136,14,79) 100%)"
              }
            },
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#8D91BC"
              }
            },
            "ColorsByCategories": {
              "multiValues": {
                "colors": true,
                "categories": true
              },
              "idSource": {
                "colors": "categories"
              },
              "defaults": {
                "defaultColor": "#AAAAAA"
              }
            },
            "ColorsByValues": {
              "multiValues": {
                "values": true,
                "colorscale": false
              },
              "defaults": {
                "values": [
                  {
                    "id": "1",
                    "value": "1"
                  }, {
                    "id": "2",
                    "value": "2"
                  }, {
                    "id": "3",
                    "value": "3"
                  }, {
                    "id": "4",
                    "value": "4"
                  }, {
                    "id": "5",
                    "value": "5"
                  }
                ],
                "colorscale": "linear-gradient(90deg, rgb(207, 212, 236),rgb(141, 145, 188)  100%)"
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each node",
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        },
        "linePadding": {
          "uiTipContent": "Determines the the separation between nodes and relations",
          "label": "Link Padding",
          "sortingWeight": "0",
          "family": "style",
          "hidden": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "0px"
              }
            }
          }
        },
        /*
        "linkStrength":          
          "uiTipContent": "Sets the strength (rigidity) of links to the specified value in the range"
          "sortingWeight":"201"
          "label":"Link Strength"
          "family":"Network"
          "hidden": false
          "formats":
            "Percentage":
              "multiValues":
                  "value": false
              "defaults":
                "value":"50"
        */

        "charge": {
          "uiTipContent": "Controls how much all nodes repel each other",
          "sortingWeight": "202",
          "label": "Repulsion between nodes",
          "family": "Network",
          "hidden": false,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "30"
              }
            }
          }
        },
        /*
        "friction":
          "label": "Velocity decay",
          "uiTipContent": " at each tick of the simulation, the particle velocity is scaled by the specified friction. Thus, a value of 1 corresponds to a frictionless environment, while a value of 0 freezes all particles in place."
          "sortingWeight":"202"
          "family":"Network"
          "hidden": false
          "formats":
            "Percentage":
              "multiValues":
                  "value": false
              "defaults":
                "value":"90"
        */

        "linkDistance": {
          "label": "Attraction between related nodes",
          "uiTipContent": " Controls how much connected nodes atract each other",
          "sortingWeight": "204",
          "family": "Network",
          "hidden": false,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "50"
              }
            }
          }
        },
        "draggableNodes": {
          "uiTipContent": "Determines whether the nodes should be draggable",
          "label": "Draggale nodes",
          "family": "select",
          "multivalue": false,
          "hidden": true,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": 'true'
              }
            }
          }
        },
        "zoomable": {
          "uiTipContent": "Defines whether the visualization should be zoomable and/or panable",
          "label": "Allow pan and zoom",
          "family": "Network"
        },
        "zoom": {
          "uiTipContent": "Defines the zoom level of the network",
          "label": "Zoom",
          "family": "Network"
        },
        "forceSelection": {
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "false"
              }
            }
          }
        }
      }
    };

    NetworkVisualizerModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(NetworkVisualizerModel.meta, NetworkVisualizerModel.behaviors);
      return output;
    };

    return NetworkVisualizerModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.HeatMapModel = (function(_super) {
    __extends(HeatMapModel, _super);

    function HeatMapModel() {
      _ref = HeatMapModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HeatMapModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.PlacesDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TransitionBehavior", "quadrigram.Models.MapBehavior"];

    HeatMapModel.meta = {
      "name": "PointsInAMap",
      "properties": {
        "places": {
          "uiTipContent": "Insert a list of latitudes and a list of longitudes to represent cordinates of each hot spot",
          "sortingWeight": 0,
          "label": "Hot spots",
          "family": "data",
          "hidden": false,
          "formats": {
            "Place": {
              "multiValues": {
                "lat": true,
                "lon": true
              },
              "defaults": {
                "lon": [
                  {
                    "id": "1",
                    "value": 2.1833
                  }, {
                    "id": "2",
                    "value": 2.3508
                  }, {
                    "id": "3",
                    "value": 0.1275
                  }, {
                    "id": "4",
                    "value": 12.5000
                  }
                ],
                "lat": [
                  {
                    "id": "1",
                    "value": 41.3833
                  }, {
                    "id": "2",
                    "value": 48.8567
                  }, {
                    "id": "3",
                    "value": 51.5072
                  }, {
                    "id": "4",
                    "value": 41.9000
                  }
                ]
              }
            }
          }
        },
        "values": {
          "uiTipContent": "Insert a list of values that will determine the intensity of each hot spot",
          "label": "Hot spot intensities",
          "family": "data",
          "sortingWeight": 1,
          "hidden": true,
          "formats": {
            "Number": {
              "defaultsNames": {
                "value": "Dummy radius"
              },
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 10
              }
            },
            "ByValues": {
              "label": "Numbers with fixed domain",
              "multiValues": {
                "values": true
              },
              "defaults": {
                "values": 50,
                "min": 0,
                "max": 100
              }
            },
            "IntensitiesByValues": {
              "deprecated": true,
              "defaultsNames": {
                "values": "Dummy radius"
              },
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 10,
                "min": 0,
                "max": 100
              }
            }
          }
        },
        "radius": {
          "uiTipContent": "Scaling factor for the hotspots",
          "label": "Hot spot action radius",
          "family": "data",
          "sortingWeight": 2,
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": 20
              }
            }
          }
        },
        "grouping": {
          "uiTipContent": "How much close hotspots will fuse",
          "label": "Hot spot base intensity",
          "family": "data",
          "sortingWeight": 3,
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": 50
              }
            }
          }
        },
        "gradient": {
          "uiTipContent": "Color scale of the heatMap",
          "label": "Color scale",
          "family": "style",
          "sortingWeight": "0",
          "hidden": false,
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(26,35,126),   rgb(13,113,146) 12.5%,  rgb(0,191,165)  25%,    rgb(127,204,109) 37.5%, rgb(253,216,53) 50%,     rgb(246,149,67) 62.5%,   rgb(239,83,80) 75%, rgb(187,48,80) 87.5%,    rgb(136,14,79) 100%)"
              }
            }
          }
        },
        "bkg_color": {
          "hidden": true,
          "formats": {
            "Color": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#d9d9d9"
              }
            }
          }
        }
      }
    };

    HeatMapModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(HeatMapModel.meta, HeatMapModel.behaviors);
      return output;
    };

    return HeatMapModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  quadrigram.Models.Behavior = (function() {
    Behavior.stage = "";

    function Behavior(visualizer, childrenBehaviors, params) {
      this.info = __bind(this.info, this);
      this.createOutputs = __bind(this.createOutputs, this);
      this.initialize = __bind(this.initialize, this);
      _.extend(this, Backbone.Events);
      this.behaviors = childrenBehaviors;
      this.visualizer = visualizer;
      this.createOutputs();
      this.initialize(params);
    }

    Behavior.prototype.initialize = function(params) {};

    Behavior.prototype.createOutputs = function() {
      var behaviorInfo, blockGroup, currentBlock, outputBlock, outputBlocks, outputId, outputInfo, outputLabel, outputType, _results;
      if (!this.visualizer) {
        return;
      }
      blockGroup = this.visualizer.model.original.get("blockGroup");
      outputBlocks = [];
      behaviorInfo = this.info();
      _results = [];
      for (outputId in behaviorInfo.outputs) {
        outputInfo = behaviorInfo.outputs[outputId];
        currentBlock = blockGroup.get("blocksCollection").find(function(candidate) {
          return candidate.get("outputId") === outputId;
        });
        outputLabel = outputInfo.label ? outputInfo.label : outputId;
        outputType = outputInfo.outputType ? outputInfo.outputType : "default";
        if (!currentBlock) {
          outputBlock = new quadrigram.Models.DataBlockModel;
          outputBlock.set({
            "blockGroup": blockGroup,
            "outputOwnerViz": this.visualizer.model.original,
            "role": "output",
            "outputId": outputId,
            "outputType": outputType,
            "label": outputLabel,
            "origin": "visualizer"
          }, {
            "silent": true
          });
          _results.push(outputBlock.setData(outputInfo["default"]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Behavior.prototype.info = function() {
      if (this.output == null) {
        this.output = quadrigram.Models.VisualizerModel.mergeInfo(this.constructor.meta, this.constructor.behaviors);
      }
      return this.output;
    };

    return Behavior;

  })();

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.LayoutBehavior = (function(_super) {
    __extends(LayoutBehavior, _super);

    function LayoutBehavior() {
      this.updateBackground = __bind(this.updateBackground, this);
      this.setScrollEnabled = __bind(this.setScrollEnabled, this);
      this.executeBeforeUpdateStage = __bind(this.executeBeforeUpdateStage, this);
      this.initialize = __bind(this.initialize, this);
      _ref = LayoutBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LayoutBehavior.field = "layout";

    LayoutBehavior.behaviors = [];

    LayoutBehavior.stage = "";

    LayoutBehavior.prototype.initialize = function(params) {
      return this.root = d3.select(this.visualizer.el);
    };

    LayoutBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(LayoutBehavior.meta, LayoutBehavior.behaviors);
      return output;
    };

    LayoutBehavior.meta = {
      "name": "Layout",
      "properties": {
        "col": {
          "label": "Column",
          "family": "layout",
          "hidden": true,
          "sortingWeight": "1000",
          "multivalue": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "row": {
          "label": "Row",
          "family": "layout",
          "hidden": true,
          "sortingWeight": "1000",
          "multivalue": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "size_x": {
          "label": "Width",
          "family": "layout",
          "sortingWeight": "1000",
          "multivalue": false,
          "hidden": true,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "size_y": {
          "label": "Height",
          "family": "layout",
          "sortingWeight": "1000",
          "multivalue": false,
          "hidden": true,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "scroll_enabled": {
          "uiTipContent": "Enables or disables the capacity of scrolling when having a text overflow",
          "label": "Always hide the scrollbar",
          "family": "style",
          "sortingWeight": "30",
          "multivalue": false,
          "hidden": true,
          "internal": "true",
          "formats": {
            "Boolean": {
              "defaults": {
                "value": true
              }
            }
          }
        },
        "bkg_color": {
          "uiTipContent": "Defines the color of the background for this chart",
          "label": "Background color",
          "family": "style",
          "sortingWeight": "31",
          "multivalue": false,
          "hidden": true,
          "formats": {
            "Color": {
              "label": "Color",
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        },
        "bkg_image": {
          "uiTipContent": "Defines a background image for this chart",
          "label": "Background image",
          "family": "style",
          "sortingWeight": "32",
          "hidden": true,
          "formats": {
            "ImageUrl": {
              "label": "Image",
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "",
                "scale": "cover",
                "repeat": "false"
              },
              "options": {
                "scale": ["contain", "cover", "stretch", "preserve"]
              }
            },
            "Text": {
              "deprecated": true,
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "bkg_opacity": {
          "uiTipContent": "Defines the opacity of the background for this chart",
          "label": "Background opacity",
          "family": "style",
          "sortingWeight": "33",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "100"
              }
            }
          }
        }
      }
    };

    LayoutBehavior.prototype.executeBeforeUpdateStage = function() {
      this.updateBackground();
      return this.setScrollEnabled();
    };

    LayoutBehavior.prototype.setScrollEnabled = function() {
      var domElement;
      if ((this.visualizer.model.get("scroll_enabled") != null) && (this.visualizer.getScrollDomElement != null)) {
        domElement = this.visualizer.getScrollDomElement();
        if (this.visualizer.model.get("scroll_enabled") === "true" || this.visualizer.model.get("scroll_enabled") === true) {
          return domElement.css("overflow-y", "hidden");
        } else {
          return domElement.css("overflow-y", "auto");
        }
      }
    };

    LayoutBehavior.prototype.updateBackground = function() {
      var bckgColor, bckgImage, bckgOpacity, color, opacity, style,
        _this = this;
      if (!this.visualizer.backgroundEl) {
        this.visualizer.backgroundEl = this.visualizer.$el.find(".viz-view-background");
      }
      if (this.visualizer.model.get("bkg_image").currentFormat === "ImageUrl") {
        bckgImage = this.visualizer.model.get("bkg_image")[0];
      } else {
        bckgImage = this.visualizer.model.get("bkg_image");
      }
      bckgColor = this.visualizer.model.get("bkg_color");
      bckgOpacity = this.visualizer.model.get("bkg_opacity");
      if ((bckgImage != null) && (typeof bckgImage === "string" || bckgImage instanceof String) && bckgImage !== "") {
        quadrigram.router.managers.serverManager.getImageUrl(bckgImage, function(resultUrl) {
          return _this.visualizer.backgroundEl.css("background-image", "url('" + resultUrl + "')");
        });
      } else {
        this.visualizer.backgroundEl.css("background-image", "none");
      }
      if (this.visualizer.model.get("bkg_image").currentFormat === "ImageUrl") {
        this.visualizer.backgroundEl.css(this.calculateCSS(this.visualizer.model.get("bkg_image")[1], this.visualizer.model.get("bkg_image")[2]));
      }
      if ((bckgColor != null) && bckgColor !== "" && bckgColor !== "none") {
        color = d3.rgb(bckgColor);
        style = "rgb(" + color.r + "," + color.g + "," + color.b + ")";
        this.visualizer.backgroundEl.css("background-color", style);
      } else {
        this.visualizer.backgroundEl.css("background-color", "rgba(0,0,0,0)");
      }
      opacity = 1;
      if ((bckgOpacity != null) && bckgOpacity !== "") {
        opacity = bckgOpacity / 100;
        return this.visualizer.backgroundEl.css("opacity", opacity);
      }
      /*
      if quadrigram.environment != "editor"
        if (bckgColor? && bckgColor != "" && bckgColor != "none") && !(bckgImage? && (typeof bckgImage == "string" || bckgImage instanceof String) && bckgImage != "" )
          @visualizer.backgroundEl.css("outline","solid 1px "+style)
        else
          @visualizer.backgroundEl.css("outline","")
      */

    };

    LayoutBehavior.prototype.calculateCSS = function(size, repeat) {
      var css;
      css = {};
      switch (size) {
        case "cover":
          css["background-size"] = "cover";
          break;
        case "contain":
          css["background-size"] = "contain";
          break;
        case "stretch":
          css["background-size"] = "100% 100%";
          break;
        case "preserve":
          css["background-size"] = "auto";
      }
      switch (repeat) {
        case "true":
          css["background-repeat"] = "repeat";
          break;
        case "false":
          css["background-repeat"] = "no-repeat";
      }
      css["background-position"] = "center center";
      return css;
    };

    return LayoutBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.AxisBehavior = (function(_super) {
    __extends(AxisBehavior, _super);

    function AxisBehavior() {
      this.makeYGridBoldAxis = __bind(this.makeYGridBoldAxis, this);
      this.makeYGridAxis = __bind(this.makeYGridAxis, this);
      this.addYGrid = __bind(this.addYGrid, this);
      this.calculateYAxisArea = __bind(this.calculateYAxisArea, this);
      this.updateYLayout = __bind(this.updateYLayout, this);
      this.calculateYGraphArea = __bind(this.calculateYGraphArea, this);
      this.updateYAxis = __bind(this.updateYAxis, this);
      this.makeXGridBoldAxis = __bind(this.makeXGridBoldAxis, this);
      this.makeXGridAxis = __bind(this.makeXGridAxis, this);
      this.addXGrid = __bind(this.addXGrid, this);
      this.updateXLayout = __bind(this.updateXLayout, this);
      this.calculateXGraphArea = __bind(this.calculateXGraphArea, this);
      this.updateXAxis = __bind(this.updateXAxis, this);
      this.mergeValuesWithInlets = __bind(this.mergeValuesWithInlets, this);
      this.updateLinearAxis = __bind(this.updateLinearAxis, this);
      this.updateNonLinearAxis = __bind(this.updateNonLinearAxis, this);
      this.updateLabels = __bind(this.updateLabels, this);
      this.setScale = __bind(this.setScale, this);
      this.setClip = __bind(this.setClip, this);
      this.startCanvasSize = __bind(this.startCanvasSize, this);
      this.updateCanvasSize = __bind(this.updateCanvasSize, this);
      this.updateConfig = __bind(this.updateConfig, this);
      this.executeBeforeUpdateStage = __bind(this.executeBeforeUpdateStage, this);
      this.createAxisFunction = __bind(this.createAxisFunction, this);
      this.initialize = __bind(this.initialize, this);
      _ref = AxisBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AxisBehavior.field = "axis";

    AxisBehavior.behaviors = ["quadrigram.Models.SvgBehavior"];

    AxisBehavior.stage = "beforeUpdate";

    AxisBehavior.prototype.allowAxisReRender = true;

    AxisBehavior.prototype.defaultGridOpacity = 0.7;

    AxisBehavior.prototype.defaultExtraAmplitudeDomain = 0.1;

    AxisBehavior.prototype.defaultAmplitudeForScalingBands = 0.1;

    AxisBehavior.prototype.defaultOuterPadding = 0.1;

    AxisBehavior.prototype.maxTextHeight = 0;

    AxisBehavior.prototype.maxYTextWidth = 0;

    AxisBehavior.prototype.xAxisLabelPadding = 15;

    AxisBehavior.prototype.yAxisLabelPadding = 15;

    AxisBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(AxisBehavior.meta, AxisBehavior.behaviors);
      return output;
    };

    AxisBehavior.meta = {
      name: "axis",
      properties: {
        axisXTitle: {
          "uiTipContent": "Defines the title of the X Axis",
          label: "X Axis title",
          sorting: "40",
          family: "axis",
          hidden: false,
          formats: {
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: ""
              }
            }
          }
        },
        axisRange: {
          "uiTipContent": "Defines the visible range of values on Axis",
          label: "Visible range of X Axis",
          sorting: "41",
          family: "axis",
          hidden: true,
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            SimpleRange: {
              multiValues: {
                min: false,
                max: false
              },
              defaults: {
                min: "",
                max: ""
              }
            }
          }
        },
        axisYTitle: {
          "uiTipContent": "Defines the title of the Y Axis",
          label: "Y Axis title",
          sorting: "42",
          family: "axis",
          hidden: false,
          formats: {
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: ""
              }
            }
          }
        },
        axisYRange: {
          "uiTipContent": "Defines the visible range of the Y Axis",
          label: "Visible range of Y Axis",
          sorting: "43",
          internal: true,
          family: "axis",
          hidden: true,
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            SimpleRange: {
              multiValues: {
                min: false,
                max: false
              },
              defaults: {
                min: "",
                max: ""
              }
            }
          }
        },
        axisLineColor: {
          "uiTipContent": "Defines the color of the axes",
          label: "Color of axes lines",
          sorting: "44",
          family: "axis",
          hidden: true,
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#888888"
              }
            }
          }
        },
        axisTextColor: {
          "uiTipContent": "Defines the color of the axes values (ticks)",
          label: "Color of axes values",
          sorting: "45",
          family: "axis",
          multivalue: false,
          hidden: true,
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#444444"
              }
            }
          }
        },
        axisLegendColor: {
          "uiTipContent": "Defines the color of the axes titles",
          label: "Color of axes titles",
          sorting: "46",
          family: "axis",
          multivalue: false,
          hidden: true,
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#000000"
              }
            }
          }
        },
        axisLabels: {
          "uiTipContent": "Defines the text to display on the axes ticks",
          label: "Axes values",
          sorting: "48",
          family: "axis",
          multivalue: false,
          hidden: true,
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Text: {
              multiValues: {
                value: true
              },
              defaults: {
                value: "Axis Label"
              }
            }
          }
        },
        xAxisGrid: {
          "uiTipContent": "Determines whether to show horizontal grid lines underneath the chart",
          label: "Show horizontal grid lines",
          sorting: "46",
          family: "axis",
          multivalue: false,
          hidden: true,
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: 'true'
              }
            }
          }
        },
        yAxisGrid: {
          "uiTipContent": "Determines whether to show vertical grid lines underneath the chart",
          label: "Show vertical grid lines",
          sorting: "47",
          family: "axis",
          multivalue: false,
          hidden: true,
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: 'true'
              }
            }
          }
        }
      }
    };

    AxisBehavior.prototype.axisGrid = {
      xAxis: {
        xGridTicks: 4
      },
      yAxis: {
        yGridTicks: 5
      }
    };

    AxisBehavior.prototype.size = {
      width: 200,
      height: 200,
      margin: {
        left: 10,
        right: 15,
        top: 15,
        bottom: 15
      },
      axisX: {
        type: "linear",
        accumulate: false
      },
      axisY: {
        type: "linear",
        accumulate: false
      }
    };

    AxisBehavior.prototype.initialize = function(params) {
      var idViz;
      this.graph = this.behaviors.svg.root.append("g").attr("class", "graph");
      this.xAxisEl = this.behaviors.svg.root.append("g").attr("class", "x-axis");
      this.yAxisEl = this.behaviors.svg.root.append("g").attr("class", "y-axis");
      idViz = this.idViz = this.visualizer.model.original.get("id");
      this.vizDefs = this.behaviors.svg.root.append("defs");
      this.clipPath = this.vizDefs.append("clipPath").attr("id", "axisClip-" + idViz);
      this.clipPathRect = this.clipPath.append("rect").attr("class", "clip-path-rect");
      this.graph.attr("clip-path", "url(#axisClip-" + idViz + ")");
      this.createAxisFunction();
      this.config = {
        ids: [5],
        values: [
          {
            id: 5,
            value: 10
          }
        ],
        axisLineColor: "#888888",
        axisTextColor: "#444444",
        axisLegendColor: "#000000"
      };
      this.xAxisLabel = this.xAxisEl.append("text").attr("class", "x-axis-label").style("text-anchor", "middle").text("Test 1");
      this.yAxisLabel = this.yAxisEl.append("text").attr("class", "y-axis-label").style("text-anchor", "middle").text("Test Y Axis");
      return this.visualizer.$el.on('didResize', this.setClip);
    };

    AxisBehavior.prototype.createAxisFunction = function() {
      this.xAxis = d3.svg.axis().tickPadding(5).tickSize(5).orient("bottom");
      return this.yAxis = d3.svg.axis().tickPadding(5).tickSize(5).orient("left");
    };

    AxisBehavior.prototype.executeBeforeUpdateStage = function() {
      var chartType, extraAmplitudeDomain, ids, items, model, values;
      this.allowAxisReRender = true;
      model = this.visualizer.model;
      items = this.visualizer.itemsEnter;
      values = this.visualizer.values;
      ids = this.visualizer.ids;
      chartType = this.visualizer.chartType;
      extraAmplitudeDomain = this.visualizer.extraAmplitudeDomain;
      _.forEach(values, function(value) {
        if (typeof value.value === 'string') {
          return value.value = +value.value.match(/-?\d+\.?\d*/);
        }
      });
      if (this.visualizer.setAxisDirection) {
        this.visualizer.setAxisDirection();
        if (this.visualizer.model.changed["IdsOnAxis"] != null) {
          this.createAxisFunction();
        }
      }
      this.updateCanvasSize({
        width: this.visualizer.$el.width(),
        height: this.visualizer.$el.height(),
        axisX: {
          type: this.visualizer.xAxisType,
          field: this.visualizer.xAxisField
        },
        axisY: {
          type: this.visualizer.yAxisType,
          field: this.visualizer.yAxisField,
          accumulate: this.visualizer.accumulate
        }
      });
      this.updateConfig({
        values: values,
        ids: ids,
        axisLineColor: model.get("axisLineColor"),
        axisTextColor: model.get("axisTextColor"),
        axisLegendColor: model.get("axisLegendColor"),
        axisXTitle: model.get("axisXTitle"),
        axisYTitle: model.get("axisYTitle"),
        xAxisGrid: model.get("xAxisGrid"),
        yAxisGrid: model.get("yAxisGrid"),
        axisLabels: model.get("axisLabels"),
        chartType: chartType,
        extraAmplitudeDomain: extraAmplitudeDomain
      });
      if (model.get("gapBetweenBars") != null) {
        this.defaultAmplitudeForScalingBands = model.get("gapBetweenBars") / 100;
      }
      return this.startCanvasSize();
    };

    AxisBehavior.prototype.updateConfig = function(newConfig) {
      var field;
      for (field in newConfig) {
        this.config[field] = newConfig[field];
      }
      return this.updateLabels();
    };

    AxisBehavior.prototype.updateCanvasSize = function(newSize) {
      var field;
      for (field in newSize) {
        this.size[field] = newSize[field];
      }
      return this.behaviors.svg.updateSize({
        width: this.size.width,
        height: this.size.height
      });
    };

    AxisBehavior.prototype.startCanvasSize = function() {
      this.updateYAxis();
      return _.delay(this.setClip, 200);
    };

    AxisBehavior.prototype.setClip = function() {
      var heightValue, totalHeight, totalWidth, translateXAxis, widthValue, xValue, yValue;
      totalWidth = this.behaviors.svg.root.attr("width");
      totalHeight = this.behaviors.svg.root.attr("height");
      if (!totalWidth || !totalHeight) {
        return;
      }
      translateXAxis = this.xAxisEl.attr("transform");
      if (translateXAxis) {
        xValue = 0;
        yValue = -15;
        heightValue = parseFloat(translateXAxis.split(",")[1].replace(")", ""));
        widthValue = parseFloat(totalWidth) + 15;
      } else {
        xValue = 0;
        yValue = -15;
        heightValue = totalHeight + 15;
        widthValue = parseFloat(totalWidth) + 15;
      }
      log("Axis::setClip -> boundaries = ", xValue, yValue, widthValue, heightValue);
      return this.clipPathRect.attr("x", xValue).attr("y", yValue).attr("width", widthValue).attr("height", heightValue);
    };

    AxisBehavior.prototype.setScale = function(metaInfo, range) {
      var outputScale;
      switch (metaInfo.type) {
        case "linear":
          outputScale = d3.scale.linear();
          outputScale.range(range);
          break;
        case "bands":
          outputScale = d3.scale.ordinal();
          outputScale.rangeRoundBands(range, this.defaultAmplitudeForScalingBands);
          break;
        case "points":
          outputScale = d3.scale.ordinal();
          outputScale.rangePoints(range).range();
      }
      return outputScale;
    };

    AxisBehavior.prototype.updateLabels = function() {
      var input, xLabel, yLabel,
        _this = this;
      this.axisDict = {};
      if (this.visualizer.model.get("axisLabels") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        input = this.visualizer.model.get("axisLabels");
        if (_.isArray(input)) {
          input.forEach(function(d) {
            return _this.axisDict[d.id] = d.value;
          });
        } else {
          this.visualizer.ids.forEach(function(d) {
            return _this.axisDict[d] = input;
          });
        }
      }
      xLabel = "";
      if (this.config.axisXTitle && this.config.axisXTitle !== "") {
        xLabel = this.config.axisXTitle;
      } else {
        if (this.visualizer.xAxisType === "linear") {
          xLabel = this.visualizer.values.label;
        }
      }
      if (this.xAxisLabel != null) {
        this.xAxisLabel.text(xLabel);
      }
      yLabel = "";
      if (this.config.axisYTitle && this.config.axisYTitle !== "") {
        yLabel = this.config.axisYTitle;
      } else {
        if (this.visualizer.yAxisType === "linear") {
          yLabel = this.visualizer.values.label;
        }
      }
      if (this.yAxisLabel != null) {
        return this.yAxisLabel.text(yLabel);
      }
    };

    AxisBehavior.prototype.updateNonLinearAxis = function(axisEl, axisFunction, rotate) {
      var maxSpaceForEachItem, maxTextLength, numberOfLabels, ratioSpace, self, step, targetNumberOfLabels;
      axisFunction.tickValues(axisFunction.scale().domain());
      axisEl.call(axisFunction);
      self = this;
      axisEl.selectAll(".tick").selectAll("text").text(function(d, i) {
        if (self.axisDict[d] != null) {
          return self.axisDict[d];
        } else {
          return d;
        }
      });
      numberOfLabels = axisFunction.scale().domain().length;
      maxSpaceForEachItem = this.size.graphWidth / numberOfLabels;
      maxTextLength = 0;
      axisEl.selectAll(".tick").selectAll("text").each(function() {
        return maxTextLength = Math.max(maxTextLength, this.getComputedTextLength());
      });
      ratioSpace = maxSpaceForEachItem / maxTextLength;
      step = 1;
      if (ratioSpace < 0.75) {
        targetNumberOfLabels = this.size.graphWidth / (maxTextLength * (Math.sqrt(2) / 2) + 6);
        step = Math.floor(numberOfLabels / targetNumberOfLabels);
      }
      if (step !== 1) {
        axisFunction.tickValues(_.filter(axisFunction.scale().domain(), function(value, index) {
          return index !== numberOfLabels - 2 && (index % step === 0 || index === numberOfLabels - 1);
        }));
      }
      axisEl.call(axisFunction);
      self = this;
      axisEl.selectAll(".tick").selectAll("text").text(function(d, i) {
        if (self.axisDict[d] != null) {
          return self.axisDict[d];
        } else {
          return d;
        }
      });
      axisEl.selectAll(".tick").selectAll("text").attr("fill", this.config.axisTextColor);
      axisEl.selectAll(".tick").selectAll("line").attr("stroke", this.config.axisLineColor).attr("stroke-width", "1px");
      axisEl.select(".domain").attr("stroke", this.config.axisLineColor).attr("stroke-width", "1px");
      if (ratioSpace < 1 && rotate) {
        return axisEl.selectAll(".tick").selectAll("text").style("text-anchor", "end").attr("dx", "-8px").attr("dy", "0px").attr("transform", "rotate(-45)");
      } else {
        return axisEl.selectAll(".tick").selectAll("text").attr("dx", "0px").attr("transform", "");
      }
    };

    AxisBehavior.prototype.updateLinearAxis = function(axisEl, axisFunction) {
      axisEl.call(axisFunction);
      axisEl.selectAll(".tick").selectAll("text").attr("fill", this.config.axisTextColor);
      axisEl.selectAll(".tick").selectAll("line").attr("stroke", this.config.axisLineColor).attr("stroke-width", "1px");
      return axisEl.select(".domain").attr("stroke", this.config.axisLineColor).attr("stroke-width", "1px");
    };

    AxisBehavior.prototype.mergeValuesWithInlets = function(baseDomain, propertyName) {
      var property;
      property = this.visualizer.model.get(propertyName);
      if (!property) {
        return baseDomain;
      }
      if (property === quadrigram.Models.VisualizerModel.DEACTIVATED) {
        return baseDomain;
      }
      if ((property[0] != null) && property[0] !== "") {
        baseDomain[0] = property[0];
      }
      if ((property[1] != null) && property[1] !== "") {
        baseDomain[1] = property[1];
      }
      return baseDomain;
    };

    AxisBehavior.prototype.fixDomainValues = function(values) {
      var amplitude;
      this.defaultExtraAmplitudeDomain = this.config.extraAmplitudeDomain != null ? this.config.extraAmplitudeDomain : this.defaultExtraAmplitudeDomain;
      if (this.config.chartType === 'barchart' || this.config.chartType === 'stackedbarchart') {
        if ((values[0] > 0 && 0 < values[1])) {
          if (values[0] < values[1]) {
            values[0] = 0;
          }
          if (values[1] < values[0]) {
            values[1] = 0;
          }
        } else if ((values[0] < 0 && 0 < values[1]) || (values[0] > 0 && 0 > values[1])) {

        } else if ((values[0] < 0 && 0 > values[1])) {
          if (values[0] > values[1]) {
            values[0] = 0;
          }
          if (values[1] > values[0]) {
            values[1] = 0;
          }
        }
      } else if (this.config.chartType === 'stackedareachart') {
        values[0] = Math.max(values[0], 0);
        values[1] = Math.max(values[1], 0);
        if (values[0] < values[1]) {
          values[0] = 0;
        }
        if (values[1] < values[0]) {
          values[1] = 0;
        }
      }
      amplitude = Math.abs(this.defaultExtraAmplitudeDomain * (Math.abs(values[0] - values[1])));
      if (amplitude === 0) {
        amplitude = this.defaultExtraAmplitudeDomain * 10;
        if (values[0] !== 0) {
          values[0] -= amplitude;
        }
        if (values[1] !== 0) {
          values[1] += amplitude;
        }
      } else {
        if (values[0] !== 0) {
          values[0] -= amplitude;
        }
        if (values[1] !== 0) {
          values[1] += amplitude;
        }
      }
      return values;
    };

    AxisBehavior.prototype.updateXAxis = function() {
      var accumulate, valuesXDomain;
      this.calculateXGraphArea();
      if (this.size.axisX.type === "linear") {
        accumulate = this.config.chartType === 'stackedbarchart' ? true : this.size.axisY.accumulate;
        valuesXDomain = this.visualizer.calculateNumberDomain(this.config.values, accumulate, this.size.axisX.field);
        valuesXDomain = this.fixDomainValues(valuesXDomain);
        valuesXDomain = this.mergeValuesWithInlets(valuesXDomain, "axisRange");
        this.xScale.domain(valuesXDomain);
        this.updateLinearAxis(this.xAxisEl, this.xAxis);
      } else {
        this.xScale.domain(this.config.ids);
        this.updateNonLinearAxis(this.xAxisEl, this.xAxis, true);
      }
      return this.updateXLayout();
    };

    AxisBehavior.prototype.calculateXGraphArea = function() {
      this.size.graphWidth = this.size.width - this.calculateYAxisArea() - this.size.margin.right;
      this.xScale = this.setScale(this.size.axisX, [0, this.size.graphWidth || this.size.width]);
      return this.xAxis.scale(this.xScale);
    };

    AxisBehavior.prototype.updateXLayout = function() {
      if (this.xAxisLabel != null) {
        this.xAxisLabel.attr("transform", "translate(" + (this.size.width / 2 - this.calculateYAxisArea()) + "," + (this.calculateXAxisArea() - this.size.margin.bottom) + ")");
        this.xAxisLabel.attr('fill', this.config.axisLegendColor);
      }
      this.graph.attr("transform", "translate(" + this.calculateYAxisArea() + "," + this.size.margin.top + ")");
      this.xAxisEl.attr("transform", "translate(" + this.calculateYAxisArea() + "," + (this.size.height - this.calculateXAxisArea()) + ")");
      if (this.allowAxisReRender) {
        this.allowAxisReRender = false;
        this.updateYAxis();
        this.addXGrid();
        return this.addYGrid();
      }
    };

    AxisBehavior.prototype.calculateXAxisArea = function() {
      var maxTextHeight, xAxisLabelHeight, xAxisTick;
      this.maxTextHeight = maxTextHeight = 0;
      xAxisTick = this.xAxisEl.selectAll('.tick')[0];
      if (xAxisTick.length > 0) {
        maxTextHeight = xAxisTick[0].getBBox().height;
        this.xAxisEl.selectAll(".tick").each(function() {
          return maxTextHeight = Math.max(maxTextHeight, this.getBBox().height);
        });
        this.maxTextHeight = parseInt(maxTextHeight);
      }
      xAxisLabelHeight = this.xAxisLabel != null ? this.xAxisLabel[0][0].getBBox().height + this.xAxisLabelPadding : 0;
      return this.maxTextHeight + this.size.margin.bottom + xAxisLabelHeight;
    };

    AxisBehavior.prototype.addXGrid = function() {
      var axisTicks, dataBounds, difference, grid, xGridXPos;
      if ($(this.behaviors.svg.root[0]).has('.xgrid').length > 0) {
        $(this.behaviors.svg.root[0]).find('.xgrid').remove();
      }
      if ($(this.behaviors.svg.root[0]).has('.xgridBold').length > 0) {
        $(this.behaviors.svg.root[0]).find('.xgridBold').remove();
      }
      if (this.config.yAxisGrid === 'true') {
        xGridXPos = this.calculateYAxisArea();
        if (this.size.axisX.type === "bands") {
          if (this.xScale.domain().length >= 2) {
            difference = this.xScale(this.xScale.domain()[1]) - this.xScale(this.xScale.domain()[0]);
            xGridXPos += -difference / 2;
          } else {
            xGridXPos += -this.xScale.rangeBand();
          }
        }
        grid = this.behaviors.svg.root.insert("g", ".graph").attr("class", "xgrid").attr("transform", "translate(" + xGridXPos + "," + (this.size.height - this.calculateXAxisArea()) + ")").call(this.makeXGridAxis().tickSize(-this.size.graphHeight, 0, 0).tickFormat(""));
        grid.selectAll('line').attr('stroke', this.config.axisLineColor).attr('stroke-opacity', this.defaultGridOpacity);
      }
      axisTicks = this.xAxisEl.selectAll('.tick');
      dataBounds = d3.extent(axisTicks.data());
      if (dataBounds[0] < 0 && dataBounds[1] > 0) {
        if (this.config.yAxisGrid === 'true') {
          grid = this.behaviors.svg.root.insert("g", ".graph").attr("class", "xgridBold").attr("transform", "translate(" + this.calculateYAxisArea() + "," + (this.size.height - this.calculateXAxisArea()) + ")").call(this.makeXGridBoldAxis().tickSize(-this.size.graphHeight, 0, 0).tickFormat(""));
          return grid.selectAll('line').attr('stroke', this.config.axisLineColor).attr('stroke-opacity', this.defaultGridOpacity);
        }
      }
    };

    AxisBehavior.prototype.makeXGridAxis = function() {
      return d3.svg.axis().scale(this.xScale).orient("bottom").ticks(this.axisGrid.xAxis.xGridTicks).tickPadding(0);
    };

    AxisBehavior.prototype.makeXGridBoldAxis = function() {
      return d3.svg.axis().scale(this.xScale).orient("bottom").ticks(1).tickValues([0]);
    };

    AxisBehavior.prototype.updateYAxis = function() {
      var accumulate, valuesYDomain;
      this.calculateYGraphArea();
      if (this.size.axisY.type === "linear") {
        accumulate = this.config.chartType === 'stackedbarchart' ? true : this.size.axisY.accumulate;
        valuesYDomain = this.visualizer.calculateNumberDomain(this.config.values, accumulate, this.size.axisY.field);
        valuesYDomain = this.fixDomainValues(valuesYDomain);
        if (this.size.axisX.type === "linear") {
          valuesYDomain = this.mergeValuesWithInlets(valuesYDomain, "axisYRange");
        } else {
          valuesYDomain = this.mergeValuesWithInlets(valuesYDomain, "axisRange");
        }
        this.yScale.domain(valuesYDomain);
        this.updateLinearAxis(this.yAxisEl, this.yAxis);
      } else {
        this.yScale.domain(this.config.ids);
        this.updateNonLinearAxis(this.yAxisEl, this.yAxis, false);
      }
      return this.updateYLayout();
    };

    AxisBehavior.prototype.calculateYGraphArea = function() {
      this.size.graphHeight = this.size.height - this.size.margin.top - this.calculateXAxisArea();
      this.yScale = this.setScale(this.size.axisY, [this.size.graphHeight || this.size.height, 0]);
      return this.yAxis.scale(this.yScale);
    };

    AxisBehavior.prototype.updateYLayout = function() {
      var xAxisLabelPosition, yAxisLabelPosition;
      if (this.yAxisLabel != null) {
        xAxisLabelPosition = -this.calculateYAxisArea() + this.yAxisLabel[0][0].getBBox().height + this.size.margin.left;
        yAxisLabelPosition = this.size.graphHeight / 2;
        this.yAxisLabel.attr("transform", "translate(" + xAxisLabelPosition + "," + yAxisLabelPosition + ") rotate(-90)");
        this.yAxisLabel.attr('fill', this.config.axisLegendColor);
      }
      this.yAxisEl.attr("transform", "translate(" + this.calculateYAxisArea() + "," + this.size.margin.top + ")");
      if (this.allowAxisReRender) {
        return this.updateXAxis();
      }
    };

    AxisBehavior.prototype.calculateYAxisArea = function() {
      var maxYTextWidth, yAxisLabelHeight, yAxisTick;
      this.maxYTextWidth = maxYTextWidth = 0;
      yAxisTick = this.yAxisEl.selectAll('.tick')[0];
      if (yAxisTick.length > 0) {
        maxYTextWidth = yAxisTick[0].getBBox().width;
        this.yAxisEl.selectAll(".tick").each(function() {
          return maxYTextWidth = Math.max(maxYTextWidth, this.getBBox().width);
        });
        this.maxYTextWidth = parseInt(maxYTextWidth);
      }
      yAxisLabelHeight = this.yAxisLabel != null ? this.yAxisLabel[0][0].getBBox().height + this.yAxisLabelPadding : 0;
      return this.maxYTextWidth + this.size.margin.left + yAxisLabelHeight;
    };

    AxisBehavior.prototype.addYGrid = function() {
      var axisTicks, dataBounds, difference, grid, yGridYPos;
      if ($(this.behaviors.svg.root[0]).has('.ygrid').length > 0) {
        $(this.behaviors.svg.root[0]).find('.ygrid').remove();
      }
      if ($(this.behaviors.svg.root[0]).has('.ygridBold').length > 0) {
        $(this.behaviors.svg.root[0]).find('.ygridBold').remove();
      }
      if (this.config.xAxisGrid === 'true') {
        yGridYPos = this.size.margin.top;
        if (this.size.axisY.type === "bands") {
          if (this.yScale.domain().length >= 2) {
            difference = this.yScale(this.yScale.domain()[1]) - this.yScale(this.yScale.domain()[0]);
            yGridYPos += -difference / 2;
          } else {
            yGridYPos += this.yScale.rangeBand();
          }
        }
        grid = this.behaviors.svg.root.insert("g", ".graph").attr("class", "ygrid").attr("transform", "translate(" + this.calculateYAxisArea() + "," + yGridYPos + ")").call(this.makeYGridAxis().tickSize(-this.size.graphWidth, 0, 0).tickFormat(""));
        grid.selectAll('line').attr('stroke', this.config.axisLineColor).attr('stroke-opacity', this.defaultGridOpacity);
      }
      axisTicks = this.yAxisEl.selectAll('.tick');
      dataBounds = d3.extent(axisTicks.data());
      if (dataBounds[0] < 0 && dataBounds[1] > 0) {
        if (this.config.xAxisGrid === 'true') {
          grid = this.behaviors.svg.root.insert("g", ".graph").attr("class", "ygridBold").attr("transform", "translate(" + this.calculateYAxisArea() + "," + this.size.margin.top + ")").call(this.makeYGridBoldAxis().tickSize(-this.size.graphWidth, 0, 0).tickFormat(""));
          return grid.selectAll('line').attr('stroke', this.config.axisLineColor).attr('stroke-opacity', this.defaultGridOpacity);
        }
      }
    };

    AxisBehavior.prototype.makeYGridAxis = function() {
      return d3.svg.axis().scale(this.yScale).orient("left").ticks(this.axisGrid.yAxis.yGridTicks).tickPadding(0);
    };

    AxisBehavior.prototype.makeYGridBoldAxis = function() {
      return d3.svg.axis().scale(this.yScale).orient("left").ticks(1).tickValues([0]);
    };

    return AxisBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SvgBehavior = (function(_super) {
    __extends(SvgBehavior, _super);

    function SvgBehavior() {
      this.requestDownloadImageURL = __bind(this.requestDownloadImageURL, this);
      this.didResize = __bind(this.didResize, this);
      this.onResize = __bind(this.onResize, this);
      this.updateSize = __bind(this.updateSize, this);
      this.executeBeforeUpdateStage = __bind(this.executeBeforeUpdateStage, this);
      this.initialize = __bind(this.initialize, this);
      _ref = SvgBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SvgBehavior.stage = "beforeUpdate";

    SvgBehavior.prototype.initialize = function(params) {
      this.root = d3.select(this.visualizer.el).append("svg").attr("class", "bkg-svg").attr("xmlns", "http://www.w3.org/2000/svg");
      $(this.root[0]).parents('.viz-view').on('onResize', this.onResize);
      return $(this.root[0]).parents('.viz-view').on('didResize', this.didResize);
    };

    SvgBehavior.field = "svg";

    SvgBehavior.behaviors = [];

    SvgBehavior.prototype.size = {
      width: 200,
      height: 200
    };

    SvgBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(SvgBehavior.meta, SvgBehavior.behaviors);
      return output;
    };

    SvgBehavior.meta = {
      "name": "svg",
      "properties": {}
    };

    SvgBehavior.prototype.resizeCover = null;

    SvgBehavior.prototype.executeBeforeUpdateStage = function() {
      return this.updateSize({
        width: this.visualizer.$el.width(),
        height: this.visualizer.$el.height()
      });
    };

    SvgBehavior.prototype.updateSize = function(newSize) {
      var field;
      for (field in newSize) {
        this.size[field] = newSize[field];
      }
      return this.root.attr("width", this.size.width).attr("height", this.size.height);
    };

    SvgBehavior.prototype.onResize = function() {
      if (!this.visualizer.behaviors.axis) {
        this.updateSize({
          width: this.visualizer.$el.width(),
          height: this.visualizer.$el.height()
        });
      }
      if (this.resizeCover === null) {
        return this.setFakeGraphic();
      }
    };

    SvgBehavior.prototype.didResize = function() {
      if (this.resizeCover != null) {
        $(this.root[0]).css('display', 'visile');
        $(this.resizeCover).remove();
        return this.resizeCover = null;
      }
    };

    SvgBehavior.prototype.setFakeGraphic = function() {
      var img, rect, svg;
      if (this.resizeCover != null) {
        return;
      }
      this.resizeCover = $("<div class='resize-cover'></div>");
      svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      img = document.createElementNS("http://www.w3.org/2000/svg", "image");
      $(this.resizeCover).css('width', '100%');
      $(this.resizeCover).css('height', '100%');
      $(svg).css('width', '100%');
      $(svg).css('height', '100%');
      $(rect).attr('width', '100%');
      $(rect).attr('height', '100%');
      $(rect).attr('opacity', '0.5');
      $(rect).attr('preserveAspectRatio', 'none');
      $(img).attr('width', '15px');
      $(img).attr('height', '15px');
      $(img).attr('x', '50%');
      $(img).attr('y', '50%');
      $(img).attr('preserveAspectRatio', 'none');
      img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', 'images/expand.png');
      $(svg).attr("class", "resizeGraph");
      $(rect).attr("class", "resizeGraphBG");
      $(img).attr("class", "resizeGraphIcon");
      svg.appendChild(rect);
      svg.appendChild(img);
      this.resizeCover.append(svg);
      $(this.root[0]).css('display', 'none');
      return this.visualizer.$el.prepend(this.resizeCover);
    };

    SvgBehavior.prototype.requestDownloadImageURL = function(callback, type) {
      /*
      $(svgSource).prepend("
          <defs>
            <style>
             @font-face {
              font-family: 'latoregular';
              src: url(data:application/x-font-woff;charset=utf-8;base64,) format('woff'),
                   url('Roboto-Regular-webfont.ttf');
      
              }
            </style>
          </defs>"
        )
      */

      var canvas, ctx, im, svgSource, url,
        _this = this;
      if (type === "svg") {
        svgSource = svgUtils.getSVGWithStyles(this.root.node(), true);
        svgSource.setAttribute("style", "background-color:" + this.visualizer.model.get("bkg_color"));
        url = svgUtils.svgToUrl(svgSource);
        return callback(url, "svg");
      } else {
        svgSource = svgUtils.getSVGWithStyles(this.root.node());
        svgSource.setAttribute("style", "background-color:" + this.visualizer.model.get("bkg_color"));
        url = svgUtils.svgToImageUrl(svgSource);
        canvas = document.createElement('canvas');
        canvas.width = $(this.visualizer.el).width();
        canvas.height = $(this.visualizer.el).height();
        ctx = canvas.getContext('2d');
        ctx.font = "'Roboto',sans-serif";
        im = new Image();
        im.onload = function() {
          ctx.drawImage(im, 0, 0);
          return callback(canvas.toDataURL('image/png'), "png");
        };
        return im.src = url;
      }
    };

    return SvgBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.MapBehavior = (function(_super) {
    __extends(MapBehavior, _super);

    function MapBehavior() {
      this.loadImage = __bind(this.loadImage, this);
      this.drawTilesOnCanvas = __bind(this.drawTilesOnCanvas, this);
      this.requestDownloadImageURL = __bind(this.requestDownloadImageURL, this);
      this.notifiyDragChanges = __bind(this.notifiyDragChanges, this);
      this.notifiyZoomChanges = __bind(this.notifiyZoomChanges, this);
      this.goToMapView = __bind(this.goToMapView, this);
      this.goToFrame = __bind(this.goToFrame, this);
      this.centerView = __bind(this.centerView, this);
      this.setMarkerConfig = __bind(this.setMarkerConfig, this);
      this.update = __bind(this.update, this);
      this.initialize = __bind(this.initialize, this);
      this.executeAfterDidUpdateStage = __bind(this.executeAfterDidUpdateStage, this);
      this.executeAfterUpdateStage = __bind(this.executeAfterUpdateStage, this);
      this.executeBeforeUpdateStage = __bind(this.executeBeforeUpdateStage, this);
      _ref = MapBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MapBehavior.field = "map";

    MapBehavior.behaviors = [];

    MapBehavior.prototype.firstExec = true;

    MapBehavior.stage = "map";

    MapBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(MapBehavior.meta, MapBehavior.behaviors);
      return output;
    };

    MapBehavior.meta = {
      "name": "map",
      "outputs": {
        "center": {
          "default": "",
          "outputType": "geo",
          "label": "Center"
        },
        "zoom": {
          "default": "",
          "outputType": "geo",
          "label": "Zoom"
        }
      },
      "properties": {
        "frame": {
          "uiTipContent": "Defines how to crop the map. That is where to center it and how big should it be at the same time",
          "label": "Frame boundaries",
          "family": "geo",
          "hidden": true,
          "sortingWeight": "64",
          "deprecated": true,
          "multivalue": false,
          "formats": {
            "Rectangle": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            },
            "MapView": {
              "multiValues": {
                "zoom": false,
                "center": false
              },
              "defaults": {
                "zoom": "",
                "center": ""
              }
            }
          }
        },
        "zoom": {
          "uiTipContent": "Defines the zoom level of the map",
          "label": "Zoom",
          "family": "geo",
          "hidden": false,
          "sortingWeight": "62",
          "formats": {
            "Number": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "center": {
          "uiTipContent": "Defines the coordinates of the center of the map",
          "label": "Center",
          "family": "geo",
          "sortingWeight": "61",
          "multivalue": false,
          "hidden": false,
          "formats": {
            "Text": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "zoomable": {
          "uiTipContent": "Defines whether the visualization should be zoomable and/or panable",
          "label": "Allow pan and zoom",
          "family": "select",
          "sortingWeight": "82",
          "hidden": true,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "true"
              }
            }
          }
        },
        "tileProvider": {
          "uiTipContent": "Defines the map provider from a list of diferent looking options",
          "label": "Provider of map tiles",
          "family": "geo",
          "sortingWeight": "63",
          "hidden": true,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "Stamen.TonerLite"
              },
              "options": {
                "value": ["Stamen.Toner", "Stamen.TonerLite", "Stamen.Watercolor", "OpenStreetMap.BlackAndWhite", "OpenStreetMap.HOT", "Thunderforest.Transport", "Thunderforest.Landscape", "Hydda.Full", "Hydda.Base", "Esri.WorldStreetMap", "Esri.DeLorme", "Esri.WorldImagery", "MtbMap", "NASAGIBS.ViirsEarthAtNight2012"]
              }
            }
          }
        },
        "bkg_color": {
          "hidden": true,
          "formats": {
            "Color": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#d9d9d9"
              }
            }
          }
        },
        "bkg_image": {
          "hidden": true,
          "internal": true
        },
        "bkg_opacity": {
          "hidden": true
        }
      }
    };

    MapBehavior.prototype.provider = null;

    MapBehavior.prototype.executeBeforeUpdateStage = function() {
      var newProvider;
      if (this.provider !== this.visualizer.model.get("tileProvider")) {
        newProvider = this.visualizer.model.get("tileProvider");
        if (newProvider === "") {
          newProvider = "Stamen";
        }
        this.provider = newProvider;
        this.map._layers = {};
        $(".leaflet-control-attribution").remove();
        L.tileLayer.provider(this.provider, {
          attributionControl: false,
          noWrap: true
        }).addTo(this.map);
        return L.control.attribution({
          position: 'bottomleft'
        }).addTo(this.map);
      }
    };

    MapBehavior.prototype.executeAfterUpdateStage = function() {
      if ((this.visualizer.model.changed["zoomable"] != null) || this.firstExec) {
        if (this.visualizer.model.get("zoomable") === "true") {
          this.map.touchZoom.enable();
          this.map.doubleClickZoom.enable();
          this.map.scrollWheelZoom.enable();
          this.map.boxZoom.enable();
          this.map.keyboard.enable();
          this.map.dragging.enable();
          return this.visualizer.$el.find(".leaflet-control-zoom").css("visibility", "visible");
        } else {
          this.map.touchZoom.disable();
          this.map.doubleClickZoom.disable();
          this.map.scrollWheelZoom.disable();
          this.map.boxZoom.disable();
          this.map.keyboard.disable();
          this.map.dragging.disable();
          return this.visualizer.$el.find(".leaflet-control-zoom").css("visibility", "hidden");
        }
      }
    };

    MapBehavior.prototype.executeAfterDidUpdateStage = function() {
      /*
      if @visualizer.model.changed["frame"]?
        @goToFrame(@visualizer.model.get("frame"))
        @notifiyDragChanges()
      */

      if ((this.visualizer.model.changed["zoom"] != null) || (this.visualizer.model.changed["center"] != null) || this.firstExec) {
        this.goToMapView(this.visualizer.model.get("center"), this.visualizer.model.get("zoom"));
        this.notifiyDragChanges();
      }
      return this.firstExec = false;
    };

    MapBehavior.prototype.initialize = function(params) {
      this.config = {
        typeOfMap: "stamen",
        center: [41.3833, 2.1833]
      };
      this.markerConfig = {
        className: 'marker-container',
        html: '<svg class="marker-svg" ></svg>'
      };
      this.divMap = d3.select(this.visualizer.el).append("div").attr("class", "map").style("width", "100%").style("height", "100%");
      this.map = L.map(this.divMap.node(), {
        attributionControl: false,
        zoomAnimation: true
      }).setView(this.config.center, 10);
      this.map._initPathRoot();
      this.svg = this.divMap.select("svg");
      this.map.on("zoomanim", this.notifiyZoomChanges);
      this.map.on("drag", this.notifiyDragChanges);
      return this.map.on("viewreset", this.update);
    };

    MapBehavior.prototype.update = function() {
      var self;
      if (!this.visualizer.items) {
        return;
      }
      self = this;
      return this.visualizer.items.attr("transform", function(d, i) {
        return "translate(" + self.map.latLngToLayerPoint(d.LatLng).x + "," + self.map.latLngToLayerPoint(d.LatLng).y + ")";
      });
    };

    MapBehavior.prototype.setMarkerConfig = function(markerConfig) {
      return this.markerConfig = markerConfig;
    };

    MapBehavior.prototype.centerView = function() {
      var bounds, maxPoint, minPoint;
      if ((this.visualizer.coordinates == null) || this.visualizer.coordinates.length === 0) {
        return;
      }
      minPoint = new L.latLng(d3.min(this.visualizer.coordinates, function(d) {
        return d.lat;
      }), d3.min(this.visualizer.coordinates, function(d) {
        return d.lon;
      }));
      maxPoint = new L.latLng(d3.max(this.visualizer.coordinates, function(d) {
        return d.lat;
      }), d3.max(this.visualizer.coordinates, function(d) {
        return d.lon;
      }));
      if ((minPoint != null) && (maxPoint != null)) {
        bounds = new L.latLngBounds(minPoint, maxPoint);
        return this.map.fitBounds(bounds);
      }
    };

    MapBehavior.prototype.goToFrame = function(frameBoundsStr) {
      var bounds, frameBoundsSource, northEastPoint, southWestPoint;
      if (frameBoundsStr === "") {
        return;
      }
      frameBoundsSource = frameBoundsStr.split(",");
      northEastPoint = new L.LatLng(parseFloat(frameBoundsSource[1]), parseFloat(frameBoundsSource[0]));
      southWestPoint = new L.LatLng(parseFloat(frameBoundsSource[3]), parseFloat(frameBoundsSource[2]));
      bounds = new L.LatLngBounds(northEastPoint, southWestPoint);
      return this.map.fitBounds(bounds, {
        animate: false
      });
    };

    MapBehavior.prototype.goToMapView = function(centerStr, zoom) {
      var animate, center, centerSource;
      if (centerStr !== "" && centerStr !== null) {
        centerSource = centerStr.split(",");
        center = new L.LatLng(parseFloat(centerSource[0]), parseFloat(centerSource[1]));
      } else {
        center = this.map.getCenter();
      }
      if (zoom === "") {
        zoom = this.map.getZoom();
      }
      if (this.map.getZoom() !== zoom) {
        animate = true;
      } else {
        animate = false;
      }
      return this.map.setView(center, zoom, {
        animate: animate
      });
    };

    /*
    notfiyLatLngBoundChanges:(e) =>
      latLngBounds = @map.getBounds()
      bounds = latLngBounds.toBBoxString()
      center = @map.getCenter()
      @visualizer.updateOutput("bounds",bounds)
      @visualizer.updateOutput("zoom",@map.getZoom())
      @visualizer.updateOutput("center",center.lat+","+center.lng)
    */


    MapBehavior.prototype.notifiyZoomChanges = function(e) {
      var bounds, center, latLngBounds, zoom;
      latLngBounds = this.map.getBounds();
      bounds = latLngBounds.toBBoxString();
      center = e.center;
      zoom = e.zoom;
      this.visualizer.updateOutput("bounds", bounds);
      this.visualizer.updateOutput("zoom", zoom);
      return this.visualizer.updateOutput("center", center.lat + "," + center.lng);
    };

    MapBehavior.prototype.notifiyDragChanges = function(e) {
      var bounds, center, latLngBounds;
      latLngBounds = this.map.getBounds();
      bounds = latLngBounds.toBBoxString();
      center = this.map.getCenter();
      this.visualizer.updateOutput("bounds", bounds);
      this.visualizer.updateOutput("zoom", this.map.getZoom());
      return this.visualizer.updateOutput("center", center.lat + "," + center.lng);
    };

    MapBehavior.prototype.requestDownloadImageURL = function(callback) {
      var canvas, canvasTransform, ctx, images,
        _this = this;
      canvas = document.createElement('canvas');
      canvas.width = $(this.visualizer.el).width();
      canvas.height = $(this.visualizer.el).height();
      ctx = canvas.getContext('2d');
      /*
      $(@map._container).find(".leaflet-tile").each(()->
        this.crossOrigin = "Anonymous";
        ctx.drawImage(this, $(this).css("left").replace("px",""), $(this).css("top").replace("px",""));
      )
      */

      images = $(this.map._container).find(".leaflet-tile").toArray();
      canvasTransform = this.map._mapPane._leaflet_pos;
      ctx.transform(1, 0, 0, 1, canvasTransform.x, canvasTransform.y);
      return this.drawTilesOnCanvas(images, ctx, function() {
        return _this.visualizer.drawElementsOnCanvas(ctx, function() {
          return callback(canvas.toDataURL('image/png'), "png");
        });
      });
    };

    MapBehavior.prototype.drawTilesOnCanvas = function(imagesArray, ctx, callback) {
      var original,
        _this = this;
      if (imagesArray.length === 0) {
        callback();
        return;
      }
      original = imagesArray[imagesArray.length - 1];
      imagesArray.pop();
      return this.loadImage(original, ctx, function() {
        return _this.drawTilesOnCanvas(imagesArray, ctx, callback);
      });
    };

    MapBehavior.prototype.loadImage = function(original, ctx, onLoad) {
      var im,
        _this = this;
      im = new Image();
      im.crossOrigin = 'Anonymous';
      im.onload = function() {
        ctx.drawImage(im, $(original).css("left").replace("px", ""), $(original).css("top").replace("px", ""), $(original).css("width").replace("px", ""), $(original).css("height").replace("px", ""));
        return onLoad();
      };
      return im.src = original.getAttribute("src");
    };

    return MapBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.CirclesBehavior = (function(_super) {
    __extends(CirclesBehavior, _super);

    function CirclesBehavior() {
      this.getRadiusFromValue = __bind(this.getRadiusFromValue, this);
      this.formatRange = __bind(this.formatRange, this);
      this.updateRadiusScale = __bind(this.updateRadiusScale, this);
      this.initialize = __bind(this.initialize, this);
      _ref = CirclesBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CirclesBehavior.field = "circles";

    CirclesBehavior.behaviors = [];

    CirclesBehavior.stage = "beforeUpdate";

    CirclesBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(CirclesBehavior.meta, CirclesBehavior.behaviors);
      return output;
    };

    CirclesBehavior.meta = {
      name: "circles",
      properties: {
        maxRadius: {
          uiTipContent: "Defines the maximum radius of the circles. This value will be mapped to the highest value of the data",
          label: "Maximum Radius",
          sorting: "52",
          family: "style",
          hidden: false,
          internal: true,
          formats: {
            Number: {
              multiValues: {
                value: false
              },
              defaults: {
                "value": 15
              }
            }
          }
        },
        minRadius: {
          uiTipContent: "Defines the minimum radius of the circles. This value will be mapped to the lowest value of the data",
          label: "Minimum Radius",
          sorting: "53",
          family: "style",
          hidden: false,
          internal: true,
          formats: {
            Number: {
              multiValues: {
                value: false
              },
              defaults: {
                "value": 5
              }
            }
          }
        }
      }
    };

    CirclesBehavior.prototype.initialize = function(params) {
      this.radiusScale = d3.scale.sqrt();
      this.config = {};
      return this.defaultRange = [5, 10];
    };

    CirclesBehavior.prototype.updateRadiusScale = function(domain, range) {
      if (domain != null) {
        this.radiusScale.domain(domain);
      }
      if (range != null) {
        range = this.formatRange(range);
        return this.radiusScale.range(range);
      }
    };

    CirclesBehavior.prototype.formatRange = function(inputRange) {
      var candidate, outputRange;
      outputRange = [];
      if (inputRange[0] && _.isNumber(inputRange[0])) {
        outputRange.push(inputRange[0]);
      } else if (inputRange[0] && _.isString(inputRange[0])) {
        candidate = inputRange[0].replace("px", "");
        candidate = parseFloat(candidate);
        if (_.isNumber(candidate)) {
          outputRange.push(candidate);
        } else {
          outputRange.push(this.defaultRange[0]);
        }
      } else {
        outputRange.push(this.defaultRange[0]);
      }
      if (inputRange[1] && _.isNumber(inputRange[1])) {
        outputRange.push(inputRange[1]);
      } else if (inputRange[1] && _.isString(inputRange[1])) {
        candidate = inputRange[1].replace("px", "");
        candidate = parseFloat(candidate);
        if (_.isNumber(candidate)) {
          outputRange.push(candidate);
        } else {
          outputRange.push(this.defaultRange[1]);
        }
      } else {
        outputRange.push(this.defaultRange[1]);
      }
      return outputRange;
    };

    CirclesBehavior.prototype.getRadiusFromValue = function(value) {
      var output;
      output = this.radiusScale(value);
      if (_.isNaN(output) || output === "NaN") {
        output = this.radiusScale.range()[0];
      }
      return output;
    };

    return CirclesBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TransitionBehavior = (function(_super) {
    __extends(TransitionBehavior, _super);

    function TransitionBehavior() {
      this.notify = __bind(this.notify, this);
      this.executeBeforeUpdateStage = __bind(this.executeBeforeUpdateStage, this);
      _ref = TransitionBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TransitionBehavior.behaviors = [];

    TransitionBehavior.stage = "beforeUpdate";

    TransitionBehavior.field = "transition";

    TransitionBehavior.meta = {
      "name": "transition",
      "properties": {
        "transition": {
          "uiTipContent": "Defines the type of transition to be aplied when data changes",
          "label": "Transition",
          "family": "style",
          "sortingWeight": "910",
          "hidden": true,
          "formats": {
            "Transition": {
              "multiValues": {
                "easeType": false,
                "time": false
              },
              "defaults": {
                "easeType": "cubic-in-out",
                "time": 500
              },
              "options": {
                "easeType": ["cubic-in-out", "linear", "circle", "elastic", "back", "bounce"]
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            }
          }
        }
      }
    };

    TransitionBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(TransitionBehavior.meta, TransitionBehavior.behaviors);
      return output;
    };

    TransitionBehavior.prototype.executeBeforeUpdateStage = function() {
      if (this.visualizer.model.get("transition") === quadrigram.Models.VisualizerModel.DEACTIVATED || this.visualizer.resizing) {
        return this.visualizer.animationActive = false;
      } else {
        return this.visualizer.animationActive = true;
      }
    };

    TransitionBehavior.prototype.notify = function(eventType, message) {
      return this.visualizer.trigger(eventType, message);
    };

    return TransitionBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.MessagesBehavior = (function(_super) {
    __extends(MessagesBehavior, _super);

    function MessagesBehavior() {
      this.remove = __bind(this.remove, this);
      this._hideMessage = __bind(this._hideMessage, this);
      this._showNoData = __bind(this._showNoData, this);
      this._showError = __bind(this._showError, this);
      this._showLoader = __bind(this._showLoader, this);
      this.sendMessage = __bind(this.sendMessage, this);
      this.executeBeforeUpdateStage = __bind(this.executeBeforeUpdateStage, this);
      this.initialize = __bind(this.initialize, this);
      _ref = MessagesBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MessagesBehavior.behaviors = [];

    MessagesBehavior.field = "messages";

    MessagesBehavior.meta = {};

    MessagesBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(MessagesBehavior.meta, MessagesBehavior.behaviors);
      return output;
    };

    MessagesBehavior.prototype.messageTemplate = JST['app/scripts/templates/visualizers/visualizerMessage.hbs'];

    MessagesBehavior.prototype.initialize = function(params) {
      var _this = this;
      this.visualizer.on("vizMessage", this.sendMessage);
      this.showLoader = function(message) {
        _this.messageVisible = true;
        return _this.showTimeout = setTimeout(function(message) {
          if (_this.messageVisible) {
            return _this._showLoader(message);
          }
        }, 1000, message);
      };
      this.showError = function(message) {
        _this.messageVisible = true;
        return _this.showTimeout = setTimeout(function(message) {
          if (_this.messageVisible) {
            return _this._showError(message);
          }
        }, 1100, message);
      };
      return this.showNoData = function(message) {
        _this.messageVisible = true;
        return _this.showTimeout = setTimeout(function(message) {
          if (_this.messageVisible) {
            return _this._showNoData(message);
          }
        }, 1000, message);
      };
    };

    MessagesBehavior.prototype.executeBeforeUpdateStage = function() {
      return this._hideMessage();
    };

    MessagesBehavior.prototype.sendMessage = function(messageType, messageBody) {
      if (!messageBody) {
        messageBody = "";
      }
      log("********* sendMessage -> messageType ", messageType, ", fetchState ", this.visualizer.model.get("fetchState"), ", values ", this.visualizer.values, ", visualizer ", this.visualizer);
      switch (messageType) {
        case "LoadingData":
          this.showLoader("Receiving data");
          break;
        case "EmptyData":
          this.showLoader("Loading");
          break;
        case "InvalidData":
          this.showNoData("No data to show");
          break;
        case "Error":
          this.showError(messageBody);
          break;
        case "hide":
          this._hideMessage();
          break;
      }
    };

    MessagesBehavior.prototype._showLoader = function(message) {
      /*
      if window.quadrigram.environment == "exported"
          message = ""
      */

      var loaderGif, messageView,
        _this = this;
      loaderGif = true;
      if (this.visualizer.dontUseGif) {
        loaderGif = false;
      }
      if (this.visualizer.$el.find(".message-container").length === 0) {
        messageView = $(this.messageTemplate({
          message: message,
          messageColor: "#3D5AFE",
          opacityBox: 0,
          backgroundOpacity: 0,
          loaderGif: loaderGif
        }));
        this.visualizer.$el.prepend(messageView);
        return _.defer(function() {
          return messageView.find(".loading-square").removeClass("collapsed");
        });
      }
    };

    MessagesBehavior.prototype._showError = function(message) {
      var messageView;
      if (window.quadrigram.environment === "exported") {
        message = "";
      }
      messageView = this.messageTemplate({
        message: message,
        messageColor: "#FF5252",
        opacityBox: 1,
        backgroundOpacity: 1,
        loaderGif: false
      });
      this.visualizer.$el.find(".message-container").remove();
      return this.visualizer.$el.prepend(messageView);
    };

    MessagesBehavior.prototype._showNoData = function(message) {
      var messageView;
      messageView = this.messageTemplate({
        message: message,
        messageColor: "#3D5AFE",
        opacityBox: 1,
        backgroundOpacity: 1,
        loaderGif: false
      });
      this.visualizer.$el.find(".message-container").remove();
      return this.visualizer.$el.prepend(messageView);
    };

    MessagesBehavior.prototype._hideMessage = function() {
      var delay,
        _this = this;
      this.visualizer.$el.children().show();
      this.messageVisible = false;
      clearTimeout(this.showTimeout);
      this.visualizer.$el.find(".message-container").find(".loading-square").addClass("collapsed");
      if (this.visualizer.dontUseGif) {
        delay = 0;
      } else {
        delay = 210;
      }
      return _.delay(function() {
        return _this.visualizer.$el.find(".message-container").remove();
      }, delay);
    };

    MessagesBehavior.prototype.remove = function() {
      return this.visualizer.off("vizMessage");
    };

    return MessagesBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.RelationsBehavior = (function(_super) {
    __extends(RelationsBehavior, _super);

    function RelationsBehavior() {
      this.update = __bind(this.update, this);
      this.setWeightScale = __bind(this.setWeightScale, this);
      this.createStyleItemsByValues = __bind(this.createStyleItemsByValues, this);
      this.createStyleItemBySingleValue = __bind(this.createStyleItemBySingleValue, this);
      this.createStyleItemsById = __bind(this.createStyleItemsById, this);
      this.createStyleItemsByCategories = __bind(this.createStyleItemsByCategories, this);
      this.createStyleItemsFromSample = __bind(this.createStyleItemsFromSample, this);
      this.createLinkItems = __bind(this.createLinkItems, this);
      this.parseScale = __bind(this.parseScale, this);
      this.updateConfig = __bind(this.updateConfig, this);
      this.initialize = __bind(this.initialize, this);
      this.executeAfterUpdateStage = __bind(this.executeAfterUpdateStage, this);
      _ref = RelationsBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RelationsBehavior.field = "relations";

    RelationsBehavior.behaviors = [];

    RelationsBehavior.prototype.firstExec = true;

    RelationsBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(RelationsBehavior.meta, RelationsBehavior.behaviors);
      return output;
    };

    RelationsBehavior.meta = {
      "name": "relations",
      "properties": {
        "linkColors": {
          "label": "Color of each link",
          "uiTipContent": "Defines the color of each link",
          "family": "style",
          "sortingWeight": "31",
          "hidden": false,
          "formats": {
            "Color": {
              "idSource": {
                "value": "visualizer.idsRelations"
              },
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#000000"
              }
            },
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(207, 212, 236),rgb(141, 145, 188)  100%)"
              }
            },
            "ColorsByValues": {
              "idSource": {
                "values": "visualizer.idsRelations"
              },
              "multiValues": {
                "values": true,
                "colorscale": false
              },
              "defaults": {
                "values": [
                  {
                    "id": "1",
                    "value": "1"
                  }, {
                    "id": "2",
                    "value": "2"
                  }, {
                    "id": "3",
                    "value": "3"
                  }, {
                    "id": "4",
                    "value": "4"
                  }, {
                    "id": "5",
                    "value": "5"
                  }
                ],
                "colorscale": "linear-gradient(90deg, rgb(207, 212, 236),rgb(141, 145, 188)  100%)"
              }
            }
          }
        },
        "linkThickness": {
          "uiTipContent": "Defines the thickness of the outline for each link",
          "label": "Thickness of each link",
          "family": "data",
          "sortingWeight": "32",
          "hidden": false,
          "formats": {
            "PxRange": {
              "multiValues": {
                "min": false,
                "max": false
              },
              "defaults": {
                "min": 1,
                "max": 3
              }
            },
            "PxByValues": {
              "idSource": {
                "values": "visualizer.idsRelations"
              },
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": [
                  {
                    "id": "1",
                    "value": 20
                  }, {
                    "id": "2",
                    "value": 30
                  }, {
                    "id": "3",
                    "value": 40
                  }, {
                    "id": "4",
                    "value": 50
                  }, {
                    "id": "5",
                    "value": 60
                  }
                ],
                "min": 1,
                "max": 3
              }
            },
            "Px": {
              "idSource": {
                "value": "visualizer.idsRelations"
              },
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "1px"
              }
            }
          }
        },
        "linkOpacities": {
          "uiTipContent": "Defines the transparency of each link",
          "label": "Opacity of each link",
          "family": "style",
          "sortingWeight": "33",
          "hidden": true,
          "formats": {
            "Percentage": {
              "idSource": {
                "value": "visualizer.idsRelations"
              },
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 100
              }
            },
            "PercentageByValues": {
              "idSource": {
                "values": "visualizer.idsRelations"
              },
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        }
      }
    };

    RelationsBehavior.prototype.executeAfterUpdateStage = function() {
      var ids, items, model, values;
      model = this.visualizer.model;
      items = this.visualizer.items;
      values = this.visualizer.values;
      ids = this.visualizer.idsRelations;
      this.changed = (this.visualizer.model.changed["linkColors"] != null) || (this.visualizer.model.changed["linkOpacities"] != null) || (this.visualizer.model.changed["linkThickness"] != null) || this.visualizer.changedData || this.firstExec;
      if (this.changed) {
        this.updateConfig({
          itemsEnter: items,
          values: values,
          ids: ids,
          linkColors: model.get("linkColors"),
          linkOpacities: model.get("linkOpacities"),
          linkThickness: model.get("linkThickness")
        });
      }
      return this.firstExec = false;
    };

    RelationsBehavior.prototype.linkItems = {};

    RelationsBehavior.prototype.linkDimensions = ["linkColors", "linkOpacities", "linkThickness"];

    RelationsBehavior.prototype.initialize = function(params) {
      return this.config = {};
    };

    RelationsBehavior.prototype.updateConfig = function(newConfig) {
      var field;
      for (field in newConfig) {
        this.config[field] = newConfig[field];
      }
      this.createLinkItems();
      return this.update();
    };

    RelationsBehavior.prototype.parseScale = function(scaleSource) {
      var angle, breakpoints, colors, matched, output, part, parts, _i, _len;
      if (scaleSource.match) {
        
        var ptrn = / ?,?rgb/
        ;
        parts = scaleSource.split(ptrn);
        angle = parts[0].match(/(d+)deg/);
        parts.unshift();
        colors = [];
        breakpoints = [];
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          matched = part.match(/\(([^\)]+)\) ?(\d+)?%?,?/);
          if (matched) {
            colors.push("rgb(" + matched[1] + ")");
            breakpoints.push(matched[2] / 100 || 0);
          }
        }
      }
      output = {
        colors: colors,
        breakpoints: breakpoints
      };
      return output;
    };

    RelationsBehavior.prototype.createLinkItems = function() {
      var currentFormat, linkDimension, qScale, range, values, _i, _len, _ref1, _results;
      this.styleItems = {};
      _ref1 = this.linkDimensions;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        linkDimension = _ref1[_i];
        currentFormat = this.visualizer.model.get(linkDimension);
        if (currentFormat != null) {
          currentFormat = currentFormat.currentFormat;
          switch (currentFormat) {
            case "Color":
              _results.push(this.createStyleItemsById(this.visualizer.model.get(linkDimension), linkDimension));
              break;
            case "ColorsByCategories":
              _results.push(this.createStyleItemsByCategories(this.visualizer.model.get(linkDimension)[0], this.visualizer.model.get(linkDimension)[1], this.visualizer.model.get(linkDimension)[2], linkDimension));
              break;
            case "ColorsByValues":
              values = this.visualizer.model.get(linkDimension)[0];
              qScale = this.parseScale(this.visualizer.model.get(linkDimension)[1]);
              _results.push(this.createStyleItemsByValues(values, linkDimension, qScale.breakpoints, qScale.colors));
              break;
            case "Percentage":
              _results.push(this.createStyleItemsById(this.visualizer.model.get(linkDimension), linkDimension));
              break;
            case "Number":
              _results.push(this.createStyleItemsById(this.visualizer.model.get(linkDimension), linkDimension));
              break;
            case "Px":
              _results.push(this.createStyleItemsById(this.visualizer.model.get(linkDimension), linkDimension));
              break;
            case "PercentageByValues":
              values = this.visualizer.model.get(linkDimension)[0];
              range = [parseFloat(this.visualizer.model.get(linkDimension)[1]), parseFloat(this.visualizer.model.get(linkDimension)[2])];
              _results.push(this.createStyleItemsByValues(values, linkDimension, void 0, range));
              break;
            case "ByValues":
              values = this.visualizer.model.get(linkDimension)[0];
              range = [parseFloat(this.visualizer.model.get(linkDimension)[1]), parseFloat(this.visualizer.model.get(linkDimension)[2])];
              _results.push(this.createStyleItemsByValues(values, linkDimension, void 0, range));
              break;
            case "PxByValues":
              values = this.visualizer.model.get(linkDimension)[0];
              range = [parseFloat(this.visualizer.model.get(linkDimension)[1]), parseFloat(this.visualizer.model.get(linkDimension)[2])];
              _results.push(this.createStyleItemsById(this.visualizer.model.get(linkDimension), linkDimension));
              break;
            case "PxRange":
              values = this.visualizer.model.get(linkDimension)[0];
              range = [parseFloat(this.visualizer.model.get(linkDimension)[0]), parseFloat(this.visualizer.model.get(linkDimension)[1])];
              _results.push(this.createStyleItemsByValues(values, linkDimension, void 0, range));
              break;
            case void 0:
              if (_.isString(this.visualizer.model.get(linkDimension)) && this.visualizer.model.get(linkDimension).indexOf("linear-gradient") !== -1) {
                qScale = this.parseScale(this.visualizer.model.get(linkDimension));
                _results.push(this.createStyleItemsFromSample(qScale.colors, linkDimension));
              } else {
                _results.push(this.createStyleItemBySingleValue(this.visualizer.model.get(linkDimension), linkDimension));
              }
              break;
            default:
              _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    RelationsBehavior.prototype.createStyleItemsFromSample = function(sample, linkDimension) {
      var i, id, ids, scale, step, style, styles, weight, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _results;
      ids = this.config.ids;
      styles = {};
      if (sample.length > ids.length) {
        step = 1 / (ids.length - 1);
        for (i = _i = 0, _len = ids.length; _i < _len; i = ++_i) {
          id = ids[i];
          weight = step * i;
          styles[id] = sample[Math.round(weight * (sample.length - 1))];
        }
      }
      if (sample.length === ids.length) {
        styles = sample;
      }
      if (sample.length < ids.length) {
        if (sample.length < 4) {
          scale = d3.scale.linear().domain([0, ids.length - 1]).range(sample);
          for (i = _j = 0, _len1 = ids.length; _j < _len1; i = ++_j) {
            id = ids[i];
            styles[id] = scale(i);
          }
        } else {
          for (i = _k = 0, _len2 = ids.length; _k < _len2; i = ++_k) {
            id = ids[i];
            styles[id] = sample[i % sample.length];
          }
        }
      }
      _ref1 = this.config.ids;
      _results = [];
      for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
        id = _ref1[_l];
        if (styles[id]) {
          style = styles[id];
        } else {
          style = sample[0];
        }
        if (!this.styleItems[id]) {
          this.styleItems[id] = {};
        }
        _results.push(this.styleItems[id][linkDimension] = style);
      }
      return _results;
    };

    RelationsBehavior.prototype.createStyleItemsByCategories = function(categories, styles, defaultStyle, linkDimension) {
      var categoriesCandidate, categoriesObject, getObjectFromQValue, id, style, styleCandidate, stylesObject, _i, _len, _ref1, _results,
        _this = this;
      getObjectFromQValue = function(blockList) {
        var object, objectSource, _i, _len;
        object = {};
        for (_i = 0, _len = blockList.length; _i < _len; _i++) {
          objectSource = blockList[_i];
          object[objectSource.id] = objectSource.value;
        }
        return object;
      };
      categoriesObject = getObjectFromQValue(categories);
      stylesObject = getObjectFromQValue(styles);
      _ref1 = this.config.ids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        id = _ref1[_i];
        categoriesCandidate = categoriesObject[id];
        if (categoriesCandidate) {
          styleCandidate = stylesObject[categoriesCandidate];
        } else {
          styleCandidate = defaultStyle;
        }
        if (styleCandidate) {
          style = styleCandidate;
        } else {
          style = defaultStyle;
        }
        if (!this.styleItems[id]) {
          this.styleItems[id] = {};
        }
        _results.push(this.styleItems[id][linkDimension] = style);
      }
      return _results;
    };

    RelationsBehavior.prototype.createStyleItemsById = function(stylesSource, linkDimension) {
      var arrayOfstyles, getStylesObject, id, itemWithoutstyleCount, style, styles, _i, _len, _ref1, _results,
        _this = this;
      getStylesObject = function(stylesSource) {
        var styleSource, styles, _i, _len;
        styles = {};
        for (_i = 0, _len = stylesSource.length; _i < _len; _i++) {
          styleSource = stylesSource[_i];
          styles[styleSource.id] = styleSource.value;
        }
        return styles;
      };
      styles = getStylesObject(stylesSource);
      arrayOfstyles = _.values(styles, linkDimension);
      itemWithoutstyleCount = 0;
      _ref1 = this.config.ids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        id = _ref1[_i];
        if (styles[id]) {
          style = styles[id];
        } else {
          style = arrayOfstyles[itemWithoutstyleCount % arrayOfstyles.length];
        }
        if (!this.styleItems[id]) {
          this.styleItems[id] = {};
        }
        _results.push(this.styleItems[id][linkDimension] = style);
      }
      return _results;
    };

    RelationsBehavior.prototype.createStyleItemBySingleValue = function(style, linkDimension) {
      var id, _i, _len, _ref1, _results;
      _ref1 = this.config.ids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        id = _ref1[_i];
        if (!this.styleItems[id]) {
          this.styleItems[id] = {};
        }
        _results.push(this.styleItems[id][linkDimension] = style);
      }
      return _results;
    };

    RelationsBehavior.prototype.createStyleItemsByValues = function(valuesSource, linkDimension, breakpoints, range) {
      var getValuesObject, id, scale, setScale, style, values, _i, _j, _len, _len1, _ref1, _ref2, _results, _results1,
        _this = this;
      setScale = function(values) {
        var breakpoint, realDomain, scale, valuesDomain, _i, _len;
        _.each(values, function(d) {
          return d.value = parseFloat(d.value);
        });
        if (!breakpoints) {
          breakpoints = [0, 1];
        }
        valuesDomain = d3.extent(values, function(d) {
          return d.value;
        });
        realDomain = [];
        for (_i = 0, _len = breakpoints.length; _i < _len; _i++) {
          breakpoint = breakpoints[_i];
          realDomain.push(valuesDomain[0] + breakpoint * (valuesDomain[1] - valuesDomain[0]));
        }
        scale = d3.scale.linear().domain(realDomain).range(range);
        return scale;
      };
      getValuesObject = function(valuesSource, scale) {
        var valueSource, values, _i, _len;
        values = {};
        for (_i = 0, _len = valuesSource.length; _i < _len; _i++) {
          valueSource = valuesSource[_i];
          values[valueSource.id] = {
            originalValue: parseFloat(valueSource.value),
            value: scale(parseFloat(valueSource.value))
          };
        }
        return values;
      };
      if (_.isArray(valuesSource) && _.isArray(range)) {
        scale = setScale(valuesSource);
        values = getValuesObject(valuesSource, scale);
        _ref1 = this.config.ids;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          id = _ref1[_i];
          if (values[id]) {
            style = values[id];
          } else {
            style = {
              originalValue: void 0,
              value: scale.range()[0]
            };
          }
          if (!this.styleItems[id]) {
            this.styleItems[id] = {};
          }
          _results.push(this.styleItems[id][linkDimension] = style.value);
        }
        return _results;
      } else {
        if (_.isArray(range)) {
          style = range[0];
        } else {
          style = range;
        }
        _ref2 = this.config.ids;
        _results1 = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          id = _ref2[_j];
          if (!this.styleItems[id]) {
            this.styleItems[id] = {};
          }
          _results1.push(this.styleItems[id][linkDimension] = style);
        }
        return _results1;
      }
    };

    RelationsBehavior.prototype.setWeightScale = function() {
      var domain, format, input, range;
      input = this.visualizer.model.get("linkThickness");
      format = input.currentFormat;
      domain = this.visualizer.calculateNumberDomain(this.visualizer.weightRelations, 0, false);
      switch (format) {
        case "PxByValues":
          range = [input[1], input[2]];
          break;
        case "PxRange":
          range = [input[0], input[1]];
          break;
        default:
          range = [input, input];
      }
      return this.strokeWidthScale = d3.scale.linear().domain(domain).range(range);
    };

    RelationsBehavior.prototype.update = function() {
      var links, self,
        _this = this;
      self = this;
      links = d3.select(this.visualizer.el).selectAll(".link").filter(function(d) {
        return d.id !== "root_quadrigram_reserved_id";
      });
      return links.attr("stroke", function(d, i) {
        return self.styleItems[d.id]["linkColors"];
      }).attr("stroke-opacity", function(d, i) {
        return self.styleItems[d.id]["linkOpacities"] / 100;
      }).attr("stroke-width", function(d) {
        return _this.strokeWidthScale(d.value);
      });
    };

    return RelationsBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ZoomableBehavior = (function(_super) {
    __extends(ZoomableBehavior, _super);

    function ZoomableBehavior() {
      this.zoomed = __bind(this.zoomed, this);
      this.zoomStep = __bind(this.zoomStep, this);
      this.clickZoomOut = __bind(this.clickZoomOut, this);
      this.clickZoomIn = __bind(this.clickZoomIn, this);
      this.executeAfterDidUpdateStage = __bind(this.executeAfterDidUpdateStage, this);
      this.executeBeforeUpdateStage = __bind(this.executeBeforeUpdateStage, this);
      this.initialize = __bind(this.initialize, this);
      _ref = ZoomableBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ZoomableBehavior.field = "zoom";

    ZoomableBehavior.behaviors = [];

    ZoomableBehavior.prototype.firstExec = true;

    ZoomableBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(ZoomableBehavior.meta, ZoomableBehavior.behaviors);
      return output;
    };

    ZoomableBehavior.meta = {
      "name": "zoom",
      "outputs": {
        "zoom": {
          "default": "",
          "outputType": "geo",
          "label": "Zoom"
        },
        "center": {
          "default": "",
          "outputType": "geo",
          "label": "Center"
        }
      },
      "properties": {
        "zoomable": {
          "uiTipContent": "Defines whether the visualization should be zoomable and/or panable",
          "label": "Allow pan and zoom",
          "family": "select",
          "sortingWeight": "82",
          "hidden": true,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "true"
              }
            }
          }
        },
        "zoom": {
          "uiTipContent": "Defines the zoom level of the network",
          "label": "Zoom",
          "family": "geo",
          "hidden": false,
          "sortingWeight": "62",
          "formats": {
            "Number": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "1"
              }
            }
          }
        }
      }
    };

    ZoomableBehavior.prototype.initialize = function(params) {
      var controlContainer, self;
      self = this;
      this.zoom = d3.behavior.zoom().on("zoom", function(e) {
        return self.zoomed();
      });
      this.nozoom = d3.behavior.zoom().on("zoom", function(e) {
        return log("hndled nozoom");
      });
      this.zoom.center([this.visualizer.$el.width() / 2, this.visualizer.$el.height() / 2]);
      this.zoomLevel = 1;
      controlContainer = d3.select(this.visualizer.el).append("div").attr("class", "viz-control-container");
      this.control = controlContainer.append("div").attr("class", "control-zoom control-bar");
      this.control.append("div").attr("class", "control-zoom-in control-zoom-item").attr("title", "Zoom in").text("+").on("click", this.clickZoomIn);
      return this.control.append("div").attr("class", "control-zoom-out control-zoom-item").attr("title", "Zoom out").text("-").on("click", this.clickZoomOut);
    };

    ZoomableBehavior.prototype.executeBeforeUpdateStage = function() {
      if (!this.layer) {
        this.layer = d3.select(this.visualizer.el).select(".zoomable-layer");
      }
      if (this.visualizer.model.get("zoomable") === "true") {
        this.layer.call(this.zoom);
        this.control.selectAll(".control-zoom-item").classed("hidden", false);
      } else {
        this.layer.call(this.nozoom);
        this.layer.on("mousedown.zoom", null);
        this.layer.on("mousemove.zoom", null);
        this.layer.on("dblclick.zoom", null);
        this.layer.on("touchstart.zoom", null);
        this.layer.on("wheel.zoom", null);
        this.layer.on("mousewheel.zoom", null);
        this.layer.on("MozMousePixelScroll.zoom", null);
        this.control.selectAll(".control-zoom-item").classed("hidden", true);
      }
      return this.layer.on("dblclick.zoom", null);
    };

    ZoomableBehavior.prototype.executeAfterDidUpdateStage = function() {
      var c, newC, t;
      if ((this.visualizer.model.changed["zoom"] != null) || this.firstExec) {
        t = this.zoom.translate();
        c = [this.visualizer.$el.width() / 2, this.visualizer.$el.height() / 2];
        newC = [(c[0] - t[0]) / this.zoomLevel, (c[1] - t[1]) / this.zoomLevel];
        this.zoomLevel = this.visualizer.model.get("zoom");
        newC = [newC[0] * this.zoomLevel + t[0], newC[1] * this.zoomLevel + t[1]];
        newC = [t[0] + c[0] - newC[0], t[1] + c[1] - newC[1]];
        this.zoom.translate(newC);
        this.zoom.scale(this.zoomLevel);
        this.zoomed({
          animate: true
        });
      }
      return this.firstExec = false;
    };

    ZoomableBehavior.prototype.clickZoomIn = function(e) {
      return this.zoomStep("+");
    };

    ZoomableBehavior.prototype.clickZoomOut = function(e) {
      return this.zoomStep("-");
    };

    ZoomableBehavior.prototype.zoomStep = function(dir) {
      var c, newC, t;
      t = this.zoom.translate();
      c = [this.visualizer.$el.width() / 2, this.visualizer.$el.height() / 2];
      newC = [(c[0] - t[0]) / this.zoomLevel, (c[1] - t[1]) / this.zoomLevel];
      if (dir === "+") {
        this.zoomLevel = this.zoomLevel * 1.5;
      } else {
        this.zoomLevel = this.zoomLevel / 1.5;
      }
      newC = [newC[0] * this.zoomLevel + t[0], newC[1] * this.zoomLevel + t[1]];
      newC = [t[0] + c[0] - newC[0], t[1] + c[1] - newC[1]];
      this.zoom.translate(newC);
      this.zoom.scale(this.zoomLevel);
      return this.zoomed({
        animate: true
      });
    };

    ZoomableBehavior.prototype.zoomed = function(options) {
      if (options && options.animate) {
        this.zoomLevel = this.zoom.scale();
        return d3.select(this.visualizer.el).transition().duration(500).selectAll(".zoomable-target").attr("transform", "translate(" + this.zoom.translate() + ")scale(" + this.zoom.scale() + ")");
      } else {
        this.zoom.center([this.visualizer.$el.width() / 2, this.visualizer.$el.height() / 2]);
        this.zoomLevel = this.zoom.scale();
        return d3.select(this.visualizer.el).selectAll(".zoomable-target").attr("transform", "translate(" + this.zoom.translate() + ")scale(" + this.zoom.scale() + ")");
      }
    };

    return ZoomableBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TextStyleBehavior = (function(_super) {
    __extends(TextStyleBehavior, _super);

    function TextStyleBehavior() {
      this.updateStylabelTexts = __bind(this.updateStylabelTexts, this);
      this.updateConfig = __bind(this.updateConfig, this);
      this.executeAfterResize = __bind(this.executeAfterResize, this);
      this.executeAfterUpdateStage = __bind(this.executeAfterUpdateStage, this);
      this.updateFontStyleOptions = __bind(this.updateFontStyleOptions, this);
      this.executeBeforeUpdateStage = __bind(this.executeBeforeUpdateStage, this);
      this.initialize = __bind(this.initialize, this);
      _ref = TextStyleBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextStyleBehavior.field = "style";

    TextStyleBehavior.behaviors = [];

    TextStyleBehavior.stage = "";

    TextStyleBehavior.prototype.initialize = function(params) {
      return this.root = d3.select(this.visualizer.el);
    };

    TextStyleBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(TextStyleBehavior.meta, TextStyleBehavior.behaviors);
      return output;
    };

    TextStyleBehavior.meta = {
      "name": "Layout",
      "properties": {
        fontFamily: {
          label: "Font family",
          family: "textstyles",
          hidden: false,
          sortingWeight: "24",
          formats: {
            Font: {
              multiValues: {
                fontFamily: false,
                fontStyle: false
              },
              defaults: {
                fontFamily: "Oswald",
                fontStyle: "Regular"
              },
              options: {
                fontFamily: ["Oswald", "Kreon", "Sans Serif", "Roboto", "Droid Sans", "Lato", "Titillium Web", "Open Sans Condensed", "Open Sans", "Ubuntu", "Verdana", "serif", "SlabSerif", "Droid Serif", "Roboto Slab", "EB Garamond", "Libre Baskerville", "Merriweather", "Georgia", "Display", "Playfair Display", "Playfair Display SC", "Old Standard TT"],
                fontStyle: ["Regular", "Light", "Bold"]
              }
            },
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Roboto"
              },
              options: {
                value: ["Oswald", "Kreon", "Sans Serif", "Roboto", "Droid Sans", "Lato", "Titillium Web", "Open Sans Condensed", "Open Sans", "Ubuntu", "Verdana", "serif", "SlabSerif", "Droid Serif", "Roboto Slab", "EB Garamond", "Libre Baskerville", "Merriweather", "Georgia", "Display", "Playfair Display", "Playfair Display SC", "Old Standard TT"]
              }
            }
          }
        },
        textSize: {
          label: "Font size",
          family: "textstyles",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Px: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "12px"
              }
            }
          }
        },
        textColor: {
          label: "Text color",
          family: "textstyles",
          hidden: false,
          sortingWeight: "26",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#444"
              }
            }
          }
        },
        textWeight: {
          label: "Text weight",
          family: "textstyles",
          hidden: true,
          sortingWeight: "27",
          deprecated: true,
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "normal"
              },
              options: {
                value: ["normal", "bold", "lighter"]
              }
            }
          }
        },
        textStyle: {
          label: "Text style",
          family: "textstyles",
          hidden: true,
          sortingWeight: "28",
          deprecated: true,
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "normal"
              },
              options: {
                value: ["normal", "italic"]
              }
            }
          }
        },
        textDecoration: {
          label: "Text decoration",
          family: "textstyles",
          hidden: true,
          sortingWeight: "29",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "none"
              },
              options: {
                value: ["none", "underline", "overline", "line-through"]
              }
            }
          }
        },
        textAlign: {
          label: "Text align",
          family: "textstyles",
          hidden: true,
          sortingWeight: "30",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "left"
              },
              options: {
                value: ["left", "center", "right"]
              }
            }
          }
        },
        vAlign: {
          label: "Vertical align",
          family: "textstyles",
          hidden: true,
          sortingWeight: "40",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "top"
              },
              options: {
                value: ["top", "middle", "bottom"]
              }
            }
          }
        }
      }
    };

    TextStyleBehavior.prototype.executeBeforeUpdateStage = function() {
      this.updateFontStyleOptions();
      this.stylableTexts = this.visualizer.stylableTexts;
      return this.updateConfig();
    };

    TextStyleBehavior.prototype.updateFontStyleOptions = function() {
      var family, options, prop, s, slots, styles, _i, _len;
      if (this.visualizer.model.get("fontFamily").currentFormat === "Font") {
        if (this.visualizer.model.get("fontFamily") && this.currentFamily !== this.visualizer.model.get("fontFamily")[0]) {
          prop = this.visualizer.model.original.get("propertiesCollection").findWhere({
            "propId": "fontFamily"
          });
          if (prop == null) {
            prop = this.visualizer.model.original.prePropertiesCollection.findWhere({
              "propId": "fontFamily"
            });
          }
          if (prop != null) {
            slots = prop.getSlots();
            if (slots != null) {
              family = slots[0].getValue();
              if (family != null) {
                styles = quadrigram.router.managers.fontManager.getFontStyles(family);
                if (styles != null) {
                  options = [];
                  this.currentStyles = {};
                  this.currentFamily = family;
                  for (_i = 0, _len = styles.length; _i < _len; _i++) {
                    s = styles[_i];
                    options.push(s.styleName);
                    this.currentStyles[s.styleName] = {
                      "fontWeight": s.fontWeight,
                      "fontStyle": s.fontStyle
                    };
                  }
                  slots[1].options = options;
                  if (options.indexOf(this.visualizer.model.get("fontFamily")[1]) < 0) {
                    slots[1].getBlock().setData(options[0], {
                      silent: true
                    });
                    return slots[1].trigger("change");
                  } else {
                    return slots[1].trigger("change");
                  }
                }
              }
            }
          }
        }
      }
    };

    TextStyleBehavior.prototype.executeAfterUpdateStage = function() {
      this.updateFontStyleOptions();
      this.stylableTexts = this.visualizer.stylableTexts;
      return this.updateConfig();
    };

    TextStyleBehavior.prototype.executeAfterResize = function() {
      this.updateFontStyleOptions();
      this.stylableTexts = this.visualizer.stylableTexts;
      return this.updateConfig();
    };

    TextStyleBehavior.prototype.updateConfig = function() {
      return this.updateStylabelTexts();
    };

    TextStyleBehavior.prototype.updateStylabelTexts = function() {
      var $el, key, _i, _len, _ref1, _results;
      _ref1 = this.stylableTexts;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        key = _ref1[_i];
        if (typeof key === 'string') {
          $el = this.visualizer.$el.find(key);
        } else {
          $el = key;
        }
        if (this.visualizer.model.get("fontFamily").currentFormat === "Font") {
          $el.css("font-family", this.visualizer.model.get("fontFamily")[0]);
          if ((this.currentStyles != null) && (this.currentStyles[this.visualizer.model.get("fontFamily")[1]] != null)) {
            $el.css("font-style", this.currentStyles[this.visualizer.model.get("fontFamily")[1]].fontStyle);
            $el.css("font-weight", this.currentStyles[this.visualizer.model.get("fontFamily")[1]].fontWeight);
          }
        } else {
          $el.css("font-family", this.visualizer.model.get("fontFamily"));
          $el.css("font-weight", this.visualizer.model.get("textWeight"));
          $el.css("font-style", this.visualizer.model.get("textStyle"));
        }
        $el.css("font-size", this.visualizer.model.get("textSize"));
        $el.css("color", this.visualizer.model.get("textColor"));
        $el.css("text-align", this.visualizer.model.get("textAlign"));
        $el.css("text-decoration", this.visualizer.model.get("textDecoration"));
        $el.removeClass("valign-top");
        $el.removeClass("valign-middle");
        $el.removeClass("valign-bottom");
        _results.push($el.addClass("valign-" + this.visualizer.model.get("vAlign")));
        /*
        textScale = quadrigram.router.dataModels.currentProject.textScale
        if !@originalStyles
          @originalStyles = {}
        self = @
        if textScale?
          #if !self.originalStyles[key]
          self.originalStyles[key] = {}
          if !$el.isInheritedStyle("font-size")
            self.originalStyles[key]["font-size"] = Math.round($el.css("font-size").replace("px",""))
          if !$el.isInheritedStyle("line-height")
            self.originalStyles[key]["line-height"] = Math.round($el.css("line-height").replace("px",""))
          if !$el.isInheritedStyle("letter-spacing")
            self.originalStyles[key]["letter-spacing"] = Math.round($el.css("letter-spacing").replace("px",""))
          for prop,value of self.originalStyles[key]
            $el.css(prop,Math.round(value*textScale)+"px")
        */

      }
      return _results;
    };

    /*
    executeBeforeUpdateStage:() =>
      @updateBackground()
    
    updateBackground:()=>
      if !@visualizer.backgroundEl
        @visualizer.backgroundEl = @visualizer.$el.find(".viz-view-background")
      bckgImage   = @visualizer.model.get("bkg_image")
      bckgColor   = @visualizer.model.get("bkg_color")
      bckgOpacity = @visualizer.model.get("bkg_opacity")
      if bckgImage? && bckgImage != ""
        @visualizer.backgroundEl.css("background-image","url('"+bckgImage+"')")
        @visualizer.backgroundEl.css("background-size","cover")
      else
        @visualizer.backgroundEl.css("background-image","none")
      if bckgColor? && bckgColor != "" && bckgColor != "none"
        color = d3.rgb(bckgColor)
        style = "rgb("+color.r+","+color.g+","+color.b+")"
        @visualizer.backgroundEl.css("background-color",style)
      else
        @visualizer.backgroundEl.css("background-color","rgba(0,0,0,0)")
      opacity = 1
      if bckgOpacity? && bckgOpacity != ""
        opacity =  bckgOpacity / 100
        @visualizer.backgroundEl.css("opacity",opacity)
    */


    return TextStyleBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ItemsBehavior = (function(_super) {
    __extends(ItemsBehavior, _super);

    function ItemsBehavior() {
      this.update = __bind(this.update, this);
      this.createStyleItemsByValues = __bind(this.createStyleItemsByValues, this);
      this.createStyleItemBySingleValue = __bind(this.createStyleItemBySingleValue, this);
      this.createStyleItemsById = __bind(this.createStyleItemsById, this);
      this.createStyleItemsByCategories = __bind(this.createStyleItemsByCategories, this);
      this.createStyleItemsFromSample = __bind(this.createStyleItemsFromSample, this);
      this.createStyleItems = __bind(this.createStyleItems, this);
      this.parseScale = __bind(this.parseScale, this);
      this.updateConfig = __bind(this.updateConfig, this);
      this.initialize = __bind(this.initialize, this);
      _ref = ItemsBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ItemsBehavior.field = "items";

    ItemsBehavior.behaviors = [];

    ItemsBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(ItemsBehavior.meta, ItemsBehavior.behaviors);
      return output;
    };

    ItemsBehavior.meta = {
      "name": "items",
      "outputs": {
        "itemsColors": {
          "outputType": "styles",
          "default": [],
          "label": "Colors of items"
        },
        "catsColors": {
          "outputType": "styles",
          "default": [],
          "label": "Colors of categories"
        }
      },
      "properties": {
        "fillColors": {
          "label": "Fill color of each item",
          "uiTipContent": "Defines the color of each item",
          "family": "style",
          "sortingWeight": "21",
          "hidden": false,
          "formats": {
            "ColorsByScale": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "linear-gradient(90deg, rgb(26,35,126),   rgb(13,113,146) 12.5%,  rgb(0,191,165)  25%,    rgb(127,204,109) 37.5%, rgb(253,216,53) 50%,     rgb(246,149,67) 62.5%,   rgb(239,83,80) 75%, rgb(187,48,80) 87.5%,    rgb(136,14,79) 100%)"
              }
            },
            "Color": {
              "label": "List of colors",
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": "#989FCC"
                  }, {
                    "id": "2",
                    "value": "#8D91BC"
                  }, {
                    "id": "3",
                    "value": "#CFD4EC"
                  }, {
                    "id": "4",
                    "value": "#AEB5DE"
                  }, {
                    "id": "5",
                    "value": "#989FCC"
                  }
                ]
              }
            },
            "ColorsByCategories": {
              "multiValues": {
                "colors": true,
                "categories": true
              },
              "idSource": {
                "colors": "categories"
              },
              "defaults": {
                "defaultColor": "#AAAAAA"
              }
            },
            "ColorsByValues": {
              "multiValues": {
                "values": true,
                "colorscale": false
              },
              "defaults": {
                "values": [
                  {
                    "id": "1",
                    "value": "1"
                  }, {
                    "id": "2",
                    "value": "2"
                  }, {
                    "id": "3",
                    "value": "3"
                  }, {
                    "id": "4",
                    "value": "4"
                  }, {
                    "id": "5",
                    "value": "5"
                  }
                ],
                "colorscale": "linear-gradient(90deg, rgb(207, 212, 236),rgb(141, 145, 188)  100%)"
              }
            }
          }
        },
        "fillOpacities": {
          "uiTipContent": "Defines the transparency of each item",
          "label": "Fill opacity of each item",
          "family": "style",
          "sortingWeight": "22",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 100
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        },
        "lineColors": {
          "uiTipContent": "Defines the color of the outline for each item",
          "label": "Outline color of each item",
          "family": "style",
          "sortingWeight": "23",
          "hidden": true,
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": "#63B4F5"
                  }, {
                    "id": "2",
                    "value": "#41A4F4"
                  }, {
                    "id": "3",
                    "value": "#1D87E4"
                  }, {
                    "id": "4",
                    "value": "#1464BF"
                  }, {
                    "id": "5",
                    "value": "#0C46A0"
                  }
                ]
              }
            },
            "ColorsByCategories": {
              "multiValues": {
                "colors": true,
                "categories": true
              },
              "idSource": {
                "colors": "categories"
              },
              "defaults": {
                "categories": [
                  {
                    "id": "1",
                    "value": "Category A"
                  }, {
                    "id": "2",
                    "value": "Category B"
                  }, {
                    "id": "3",
                    "value": "Category C"
                  }, {
                    "id": "4",
                    "value": "Category A"
                  }, {
                    "id": "5",
                    "value": "Category B"
                  }
                ],
                "defaultColor": "#AAAAAA"
              }
            },
            "ColorsByValues": {
              "multiValues": {
                "values": true,
                "colorscale": false
              },
              "defaults": {
                "values": [
                  {
                    "id": "1",
                    "value": "1"
                  }, {
                    "id": "2",
                    "value": "2"
                  }, {
                    "id": "3",
                    "value": "3"
                  }, {
                    "id": "4",
                    "value": "4"
                  }, {
                    "id": "5",
                    "value": "5"
                  }
                ]
              },
              "defaultColor": "#AAAAAA"
            }
          }
        },
        "lineThickness": {
          "uiTipContent": "Defines the thickness of the outline for each item",
          "label": "Line thickness of each item",
          "family": "style",
          "sortingWeight": "24",
          "hidden": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "1px"
              }
            },
            "PxByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": [
                  {
                    "id": "1",
                    "value": 20
                  }, {
                    "id": "2",
                    "value": 30
                  }, {
                    "id": "3",
                    "value": 40
                  }, {
                    "id": "4",
                    "value": 50
                  }, {
                    "id": "5",
                    "value": 60
                  }
                ],
                "min": 10,
                "max": 10
              }
            }
          }
        },
        "lineOpacities": {
          "uiTipContent": "Defines the opacity of the outline for each item",
          "label": "Line opacity of each item",
          "family": "style",
          "sortingWeight": "25",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": 70
              }
            },
            "PercentageByValues": {
              "multiValues": {
                "values": true,
                "min": false,
                "max": false
              },
              "defaults": {
                "values": 0,
                "min": 100,
                "max": 100
              }
            }
          }
        }
      }
    };

    ItemsBehavior.prototype.defaultColors = ["#3B4D5F", "#3D88BA", "#91BDDD", "#29A089", "#9EC39C", "#F1CA2D", "#E58C3B", "#C14C3E", "#CF7570", "#9154A2"];

    ItemsBehavior.prototype.styleItems = {};

    ItemsBehavior.prototype.initialize = function(params) {
      return this.config = {};
    };

    ItemsBehavior.prototype.updateConfig = function(newConfig) {
      var currentFormat, field, mainColorDimension;
      for (field in newConfig) {
        this.config[field] = newConfig[field];
      }
      this.createStyleItems();
      mainColorDimension = "fillColors";
      if (this.visualizer.mainColorDimension) {
        mainColorDimension = this.visualizer.mainColorDimension;
      }
      this.visualizer.updateOutput("itemsColors", this.styleItemsToBlock(this.styleItems, mainColorDimension));
      currentFormat = this.visualizer.model.get(mainColorDimension).currentFormat;
      if (currentFormat === "ColorsByCategories") {
        this.visualizer.updateOutput("catsColors", this.visualizer.model.get(mainColorDimension)[1]);
      } else {
        this.visualizer.updateOutput("catsColors", []);
      }
      return this.update();
    };

    ItemsBehavior.prototype.parseScale = function(scaleSource) {
      var angle, breakpoints, colors, matched, output, part, parts, _i, _len;
      if (scaleSource.match) {
        
        var ptrn = / ?,?rgb/
        ;
        parts = scaleSource.split(ptrn);
        angle = parts[0].match(/(d+)deg/);
        parts.unshift();
        colors = [];
        breakpoints = [];
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          matched = part.match(/\(([^\)]+)\) ?(\d+)?%?,?/);
          if (matched) {
            colors.push("rgb(" + matched[1] + ")");
            breakpoints.push(matched[2] / 100 || 0);
          }
        }
      }
      output = {
        colors: colors,
        breakpoints: breakpoints
      };
      return output;
    };

    ItemsBehavior.prototype.createStyleItems = function() {
      var currentFormat, qScale, range, styleDimension, values, _i, _len, _ref1, _results,
        _this = this;
      this.styleItems = {};
      this.styleDimensions = [];
      _.each(this.visualizer.model.original.info().properties, function(property, key) {
        if (property.family === 'style') {
          return _this.styleDimensions.push(key);
        }
      });
      _ref1 = this.styleDimensions;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        styleDimension = _ref1[_i];
        currentFormat = this.visualizer.model.get(styleDimension);
        if (currentFormat != null) {
          currentFormat = currentFormat.currentFormat;
          switch (currentFormat) {
            case "Color":
              _results.push(this.createStyleItemsById(this.visualizer.model.get(styleDimension), styleDimension));
              break;
            case "ColorsByCategories":
              _results.push(this.createStyleItemsByCategories(this.visualizer.model.get(styleDimension)[0], this.visualizer.model.get(styleDimension)[1], this.visualizer.model.get(styleDimension)[2], styleDimension));
              break;
            case "ColorsByValues":
              values = this.visualizer.model.get(styleDimension)[0];
              qScale = this.parseScale(this.visualizer.model.get(styleDimension)[1]);
              _results.push(this.createStyleItemsByValues(values, styleDimension, qScale.breakpoints, qScale.colors));
              break;
            case "Percentage":
              _results.push(this.createStyleItemsById(this.visualizer.model.get(styleDimension), styleDimension));
              break;
            case "Number":
              _results.push(this.createStyleItemsById(this.visualizer.model.get(styleDimension), styleDimension));
              break;
            case "Px":
              _results.push(this.createStyleItemsById(this.visualizer.model.get(styleDimension), styleDimension));
              break;
            case "PercentageByValues":
              values = this.visualizer.model.get(styleDimension)[0];
              range = [parseFloat(this.visualizer.model.get(styleDimension)[1]), parseFloat(this.visualizer.model.get(styleDimension)[2])];
              _results.push(this.createStyleItemsByValues(values, styleDimension, void 0, range));
              break;
            case "ByValues":
              values = this.visualizer.model.get(styleDimension)[0];
              range = [parseFloat(this.visualizer.model.get(styleDimension)[1]), parseFloat(this.visualizer.model.get(styleDimension)[2])];
              _results.push(this.createStyleItemsByValues(values, styleDimension, void 0, range));
              break;
            case "PxByValues":
              values = this.visualizer.model.get(styleDimension)[0];
              range = [parseFloat(this.visualizer.model.get(styleDimension)[1]), parseFloat(this.visualizer.model.get(styleDimension)[2])];
              _results.push(this.createStyleItemsById(this.visualizer.model.get(styleDimension), styleDimension));
              break;
            case void 0:
              if (_.isString(this.visualizer.model.get(styleDimension)) && this.visualizer.model.get(styleDimension).indexOf("linear-gradient") !== -1) {
                qScale = this.parseScale(this.visualizer.model.get(styleDimension));
                _results.push(this.createStyleItemsFromSample(qScale.colors, styleDimension));
              } else {
                _results.push(this.createStyleItemBySingleValue(this.visualizer.model.get(styleDimension), styleDimension));
              }
              break;
            default:
              _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ItemsBehavior.prototype.createStyleItemsFromSample = function(sample, styleDimension) {
      var i, id, ids, scale, step, style, styles, weight, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _results;
      ids = this.config.ids;
      styles = {};
      if (sample.length > ids.length) {
        step = 1 / (ids.length - 1);
        for (i = _i = 0, _len = ids.length; _i < _len; i = ++_i) {
          id = ids[i];
          weight = step * i;
          styles[id] = sample[Math.round(weight * (sample.length - 1))];
        }
      }
      if (sample.length === ids.length) {
        styles = sample;
      }
      if (sample.length < ids.length) {
        if (sample.length < 4) {
          scale = d3.scale.linear().domain([0, ids.length - 1]).range(sample);
          for (i = _j = 0, _len1 = ids.length; _j < _len1; i = ++_j) {
            id = ids[i];
            styles[id] = scale(i);
          }
        } else {
          for (i = _k = 0, _len2 = ids.length; _k < _len2; i = ++_k) {
            id = ids[i];
            styles[id] = sample[i % sample.length];
          }
        }
      }
      _ref1 = this.config.ids;
      _results = [];
      for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
        id = _ref1[_l];
        if (styles[id]) {
          style = styles[id];
        } else {
          style = sample[0];
        }
        if (!this.styleItems[id]) {
          this.styleItems[id] = {};
        }
        _results.push(this.styleItems[id][styleDimension] = style);
      }
      return _results;
    };

    ItemsBehavior.prototype.createStyleItemsByCategories = function(categories, styles, defaultStyle, styleDimension) {
      var categoriesCandidate, categoriesObject, getObjectFromQValue, id, style, styleCandidate, stylesObject, _i, _len, _ref1, _results,
        _this = this;
      getObjectFromQValue = function(blockList) {
        var object, objectSource, _i, _len;
        object = {};
        for (_i = 0, _len = blockList.length; _i < _len; _i++) {
          objectSource = blockList[_i];
          object[objectSource.id] = objectSource.value;
        }
        return object;
      };
      categoriesObject = getObjectFromQValue(categories);
      stylesObject = getObjectFromQValue(styles);
      _ref1 = this.config.ids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        id = _ref1[_i];
        categoriesCandidate = categoriesObject[id];
        if (categoriesCandidate) {
          styleCandidate = stylesObject[categoriesCandidate];
        } else {
          styleCandidate = defaultStyle;
        }
        if (styleCandidate) {
          style = styleCandidate;
        } else {
          style = defaultStyle;
        }
        if (!this.styleItems[id]) {
          this.styleItems[id] = {};
        }
        _results.push(this.styleItems[id][styleDimension] = style);
      }
      return _results;
    };

    ItemsBehavior.prototype.createStyleItemsById = function(stylesSource, styleDimension) {
      var arrayOfstyles, getStylesObject, id, itemWithoutstyleCount, style, styles, _i, _len, _ref1, _results,
        _this = this;
      getStylesObject = function(stylesSource) {
        var styleSource, styles, _i, _len;
        styles = {};
        for (_i = 0, _len = stylesSource.length; _i < _len; _i++) {
          styleSource = stylesSource[_i];
          styles[styleSource.id] = styleSource.value;
        }
        return styles;
      };
      styles = getStylesObject(stylesSource);
      arrayOfstyles = _.values(styles, styleDimension);
      itemWithoutstyleCount = 0;
      _ref1 = this.config.ids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        id = _ref1[_i];
        if (styles[id]) {
          style = styles[id];
        } else {
          style = arrayOfstyles[itemWithoutstyleCount % arrayOfstyles.length];
        }
        if (!this.styleItems[id]) {
          this.styleItems[id] = {};
        }
        _results.push(this.styleItems[id][styleDimension] = style);
      }
      return _results;
    };

    ItemsBehavior.prototype.createStyleItemBySingleValue = function(style, styleDimension) {
      var id, _i, _len, _ref1, _results;
      _ref1 = this.config.ids;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        id = _ref1[_i];
        if (!this.styleItems[id]) {
          this.styleItems[id] = {};
        }
        _results.push(this.styleItems[id][styleDimension] = style);
      }
      return _results;
    };

    ItemsBehavior.prototype.createStyleItemsByValues = function(valuesSource, styleDimension, breakpoints, range) {
      var getValuesObject, id, scale, setScale, style, values, _i, _j, _len, _len1, _ref1, _ref2, _results, _results1,
        _this = this;
      setScale = function(values) {
        var breakpoint, realDomain, scale, valuesDomain, _i, _len;
        _.each(values, function(d) {
          return d.value = parseFloat(d.value);
        });
        if (!breakpoints) {
          breakpoints = [0, 1];
        }
        valuesDomain = d3.extent(values, function(d) {
          return d.value;
        });
        realDomain = [];
        for (_i = 0, _len = breakpoints.length; _i < _len; _i++) {
          breakpoint = breakpoints[_i];
          realDomain.push(valuesDomain[0] + breakpoint * (valuesDomain[1] - valuesDomain[0]));
        }
        scale = d3.scale.linear().domain(realDomain).range(range);
        return scale;
      };
      getValuesObject = function(valuesSource, scale) {
        var valueSource, values, _i, _len;
        values = {};
        for (_i = 0, _len = valuesSource.length; _i < _len; _i++) {
          valueSource = valuesSource[_i];
          values[valueSource.id] = {
            originalValue: parseFloat(valueSource.value),
            value: scale(parseFloat(valueSource.value))
          };
        }
        return values;
      };
      if (_.isArray(valuesSource) && _.isArray(range)) {
        scale = setScale(valuesSource);
        values = getValuesObject(valuesSource, scale);
        _ref1 = this.config.ids;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          id = _ref1[_i];
          if (values[id]) {
            style = values[id];
          } else {
            style = {
              originalValue: void 0,
              value: scale.range()[0]
            };
          }
          if (!this.styleItems[id]) {
            this.styleItems[id] = {};
          }
          _results.push(this.styleItems[id][styleDimension] = style.value);
        }
        return _results;
      } else {
        if (_.isArray(range)) {
          style = range[0];
        } else {
          style = range;
        }
        _ref2 = this.config.ids;
        _results1 = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          id = _ref2[_j];
          if (!this.styleItems[id]) {
            this.styleItems[id] = {};
          }
          _results1.push(this.styleItems[id][styleDimension] = style);
        }
        return _results1;
      }
    };

    ItemsBehavior.prototype.styleItemsToBlock = function(styleItems, property) {
      var item, itemId, result;
      result = [];
      for (itemId in styleItems) {
        item = styleItems[itemId];
        result.push({
          id: itemId,
          value: item[property]
        });
      }
      return result;
    };

    ItemsBehavior.prototype.update = function() {};

    return ItemsBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ItemsDOMBehavior = (function(_super) {
    __extends(ItemsDOMBehavior, _super);

    function ItemsDOMBehavior() {
      this.update = __bind(this.update, this);
      _ref = ItemsDOMBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ItemsDOMBehavior.prototype.update = function() {
      var items, self;
      self = this;
      items = d3.select(this.visualizer.el).selectAll(".item");
      items.selectAll(".item-child").style("background-color", function(d, i) {
        var color, colorRGB, opacity, style;
        color = self.styleItems[d.id]["fillColors"];
        colorRGB = d3.rgb(color);
        opacity = color === 'none' || color === '' ? 0 : self.styleItems[d.id]["fillOpacities"] / 100;
        style = "rgba(" + colorRGB.r + "," + colorRGB.g + "," + colorRGB.b + "," + opacity + ")";
        return style;
      }).style("border", "none").style("height", function(d, i) {
        var cellHeight;
        cellHeight = self.styleItems[d.id]['cellHeight'];
        cellHeight = cellHeight != null ? cellHeight : $(this).css('font-size');
        return cellHeight;
      }).style("box-shadow", "none");
      /*
      items.selectAll(".weighted-text")
        .style("font-weight","normal")
      */

      /*
      items.selectAll(".title-text")
        .style("padding", "0 5px")
        # set each text color
        .style("font-size", (d,i,a) ->
          cellFontSize = self.styleItems[d.id]['cellFontSize']
          return if cellFontSize? then cellFontSize else $(this).css('font-size')
        )
        .style("text-align", (d,i,a) ->
          textAlign = self.styleItems[d.id]['cellTextAlign']
          return if textAlign? then textAlign else $(this).css('text-align')
        )
        # we use line-height to set the text div same haight as it's font size for a better vertical align
        .style("line-height", (d,i) ->
          cellFontSize = self.styleItems[d.id]['cellFontSize']
          return if cellFontSize? then cellFontSize else $(this).css('line-height')
        )
        .style("color", (d,i) ->
          # set each text color
          self.styleItems[d.id]["labelColors"]
        )
        # the transform property is the best way of center this text vertically
        .style("transform", (d,i) ->
          cellHeight = self.styleItems[d.id]['cellHeight']
          cellHeight = if cellHeight? then cellHeight else $(this).css('font-size')
          h = parseFloat(cellHeight)
      
          cellFontSize = self.styleItems[d.id]['cellFontSize']
          cellFontSize = if cellFontSize? then cellFontSize else $(this).css('font-size')
          fs = parseFloat(cellFontSize)
      
          style = "translateY(" + ((h - fs) / 2) + "px)"
          style
        )
      */

      /*
      items.selectAll(".title-text")
        .style("padding", "0 5px")
        .style("line-height", (d,i) ->
          cellFontSize = self.styleItems[d.id]['cellFontSize']
          return if cellFontSize? then cellFontSize else $(this).css('line-height')
        )
        .style("transform", (d,i) ->
          textHeight = $.fn.textHeight($(this))
          cellHeight = self.styleItems[d.id]['cellHeight']
          cellHeight = if cellHeight? then cellHeight else textHeight
          cellHeight = parseFloat(cellHeight)
      
          
      
          style = "translateY(" + (cellHeight/2 - textHeight/2) + "px)"
          style
        )
      */

      return items.style("position", "relative").style("z-index", "0").style("border-width", function(d, i) {
        return self.styleItems[d.id]["lineThickness"];
      }).style("border-style", "solid").style("border-color", function(d, i) {
        var color, colorRGB, opacity, style;
        color = self.styleItems[d.id]["lineColors"];
        colorRGB = d3.rgb(color);
        opacity = color === "none" || color === "" ? 0 : self.styleItems[d.id]["lineOpacities"] / 100;
        style = "rgba(" + colorRGB.r + "," + colorRGB.g + "," + colorRGB.b + "," + opacity + ")";
        return style;
      }).style("padding", 0).style("margin", 0);
    };

    return ItemsDOMBehavior;

  })(quadrigram.Models.ItemsBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ItemsSVGBehavior = (function(_super) {
    __extends(ItemsSVGBehavior, _super);

    function ItemsSVGBehavior() {
      this.update = __bind(this.update, this);
      _ref = ItemsSVGBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ItemsSVGBehavior.prototype.update = function() {
      var items, self;
      self = this;
      items = d3.select(this.visualizer.el).selectAll(".item").filter(function(d) {
        return d.id !== "root_quadrigram_reserved_id";
      });
      return items.attr("fill", function(d, i) {
        return self.styleItems[d.id]["fillColors"];
      }).attr("fill-opacity", function(d, i) {
        return self.styleItems[d.id]["fillOpacities"] / 100;
      }).attr("stroke", function(d, i) {
        var strokeOpacity, strokeThickness;
        strokeOpacity = self.styleItems[d.id]["lineOpacities"];
        strokeThickness = self.styleItems[d.id]["lineThickness"];
        if (strokeOpacity === 0 || strokeThickness === 0) {
          return "none";
        }
        return self.styleItems[d.id]["lineColors"];
      }).attr("stroke-width", function(d, i) {
        return self.styleItems[d.id]["lineThickness"];
      }).attr("stroke-opacity", function(d, i) {
        return self.styleItems[d.id]["lineOpacities"] / 100;
      });
    };

    return ItemsSVGBehavior;

  })(quadrigram.Models.ItemsBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SelectionBehavior = (function(_super) {
    __extends(SelectionBehavior, _super);

    function SelectionBehavior() {
      this.clearItemOnOver = __bind(this.clearItemOnOver, this);
      this.notifyItemOnOver = __bind(this.notifyItemOnOver, this);
      this.updateGraphicSelection = __bind(this.updateGraphicSelection, this);
      this.getSelectedValues = __bind(this.getSelectedValues, this);
      this.getSelectedValues_OLD = __bind(this.getSelectedValues_OLD, this);
      this.getSelectedIds = __bind(this.getSelectedIds, this);
      this.updateOutput = __bind(this.updateOutput, this);
      this.deselectItem = __bind(this.deselectItem, this);
      this.addIdByMultiSelection = __bind(this.addIdByMultiSelection, this);
      this.addIdBySingleSelection = __bind(this.addIdBySingleSelection, this);
      this.processIdOnSelection = __bind(this.processIdOnSelection, this);
      this.updateMultiSelection = __bind(this.updateMultiSelection, this);
      this.updateSingleSelection = __bind(this.updateSingleSelection, this);
      this.emptySelectionAndAlmostOneModeActived = __bind(this.emptySelectionAndAlmostOneModeActived, this);
      this.selectByIds = __bind(this.selectByIds, this);
      this.preprocessSelectedItems = __bind(this.preprocessSelectedItems, this);
      this.updateConfig = __bind(this.updateConfig, this);
      this.executeAfterUpdateStage = __bind(this.executeAfterUpdateStage, this);
      this.initialize = __bind(this.initialize, this);
      _ref = SelectionBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SelectionBehavior.field = "selection";

    SelectionBehavior.stage = "afterUpdate";

    SelectionBehavior.prototype.firstExec = true;

    SelectionBehavior.behaviors = ["quadrigram.Models.ItemsBehavior"];

    SelectionBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(SelectionBehavior.meta, SelectionBehavior.behaviors);
      return output;
    };

    SelectionBehavior.prototype.selectedItems = [];

    SelectionBehavior.meta = {
      "name": "selection",
      "outputs": {
        "selectedIndexes": {
          "outputType": "selection",
          "default": [],
          "label": "Selected Ids"
        },
        "selectedValues": {
          "outputType": "selection",
          "default": [],
          "label": "Selected Values"
        },
        "mouseOverItem": {
          "outputType": "OnOver",
          "default": [],
          "label": "Hovered item"
        },
        "selectedColor": {
          "outputType": "styles",
          "default": [],
          "label": "Colors of selection"
        }
      },
      "properties": {
        "forceSelection": {
          "uiTipContent": "Defines if this visualizer must always have at least one element selected. Useful when connecting visualizers.",
          "label": "This visualizer must have at least one element selected",
          "family": "select",
          "sortingWeight": "82",
          "hidden": false,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "true"
              }
            }
          }
        },
        "selectionMode": {
          "uiTipContent": "Defines if this visualizer can have multiple selection",
          "label": "Selection mode",
          "family": "select",
          "sortingWeight": "83",
          "hidden": true,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "single selection"
              },
              "options": {
                "value": ["single selection", "multiple selection"]
              }
            }
          }
        },
        "selectedItems": {
          "uiTipContent": "Defines which items should be selected. Manually input a default selection or insert the output of another visualizer to synchronize them. Click <a href='http://www.quadrigram.com/#tutorialId/connectVisualizers' target='_blank'>here</a> to learn more",
          "label": "Ids of the selected items",
          "family": "select",
          "sortingWeight": "81",
          "hidden": false,
          "formats": {
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            },
            "JustDrop": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": []
              }
            },
            "Number": {
              "hidden": true,
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": []
              }
            }
          }
        },
        "selectionFillColors": {
          "uiTipContent": "Defines the color of the selected items",
          "label": "Fill color of selected items",
          "family": "select",
          "sortingWeight": "84",
          "hidden": true,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Color": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#000000"
              }
            }
          }
        },
        "selectionFillOpacities": {
          "uiTipContent": "Defines the opacity of the selected items",
          "label": "Fill opacity of selected items",
          "family": "select",
          "sortingWeight": "85",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "100"
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            }
          }
        },
        "selectionLineColors": {
          "uiTipContent": "Defines the color of the outline for the selected items",
          "label": "Outline color of selected items",
          "family": "select",
          "sortingWeight": "86",
          "hidden": true,
          "formats": {
            "Color": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#2861ff"
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            }
          }
        },
        "selectionLineThickness": {
          "uiTipContent": "Defines the thickness of the outline for the selected items",
          "label": "Line thickness of selected items",
          "family": "select",
          "sortingWeight": "87",
          "hidden": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "2px"
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            }
          }
        },
        "selectionLineOpacities": {
          "uiTipContent": "Defines the opacity of the outline for the selected items",
          "label": "Line opacity of selected items",
          "family": "select",
          "sortingWeight": "88",
          "hidden": true,
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "100"
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            }
          }
        },
        "selectionBold": {
          "uiTipContent": "Defines if selected items should be in bold",
          "label": "Selected element font weight",
          "family": "select",
          "sortingWeight": "84",
          "internal": true,
          "hidden": true,
          "formats": {
            "Boolean": {
              "defaults": {
                "value": "false"
              }
            }
          }
        }
      }
    };

    SelectionBehavior.prototype.initialize = function(params) {
      this.colorScale = d3.scale.ordinal();
      return this.config = {
        selectionLineColors: "#000000",
        selectionEvent: "click",
        multiselection: false,
        forceSelection: false
      };
    };

    SelectionBehavior.prototype.executeAfterUpdateStage = function() {
      var ids, items, model, values;
      model = this.visualizer.model;
      items = this.visualizer.items;
      values = this.visualizer.values;
      ids = this.visualizer.idsItems;
      if (!ids) {
        ids = this.visualizer.ids;
      }
      this.changedItems = (this.visualizer.model.changed["fillColors"] != null) || (this.visualizer.model.changed["fillOpacities"] != null) || (this.visualizer.model.changed["lineColors"] != null) || (this.visualizer.model.changed["lineThickness"] != null) || (this.visualizer.model.changed["lineOpacities"] != null) || this.visualizer.changedData || this.firstExec;
      this.changedSelection = (this.visualizer.model.changed["selectedItems"] != null) || (this.visualizer.model.changed["selectionFillColors"] != null) || (this.visualizer.model.changed["selectionFillOpacities"] != null) || (this.visualizer.model.changed["selectionLineColors"] != null) || (this.visualizer.model.changed["selectionLineThickness"] != null) || (this.visualizer.model.changed["selectionLineOpacities"] != null) || (this.visualizer.model.changed["forceSelection"] != null) || this.visualizer.changedData || this.firstExec;
      this.changed = this.changedSelection || this.changedItems;
      if (this.changed) {
        return this.updateConfig({
          itemsEnter: items,
          values: values,
          ids: ids,
          fillColors: model.get("fillColors"),
          fillOpacities: model.get("fillOpacities"),
          lineColors: model.get("lineColors"),
          lineThickness: model.get("lineThickness"),
          lineOpacities: model.get("lineOpacities"),
          selectedItems: model.get("selectedItems"),
          selectionFillColors: model.get("selectionFillColors"),
          selectionFillOpacities: model.get("selectionFillOpacities"),
          selectionLineColors: model.get("selectionLineColors"),
          selectionLineThickness: model.get("selectionLineThickness"),
          selectionLineOpacities: model.get("selectionLineOpacities"),
          forceSelection: model.get("forceSelection") === "true",
          selectionMode: model.get("selectionMode"),
          selectionBold: model.get("selectionBold")
        });
      }
    };

    SelectionBehavior.prototype.updateConfig = function(newConfig) {
      var field, self;
      if (this.changedItems) {
        this.behaviors.items.updateConfig(newConfig);
      }
      for (field in newConfig) {
        this.config[field] = newConfig[field];
      }
      self = this;
      this.config.itemsEnter.on(this.config.selectionEvent, function(d, i) {
        return self.processIdOnSelection(d.id);
      });
      this.config.itemsEnter.on("mouseover", function(d, i) {
        return self.notifyItemOnOver(d);
      });
      this.config.itemsEnter.on("mouseout", function(d, i) {
        return self.clearItemOnOver();
      });
      this.updateGraphicSelection();
      this.config.selectedItems = this.preprocessSelectedItems(this.config.selectedItems);
      if ((this.visualizer.model.changed["selectedItems"] != null) || (this.visualizer.model.changed["forceSelection"] != null) || this.visualizer.changedData || this.firstExec) {
        this.selectByIds(this.config.selectedItems);
      }
      return this.firstExec = false;
    };

    SelectionBehavior.prototype.preprocessSelectedItems = function(source) {
      var candidateId, output, sourceItem, _i, _len;
      output = [];
      if (_.isArray(source)) {
        for (_i = 0, _len = source.length; _i < _len; _i++) {
          sourceItem = source[_i];
          if (sourceItem.value) {
            candidateId = sourceItem.value;
          } else {
            candidateId = sourceItem;
          }
          if (this.config.ids.indexOf(candidateId) !== -1) {
            output.push(candidateId);
          }
        }
      } else {
        if (!source || source === "") {
          output = [];
        } else {
          if (this.config.ids.indexOf(source) !== -1) {
            output = [source];
          } else {
            output = [];
          }
        }
      }
      return output;
    };

    SelectionBehavior.prototype.selectByIds = function(selectedIds) {
      var selectionMode, unionArray;
      if ((!selectedIds || selectedIds.length === 0 || selectedIds === "") && this.config.forceSelection) {
        this.emptySelectionAndAlmostOneModeActived();
      } else {
        unionArray = _.union(selectedIds, this.selectedItems);
        if ((unionArray.length === selectedIds.length) && (unionArray.length === this.selectedItems.length)) {
          return;
        }
        selectionMode = this.config.selectionMode;
        if (!selectionMode) {
          selectionMode = "single selection";
        }
        switch (selectionMode) {
          case "single selection":
            this.updateSingleSelection(selectedIds);
            break;
          case "multiple selection":
            this.updateMultiSelection(selectedIds);
            break;
          default:
            this.updateSingleSelection(selectedIds);
        }
      }
      this.updateGraphicSelection();
      return this.updateOutput();
    };

    SelectionBehavior.prototype.emptySelectionAndAlmostOneModeActived = function() {
      var visualizerIds;
      visualizerIds = this.config.ids;
      if (visualizerIds.length > 0) {
        return this.selectedItems = [visualizerIds[0]];
      }
    };

    SelectionBehavior.prototype.updateSingleSelection = function(selectedIds) {
      if (_.isArray(selectedIds)) {
        if (selectedIds.length > 1) {
          return this.selectedItems = [selectedIds[0]];
        } else {
          return this.selectedItems = selectedIds;
        }
      } else {
        if (selectedIds === "") {
          return this.selectedItems = [];
        } else {
          return this.selectedItems = [selectedIds];
        }
      }
    };

    SelectionBehavior.prototype.updateMultiSelection = function(selectedIds) {
      if (_.isArray(selectedIds)) {
        return this.selectedItems = selectedIds;
      } else {
        if (selectedIds === "") {
          return this.selectedItems = [];
        } else {
          return this.selectedItems = [selectedIds];
        }
      }
    };

    SelectionBehavior.prototype.processIdOnSelection = function(id) {
      var selectionMode;
      if (this.selectedItems.indexOf(id) >= 0) {
        this.deselectItem(id);
      } else {
        selectionMode = this.visualizer.model.get("selectionMode");
        if (!selectionMode) {
          selectionMode = "single selection";
        }
        switch (selectionMode) {
          case "single selection":
            this.addIdBySingleSelection(id);
            break;
          case "multiple selection":
            this.addIdByMultiSelection(id);
        }
      }
      this.updateOutput();
      return this.updateGraphicSelection();
    };

    SelectionBehavior.prototype.addIdBySingleSelection = function(id) {
      return this.selectedItems = [id];
    };

    SelectionBehavior.prototype.addIdByMultiSelection = function(id) {
      this.selectedItems.push(id);
      return log(this.selectedItems);
    };

    SelectionBehavior.prototype.deselectItem = function(id) {
      var index;
      index = this.selectedItems.indexOf(id);
      if (index === -1) {
        return;
      }
      if (this.selectedItems.length > 1) {
        return this.selectedItems.splice(index, 1);
      } else {
        if (!this.config.forceSelection) {
          return this.selectedItems = [];
        }
      }
    };

    SelectionBehavior.prototype.updateOutput = function() {
      var ids, itemId, selectedColors, selectedIds, styleItem, values, _i, _len, _ref1;
      this.trigger("selection:change");
      selectedIds = [];
      ids = this.getSelectedIds();
      values = this.getSelectedValues();
      this.visualizer.updateOutput("selectedIndexes", ids, ids.metadata);
      this.visualizer.updateOutput("selectedValues", values, values.metadata);
      selectedColors = [];
      _ref1 = this.selectedItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        itemId = _ref1[_i];
        styleItem = this.behaviors.items.styleItems[itemId];
        if (styleItem) {
          selectedColors.push({
            id: itemId,
            value: styleItem.fillColors
          });
        }
      }
      return this.visualizer.updateOutput("selectedColor", selectedColors);
    };

    SelectionBehavior.prototype.getSelectedIds = function() {
      var idEntry, output, _i, _len, _ref1;
      if (!_.isArray(this.selectedItems)) {
        return this.selectedItems;
      }
      if (this.selectedItems.length <= 1) {
        return this.selectedItems;
      }
      output = [];
      output.label = this.visualizer.values.label;
      output.metadata = this.visualizer.values.metadata;
      _ref1 = this.selectedItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        idEntry = _ref1[_i];
        output.push({
          id: idEntry,
          value: idEntry
        });
      }
      return output;
    };

    SelectionBehavior.prototype.getSelectedValues_OLD = function() {
      var dim, dimensions, idEntry, output, value, valueEntry, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
      if (!_.isArray(this.selectedItems)) {
        return this.selectedItems;
      }
      if (this.selectedItems.length === 0) {
        return [];
      }
      output = [];
      output.label = this.visualizer.values.label;
      output.metadata = this.visualizer.values.metadata;
      _ref1 = this.selectedItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        idEntry = _ref1[_i];
        _ref2 = this.visualizer.values;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          valueEntry = _ref2[_j];
          if (valueEntry.id === idEntry) {
            if (valueEntry.dataDimensions) {
              dimensions = [];
              _ref3 = valueEntry.dataDimensions;
              for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                dim = _ref3[_k];
                dimensions.push({
                  id: dim,
                  value: valueEntry[dim]
                });
              }
              value = new quadrigram.Models.DataBlockData(dimensions);
              value.metaData = {
                idLabel: "dimension",
                valueLabel: "id"
              };
              output.push({
                id: valueEntry.id,
                value: value
              });
            } else {
              if (_.isArray(valueEntry.value) && valueEntry.value.length > 1) {
                value = new quadrigram.Models.DataBlockData(valueEntry.value);
                value.metaData = {
                  idLabel: "id",
                  valueLabel: "value"
                };
              } else {
                value = valueEntry.value;
              }
              output.push({
                id: valueEntry.id,
                value: value
              });
            }
            break;
          }
        }
      }
      return output;
    };

    SelectionBehavior.prototype.getSelectedValues = function() {
      var dim, entries, idEntry, output, sampleEntry, value, valueEntry, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (!_.isArray(this.selectedItems)) {
        return this.selectedItems;
      }
      if (this.selectedItems.length === 0) {
        return [];
      }
      output = [];
      output.label = "output";
      output.metadata = {};
      sampleEntry = this.visualizer.values[0];
      if (sampleEntry && sampleEntry.dataDimensions) {
        output.metadata.idLabel = "dimension";
        output.metadata.valueLabel = "id";
        _ref1 = sampleEntry.dataDimensions;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          dim = _ref1[_i];
          entries = [];
          _ref2 = this.selectedItems;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            idEntry = _ref2[_j];
            _ref3 = this.visualizer.values;
            for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
              valueEntry = _ref3[_k];
              if (valueEntry.id === idEntry) {
                entries.push({
                  id: valueEntry.id,
                  value: valueEntry[dim]
                });
              }
            }
          }
          value = new quadrigram.Models.DataBlockData(entries);
          value.set("label", "values of " + dim);
          value.metaData = {
            idLabel: "id",
            valueLabel: dim
          };
          output.push({
            id: dim,
            value: value
          });
        }
      } else {
        output.metadata.idLabel = "id";
        output.metadata.valueLabel = "value";
        _ref4 = this.selectedItems;
        for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
          idEntry = _ref4[_l];
          _ref5 = this.visualizer.values;
          for (_m = 0, _len4 = _ref5.length; _m < _len4; _m++) {
            valueEntry = _ref5[_m];
            if (valueEntry.id === idEntry) {
              if (_.isArray(valueEntry.value) && valueEntry.value.length > 1) {
                value = new quadrigram.Models.DataBlockData(valueEntry.value);
                value.set("label", "values of " + valueEntry.id);
                value.metaData = {
                  idLabel: "id",
                  valueLabel: "value"
                };
              } else {
                value = valueEntry.value;
              }
              output.push({
                id: valueEntry.id,
                value: value
              });
            }
          }
        }
      }
      return output;
    };

    SelectionBehavior.prototype.updateGraphicSelection = function() {};

    SelectionBehavior.prototype.notifyItemOnOver = function(item) {
      return this.visualizer.updateOutput("mouseOverItem", item.id);
    };

    SelectionBehavior.prototype.clearItemOnOver = function() {
      return this.visualizer.updateOutput("mouseOverItem", "");
    };

    return SelectionBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SelectionDOMBehavior = (function(_super) {
    __extends(SelectionDOMBehavior, _super);

    function SelectionDOMBehavior() {
      this.updateGraphicSelection = __bind(this.updateGraphicSelection, this);
      _ref = SelectionDOMBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SelectionDOMBehavior.behaviors = ["quadrigram.Models.ItemsDOMBehavior"];

    SelectionDOMBehavior.prototype.updateGraphicSelection = function() {
      var items, selectedItems, self;
      self = this;
      this.behaviors.items.updateConfig(this.config);
      items = d3.select(this.visualizer.el).selectAll(".item");
      items.classed("selected", function(d, i) {
        return self.selectedItems.indexOf(d.id) >= 0;
      });
      selectedItems = items.filter(".selected");
      selectedItems.style("z-index", "1");
      /*
      selectedItems.select(".weighted-text")
          .style("font-weight",(d,i)->
            if self.config.selectionBold == "true"
              return "bold"
            else
              return "normal"
          )
      */

      selectedItems.selectAll(".item-child").style("background-color", function(d, i) {
        var color, colorRGB, opacity, style;
        color = self.config.selectionFillColors;
        if (color === "@QDeactivatedWord") {
          color = $(this).css('background-color');
        }
        colorRGB = d3.rgb(color);
        opacity = color === 'none' || color === '' ? 0 : self.config.selectionFillOpacities / 100;
        style = "rgba(" + colorRGB.r + "," + colorRGB.g + "," + colorRGB.b + "," + opacity + ")";
        return style;
      }).style("box-shadow", function(d, i) {
        var color, colorRGB, opacity, rgba, thickness;
        color = self.config.selectionLineColors;
        colorRGB = d3.rgb(color);
        opacity = color === "none" || color === "" ? 0 : self.config.selectionLineOpacities / 100;
        thickness = self.config.selectionLineThickness;
        rgba = "rgba(" + colorRGB.r + "," + colorRGB.g + "," + colorRGB.b + "," + opacity + ")";
        return "inset 0px 0px 0px " + thickness + " " + rgba;
      });
      return items;
      /* OLD SELECTED BORDERS...
      .style("border-color", (d,i) ->
          # color
          color = self.config.selectionLineColors
          colorRGB = d3.rgb(color)
          opacity = if color is "none" || color is "" then 0 else self.config.selectionLineOpacities / 100
      
          style = "rgba("+colorRGB.r+","+colorRGB.g+","+colorRGB.b+","+opacity+")"
          style
        )
        .style("border-width", (d,i) ->
      
          # thickness
          selection = self.config.selectionLineThickness
          selection
        )
      */

    };

    return SelectionDOMBehavior;

  })(quadrigram.Models.SelectionBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SelectionSVGBehavior = (function(_super) {
    __extends(SelectionSVGBehavior, _super);

    function SelectionSVGBehavior() {
      this.updateGraphicSelection = __bind(this.updateGraphicSelection, this);
      _ref = SelectionSVGBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SelectionSVGBehavior.behaviors = ["quadrigram.Models.ItemsSVGBehavior"];

    SelectionSVGBehavior.prototype.updateGraphicSelection = function() {
      var items, self;
      self = this;
      this.behaviors.items.updateConfig(this.config);
      items = d3.select(this.visualizer.el).selectAll(".item");
      items.classed("selected", function(d, i) {
        return self.selectedItems.indexOf(d.id) >= 0;
      });
      if (this.config.selectionFillColors !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        items.filter(".selected").attr("fill", this.config.selectionFillColors);
      }
      if (this.config.selectionFillOpacities !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        items.filter(".selected").attr("fill-opacity", this.config.selectionFillOpacities / 100);
      }
      if (this.config.selectionLineColors !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        items.filter(".selected").attr("stroke", this.config.selectionLineColors);
      }
      if (this.config.selectionLineThickness !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        items.filter(".selected").attr("stroke-width", function() {
          var strokeWidth;
          this.parentNode.appendChild(this);
          if (self.config.selectionLineThickness) {
            return self.config.selectionLineThickness;
          } else {
            strokeWidth = d3.select(this).attr("stroke-width");
            if (_.isNumber(+strokeWidth)) {
              strokeWidth = +strokeWidth + 2;
            } else {
              strokeWidth = 2;
            }
            return strokeWidth;
          }
        });
      }
      if (this.config.selectionLineOpacities !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        items.filter(".selected").attr("stroke-opacity", this.config.selectionLineOpacities);
      }
      return items.filter(".selected").style("z-index", 1000);
    };

    return SelectionSVGBehavior;

  })(quadrigram.Models.SelectionBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SelectionNetworkBehavior = (function(_super) {
    __extends(SelectionNetworkBehavior, _super);

    function SelectionNetworkBehavior() {
      this.updateOutput = __bind(this.updateOutput, this);
      this.updateGraphicSelection = __bind(this.updateGraphicSelection, this);
      _ref = SelectionNetworkBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SelectionNetworkBehavior.behaviors = ["quadrigram.Models.ItemsSVGBehavior"];

    SelectionNetworkBehavior.field = "selectionNetwork";

    SelectionNetworkBehavior.info = function() {
      var meta, output;
      meta = JSON.parse(JSON.stringify(SelectionNetworkBehavior.meta));
      SelectionNetworkBehavior.meta = output = quadrigram.Models.VisualizerModel.mergeInfo(_.deepObjectExtend(meta, SelectionNetworkBehavior.extendedMeta), SelectionNetworkBehavior.behaviors);
      return output;
    };

    SelectionNetworkBehavior.extendedMeta = {
      "properties": {
        "selectRelationsMode": {
          "uiTipContent": "Defines what is shown when a node is selected",
          "label": "Highlight neigthbours",
          "family": "select",
          "sortingWeight": "83",
          "hidden": true,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "Highlight relatated"
              },
              "options": {
                "value": ["Highlight relatated", "No highlight"]
              }
            }
          }
        }
      },
      "outputs": {
        "relatedNodes": {
          "outputType": "selection",
          "default": [],
          "label": "Nodes related to selection"
        }
      }
    };

    /*
    executeAfterUpdateStage:() =>
      super()
      @on("selection:change",@updateOutput)
    */


    SelectionNetworkBehavior.prototype.updateGraphicSelection = function() {
      var nodesItems, relsItems, self;
      self = this;
      this.behaviors.items.updateConfig(this.config);
      this.visualizer.behaviors.relations.updateConfig(this.visualizer.behaviors.relations.config);
      nodesItems = d3.select(this.visualizer.el).selectAll(".item");
      relsItems = d3.select(this.visualizer.el).selectAll(".link");
      nodesItems.classed("selected", function(d, i) {
        return self.selectedItems.indexOf(d.id) >= 0;
      });
      if (self.highlightedItems != null) {
        nodesItems.classed("highlighted", function(d, i) {
          return self.highlightedItems.indexOf(d.id) >= 0;
        });
      }
      if (self.highlightedRels != null) {
        relsItems.classed("highlighted", function(d, i) {
          return self.highlightedRels.indexOf(d.id) >= 0;
        });
      }
      if (this.config.selectionFillColors !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        nodesItems.filter(".selected").attr("fill", this.config.selectionFillColors);
      }
      if (this.config.selectionFillOpacities !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        nodesItems.filter(".selected").attr("fill-opacity", this.config.selectionFillOpacities / 100);
      }
      if (this.config.selectionLineColors !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        nodesItems.filter(".selected").attr("stroke", this.config.selectionLineColors);
      }
      if (this.config.selectionLineThickness !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        nodesItems.filter(".selected").attr("stroke-width", function() {
          var strokeWidth;
          this.parentNode.appendChild(this);
          if (self.config.selectionLineThickness) {
            return self.config.selectionLineThickness;
          } else {
            strokeWidth = d3.select(this).attr("stroke-width");
            if (_.isNumber(+strokeWidth)) {
              strokeWidth = +strokeWidth + 2;
            } else {
              strokeWidth = 2;
            }
            return strokeWidth;
          }
        });
      }
      if (this.config.selectionLineOpacities !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        nodesItems.filter(".selected").attr("stroke-opacity", this.config.selectionLineOpacities);
      }
      nodesItems.filter(".selected").style("z-index", 1000);
      if ((self.highlightedRels != null) && self.highlightedRels.length > 0 || ((self.highlightedItems != null) && self.highlightedItems.length > 0)) {
        relsItems.attr("stroke-opacity", "0.2").style("z-index", 0);
        relsItems.filter(".selected,.highlighted").attr("stroke-opacity", "1").style("z-index", 1000);
        nodesItems.attr("fill-opacity", "0.4").style("z-index", 0);
        return nodesItems.filter(".selected,.highlighted").attr("fill-opacity", "1").style("z-index", 1000);
      } else {
        return log("nada...");
      }
    };

    SelectionNetworkBehavior.prototype.updateOutput = function() {
      var itemId, node, rel, relatedNodes, relatedRelations, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1, _ref2;
      SelectionNetworkBehavior.__super__.updateOutput.call(this);
      relatedNodes = [];
      relatedRelations = [];
      this.highlightedItems = [];
      this.highlightedRels = [];
      _ref1 = this.selectedItems;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        itemId = _ref1[_i];
        _ref2 = this.visualizer.networkObject.relations;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          rel = _ref2[_j];
          if (rel.source.id === itemId) {
            relatedRelations.push(rel.id);
            relatedNodes.push(rel.target.id);
          } else if (rel.target.id === itemId) {
            relatedRelations.push(rel.id);
            relatedNodes.push(rel.source.id);
          }
        }
        if (this.visualizer.model.get("selectRelationsMode") === "Highlight relatated") {
          log("should highlight ", relatedNodes);
          for (_k = 0, _len2 = relatedNodes.length; _k < _len2; _k++) {
            node = relatedNodes[_k];
            if (this.highlightedItems.indexOf(node) < 0) {
              this.highlightedItems.push(node);
            }
          }
          for (_l = 0, _len3 = relatedRelations.length; _l < _len3; _l++) {
            rel = relatedRelations[_l];
            if (this.highlightedRels.indexOf(rel) < 0) {
              this.highlightedRels.push(rel);
            }
          }
        } else {
          log("do nothing as selecion behav already selected it...");
        }
        /*
        else if @visualizer.model.get("selectRelationsMode") == "Highlight selected"
          log "should highlight ",relatedNodes
          for node in relatedNodes
            if @highlightedItems.indexOf(node)<0
              @highlightedItems.push(node)
        */

      }
      return this.visualizer.updateOutput("relatedNodes", relatedNodes);
    };

    return SelectionNetworkBehavior;

  }).call(this, quadrigram.Models.SelectionBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.DataControllerBehavior = (function(_super) {
    __extends(DataControllerBehavior, _super);

    function DataControllerBehavior() {
      this.setStructures = __bind(this.setStructures, this);
      this.checkDataChanged = __bind(this.checkDataChanged, this);
      this.setEmptyStructures = __bind(this.setEmptyStructures, this);
      this.behaviorChecking = __bind(this.behaviorChecking, this);
      this.hideMessage = __bind(this.hideMessage, this);
      this.notify = __bind(this.notify, this);
      this.checkWrongDataCondition = __bind(this.checkWrongDataCondition, this);
      this._generalChecking = __bind(this._generalChecking, this);
      this.executeStructureStage = __bind(this.executeStructureStage, this);
      _ref = DataControllerBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataControllerBehavior.behaviors = [];

    DataControllerBehavior.prototype.firstExec = true;

    DataControllerBehavior.field = "dataController";

    DataControllerBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(DataControllerBehavior.meta, DataControllerBehavior.behaviors);
      return output;
    };

    DataControllerBehavior.meta = {};

    DataControllerBehavior.prototype.executeStructureStage = function() {
      this.readyForUpdate = this._generalChecking();
      if (!this.readyForUpdate) {
        this.setEmptyStructures();
        return;
      }
      this.readyForUpdate = this.behaviorChecking();
      if (!this.readyForUpdate) {
        this.setEmptyStructures();
        return;
      }
      this.visualizer.changedData = this.checkDataChanged() || this.firstExec || !this.visualizer.values;
      if (this.visualizer.changedData) {
        this.setStructures();
        this.firstExec = false;
      }
      if (this.checkWrongDataCondition()) {
        this.setEmptyStructures();
        this.notify("Error", "Wrong kind of data for this visualizer");
        return this.visualizer.model.original.trigger("wrongData", this.visualizer.model.changed);
      }
    };

    DataControllerBehavior.prototype._generalChecking = function() {
      if (this.visualizer.model.get("fetchState") === "ready") {
        this.hideMessage();
      } else {
        this.notify("EmptyData");
        this.setEmptyStructures();
        return false;
      }
      return true;
    };

    DataControllerBehavior.prototype.checkWrongDataCondition = function() {
      return this.visualizer.values && this.visualizer.values.length === 0 && this.visualizer.model.get("data").length > 0;
    };

    DataControllerBehavior.prototype.notify = function(message, messageBody) {
      return this.visualizer.trigger("vizMessage", message, messageBody);
    };

    DataControllerBehavior.prototype.hideMessage = function() {
      return this.visualizer.trigger("vizMessage", "hide");
    };

    DataControllerBehavior.prototype.behaviorChecking = function() {};

    DataControllerBehavior.prototype.setEmptyStructures = function() {
      this.visualizer.values = void 0;
      return this.visualizer.ids = void 0;
    };

    DataControllerBehavior.prototype.checkDataChanged = function() {};

    DataControllerBehavior.prototype.setStructures = function() {};

    return DataControllerBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.OneDimDataControllerBehavior = (function(_super) {
    __extends(OneDimDataControllerBehavior, _super);

    function OneDimDataControllerBehavior() {
      this.setStructures = __bind(this.setStructures, this);
      this.checkDataChanged = __bind(this.checkDataChanged, this);
      this.behaviorChecking = __bind(this.behaviorChecking, this);
      _ref = OneDimDataControllerBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    OneDimDataControllerBehavior.behaviors = [];

    OneDimDataControllerBehavior.field = "dataController";

    OneDimDataControllerBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(OneDimDataControllerBehavior.meta, OneDimDataControllerBehavior.behaviors);
      return output;
    };

    OneDimDataControllerBehavior.meta = {};

    OneDimDataControllerBehavior.prototype.behaviorChecking = function() {
      if (!this.visualizer.model.get("data") || this.visualizer.model.get("data") === null || this.visualizer.model.get("data").length === 0) {
        if (this.visualizer.model.get("fetchState") === "ready") {
          this.notify("InvalidData");
        } else {
          this.notify("EmptyData");
        }
        return false;
      }
      return true;
    };

    OneDimDataControllerBehavior.prototype.checkDataChanged = function() {
      return this.visualizer.model.changed["data"] != null;
    };

    OneDimDataControllerBehavior.prototype.setStructures = function() {
      var label, metadata, self,
        _this = this;
      this.visualizer.values = this.visualizer.model.get("data");
      label = this.visualizer.values.label;
      metadata = this.visualizer.values.metadata;
      if (!_.isArray(this.visualizer.values)) {
        this.visualizer.values = [
          {
            id: "value",
            value: this.visualizer.values
          }
        ];
      }
      if (_.isArray(this.visualizer.values[0].value)) {
        this.visualizer.values = this.visualizer.values[0].value;
      }
      if (!_.isNaN(parseFloat(this.visualizer.values))) {
        this.visualizer.values = [
          {
            id: 0,
            value: parseFloat(this.visualizer.values)
          }
        ];
      }
      if (this.visualizer.values instanceof quadrigram.Models.DataBlockData) {
        this.visualizer.values = this.visualizer.values.data;
      }
      this.visualizer.values = this.visualizer.values.filter(function(d) {
        var candidate;
        candidate = parseFloat(d.value);
        return !_.isNaN(candidate);
      });
      this.visualizer.values.label = label;
      this.visualizer.values.metadata = metadata;
      self = this;
      _.each(this.visualizer.values, function(d, i) {
        d.metadata = {};
        d.metadata["value"] = {};
        d.metadata["value"].label = self.visualizer.values.label;
        d.metadata["value"].metadata = self.visualizer.values.metadata;
        return d.metadata.dataDimensions = ["value"];
      });
      return this.visualizer.ids = _.map(this.visualizer.values, function(d, i) {
        return d.id;
      });
    };

    return OneDimDataControllerBehavior;

  }).call(this, quadrigram.Models.DataControllerBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TextListDataControllerBehavior = (function(_super) {
    __extends(TextListDataControllerBehavior, _super);

    function TextListDataControllerBehavior() {
      this.setStructures = __bind(this.setStructures, this);
      this.checkWrongDataCondition = __bind(this.checkWrongDataCondition, this);
      this.checkDataChanged = __bind(this.checkDataChanged, this);
      this.behaviorChecking = __bind(this.behaviorChecking, this);
      _ref = TextListDataControllerBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextListDataControllerBehavior.behaviors = [];

    TextListDataControllerBehavior.field = "dataController";

    TextListDataControllerBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(TextListDataControllerBehavior.meta, TextListDataControllerBehavior.behaviors);
      return output;
    };

    TextListDataControllerBehavior.meta = {};

    TextListDataControllerBehavior.prototype.behaviorChecking = function() {
      /*
      if !@visualizer.model.get("data")? || @visualizer.model.get("data") == null || @visualizer.model.get("data").length == 0 
        @notify("EmptyData")
        return false
      */

      return true;
    };

    TextListDataControllerBehavior.prototype.checkDataChanged = function() {
      return this.visualizer.model.changed["data"] != null;
    };

    TextListDataControllerBehavior.prototype.checkWrongDataCondition = function() {
      return false;
    };

    TextListDataControllerBehavior.prototype.setStructures = function() {
      var self,
        _this = this;
      this.visualizer.values = this.visualizer.model.get("data");
      if (!this.visualizer.values) {
        this.visualizer.values = "";
      }
      if (!_.isArray(this.visualizer.values)) {
        this.visualizer.values = [
          {
            id: "value",
            value: this.visualizer.values
          }
        ];
      }
      if (this.visualizer.values[0] == null) {
        this.visualizer.values = [
          {
            id: "",
            value: ""
          }
        ];
      }
      if (_.isArray(this.visualizer.values[0].value)) {
        this.visualizer.values = this.visualizer.values[0].value;
      }
      if (!_.isArray(this.visualizer.values)) {
        this.visualizer.values = [
          {
            id: 0,
            value: this.visualizer.values
          }
        ];
      }
      if (this.visualizer.values instanceof quadrigram.Models.DataBlockData) {
        this.visualizer.values = this.visualizer.values.data;
      }
      self = this;
      _.each(this.visualizer.values, function(d, i) {
        d.metadata = {};
        d.metadata["value"] = {};
        d.metadata["value"].label = self.visualizer.values.label;
        d.metadata["value"].metadata = self.visualizer.values.metadata;
        return d.metadata.dataDimensions = ["value"];
      });
      return this.visualizer.ids = _.map(this.visualizer.values, function(d, i) {
        return d.id;
      });
    };

    return TextListDataControllerBehavior;

  }).call(this, quadrigram.Models.DataControllerBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TwoDimDataControllerBehavior = (function(_super) {
    __extends(TwoDimDataControllerBehavior, _super);

    function TwoDimDataControllerBehavior() {
      this.cleanData = __bind(this.cleanData, this);
      this.sortIds = __bind(this.sortIds, this);
      this.sortValues = __bind(this.sortValues, this);
      this.setDimension = __bind(this.setDimension, this);
      this.setStructures = __bind(this.setStructures, this);
      this.checkDataChanged = __bind(this.checkDataChanged, this);
      this.behaviorChecking = __bind(this.behaviorChecking, this);
      _ref = TwoDimDataControllerBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TwoDimDataControllerBehavior.behaviors = [];

    TwoDimDataControllerBehavior.field = "dataController";

    TwoDimDataControllerBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(TwoDimDataControllerBehavior.meta, TwoDimDataControllerBehavior.behaviors);
      return output;
    };

    TwoDimDataControllerBehavior.meta = {
      "properties": {
        "dimensionAsItems": {
          "uiTipContent": "Determines if items (lines) are the rows or the columns of the input table",
          "label": "Data table orientation",
          "family": "data",
          "sortingWeight": "5",
          "hidden": true,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "Rows"
              },
              "options": {
                "value": ["Rows", "Columns"]
              }
            }
          }
        }
      }
    };

    TwoDimDataControllerBehavior.prototype.behaviorChecking = function() {
      if (!this.visualizer.model.get("data") || this.visualizer.model.get("data") === null || this.visualizer.model.get("data").length === 0) {
        if (this.visualizer.model.get("fetchState") === "ready") {
          this.notify("InvalidData");
        } else {
          this.notify("EmptyData");
        }
        return false;
      }
      return true;
    };

    TwoDimDataControllerBehavior.prototype.checkDataChanged = function() {
      return (this.visualizer.model.changed["data"] != null) || (this.visualizer.model.changed["dimensionAsItems"] != null);
    };

    TwoDimDataControllerBehavior.prototype.setStructures = function() {
      var itemSource, itemSourceIds, self, _i, _j, _len, _len1, _ref1, _ref2,
        _this = this;
      this.visualizer.values = this.setDimension(this.cleanData(this.visualizer.model.get("data")), this.visualizer.model.get("dimensionAsItems"));
      this.visualizer.ids = [];
      this.visualizer.idsItems = [];
      self = this;
      _ref1 = this.visualizer.values;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        itemSource = _ref1[_i];
        itemSource.metadata = {
          dataDimensions: ["value"],
          value: {
            metadata: this.visualizer.values.metadata,
            label: this.visualizer.values.label
          }
        };
        this.visualizer.idsItems.push(itemSource.id);
        _.each(itemSource.value, function(d, i) {
          d.label = self.visualizer.values.label;
          return d.metadata = self.visualizer.values.metadata;
        });
      }
      this.sortValues(this.visualizer.values);
      _ref2 = this.visualizer.values;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        itemSource = _ref2[_j];
        itemSourceIds = _.map(itemSource.value, function(d, i) {
          return d.id;
        });
        this.visualizer.ids = this.sortIds(_.union(this.visualizer.ids, itemSourceIds));
      }
      if (!this.visualizer.values || this.visualizer.values.length === 0) {
        this.notify("EmptyData");
      }
    };

    TwoDimDataControllerBehavior.prototype.setDimension = function(values, dimension) {
      var dimObject, item, item1, item2, output, _i, _j, _len, _len1, _ref1;
      if (dimension === "Rows") {
        return values;
      }
      output = [];
      output.label = values.label;
      output.metadata = values.metadata;
      dimObject = {};
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        item1 = values[_i];
        if (_.isArray(item1.value)) {
          _ref1 = item1.value;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            item2 = _ref1[_j];
            if (!dimObject[item2.id]) {
              dimObject[item2.id] = [];
            }
            dimObject[item2.id].push({
              id: item1.id,
              value: item2.value
            });
          }
        }
      }
      for (item in dimObject) {
        output.push({
          id: item,
          value: dimObject[item]
        });
      }
      return output;
    };

    TwoDimDataControllerBehavior.prototype.sortValues = function(values) {
      var candidateNumber, mnt, valueEntry, _i, _len;
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        valueEntry = values[_i];
        mnt = moment(valueEntry.value[0].id, "DD-MM-YYYY");
        if (mnt.isValid() && (valueEntry.value[0].id.toString().indexOf("-") !== -1 || valueEntry.value[0].id.toString().indexOf("/") !== -1)) {
          valueEntry.value = _.sortBy(valueEntry.value, function(d) {
            mnt = moment(d.id, "DD-MM-YYYY");
            return mnt._d.getTime();
          });
        } else {
          candidateNumber = parseFloat(valueEntry.value[0].id);
          if (!_.isNaN(candidateNumber)) {
            valueEntry.value = _.sortBy(valueEntry.value, function(d) {
              candidateNumber = parseFloat(d.id);
              return candidateNumber;
            });
          }
        }
      }
      return values;
    };

    TwoDimDataControllerBehavior.prototype.sortIds = function(ids) {
      var candidateNumber, mnt, output;
      mnt = moment(ids[0], "DD-MM-YYYY");
      if (mnt.isValid() && (ids[0].toString().indexOf("-") !== -1 || ids[0].toString().indexOf("/") !== -1)) {
        output = _.sortBy(ids, function(d) {
          mnt = moment(d, "DD-MM-YYYY");
          return mnt._d.getTime();
        });
        return output;
      } else {
        candidateNumber = parseFloat(ids[0]);
        if (!_.isNaN(candidateNumber)) {
          output = _.sortBy(ids, function(d) {
            candidateNumber = parseFloat(d);
            return candidateNumber;
          });
          return output;
        } else {
          return ids;
        }
      }
    };

    TwoDimDataControllerBehavior.prototype.cleanData = function(data) {
      var candidateItem, candidateList, d, i, isArray, newData, output, outputList, v, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref1;
      output = [];
      output.label = data.label;
      output.metadata = data.metadata;
      isArray = false;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        if (_.isArray(d.value)) {
          isArray = true;
        }
      }
      if (!isArray) {
        newData = [];
        for (i = _j = 0, _len1 = data.length; _j < _len1; i = ++_j) {
          v = data[i];
          newData.push({
            id: v.id,
            value: [
              {
                id: data.metadata.valueLabel,
                value: v.value
              }
            ]
          });
        }
        data = newData;
      }
      outputList = [];
      for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
        candidateList = data[_k];
        outputList = [];
        _ref1 = candidateList.value;
        for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
          candidateItem = _ref1[_l];
          if (!isNaN(+candidateItem.value)) {
            outputList.push(candidateItem);
          }
        }
        outputList = _.sortBy(outputList, function(item) {
          return item.id;
        });
        if (outputList.length > 0) {
          output.push({
            id: candidateList.id,
            value: outputList
          });
        }
      }
      return output;
    };

    return TwoDimDataControllerBehavior;

  }).call(this, quadrigram.Models.DataControllerBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PlacesDataControllerBehavior = (function(_super) {
    __extends(PlacesDataControllerBehavior, _super);

    function PlacesDataControllerBehavior() {
      this.cleanData = __bind(this.cleanData, this);
      this.updateCoordinatesObject = __bind(this.updateCoordinatesObject, this);
      this.createLatLngObjects = __bind(this.createLatLngObjects, this);
      this.createLatLngObjectsFromUTMData = __bind(this.createLatLngObjectsFromUTMData, this);
      this.checkWrongDataCondition = __bind(this.checkWrongDataCondition, this);
      this.setStructures = __bind(this.setStructures, this);
      this.checkDataChanged = __bind(this.checkDataChanged, this);
      this.setEmptyStructures = __bind(this.setEmptyStructures, this);
      this.behaviorChecking = __bind(this.behaviorChecking, this);
      _ref = PlacesDataControllerBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PlacesDataControllerBehavior.behaviors = [];

    PlacesDataControllerBehavior.stage = "structure";

    PlacesDataControllerBehavior.field = "dataController";

    PlacesDataControllerBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(PlacesDataControllerBehavior.meta, PlacesDataControllerBehavior.behaviors);
      return output;
    };

    PlacesDataControllerBehavior.meta = {};

    PlacesDataControllerBehavior.prototype.behaviorChecking = function() {
      if (!this.visualizer.model.get("places")[0] || this.visualizer.model.get("places")[0] === null || this.visualizer.model.get("places")[0].length === 0 || !this.visualizer.model.get("places")[1] || this.visualizer.model.get("places")[1] === null || this.visualizer.model.get("places")[1].length === 0) {
        if (this.visualizer.model.get("fetchState") === "ready") {
          this.notify("InvalidData");
        } else {
          this.notify("EmptyData");
        }
        return false;
      }
      return true;
    };

    PlacesDataControllerBehavior.prototype.setEmptyStructures = function() {
      this.visualizer.coordinates = void 0;
      this.visualizer.values = void 0;
      return this.visualizer.ids = void 0;
    };

    PlacesDataControllerBehavior.prototype.checkDataChanged = function() {
      return (this.visualizer.model.changed["values"] != null) || (this.visualizer.model.changed["labels"] != null) || (this.visualizer.model.changed["places"] != null);
    };

    PlacesDataControllerBehavior.prototype.setStructures = function() {
      var _this = this;
      this.visualizer.values = [];
      this.coordinatesObject = {};
      if (this.visualizer.model.get("places").currentFormat === "PlaceUTM") {
        this.sourcePlacesUTMX = this.cleanData(this.visualizer.model.get("places")[0]);
        this.sourcePlacesUTMY = this.cleanData(this.visualizer.model.get("places")[1]);
        this.sourcePlacesZone = this.visualizer.model.get("places")[2];
        this.updateCoordinatesObject("utmx", this.sourcePlacesUTMX);
        this.updateCoordinatesObject("utmy", this.sourcePlacesUTMY);
        this.updateCoordinatesObject("utmzone", sourcePlacesZone);
        if (this.visualizer.model.get("values").currentFormat === "PxByValues" || this.visualizer.model.get("values").currentFormat === "ByValues" || this.visualizer.model.get("values").currentFormat === "IntensitiesByValues" || this.visualizer.model.get("values").currentFormat === "PxByValuesAndDomain") {
          this.updateCoordinatesObject("value", this.visualizer.model.get("values")[0]);
        } else {
          this.updateCoordinatesObject("value", this.visualizer.model.get("values"));
        }
        this.createLatLngObjectsFromUTMData();
      } else {
        this.sourcePlacesLat = this.cleanData(this.visualizer.model.get("places")[0]);
        this.sourcePlacesLon = this.cleanData(this.visualizer.model.get("places")[1]);
      }
      this.updateCoordinatesObject("lat", this.sourcePlacesLat);
      this.updateCoordinatesObject("lon", this.sourcePlacesLon);
      if (this.visualizer.model.get("values").currentFormat === "PxByValues" || this.visualizer.model.get("values").currentFormat === "ByValues" || this.visualizer.model.get("values").currentFormat === "IntensitiesByValues" || this.visualizer.model.get("values").currentFormat === "PxByValuesAndDomain") {
        this.updateCoordinatesObject("value", this.visualizer.model.get("values")[0]);
      } else {
        this.updateCoordinatesObject("value", this.visualizer.model.get("values"));
      }
      this.createLatLngObjects();
      this.visualizer.coordinates = _.values(this.coordinatesObject);
      this.visualizer.ids = _.keys(this.coordinatesObject);
      this.visualizer.values = this.visualizer.coordinates;
      return _.each(this.visualizer.values, function(d, i) {
        d.metadata = {};
        d.metadata["value"] = {};
        d.metadata["value"].label = _this.visualizer.model.get("values").label;
        if (!d.metadata["value"].label) {
          d.metadata["value"].label = "Value";
        }
        d.metadata["value"].metadata = _this.visualizer.model.get("values").metadata;
        return d.metadata.dataDimensions = ["value"];
      });
    };

    PlacesDataControllerBehavior.prototype.checkWrongDataCondition = function() {
      if (this.visualizer.model.get("places").currentFormat === "PlaceUTM") {
        return (this.sourcePlacesUTMX.length === 0 && this.visualizer.model.get("places")[0] && this.visualizer.model.get("places")[0].length > 0) || (this.sourcePlacesUTMY.length === 0 && this.visualizer.model.get("places")[1] && this.visualizer.model.get("places")[1].length > 0);
      } else {
        return ((this.sourcePlacesLat !== void 0 && this.sourcePlacesLat.length === 0) && this.visualizer.model.get("places")[0] && this.visualizer.model.get("places")[0].length > 0) || ((this.sourcePlacesLon !== void 0 && this.sourcePlacesLon.length === 0) && this.visualizer.model.get("places")[1] && this.visualizer.model.get("places")[1].length > 0);
      }
    };

    PlacesDataControllerBehavior.prototype.createLatLngObjectsFromUTMData = function() {
      var coordTempDeg, coordTempUTM, coordinate, coordinateKey, _ref1, _results;
      _ref1 = this.coordinatesObject;
      _results = [];
      for (coordinateKey in _ref1) {
        coordinate = _ref1[coordinateKey];
        coordTempUTM = new UTMConv.UTMCoords(parseFloat(coordinate.utmzone), parseFloat(coordinate.utmx), parseFloat(coordinate.utmy));
        coordTempDeg = coordTempUTM.to_deg();
        coordinate.lat = parseFloat(coordTempDeg.latd);
        coordinate.lon = parseFloat(coordTempDeg.lngd);
        if (coordinate.lat && _.isNumber(coordinate.lat) && !_.isNaN(coordinate.lat) && coordinate.lon && _.isNumber(coordinate.lon) && !_.isNaN(coordinate.lon)) {
          _results.push(coordinate.LatLng = new L.LatLng(coordinate.lat, coordinate.lon));
        } else {
          _results.push(delete this.coordinatesObject[coordinate.id]);
        }
      }
      return _results;
    };

    PlacesDataControllerBehavior.prototype.createLatLngObjects = function() {
      var coordinate, coordinateKey, _ref1, _results;
      _ref1 = this.coordinatesObject;
      _results = [];
      for (coordinateKey in _ref1) {
        coordinate = _ref1[coordinateKey];
        coordinate.lat = parseFloat(coordinate.lat);
        coordinate.lon = parseFloat(coordinate.lon);
        if (coordinate.lat && _.isNumber(coordinate.lat) && !_.isNaN(coordinate.lat) && coordinate.lon && _.isNumber(coordinate.lon) && !_.isNaN(coordinate.lon)) {
          _results.push(coordinate.LatLng = new L.LatLng(coordinate.lat, coordinate.lon));
        } else {
          _results.push(delete this.coordinatesObject[coordinate.id]);
        }
      }
      return _results;
    };

    PlacesDataControllerBehavior.prototype.updateCoordinatesObject = function(field, data) {
      var coordinateObject, coordinateObjectKey, entry, _i, _len, _ref1, _results, _results1;
      if (_.isArray(data)) {
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          entry = data[_i];
          if (!this.coordinatesObject[entry.id]) {
            this.coordinatesObject[entry.id] = {
              id: entry.id,
              dataDimensions: ["value"]
            };
          }
          _results.push(this.coordinatesObject[entry.id][field] = entry.value);
        }
        return _results;
      } else {
        _ref1 = this.coordinatesObject;
        _results1 = [];
        for (coordinateObjectKey in _ref1) {
          coordinateObject = _ref1[coordinateObjectKey];
          coordinateObject[field] = data;
          _results1.push(coordinateObject["dataDimensions"] = ["value"]);
        }
        return _results1;
      }
    };

    PlacesDataControllerBehavior.prototype.cleanData = function(list) {
      var candidate, cleanValue, listEntry, outputList, _i, _len;
      if (_.isString(list)) {
        return [
          {
            id: "Place",
            value: parseFloat(list.replace(/\,/g, ''))
          }
        ];
      }
      outputList = [];
      outputList.label = list.label;
      outputList.metadata = list.metadata;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        listEntry = list[_i];
        candidate = {
          id: listEntry.id,
          value: listEntry.value
        };
        cleanValue = candidate.value;
        if (cleanValue != null) {
          if (!_.isNumber(cleanValue)) {
            cleanValue = parseFloat(cleanValue.replace(/\,/g, ''));
          }
          if (!isNaN(cleanValue)) {
            candidate.value = cleanValue;
            outputList.push(candidate);
          }
        }
      }
      return outputList;
    };

    return PlacesDataControllerBehavior;

  }).call(this, quadrigram.Models.DataControllerBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ScatterDataControllerBehavior = (function(_super) {
    __extends(ScatterDataControllerBehavior, _super);

    function ScatterDataControllerBehavior() {
      this.cleanData = __bind(this.cleanData, this);
      this.setScatterDim = __bind(this.setScatterDim, this);
      this.updateScatterValuesObject = __bind(this.updateScatterValuesObject, this);
      this.cleanScatterValuesObject = __bind(this.cleanScatterValuesObject, this);
      this.setStructures = __bind(this.setStructures, this);
      this.checkWrongDataCondition = __bind(this.checkWrongDataCondition, this);
      this.checkDataChanged = __bind(this.checkDataChanged, this);
      this.behaviorChecking = __bind(this.behaviorChecking, this);
      _ref = ScatterDataControllerBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ScatterDataControllerBehavior.behaviors = [];

    ScatterDataControllerBehavior.stage = "structure";

    ScatterDataControllerBehavior.field = "dataController";

    ScatterDataControllerBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(ScatterDataControllerBehavior.meta, ScatterDataControllerBehavior.behaviors);
      return output;
    };

    ScatterDataControllerBehavior.meta = {};

    ScatterDataControllerBehavior.prototype.behaviorChecking = function() {
      if (!this.visualizer.model.get("dataXAxis") || !this.visualizer.model.get("dataXAxis") === null || this.visualizer.model.get("dataXAxis").length === 0 || !this.visualizer.model.get("dataYAxis") || !this.visualizer.model.get("datayAxis") === null || this.visualizer.model.get("dataYAxis").length === 0) {
        if (this.visualizer.model.get("fetchState") === "ready") {
          this.notify("InvalidData");
        } else {
          this.notify("EmptyData");
        }
        this.setEmptyStructures();
        return false;
      }
      return true;
    };

    ScatterDataControllerBehavior.prototype.checkDataChanged = function() {
      return (this.visualizer.model.changed["dataXAxis"] != null) || (this.visualizer.model.changed["dataYAxis"] != null) || (this.visualizer.model.changed["dataRadius"] != null);
    };

    ScatterDataControllerBehavior.prototype.checkWrongDataCondition = function() {
      return (this.visualizer.xValues.length === 0 && this.visualizer.model.get("dataXAxis") && this.visualizer.model.get("dataXAxis").length > 0) || (this.visualizer.yValues.length === 0 && this.visualizer.model.get("dataYAxis") && this.visualizer.model.get("dataYAxis").length > 0);
    };

    ScatterDataControllerBehavior.prototype.setStructures = function() {
      var radiusInput,
        _this = this;
      this.visualizer.xValues = this.cleanData(this.visualizer.model.get("dataXAxis"));
      this.visualizer.yValues = this.cleanData(this.visualizer.model.get("dataYAxis"));
      radiusInput = this.visualizer.model.get("dataRadius");
      radiusInput = radiusInput[0];
      this.visualizer.radiusValues = this.cleanData(radiusInput);
      this.scatterValuesObject = {};
      this.updateScatterValuesObject("xValue", this.visualizer.xValues);
      this.updateScatterValuesObject("yValue", this.visualizer.yValues);
      this.updateScatterValuesObject("radiusValue", this.visualizer.radiusValues);
      this.setScatterDim("xDim", this.visualizer.xValues.label);
      this.setScatterDim("yDim", this.visualizer.yValues.label);
      this.setScatterDim("radiusDim", this.visualizer.radiusValues.label);
      this.originalValuesNum = Object.keys(this.scatterValuesObject).length;
      this.cleanScatterValuesObject();
      this.visualizer.values = _.values(this.scatterValuesObject);
      _.each(this.visualizer.values, function(d, i) {
        d.metadata = {};
        d.metadata["xValue"] = {};
        d.metadata["xValue"].label = _this.visualizer.xValues.label;
        d.metadata["xValue"].metadata = _this.visualizer.xValues.metadata;
        d.metadata["yValue"] = {};
        d.metadata["yValue"].label = _this.visualizer.yValues.label;
        d.metadata["yValue"].metadata = _this.visualizer.yValues.metadata;
        d.metadata["radiusValue"] = {};
        d.metadata["radiusValue"].label = _this.visualizer.radiusValues.label;
        d.metadata["radiusValue"].metadata = _this.visualizer.radiusValues.metadata;
        return d.metadata.dataDimensions = ["xValue", "yValue", "radiusValue"];
      });
      return this.visualizer.ids = _.keys(this.scatterValuesObject);
    };

    ScatterDataControllerBehavior.prototype.cleanScatterValuesObject = function() {
      var key, scatterValue, _ref1, _results;
      _ref1 = this.scatterValuesObject;
      _results = [];
      for (key in _ref1) {
        scatterValue = _ref1[key];
        if (!scatterValue.xValue || !scatterValue.yValue) {
          _results.push(delete this.scatterValuesObject[key]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ScatterDataControllerBehavior.prototype.updateScatterValuesObject = function(field, list) {
      var entry, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        entry = list[_i];
        if (_.isNaN(parseFloat(entry.value))) {
          continue;
        }
        if (!this.scatterValuesObject[entry.id]) {
          this.scatterValuesObject[entry.id] = {
            id: entry.id,
            dataDimensions: ["xValue", "yValue", "radiusValue"]
          };
        }
        _results.push(this.scatterValuesObject[entry.id][field] = entry.value);
      }
      return _results;
    };

    ScatterDataControllerBehavior.prototype.setScatterDim = function(dim, value) {
      var key, scatterValue, _ref1, _results;
      _ref1 = this.scatterValuesObject;
      _results = [];
      for (key in _ref1) {
        scatterValue = _ref1[key];
        _results.push(scatterValue[dim] = value);
      }
      return _results;
    };

    ScatterDataControllerBehavior.prototype.cleanData = function(list) {
      var candidate, cleanValue, outputList, _i, _len;
      if (_.isString(list)) {
        return [
          {
            id: "0",
            value: parseFloat(list.replace(/\,/g, ''))
          }
        ];
      }
      outputList = [];
      outputList.label = list.label;
      outputList.metadata = list.metadata;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        candidate = list[_i];
        cleanValue = candidate.value;
        if (cleanValue != null) {
          if (!_.isNumber(cleanValue)) {
            cleanValue = parseFloat(cleanValue.replace(/\,/g, ''));
          }
          if (!isNaN(cleanValue)) {
            candidate.value = cleanValue;
            outputList.push(candidate);
          }
        }
      }
      return outputList;
    };

    return ScatterDataControllerBehavior;

  }).call(this, quadrigram.Models.DataControllerBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.NetworkDataControllerBehavior = (function(_super) {
    __extends(NetworkDataControllerBehavior, _super);

    function NetworkDataControllerBehavior() {
      this.updateValuesOnObject = __bind(this.updateValuesOnObject, this);
      this.setIndexesOfNodesOnRels = __bind(this.setIndexesOfNodesOnRels, this);
      this.setWeights = __bind(this.setWeights, this);
      this.setWeightsOfRelations = __bind(this.setWeightsOfRelations, this);
      this.setWeightsOfNodes = __bind(this.setWeightsOfNodes, this);
      this.cleanNodesSource = __bind(this.cleanNodesSource, this);
      this.setStructures = __bind(this.setStructures, this);
      this.checkWrongDataCondition = __bind(this.checkWrongDataCondition, this);
      this.checkDataChanged = __bind(this.checkDataChanged, this);
      this.behaviorChecking = __bind(this.behaviorChecking, this);
      _ref = NetworkDataControllerBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NetworkDataControllerBehavior.behaviors = [];

    NetworkDataControllerBehavior.stage = "structure";

    NetworkDataControllerBehavior.field = "dataController";

    NetworkDataControllerBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(NetworkDataControllerBehavior.meta, NetworkDataControllerBehavior.behaviors);
      return output;
    };

    NetworkDataControllerBehavior.meta = {};

    NetworkDataControllerBehavior.prototype.behaviorChecking = function() {
      if (!this.visualizer.model.get("network") || !this.visualizer.model.get("network") === null || this.visualizer.model.get("network").length === 0 || !this.visualizer.model.get("network")[0] || !this.visualizer.model.get("network")[0] === null || this.visualizer.model.get("network")[0].length === 0 || !this.visualizer.model.get("network")[1] || !this.visualizer.model.get("network")[1] === null || this.visualizer.model.get("network")[1].length === 0) {
        if (this.visualizer.model.get("fetchState") === "ready") {
          this.notify("InvalidData");
        } else {
          this.notify("EmptyData");
        }
        this.setEmptyStructures();
        return false;
      }
      return true;
    };

    NetworkDataControllerBehavior.prototype.checkDataChanged = function() {
      return (this.visualizer.model.changed["network"] != null) || (this.visualizer.model.changed["values"] != null);
    };

    NetworkDataControllerBehavior.prototype.checkWrongDataCondition = function() {
      return this.visualizer.networkObject.nodes.length === 0 && this.visualizer.model.get("nodes") && this.visualizer.model.get("nodes").length > 0;
    };

    NetworkDataControllerBehavior.prototype.setStructures = function() {
      var nodesArray, nodesCol, relationsArray, relationsCol, _i, _j, _len, _len1, _ref1, _ref2;
      this.visualizer.nodesSource = this.cleanNodesSource(this.visualizer.model.get("network")[0]);
      this.visualizer.relationsSource = this.visualizer.model.get("network")[1];
      this.nodesObject = {};
      _ref1 = this.visualizer.nodesSource;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        nodesCol = _ref1[_i];
        this.updateValuesOnObject(this.nodesObject, nodesCol.id, nodesCol.value, "value");
      }
      this.setWeightsOfNodes();
      nodesArray = _.values(this.nodesObject);
      this.relationsObject = {};
      _ref2 = this.visualizer.relationsSource;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        relationsCol = _ref2[_j];
        this.updateValuesOnObject(this.relationsObject, relationsCol.id, relationsCol.value, "relationValue");
      }
      this.setWeightsOfRelations();
      this.setIndexesOfNodesOnRels(this.relationsObject, nodesArray);
      relationsArray = _.values(this.relationsObject);
      this.visualizer.networkObject = {
        nodes: nodesArray,
        relations: relationsArray
      };
      this.visualizer.ids = _.keys(this.nodesObject);
      this.visualizer.idsRelations = _.keys(this.relationsObject);
      this.visualizer.values = nodesArray;
      this.visualizer.relationsValues = relationsArray;
      this.visualizer.radiusValues = _.map(nodesArray, function(d) {
        return {
          id: d.id,
          value: d.value
        };
      });
      this.visualizer.model.original.idsRelations = this.visualizer.idsRelations;
      return this.visualizer.weightRelations = _.map(relationsArray, function(d) {
        return {
          id: d.id,
          value: d.value
        };
      });
    };

    NetworkDataControllerBehavior.prototype.cleanNodesSource = function(source) {
      if (_.isArray(source[0].value)) {
        return source;
      } else {
        return [
          {
            id: "name",
            value: source
          }
        ];
      }
    };

    NetworkDataControllerBehavior.prototype.setWeightsOfNodes = function() {
      if (_.isArray(this.visualizer.model.get("values")) && this.visualizer.model.get("values").currentFormat === "PxByValues") {
        this.visualizer.externalWeights = this.visualizer.model.get("values")[0];
      }
      return this.setWeights(this.nodesObject, this.visualizer.externalWeights, "value");
    };

    NetworkDataControllerBehavior.prototype.setWeightsOfRelations = function() {
      if (_.isArray(this.visualizer.model.get("linkThickness")) && this.visualizer.model.get("linkThickness").currentFormat === "PxByValues") {
        this.visualizer.externalWeightsRelations = this.visualizer.model.get("linkThickness")[0];
      }
      return this.setWeights(this.relationsObject, this.visualizer.externalWeightsRelations, "relationValue");
    };

    NetworkDataControllerBehavior.prototype.setWeights = function(sourceObject, externalWeights, propertyName) {
      var externalWeightEntry, objectInfo, objectInfoKey, _i, _len, _results;
      if (externalWeights) {
        for (_i = 0, _len = externalWeights.length; _i < _len; _i++) {
          externalWeightEntry = externalWeights[_i];
          objectInfo = sourceObject[externalWeightEntry.id];
          if (objectInfo != null) {
            objectInfo.externalWeight = externalWeightEntry.value;
          }
        }
      }
      _results = [];
      for (objectInfoKey in sourceObject) {
        objectInfo = sourceObject[objectInfoKey];
        objectInfo.value = 0;
        if (objectInfo.Weight) {
          objectInfo.value = parseFloat(objectInfo.Weight);
          objectInfo.metadata[propertyName].label = "Weight";
        }
        if (objectInfo.externalWeight) {
          objectInfo.metadata[propertyName].label = externalWeights.label;
          objectInfo.value = parseFloat(objectInfo.externalWeight);
        }
        _results.push(objectInfo[propertyName] = objectInfo.value);
      }
      return _results;
    };

    NetworkDataControllerBehavior.prototype.setIndexesOfNodesOnRels = function(relations, nodes) {
      var idNodesDict, index, nodeEntry, relationEntry, relationKey, _i, _j, _len, _len1, _ref1, _results;
      idNodesDict = {};
      for (index = _i = 0, _len = nodes.length; _i < _len; index = ++_i) {
        nodeEntry = nodes[index];
        idNodesDict[nodeEntry.id] = index;
      }
      for (relationKey in relations) {
        relationEntry = relations[relationKey];
        relationEntry.source = idNodesDict[relationEntry.Origin];
        relationEntry.target = idNodesDict[relationEntry.Destination];
        if (relationEntry.target == null) {
          log(relationEntry.target);
        }
      }
      _ref1 = _.keys(relations);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        relationKey = _ref1[_j];
        relationEntry = relations[relationKey];
        if ((relationEntry.source == null) || (relationEntry.target == null)) {
          _results.push(delete relations[relationKey]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    NetworkDataControllerBehavior.prototype.updateValuesOnObject = function(object, field, list, propertyName) {
      var entry, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        entry = list[_i];
        if (!object[entry.id]) {
          object[entry.id] = {
            id: entry.id,
            value: 0,
            dataDimensions: [propertyName],
            metadata: {
              "dataDimensions": [propertyName]
            }
          };
          object[entry.id].metadata[propertyName] = {
            "label": "value"
          };
        }
        _results.push(object[entry.id][field] = entry.value);
      }
      return _results;
    };

    return NetworkDataControllerBehavior;

  }).call(this, quadrigram.Models.DataControllerBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TooltipBehavior = (function(_super) {
    __extends(TooltipBehavior, _super);

    function TooltipBehavior() {
      this.getFontFamily = __bind(this.getFontFamily, this);
      this.bodyFunction = __bind(this.bodyFunction, this);
      this.titleFunction = __bind(this.titleFunction, this);
      this.getTooltipSettings = __bind(this.getTooltipSettings, this);
      this.startQTip = __bind(this.startQTip, this);
      this.createTooltipInfoObjects = __bind(this.createTooltipInfoObjects, this);
      this.updateConfig = __bind(this.updateConfig, this);
      this.updateToolTip = __bind(this.updateToolTip, this);
      this.executeAfterUpdateStage = __bind(this.executeAfterUpdateStage, this);
      this.defaultSettingsChanged = __bind(this.defaultSettingsChanged, this);
      this.initialize = __bind(this.initialize, this);
      _ref = TooltipBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TooltipBehavior.field = "tooltip";

    TooltipBehavior.meta = {
      "properties": {
        "tooltipActive": {
          "uiTipContent": "Determines whether to show tooltips or not",
          "role": "visibility",
          "label": "Use tooltips",
          "family": "tooltip",
          "hidden": false,
          "sortingWeight": "69",
          "multivalue": false,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": true
              }
            }
          }
        },
        "tooltipTitle": {
          "uiTipContent": "Defines the title of the tooltip for each item. By default it will take the identifiers from the main Data property",
          "role": "title",
          "label": "Tooltip titles",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "70",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "Tooltip Title"
              }
            }
          }
        },
        "tooltipValue": {
          "uiTipContent": "Defines the content of the tooltip for each item. By default it will take the values from the main Data property",
          "role": "value",
          "target": "value",
          "label": "Tooltip values",
          "family": "tooltip",
          "hidden": false,
          "sortingWeight": "72",
          "multivalue": false,
          "formats": {
            "PrefixSufix": {
              "multiValues": {
                "prefix": false,
                "sufix": false
              },
              "defaults": {
                "label": "",
                "prefix": "",
                "sufix": ""
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "tooltipDescription": {
          "uiTipContent": "Defines an additional description for each tooltip (max. 140 characters)",
          "role": "description",
          "label": "Tooltip descriptions",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "72",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "Tooltip Description"
              }
            }
          }
        },
        "tooltipImage": {
          "uiTipContent": "Defines an image to be shown in each tooltip",
          "role": "image",
          "label": "Tooltip Image urls",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "72",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": true
              }
            },
            "ImageUrl": {
              "label": "Image",
              "multiValues": {
                "value": true,
                "scale": false,
                "repeat": false
              },
              "defaults": {
                "value": "",
                "scale": "cover",
                "repeat": "false"
              },
              "options": {
                "scale": ["contain", "cover", "stretch", "preserve"]
              }
            },
            "Text": {
              "deprecated": true,
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "tooltipStyle": {
          "uiTipContent": "Defines the style of the tooltips",
          "label": "Tooltip styles",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "70",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "default"
              },
              "options": {
                "value": quadrigram.Managers.ToolTipManager.listStyles()
              }
            }
          }
        }
      }
    };

    TooltipBehavior.behaviors = [];

    TooltipBehavior.stage = "afterUpdate";

    TooltipBehavior.internalTooltipSettings = void 0;

    TooltipBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(TooltipBehavior.meta, TooltipBehavior.behaviors);
      return output;
    };

    TooltipBehavior.prototype.tooltipEvent = "mouseover";

    TooltipBehavior.prototype.templateBody = JST['app/scripts/templates/visualizers/tooltipBody.hbs'];

    TooltipBehavior.prototype.templateTitle = JST['app/scripts/templates/visualizers/tooltipTitle.hbs'];

    TooltipBehavior.prototype.searchField = ".item";

    TooltipBehavior.prototype.baseObjects = "values";

    TooltipBehavior.prototype.initialize = function(visualizer) {
      $('.tooltip-layer').tooltip();
      quadrigram.router.dataModels.currentProject.on("change:tooltip-settings", this.defaultSettingsChanged);
      return this.config = {
        followMouse: false,
        bodyFields: [
          {
            field: "value",
            label: {
              objectField: "label",
              "default": "value"
            }
          }
        ]
      };
    };

    TooltipBehavior.prototype.defaultSettingsChanged = function() {
      return this.updateToolTip();
    };

    TooltipBehavior.prototype.executeAfterUpdateStage = function() {
      if (this.visualizer.changedData || this.visualizer.model.changed["tooltipTitle"] || this.visualizer.model.changed["tooltipValue"] || this.visualizer.model.changed["tooltipDescription"] || this.visualizer.model.changed["tooltipImage"] || this.visualizer.model.changed["tooltipStyle"] || this.visualizer.model.changed["tooltipActive"]) {
        return this.updateToolTip();
      }
    };

    TooltipBehavior.prototype.updateToolTip = function() {
      var bodyFields, vizModel;
      if (!this.visualizer) {
        return;
      }
      vizModel = this.visualizer.model;
      bodyFields = this.visualizer.bodyFields ? this.visualizer.bodyFields : this.config.bodyFields;
      return this.updateConfig({
        itemsEnter: this.visualizer.itemsEnter,
        itemsExit: this.visualizer.itemsExit,
        followMouse: this.visualizer.followMouse,
        bodyFields: bodyFields,
        tooltipTitle: vizModel.get("tooltipTitle"),
        tooltipValue: vizModel.get("tooltipValue"),
        tooltipDescription: vizModel.get("tooltipDescription"),
        tooltipImage: vizModel.get("tooltipImage"),
        tooltipStyle: vizModel.get("tooltipStyle"),
        tooltipActive: vizModel.get("tooltipActive")
      });
    };

    TooltipBehavior.prototype.updateConfig = function(newConfig) {
      var field, tooltipActive;
      this.visualizer.$el.find('.qtip').remove();
      for (field in newConfig) {
        this.config[field] = newConfig[field];
      }
      if (this.config.tooltipStyle === quadrigram.Models.VisualizerModel.DEACTIVATED) {
        this.internalTooltipSettings = void 0;
      } else {
        this.internalTooltipSettings = quadrigram.router.appViews.projectView.toolTipManager.getStyle(this.config.tooltipStyle);
      }
      this.createTooltipInfoObjects();
      tooltipActive = this.config["tooltipActive"] !== "false";
      if (tooltipActive) {
        return this.visualizer.$el.find(this.searchField).on(this.tooltipEvent, this.startQTip);
      } else {
        this.visualizer.$el.find(this.searchField).off(this.tooltipEvent, this.startQTip);
        return $(".qtip-visualizer").remove();
      }
    };

    TooltipBehavior.prototype.createTooltipInfoObjects = function() {
      var blockEntry, dataDimension, dimension, dimensionBlock, dimensionKey, dimensions, itemValue, label, prefix, setImageData, sufix, tooltipObject, tooltipObjectKey, uniqueRepeat, uniqueScale, value, _i, _j, _len, _len1, _ref1, _ref2, _results,
        _this = this;
      this.tooltipObjects = {};
      dimensions = this.visualizer.model.original.info().properties;
      _ref1 = this.visualizer[this.baseObjects];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        itemValue = _ref1[_i];
        this.tooltipObjects[itemValue.id] = {};
        if (itemValue.name) {
          this.tooltipObjects[itemValue.id].title = itemValue.name;
        } else {
          this.tooltipObjects[itemValue.id].title = itemValue.id;
        }
        this.tooltipObjects[itemValue.id].metadata = itemValue.metadata;
        this.tooltipObjects[itemValue.id].dataDimensions = {};
        _ref2 = itemValue.metadata.dataDimensions;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          dataDimension = _ref2[_j];
          this.tooltipObjects[itemValue.id].dataDimensions[dataDimension] = itemValue[dataDimension];
        }
      }
      _results = [];
      for (dimensionKey in dimensions) {
        dimension = dimensions[dimensionKey];
        if (!dimension.role || dimension.family !== "tooltip") {
          continue;
        }
        dimensionBlock = this.visualizer.model.get(dimensionKey);
        if (dimensionBlock.currentFormat === "PrefixSufix") {
          _results.push((function() {
            var _ref3, _results1;
            _ref3 = this.tooltipObjects;
            _results1 = [];
            for (tooltipObjectKey in _ref3) {
              tooltipObject = _ref3[tooltipObjectKey];
              if (tooltipObject.metadata[dimension.target] != null) {
                label = dimensionBlock[0];
                if (label === "") {
                  label = tooltipObject.metadata[dimension.target].label + ": ";
                }
                prefix = dimensionBlock[1];
                if (prefix === "") {
                  prefix = void 0;
                }
                sufix = dimensionBlock[2];
                if (prefix === "") {
                  sufix = void 0;
                }
                if (tooltipObject.dataDimensions[dimension.target] != null) {
                  value = (Math.round(100 * parseFloat(tooltipObject.dataDimensions[dimension.target])) / 100).toString();
                } else {
                  value = void 0;
                }
                if (!tooltipObject[dimension.role]) {
                  tooltipObject[dimension.role] = [];
                }
                _results1.push(tooltipObject[dimension.role].push({
                  label: label,
                  prefix: prefix,
                  value: value,
                  sufix: sufix
                }));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        } else if (dimensionBlock.currentFormat === "ImageUrl") {
          setImageData = function(tooltipObject, imageRID, imageScale, imageRepeat) {
            tooltipObject["imagecss"] = _this.calculateImageCSS(imageScale, imageRepeat);
            return quadrigram.router.managers.serverManager.getImageUrl(imageRID, function(resultUrl) {
              var pic;
              tooltipObject["image"] = resultUrl;
              pic = new Image();
              return pic.src = resultUrl;
            });
          };
          uniqueScale = _.isArray(dimensionBlock[1]) ? dimensionBlock[1][0].value : dimensionBlock[1];
          uniqueRepeat = _.isArray(dimensionBlock[2]) ? dimensionBlock[2][0].value : dimensionBlock[2];
          if (_.isArray(dimensionBlock[0])) {
            _results.push((function() {
              var _k, _len2, _ref3, _results1;
              _ref3 = dimensionBlock[0];
              _results1 = [];
              for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                blockEntry = _ref3[_k];
                tooltipObject = this.tooltipObjects[blockEntry.id];
                if (tooltipObject != null) {
                  _results1.push(setImageData(tooltipObject, blockEntry.value, uniqueScale, uniqueRepeat));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            }).call(this));
          } else {
            _results.push((function() {
              var _ref3, _results1;
              _ref3 = this.tooltipObjects;
              _results1 = [];
              for (tooltipObjectKey in _ref3) {
                tooltipObject = _ref3[tooltipObjectKey];
                _results1.push(setImageData(tooltipObject, dimensionBlock[0], uniqueScale, uniqueRepeat));
              }
              return _results1;
            }).call(this));
          }
        } else {
          if (_.isArray(dimensionBlock)) {
            _results.push((function() {
              var _k, _len2, _results1;
              _results1 = [];
              for (_k = 0, _len2 = dimensionBlock.length; _k < _len2; _k++) {
                blockEntry = dimensionBlock[_k];
                tooltipObject = this.tooltipObjects[blockEntry.id];
                if (!tooltipObject) {
                  continue;
                }
                if (dimension.role === "value") {
                  if (!tooltipObject[dimension.role]) {
                    tooltipObject[dimension.role] = [];
                  }
                  _results1.push(tooltipObject[dimension.role].push({
                    dim: dimensionKey,
                    value: blockEntry.value
                  }));
                } else {
                  _results1.push(tooltipObject[dimension.role] = blockEntry.value);
                }
              }
              return _results1;
            }).call(this));
          } else {
            if (dimensionBlock === "@QDeactivatedWord") {
              continue;
            }
            _results.push((function() {
              var _ref3, _results1;
              _ref3 = this.tooltipObjects;
              _results1 = [];
              for (tooltipObjectKey in _ref3) {
                tooltipObject = _ref3[tooltipObjectKey];
                if (dimension.role === "value") {
                  if (!tooltipObject[dimension.role]) {
                    tooltipObject[dimension.role] = [];
                  }
                  _results1.push(tooltipObject[dimension.role].push({
                    dim: dimensionKey,
                    value: dimensionBlock
                  }));
                } else {
                  _results1.push(tooltipObject[dimension.role] = dimensionBlock);
                }
              }
              return _results1;
            }).call(this));
          }
        }
      }
      return _results;
    };

    TooltipBehavior.prototype.calculateImageCSS = function(size, repeat) {
      var css;
      css = {};
      switch (size) {
        case "cover":
          css["background-size"] = "cover";
          break;
        case "contain":
          css["background-size"] = "contain";
          break;
        case "stretch":
          css["background-size"] = "100% 100%";
          break;
        case "preserve":
          css["background-size"] = "auto";
      }
      switch (repeat) {
        case "true":
          css["background-repeat"] = "repeat";
          break;
        case "false":
          css["background-repeat"] = "no-repeat";
      }
      css["background-position"] = "center center";
      return "; background-size:" + css["background-size"] + "; background-repeat:" + css["background-repeat"] + "; background-position: center center";
    };

    TooltipBehavior.prototype.startQTip = function(e) {
      var tooltipOptions;
      this.visualizer.$el.find(e.currentTarget).off(this.tooltipEvent, this.startQTip);
      tooltipOptions = this.tooltipOptions(this.config.followMouse, this.config.titleFunction, this.config.bodyFunction);
      this.visualizer.$el.find(e.currentTarget).qtip(tooltipOptions);
      return this.visualizer.$el.find(e.target).trigger(this.tooltipEvent);
    };

    TooltipBehavior.prototype.tooltipOptions = function(followMouse, titleFunction, bodyFunction, externalTooltipSettings) {
      var containerDOM, output, self, tooltipSettings,
        _this = this;
      if (externalTooltipSettings) {
        tooltipSettings = externalTooltipSettings;
        this.internalTooltipSettings = externalTooltipSettings;
      } else {
        tooltipSettings = this.getTooltipSettings();
      }
      if (this.visualizer) {
        containerDOM = this.visualizer.el;
      } else {
        containerDOM = "";
      }
      self = this;
      if (followMouse == null) {
        followMouse = false;
      }
      output = {
        content: {
          data: tooltipSettings,
          text: function(event, api) {
            var itemDOM;
            itemDOM = this.first()[0];
            return self.bodyFunction(itemDOM, event, api);
          },
          title: function(event, api) {
            var itemDOM;
            itemDOM = this.first()[0];
            return self.titleFunction(itemDOM, event, api);
          }
        },
        position: {
          my: 'bottom center',
          at: 'top center',
          viewport: $("body"),
          container: containerDOM,
          target: function() {
            var itemDOM;
            itemDOM = this.first()[0];
            return $(itemDOM);
          }
        },
        style: {
          classes: tooltipSettings.classes
        },
        show: this.tooltipEvent,
        events: {
          show: function(event, api) {
            var baseValue, correctedValue;
            tooltipSettings = _this.getTooltipSettings();
            if (tooltipSettings.roundedCorner && parseFloat(tooltipSettings.roundedCorner.replace("px", "")) > 0) {
              baseValue = (parseFloat(tooltipSettings.roundedCorner.replace("px", ""))) + "px";
              correctedValue = (parseFloat(tooltipSettings.roundedCorner.replace("px", "")) + 2) + "px";
              d3.select(event.target).style("-moz-border-radius", correctedValue).style("-webkit-border-radius", correctedValue).style("border-radius", correctedValue);
              d3.select(event.target).select(".tooltip-title-image").style("-moz-border-radius", baseValue + " " + baseValue + " 0  0").style("-webkit-border-radius", baseValue + " " + baseValue + " 0  0").style("border-radius", baseValue + " " + baseValue + " 0  0");
              d3.select(event.target).select(".qtip-titlebar").style("-moz-border-radius", baseValue + " " + baseValue + " 0  0").style("-webkit-border-radius", baseValue + " " + baseValue + " 0  0").style("border-radius", baseValue + " " + baseValue + " 0  0");
              d3.select(event.target).select(".qtip-content").style("-moz-border-radius", "0  0 " + baseValue + " " + baseValue).style("-webkit-border-radius", "0  0 " + baseValue + " " + baseValue).style("border-radius", "0  0 " + baseValue + " " + baseValue);
            }
            if (tooltipSettings.border) {
              if (tooltipSettings.border.width !== "0px" && tooltipSettings.border.color !== "none") {
                d3.select(event.target).style("border-color", tooltipSettings.border.color).style("border-width", tooltipSettings.border.width);
              } else {
                d3.select(event.target).style("border", "none");
              }
            }
            if (tooltipSettings.body.description && tooltipSettings.body.description.backgroundColor) {
              return d3.select(event.target).style("color", tooltipSettings.body.description.backgroundColor);
            } else {
              if (tooltipSettings.body.value && tooltipSettings.body.value.backgroundColor) {
                return d3.select(event.target).style("color", tooltipSettings.body.value.backgroundColor);
              }
            }
          }
        }
      };
      if (followMouse) {
        output.position.target = "mouse";
        output.position.adjust = {
          mouse: true
        };
      }
      return output;
    };

    TooltipBehavior.prototype.getTooltipSettings = function() {
      if (this.internalTooltipSettings) {
        return this.internalTooltipSettings;
      }
      return JSON.parse(JSON.stringify(quadrigram.router.dataModels.currentProject.get("tooltip-settings")));
    };

    TooltipBehavior.prototype.titleFunction = function(itemDOM, event, api) {
      var object, output, titleFontFamilyStyle, tooltipData, tooltipObject, tooltipSettings;
      tooltipSettings = this.getTooltipSettings();
      object = d3.select(itemDOM).datum();
      tooltipObject = this.tooltipObjects[object.id];
      if (tooltipSettings.mainBackgroundColor) {
        tooltipSettings.title.backgroundColor = tooltipSettings.mainBackgroundColor;
        delete tooltipSettings.mainBackgroundColor;
      }
      if (tooltipSettings.mainTextColor) {
        tooltipSettings.title.textColor = tooltipSettings.textColor;
        delete tooltipSettings.mainBackgroundColor;
      }
      tooltipData = _.extend(tooltipObject, {
        fontSize: tooltipSettings.title.fontSize,
        titleStyle: {
          backgroundColor: tooltipSettings.title.backgroundColor,
          textColor: tooltipSettings.title.textColor
        },
        lineHeight: tooltipSettings.title.lineHeight,
        fontFamily: tooltipSettings.fontFamily,
        mainTextColor: tooltipSettings.mainTextColor
      });
      titleFontFamilyStyle = this.getFontFamily(tooltipSettings.fontFamily, tooltipSettings.title.fontStyle);
      tooltipData.fontStyle = titleFontFamilyStyle.fontStyle;
      tooltipData.fontWeight = titleFontFamilyStyle.fontWeight;
      output = this.templateTitle(tooltipData);
      return output;
    };

    TooltipBehavior.prototype.bodyFunction = function(itemDOM, event, api) {
      var descriptionFontFamilyStyle, labelFontFamilyStyle, object, output, tooltipData, tooltipObject, tooltipSettings, valueFontFamilyStyle;
      tooltipSettings = this.getTooltipSettings();
      object = d3.select(itemDOM).datum();
      tooltipObject = _.clone(this.tooltipObjects[object.id]);
      if (tooltipObject.description && tooltipObject.description.length > 250) {
        tooltipObject.description = tooltipObject.description.substr(0, 246) + "...";
      }
      tooltipData = _.extend(tooltipObject, {
        style: _.extend(tooltipSettings.body, {
          fontFamily: tooltipSettings.fontFamily,
          mainBackgroundColor: tooltipSettings.mainBackgroundColor,
          mainTextColor: tooltipSettings.mainTextColor
        })
      });
      descriptionFontFamilyStyle = this.getFontFamily(tooltipSettings.fontFamily, tooltipSettings.body.description.fontStyle);
      tooltipData.style.description.fontStyle = descriptionFontFamilyStyle.fontStyle;
      tooltipData.style.description.fontWeight = descriptionFontFamilyStyle.fontWeight;
      valueFontFamilyStyle = this.getFontFamily(tooltipSettings.fontFamily, tooltipSettings.body.value.fontStyle);
      tooltipData.style.value.fontStyle = valueFontFamilyStyle.fontStyle;
      tooltipData.style.value.fontWeight = valueFontFamilyStyle.fontWeight;
      labelFontFamilyStyle = this.getFontFamily(tooltipSettings.fontFamily, tooltipSettings.body.label.fontStyle);
      tooltipData.style.label.fontStyle = labelFontFamilyStyle.fontStyle;
      tooltipData.style.label.fontWeight = labelFontFamilyStyle.fontWeight;
      if (!tooltipSettings.separatorColor || tooltipSettings.separatorColor === "none") {
        tooltipData.style.separatorColor = "transparent";
      } else {
        tooltipData.style.separatorColor = tooltipSettings.separatorColor;
      }
      if (tooltipObject.description) {
        d3.select(api.tooltip[0]).style("background-color", tooltipSettings.body.description.backgroundColor);
        d3.select(api.tooltip[0]).classed("no-desc", false);
      } else {
        d3.select(api.tooltip[0]).style("background-color", tooltipSettings.body.value.backgroundColor);
        d3.select(api.tooltip[0]).classed("no-desc", true);
      }
      output = this.templateBody(tooltipData);
      return output;
    };

    TooltipBehavior.prototype.getFontFamily = function(familyName, familyStyle) {
      var fontFamilyStyles, output;
      fontFamilyStyles = quadrigram.router.managers.fontManager.getFontStyles(familyName);
      output = _.findWhere(fontFamilyStyles, {
        styleName: familyStyle
      });
      if (!output) {
        output = fontFamilyStyles[0];
      }
      return output;
    };

    TooltipBehavior.prototype.calculateCSS = function(size, repeat) {
      var css;
      css = {};
      switch (size) {
        case "cover":
          css["background-size"] = "cover";
          break;
        case "contain":
          css["background-size"] = "contain";
          break;
        case "stretch":
          css["background-size"] = "100% 100%";
          break;
        case "preserve":
          css["background-size"] = "auto";
      }
      switch (repeat) {
        case "true":
          css["background-repeat"] = "repeat";
          break;
        case "false":
          css["background-repeat"] = "no-repeat";
      }
      css["background-position"] = "center center";
      return css;
    };

    return TooltipBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TwoDimTooltipBehavior = (function(_super) {
    __extends(TwoDimTooltipBehavior, _super);

    function TwoDimTooltipBehavior() {
      this.dynamicBodyFunction = __bind(this.dynamicBodyFunction, this);
      this.bodyFunction = __bind(this.bodyFunction, this);
      _ref = TwoDimTooltipBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TwoDimTooltipBehavior.prototype.bodyFunction = function(itemDOM, event, api) {
      var self;
      self = this;
      $(itemDOM).mousemove({
        visualizer: this.visualizer,
        behavior: this
      }, function(e) {
        var content, id, object, tooltipBehavior, valueOnX, values, visualizer, x, _base;
        (_base = self.visualizer.behaviors.axis.xScale).findDomainItemFromRangeValue || (_base.findDomainItemFromRangeValue = self.findDomainItemFromRangeValue);
        visualizer = e.data.visualizer;
        tooltipBehavior = e.data.behavior;
        x = e.offsetX;
        id = visualizer.behaviors.axis.xScale.findDomainItemFromRangeValue(x, visualizer.behaviors.axis.calculateYAxisArea());
        object = d3.select(this).datum();
        values = object.value;
        valueOnX = _.findWhere(values, {
          id: id
        });
        content = tooltipBehavior.dynamicBodyFunction(object, valueOnX);
        return api.set('content.text', content);
      });
      $(itemDOM).trigger("mousemove");
      return "";
    };

    TwoDimTooltipBehavior.prototype.findDomainItemFromRangeValue = function(xPos, margin) {
      var candidate, distance, i, id, index, minDistance, _i, _len, _ref1;
      index = -1;
      minDistance = Infinity;
      _ref1 = this.range();
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        candidate = _ref1[i];
        distance = Math.abs(candidate - xPos + margin);
        if (distance < minDistance) {
          minDistance = distance;
          index = i;
        }
      }
      id = void 0;
      if (index !== -1) {
        id = this.domain()[index];
      }
      return id;
    };

    TwoDimTooltipBehavior.prototype.dynamicBodyFunction = function(object, valueOnX) {
      var output, tooltipData, tooltipObject, tooltipSettings;
      tooltipSettings = this.getTooltipSettings();
      tooltipObject = _.clone(this.tooltipObjects[object.id]);
      if (tooltipObject.description && tooltipObject.description.length > 140) {
        tooltipObject.description = tooltipObject.description.substr(0, 136) + "...";
      }
      if (valueOnX) {
        tooltipObject.item = valueOnX.id;
        tooltipObject.value[0].value = Math.round(100 * parseFloat(valueOnX.value)) / 100;
      }
      tooltipData = _.extend(tooltipObject, {
        style: _.extend(tooltipSettings.body, {
          fontFamily: tooltipSettings.fontFamily
        })
      });
      output = this.templateBody(tooltipData);
      return output;
    };

    return TwoDimTooltipBehavior;

  })(quadrigram.Models.TooltipBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.StackedTooltipBehavior = (function(_super) {
    __extends(StackedTooltipBehavior, _super);

    function StackedTooltipBehavior() {
      this.bodyFunction = __bind(this.bodyFunction, this);
      _ref = StackedTooltipBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StackedTooltipBehavior.prototype.bodyFunction = function(itemDOM, event, api) {
      var mainObject, output, tooltipData, tooltipObject, tooltipSettings, valueOnX;
      tooltipSettings = this.getTooltipSettings();
      mainObject = d3.select(itemDOM).datum();
      valueOnX = d3.select(event.target).datum();
      tooltipObject = _.clone(this.tooltipObjects[mainObject.id]);
      if (tooltipObject.description && tooltipObject.description.length > 140) {
        tooltipObject.description = tooltipObject.description.substr(0, 136) + "...";
      }
      tooltipObject.item = valueOnX.id;
      tooltipObject.value[0].value = Math.round(100 * parseFloat(valueOnX.value)) / 100;
      tooltipData = _.extend(tooltipObject, {
        style: _.extend(tooltipSettings.body, {
          fontFamily: tooltipSettings.fontFamily
        })
      });
      output = this.templateBody(tooltipData);
      return output;
    };

    return StackedTooltipBehavior;

  })(quadrigram.Models.TooltipBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.NetworkTooltipBehavior = (function(_super) {
    __extends(NetworkTooltipBehavior, _super);

    function NetworkTooltipBehavior() {
      this.updateToolTip = __bind(this.updateToolTip, this);
      this.executeAfterUpdateStage = __bind(this.executeAfterUpdateStage, this);
      this.initialize = __bind(this.initialize, this);
      _ref = NetworkTooltipBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NetworkTooltipBehavior.field = "tooltip";

    NetworkTooltipBehavior.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(NetworkTooltipBehavior.meta, NetworkTooltipBehavior.behaviors);
      return output;
    };

    NetworkTooltipBehavior.behaviors = [];

    NetworkTooltipBehavior.meta = {
      "properties": {
        "tooltipActiveNodes": {
          "uiTipContent": "Tooltip's nodes are shown or not",
          "role": "visibility",
          "label": "Show nodes tooltips",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "69",
          "multivalue": false,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": true
              }
            }
          }
        },
        "tooltipTitleNodes": {
          "uiTipContent": "Defines the title of the tooltip for each node. By default it will take the identifiers from the main Data property",
          "role": "title",
          "label": "Tooltip's Title of nodes",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "70",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "Tooltip Title"
              }
            }
          }
        },
        "tooltipValueNodes": {
          "uiTipContent": "Defines the content of the tooltip for each node. By default it will take the values from the main Data property",
          "role": "value",
          "target": "value",
          "label": "Tooltip's Value of nodes",
          "family": "tooltip",
          "hidden": false,
          "sortingWeight": "71",
          "multivalue": false,
          "formats": {
            "PrefixSufix": {
              "multiValues": {
                "prefix": false,
                "sufix": false
              },
              "defaults": {
                "label": "",
                "prefix": "",
                "sufix": ""
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "tooltipDescriptionNodes": {
          "uiTipContent": "Defines an additional description for each tooltip (max. 140 characters)",
          "role": "description",
          "label": "Tooltip's Description of nodes",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "72",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "Tooltip Description"
              }
            }
          }
        },
        "tooltipImageNodes": {
          "uiTipContent": "Defines an image to be shown in each tooltip",
          "role": "image",
          "label": "Tooltip's Image url of nodes",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "73",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": true
              }
            },
            "Text": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "tooltipStyleNodes": {
          "uiTipContent": "Defines style of the tooltips of nodes for this visualizer.",
          "label": "Tooltip's Style of nodes",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "74",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "default"
              },
              "options": {
                "value": quadrigram.Managers.ToolTipManager.listStyles()
              }
            }
          }
        },
        "tooltipActiveRelations": {
          "uiTipContent": "Tooltip's relations are shown or not",
          "role": "visibility",
          "label": "Show relations tooltips",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "75",
          "multivalue": false,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "false"
              }
            }
          }
        },
        "tooltipTitleRelations": {
          "uiTipContent": "Defines the title of the tooltip for each relation. By default it will take the identifiers from the main Data property",
          "role": "title",
          "label": "Tooltip's Title of relations",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "76",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "idSource": {
                "value": "visualizer.idsRelations"
              },
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "Tooltip Title"
              }
            }
          }
        },
        "tooltipValueRelations": {
          "uiTipContent": "Defines the content of the tooltip for each relation. By default it will take the values from the main Data property",
          "role": "value",
          "target": "relationValue",
          "label": "Tooltip's Value of relations",
          "family": "tooltip",
          "hidden": false,
          "sortingWeight": "77",
          "multivalue": false,
          "formats": {
            "PrefixSufix": {
              "multiValues": {
                "prefix": false,
                "sufix": false
              },
              "defaults": {
                "label": "",
                "prefix": "",
                "sufix": ""
              }
            },
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "idSource": {
                "value": "visualizer.idsRelations"
              },
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "tooltipDescriptionRelations": {
          "uiTipContent": "Defines an additional description for each tooltip (max. 140 characters)",
          "role": "description",
          "label": "Tooltip's Description of relations",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "78",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "Tooltip Description"
              }
            }
          }
        },
        "tooltipImageRelations": {
          "uiTipContent": "Defines an image to be shown in each tooltip",
          "role": "image",
          "label": "Tooltip's Image url of relations",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "79",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": true
              }
            },
            "Text": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "tooltipStyleRelations": {
          "uiTipContent": "Defines style of the tooltips for this visualizer.",
          "label": "Tooltip's Style of relations",
          "family": "tooltip",
          "hidden": true,
          "sortingWeight": "80",
          "multivalue": false,
          "formats": {
            "Deactivated": {
              "multiValues": {
                "value": false
              }
            },
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "default"
              },
              "options": {
                "value": quadrigram.Managers.ToolTipManager.listStyles()
              }
            }
          }
        }
      }
    };

    NetworkTooltipBehavior.prototype.initialize = function(visualizer) {
      $('.tooltip-layer').tooltip();
      this.nodesTooltip = new quadrigram.Models.TooltipBehavior(this.visualizer, []);
      this.relationsTooltip = new quadrigram.Models.TooltipBehavior(this.visualizer, []);
      this.relationsTooltip.searchField = ".link";
      return this.relationsTooltip.baseObjects = "relationsValues";
    };

    NetworkTooltipBehavior.prototype.executeAfterUpdateStage = function() {
      if (this.visualizer.changedData || this.visualizer.model.changed["tooltipActiveNodes"] || this.visualizer.model.changed["tooltipTitleNodes"] || this.visualizer.model.changed["tooltipValueNodes"] || this.visualizer.model.changed["tooltipDescriptionNodes"] || this.visualizer.model.changed["tooltipImageNodes"] || this.visualizer.model.changed["tooltipStyleNodes"] || this.visualizer.changedData || this.visualizer.model.changed["tooltipActiveRelations"] || this.visualizer.model.changed["tooltipTitleRelations"] || this.visualizer.model.changed["tooltipValueRelations"] || this.visualizer.model.changed["tooltipDescriptionRelations"] || this.visualizer.model.changed["tooltipImageRelations"] || this.visualizer.model.changed["tooltipStyleRelations"]) {
        return this.updateToolTip();
      }
    };

    NetworkTooltipBehavior.prototype.updateToolTip = function() {
      var nodesFollowMouse, vizModel;
      vizModel = this.visualizer.model;
      nodesFollowMouse = false;
      if (quadrigram.router.getDevice() !== "Desktop") {
        nodesFollowMouse = true;
      }
      this.nodesTooltip.updateConfig({
        followMouse: nodesFollowMouse,
        tooltipTitle: vizModel.get("tooltipTitleNodes"),
        tooltipValue: vizModel.get("tooltipValueNodes"),
        tooltipDescription: vizModel.get("tooltipDescriptionNodes"),
        tooltipImage: vizModel.get("tooltipImageNodes"),
        tooltipStyle: vizModel.get("tooltipStyleNodes"),
        tooltipActive: vizModel.get("tooltipActiveNodes")
      });
      return this.relationsTooltip.updateConfig({
        followMouse: true,
        tooltipTitle: vizModel.get("tooltipTitleRelations"),
        tooltipValue: vizModel.get("tooltipValueRelations"),
        tooltipDescription: vizModel.get("tooltipDescriptionRelations"),
        tooltipImage: vizModel.get("tooltipImageRelations"),
        tooltipStyle: vizModel.get("tooltipStyleRelations"),
        tooltipActive: vizModel.get("tooltipActiveRelations")
      });
    };

    return NetworkTooltipBehavior;

  }).call(this, quadrigram.Models.Behavior);

}).call(this);

(function() {
  'use-strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.MapTooltipBehavior = (function(_super) {
    __extends(MapTooltipBehavior, _super);

    function MapTooltipBehavior() {
      this.hideTooltips = __bind(this.hideTooltips, this);
      this.tooltipOptions = __bind(this.tooltipOptions, this);
      this.initialize = __bind(this.initialize, this);
      _ref = MapTooltipBehavior.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MapTooltipBehavior.prototype.initialize = function(visualizer) {
      MapTooltipBehavior.__super__.initialize.call(this, visualizer);
      if (quadrigram.router.getDevice() !== "Desktop") {
        return this.tooltipEvent = "touchstart";
      }
    };

    MapTooltipBehavior.prototype.tooltipOptions = function(followMouse, titleFunction, bodyFunction, externalTooltipSettings) {
      var containerDOM, output,
        _this = this;
      output = MapTooltipBehavior.__super__.tooltipOptions.call(this, followMouse, titleFunction, bodyFunction, externalTooltipSettings);
      if (quadrigram.router.getDevice() !== "Desktop") {
        if (this.tooltipContainer) {
          containerDOM = $(this.tooltipContainer[0][0]);
          output.position.container = containerDOM;
        }
        output.events.show = function(event, api) {
          event.stopPropagation();
          _this.hideTooltips();
          $('html').on('touchstart', _this.hideTooltips);
          return _.delay(function() {
            d3.select(event.originalEvent.target).datum(function(d, i) {
              _this.ttipLeftPos = _this.visualizer.behaviors.map.map.latLngToLayerPoint(d.LatLng).x;
              _this.ttipTopPos = _this.visualizer.behaviors.map.map.latLngToLayerPoint(d.LatLng).y;
              return d;
            });
            _this.ttipLeftPos -= $(event.target).outerWidth() / 2;
            _this.ttipTopPos -= $(event.target).outerHeight();
            return $(event.currentTarget).css({
              "left": _this.ttipLeftPos + "px",
              "top": _this.ttipTopPos + "px"
            });
          }, 0);
        };
      }
      return output;
    };

    MapTooltipBehavior.prototype.hideTooltips = function() {
      return $(this.visualizer.behaviors.map.map._panes.popupPane).find(".qtip").each(function(index, value) {
        return $(this).hide();
      });
    };

    return MapTooltipBehavior;

  })(quadrigram.Models.TooltipBehavior);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.TreeMapView = (function(_super) {
    __extends(TreeMapView, _super);

    function TreeMapView() {
      this.wrapText = __bind(this.wrapText, this);
      this.visualizerDdidResize = __bind(this.visualizerDdidResize, this);
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.visualizerDidResize = __bind(this.visualizerDidResize, this);
      this.updateShapes = __bind(this.updateShapes, this);
      this.executeBasicD3Binding = __bind(this.executeBasicD3Binding, this);
      this.stepDataInterpolationAnimation = __bind(this.stepDataInterpolationAnimation, this);
      this.updateItems = __bind(this.updateItems, this);
      this.createTree = __bind(this.createTree, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      _ref = TreeMapView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TreeMapView.prototype.template = JST['app/scripts/templates/visualizers/treemap.hbs'];

    TreeMapView.prototype.followMouse = true;

    TreeMapView.prototype.originalValues = {};

    TreeMapView.prototype.visualizerWillUpdateItems = function() {
      var item, _i, _len, _ref1, _results;
      this.treeValues = JSON.parse(JSON.stringify(this.values));
      _ref1 = this.treeValues;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        item.value = Math.abs(parseFloat(item.value));
        if (this.originalValues[item.id]) {
          item.originalValue = this.originalValues[item.id];
        } else {
          item.originalValue = 0;
        }
        _results.push(item.finalValue = item.value);
      }
      return _results;
    };

    TreeMapView.prototype.createTree = function() {
      var tree, treemap;
      tree = {};
      tree.id = "root_quadrigram_reserved_id";
      tree.children = this.treeValues;
      treemap = d3.layout.treemap().size([this.behaviors.svg.size.width, this.behaviors.svg.size.height]).sticky(true);
      return this.treemapValues = treemap(tree);
    };

    TreeMapView.prototype.updateItems = function() {
      var size, updateD3Object;
      size = this.values.length;
      if (size < 200 && this.animationActive) {
        this.transitionMode = this.model.get("transitionMode");
        if (this.transitionMode === "Geometric") {
          this.transitionType = this.model.get("transition")[0];
          this.transitionTime = this.model.get("transition")[1];
          this.createTree();
          this.executeBasicD3Binding();
          updateD3Object = this.items.select(".rectangle").transition().duration(this.transitionTime).ease(this.transitionType);
          return this.updateShapes(updateD3Object);
        } else {
          this.transitionType = this.model.get("transition")[0];
          this.transitionTime = this.model.get("transition")[1];
          this.animationStartStamp = new Date();
          return this.stepDataInterpolationAnimation();
        }
      } else {
        this.transitionType = "noTransition";
        this.transitionTime = 0;
        this.createTree();
        this.executeBasicD3Binding();
        updateD3Object = this.items.select(".rectangle");
        return this.updateShapes(updateD3Object);
      }
    };

    TreeMapView.prototype.stepDataInterpolationAnimation = function() {
      var currentStamp, differenceMillisec, ratio, treeNode, _i, _j, _len, _len1, _ref1, _ref2, _results;
      currentStamp = new Date();
      differenceMillisec = currentStamp.getTime() - this.animationStartStamp.getTime();
      ratio = Math.min(Math.max(differenceMillisec / this.transitionTime, 0), 1);
      log("________________________________________________________________________");
      log("TreeMapView::stepDataInterpolationAnimation -> currentStamp", currentStamp);
      log("TreeMapView::stepDataInterpolationAnimation -> differenceMillisec", differenceMillisec);
      log("TreeMapView::stepDataInterpolationAnimation -> differenceMillisec", ratio);
      _ref1 = this.treeValues;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        treeNode = _ref1[_i];
        treeNode.value = d3.interpolate(treeNode.originalValue, treeNode.finalValue)(ratio);
        log("TreeMapView::stepDataInterpolationAnimation -> ", treeNode.id, ratio, treeNode.originalValue, treeNode.finalValue, treeNode.value);
      }
      log("________________________________________________________________________");
      this.createTree();
      this.executeBasicD3Binding();
      this.updateShapes(this.items.select(".rectangle"));
      if (differenceMillisec < this.transitionTime) {
        return _.delay(this.stepDataInterpolationAnimation, 20);
      } else {
        _ref2 = this.treemapValues;
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          treeNode = _ref2[_j];
          _results.push(this.originalValues[treeNode.id] = treeNode.value = treeNode.finalValue);
        }
        return _results;
      }
    };

    TreeMapView.prototype.executeBasicD3Binding = function() {
      this.items = this.behaviors.svg.root.selectAll(".item").data(this.treemapValues, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsEnter.append("rect").attr("class", "rectangle");
      this.items.exit().remove();
      return this.items.each(function(d, i) {
        if (d.id === "root_quadrigram_reserved_id") {
          return d3.select(this).style("display", "none");
        }
      });
    };

    TreeMapView.prototype.updateShapes = function(d3target) {
      var marginItems, roundedCorners;
      marginItems = parseInt(this.model.get("marginItems").replace("px", ""));
      roundedCorners = parseInt(this.model.get("roundedCorners").replace("px", ""));
      return d3target.attr("x", function(d, i) {
        return d.x + marginItems / 2;
      }).attr("width", function(d, i) {
        return d.dx - marginItems;
      }).attr("y", function(d, i) {
        return d.y + marginItems / 2;
      }).attr("height", function(d, i) {
        return d.dy - marginItems;
      }).attr("rx", function(d, i) {
        return roundedCorners;
      }).attr("ry", function(d, i) {
        return roundedCorners;
      });
    };

    TreeMapView.prototype.visualizerDidResize = function() {
      return this.visualizerDidUpdateItems();
    };

    TreeMapView.prototype.visualizerDidUpdateItems = function() {
      return this.visualizerDdidResize();
    };

    TreeMapView.prototype.visualizerDdidResize = function() {
      var defaultTextColor, marginItems, resizing, roundedCorners, self, textColor, textColorEntry, textColorObject, textMode, _i, _len,
        _this = this;
      marginItems = parseInt(this.model.get("marginItems").replace("px", ""));
      roundedCorners = parseInt(this.model.get("roundedCorners").replace("px", ""));
      textMode = this.model.get("textMode");
      textColor = this.model.get("textColors");
      textColorObject = {};
      if (_.isArray(textColor)) {
        if (textColor.length > 0) {
          defaultTextColor = textColor[0].value;
        } else {
          defaultTextColor = "#FFF";
        }
        for (_i = 0, _len = textColor.length; _i < _len; _i++) {
          textColorEntry = textColor[_i];
          textColorObject[textColorEntry.id] = textColorEntry.value;
        }
      } else {
        defaultTextColor = textColor;
      }
      self = this;
      d3.select(this.el).selectAll(".item-label").remove();
      if (textMode !== "No labels") {
        resizing = textMode !== "Small labels";
        d3.select(this.el).selectAll(".item-label").style("visibility", "hidden");
        _.delay(function() {
          return _this.items.each(function(d, i) {
            var finalHeight, textColorItem, textLabel;
            textColorItem = textColorObject[d.id];
            if (!textColorItem) {
              textColorItem = defaultTextColor;
            }
            textLabel = d3.select(this).select(".item-label");
            if (textLabel.size() === 0) {
              textLabel = d3.select(this).append("text").attr("class", "item-label");
              textLabel.style("visibility", "hidden");
            }
            textLabel.style("font-size", "12px");
            textLabel.attr("fill", textColorItem).text(function(d) {
              return d.id;
            });
            /*
            textLabelsUpdate = d3plus.textwrap()
            .container(textLabel)
            .padding(10)
            .resize(resizing)
            .text(d.id)                  
            .draw();
            */

            finalHeight = self.wrapText(textLabel, d.x + marginItems, d.y + marginItems, d.dx - 2 * marginItems, d.dy - 2 * marginItems, resizing);
            if (finalHeight > 10) {
              textLabel.style("visibility", "visible");
            } else {
              textLabel.style("visibility", "hidden");
            }
            return textLabel.attr("stroke", "none");
          });
        }, this.transitionTime);
      }
      return d3.select(this.el).selectAll(".item-label").attr("stroke", "none");
    };

    TreeMapView.prototype.wrapText = function(textSelection, x, y, width, height, resize) {
      var bb, heightTransform, margin, textNode, tx, ty, value, widthTransform;
      margin = 10;
      textNode = textSelection[0][0];
      textNode.setAttribute("transform", "scale(" + 1 + ") translate(" + 0 + "," + 0 + ")");
      bb = textNode.getBoundingClientRect();
      widthTransform = (width - 2 * margin) / bb.width;
      heightTransform = (height - 2 * margin) / bb.height;
      value = widthTransform < heightTransform ? widthTransform : heightTransform;
      tx = (x + margin) / value;
      ty = ((y + margin) / value) + 10;
      if (!resize) {
        tx = tx * value;
        ty = (ty - 10) * value + 10;
        value = 1;
        if (bb.width + 10 > width) {
          textSelection.style("display", "none");
        } else {
          textSelection.style("display", "block");
        }
      }
      textNode.setAttribute("transform", "scale(" + value + ") translate(" + tx + "," + ty + ")");
      return bb.height * value;
    };

    return TreeMapView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.PointsInAMapView = (function(_super) {
    __extends(PointsInAMapView, _super);

    function PointsInAMapView() {
      this.drawElementsOnCanvas = __bind(this.drawElementsOnCanvas, this);
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.updateItems = __bind(this.updateItems, this);
      this.onDragChange = __bind(this.onDragChange, this);
      this.onZoomChange = __bind(this.onZoomChange, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      _ref = PointsInAMapView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PointsInAMapView.prototype.template = JST['app/scripts/templates/visualizers/pointsInAMap.hbs'];

    PointsInAMapView.prototype.firstExec = true;

    PointsInAMapView.prototype.followMouse = true;

    PointsInAMapView.prototype.visualizerWillUpdateItems = function() {
      var maxValue, minValue, radiusRange;
      this.behaviors.map.divMap.style("display", "inherit");
      this.behaviors.map.map.invalidateSize();
      this.behaviors.tooltip.tooltipContainer = this.behaviors.map.divMap.select(".leaflet-popup-pane");
      this.behaviors.map.map.on("zoomanim", this.onZoomChange);
      this.behaviors.map.map.on("drag", this.onDragChange);
      if (this.model.get("values").currentFormat === "PxByValuesAndDomain") {
        minValue = this.model.get("values")[1];
        if ((minValue == null) || minValue === "") {
          minValue = d3.min(this.coordinates, function(d) {
            return Math.abs(d.value);
          });
        }
        maxValue = this.model.get("values")[2];
        if ((maxValue == null) || maxValue === "") {
          maxValue = d3.max(this.coordinates, function(d) {
            return Math.abs(d.value);
          });
        }
        radiusRange = [this.model.get("values")[3], this.model.get("values")[4]];
      } else {
        minValue = d3.min(this.coordinates, function(d) {
          return Math.abs(d.value);
        });
        maxValue = d3.max(this.coordinates, function(d) {
          return Math.abs(d.value);
        });
        radiusRange = [this.model.get("values")[1], this.model.get("values")[2]];
      }
      return this.behaviors.circles.updateRadiusScale([minValue, maxValue], radiusRange);
    };

    PointsInAMapView.prototype.onZoomChange = function() {
      return this.behaviors.tooltip.hideTooltips();
    };

    PointsInAMapView.prototype.onDragChange = function() {
      return this.behaviors.tooltip.hideTooltips();
    };

    PointsInAMapView.prototype.updateItems = function() {
      var self, size, transitionTime, transitionType, updateD3Object,
        _this = this;
      this.items = this.behaviors.map.svg.selectAll(".item").data(this.coordinates, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsExit = this.items.exit();
      this.itemsEnter.append("circle").attr("class", "marker");
      this.itemsExit.remove();
      this.behaviors.map.update();
      size = this.ids.length;
      if (size < 700 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        updateD3Object = this.items.select(".marker").transition().duration(transitionTime).ease(transitionType);
      } else {
        updateD3Object = this.items.select(".marker");
      }
      self = this;
      return updateD3Object.attr("cx", 0).attr("cy", 0).attr("r", function(d) {
        return Math.max(0, _this.behaviors.circles.getRadiusFromValue(Math.abs(d.value)));
      });
    };

    /*
    visualizerDidUpdateItems:() =>
      if @model.changed["places"]? || @firstExec
        @firstExec = false
        @behaviors.map.centerView()
    */


    PointsInAMapView.prototype.visualizerDidUpdateItems = function() {
      if ((this.model.changed["places"] != null) || this.firstExec) {
        this.firstExec = false;
        if (this.model.get("zoom") === "" && this.model.get("center") === "") {
          return this.behaviors.map.centerView();
        } else {
          /*
          if @model.get("frame")!=""
            @behaviors.map.goToFrame(@visualizer.model.get("frame"))
          */

          if (this.model.get("zoom") !== "" || this.model.get("center") !== "") {
            return this.behaviors.map.goToMapView(this.model.get("center"), this.model.get("zoom"));
          }
        }
      }
    };

    PointsInAMapView.prototype.drawElementsOnCanvas = function(ctx, onLoad) {
      var im, svgSource, url,
        _this = this;
      svgSource = svgUtils.getSVGWithStyles($(this.behaviors.map.map._container).find("svg")[0]);
      svgSource.setAttribute("font-family", "'Roboto',sans-serif");
      svgSource.setAttribute("style", "background-color:rgba(0,0,0,0)");
      url = svgUtils.svgToImageUrl(svgSource);
      im = new Image();
      im.onload = function() {
        var vbox;
        vbox = svgSource.getAttribute("viewBox").split(" ");
        ctx.drawImage(im, vbox[0], vbox[1], vbox[2], vbox[3]);
        return onLoad();
      };
      return im.src = url;
    };

    return PointsInAMapView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.HeatMapView = (function(_super) {
    __extends(HeatMapView, _super);

    function HeatMapView() {
      this.drawElementsOnCanvas = __bind(this.drawElementsOnCanvas, this);
      this.draw = __bind(this.draw, this);
      this.updateDrawing = __bind(this.updateDrawing, this);
      this.resetAnimation = __bind(this.resetAnimation, this);
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = HeatMapView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HeatMapView.prototype.template = JST['app/scripts/templates/visualizers/pointsInAMap.hbs'];

    HeatMapView.prototype.firstExec = true;

    HeatMapView.prototype.followMouse = true;

    HeatMapView.prototype.viewDidRender = function() {
      return this.heat = L.heatLayer([]).addTo(this.behaviors.map.map);
    };

    HeatMapView.prototype.visualizerWillUpdateItems = function() {
      this.behaviors.map.divMap.style("display", "inherit");
      return this.behaviors.map.map.invalidateSize();
    };

    HeatMapView.prototype.visualizerDidUpdateItems = function() {
      if ((this.model.changed["places"] != null) || this.firstExec) {
        this.firstExec = false;
        if (this.model.get("zoom") === "" && this.model.get("center") === "") {
          return this.behaviors.map.centerView();
        } else {
          /*
          if @model.get("frame")!=""
            @behaviors.map.goToFrame(@visualizer.model.get("frame"))
          */

          if (this.model.get("zoom") !== "" || this.model.get("center") !== "") {
            return this.behaviors.map.goToMapView(this.model.get("center"), this.model.get("zoom"));
          }
        }
      }
    };

    HeatMapView.prototype.updateItems = function() {
      var coor, finalPointsPresent, id, maxRange, maxValue, minRange, minValue, preVal, val, _i, _len, _ref1;
      if (this.model.get("values").currentFormat === "ByValues") {
        minValue = Number(this.model.get("values")[1]);
        maxValue = Number(this.model.get("values")[2]);
      } else {
        minValue = d3.min(this.coordinates, function(d) {
          return Number(d.value);
        });
        maxValue = d3.max(this.coordinates, function(d) {
          return Number(d.value);
        });
      }
      if (!this.pointsObject) {
        this.pointsObject = {};
      }
      minRange = 0;
      maxRange = 1;
      finalPointsPresent = {};
      _ref1 = this.coordinates;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        coor = _ref1[_i];
        if (coor.value != null) {
          preVal = Number(coor.value);
          if (maxValue === minValue) {
            val = 1;
          } else {
            val = (preVal - minValue) / (maxValue - minValue);
            val = minRange + val * maxRange / (maxRange - minRange);
          }
        } else {
          val = minRange;
        }
        if (this.pointsObject[coor.id] == null) {
          finalPointsPresent[coor.id] = true;
          this.pointsObject[coor.id] = {};
          this.pointsObject[coor.id].previous = [coor.LatLng.lat, coor.LatLng.lng, 0];
          this.pointsObject[coor.id].current = [coor.LatLng.lat, coor.LatLng.lng, val];
          this.pointsObject[coor.id].next = [coor.LatLng.lat, coor.LatLng.lng, val];
        } else {
          finalPointsPresent[coor.id] = true;
          this.pointsObject[coor.id].previous = _.clone(this.pointsObject[coor.id].current);
          this.pointsObject[coor.id].next = [coor.LatLng.lat, coor.LatLng.lng, val];
        }
      }
      for (id in this.pointsObject) {
        if (finalPointsPresent[id] == null) {
          this.pointsObject[id].previous = _.clone(this.pointsObject[id].current);
          this.pointsObject[id].next = _.clone(this.pointsObject[id].current);
          this.pointsObject[id].next[2] = 0;
          this.pointsObject[id].kill = true;
        }
      }
      this.resetAnimation();
      return this.behaviors.map.update();
    };

    HeatMapView.prototype.resetAnimation = function() {
      this.totalDuration = Number(this.model.get("transition")[1]);
      this.startTime = (new Date()).getTime();
      return this.updateDrawing();
    };

    /*
    setTargetPoints:(latlngs)=>
      @totalDuration = 500
    
      @previousLatLngs = @latlngs
      if !@previousLatLngs?
        @previousLatLngs=latlngs
    
      @targetLatLngs = latlngs
      @startTime = (new Date()).getTime()
      setTimeout(@updateDrawing,100)
    
    updateDrawing:()=>
      @latlngs = []
      currentTime = (new Date()).getTime()
    
      if currentTime-@startTime < @totalDuration
        
        for p,i in @previousLatLngs
          middlePoint = []
          for k in [0..2]
            timeFactor = (currentTime-@startTime)/@totalDuration
            ##VERY WRONG!!! no tiene sentido el mathsabs...
            middlePoint[k] = Math.abs(p[k]+(@targetLatLngs[i][k]-p[k])*timeFactor)
          @latlngs.push(middlePoint)
        
        @draw()
        setTimeout(@updateDrawing,100)
      else
        @latlngs = @targetLatLngs
        @draw()
    */


    HeatMapView.prototype.updateDrawing = function() {
      var currentTime, k, key, p, timeFactor, _i, _ref1, _ref2;
      currentTime = (new Date()).getTime();
      if (currentTime - this.startTime < this.totalDuration) {
        timeFactor = (currentTime - this.startTime) / this.totalDuration;
        _ref1 = this.pointsObject;
        for (key in _ref1) {
          p = _ref1[key];
          for (k = _i = 0; _i <= 2; k = ++_i) {
            p.current[k] = d3.interpolate(p.previous[k], p.next[k])(timeFactor);
          }
        }
        this.draw();
        return setTimeout(this.updateDrawing, 50);
      } else {
        _ref2 = this.pointsObject;
        for (key in _ref2) {
          p = _ref2[key];
          p.current = p.next;
          if (p.kill === true) {
            delete this.pointsObject[key];
          }
        }
        return this.draw();
      }
    };

    HeatMapView.prototype.draw = function() {
      var gradientObject, heatOptions, key, l, latlngs, p, parsedGradient, stop, _i, _len, _ref1, _ref2;
      latlngs = [];
      _ref1 = this.pointsObject;
      for (key in _ref1) {
        p = _ref1[key];
        latlngs.push(p.current);
      }
      this.heat.setLatLngs(latlngs);
      heatOptions = {};
      gradientObject = {};
      parsedGradient = GradientParser.parse(this.model.get("gradient"));
      _ref2 = parsedGradient[0].colorStops;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        stop = _ref2[_i];
        if (!stop.length) {
          l = 0;
        } else {
          l = stop.length.value / 100;
        }
        gradientObject[l] = "rgb(" + stop.value[0] + "," + stop.value[1] + "," + stop.value[2] + ")";
      }
      heatOptions.resolution = 0.3;
      heatOptions.gradient = gradientObject;
      heatOptions.radiusFactor = (100 * (1 + Number(this.model.get("radius")))) / 100;
      heatOptions.opacityFactor = Number(this.model.get("grouping")) / 100;
      return this.heat.setOptions(heatOptions);
    };

    HeatMapView.prototype.drawElementsOnCanvas = function(ctx, onLoad) {
      var canvasTransform, subCtx, svgSource, vbox;
      subCtx = this.heat._canvas.getContext('2d');
      svgSource = svgUtils.getSVGWithStyles($(this.behaviors.map.map._container).find("svg")[0]);
      vbox = svgSource.getAttribute("viewBox").split(" ");
      canvasTransform = this.behaviors.map.map._mapPane._leaflet_pos;
      subCtx.transform(0.3, 0, 0, 0.3, 0, 0);
      ctx.drawImage(this.heat._canvas, -canvasTransform.x, -canvasTransform.y, +this.heat._canvas.style.width.replace("px", ""), +this.heat._canvas.style.height.replace("px", ""));
      return onLoad();
      /*
      im = new Image();
      im.crossOrigin = '';
      im.onload = ()=>
        ctx.drawImage(im, $(original).css("left").replace("px",""), $(original).css("top").replace("px",""), $(original).css("width").replace("px",""),$(original).css("height").replace("px",""));
        onLoad()
      im.src =  original.getAttribute("src");
      */

    };

    return HeatMapView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ExportOptions = (function(_super) {
    __extends(ExportOptions, _super);

    function ExportOptions() {
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = ExportOptions.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExportOptions.prototype.template = JST['app/scripts/templates/UI/dialogs/exportOptions.hbs'];

    ExportOptions.prototype.title = "Publish project";

    ExportOptions.prototype.width = 600;

    ExportOptions.prototype.height = 400;

    /*
    events:
      "click .web-option": "clickOnWebOption"
      "click .embed-option": "clickOnEmbedOption"
      "click .zip-option": "clickOnZipOption"
    */


    ExportOptions.prototype.viewWillRender = function() {
      return this.buttons = {};
    };

    ExportOptions.prototype.viewDidRender = function() {
      return this.$el.find('.export-a').attr("href", function() {
        return quadrigram.router.managers.serverManager.getExportUrl($(this).attr("data-type"));
        /*
        switch $(this).attr("data-type")
          when "web" then url = quadrigram.webUrl+'publish-website/'+quadrigram.router.dataModels.currentProject.get("id")
          when "embed" then url = quadrigram.webUrl+'publish-embed/'+quadrigram.router.dataModels.currentProject.get("id")
          when "zip" then url = quadrigram.webUrl+'publish-download/'+quadrigram.router.dataModels.currentProject.get("id")
        */

      });
    };

    ExportOptions.prototype.remove = function() {
      ExportOptions.__super__.remove.call(this);
      return localStorage.removeItem('optimizedData');
    };

    /*
    clickOnWebOption:()=>
      window.location.href = "http://dev.bestiario.org/quadrigram/web/#publish-website/"+@currentProcessId;
    
    clickOnEmbedOption:()=>
      window.location.href = "http://dev.bestiario.org/quadrigram/web/#publish-embed/"+@currentProcessId;
    
    clickOnZipOption:()=>
      window.location.href = "http://dev.bestiario.org/quadrigram/web/#publish-download/"+@currentProcessId;
    */


    /*DEPRECATED!!!!
    
    width: 500
    height: 500
    mode:"#publish"
    
    ERROR_EXPORT_MESSAGE: "Error requesting export"
    ERROR_DOWNLOAD_MESSAGE: "Error requesting file"
    
    
    viewWillRender:()=>
      #si lo ponemos arriba no podemos referirnos al @...
      @buttons=
        {
          "Ok": ()=>
            @requestExport()
        }
    
    
    viewDidRender:()=>
      self = @
      @$el.find('.tab a').click( (e) ->
        e.preventDefault()
        self.mode = $(@).attr("href")
        $(this).tab('show')
      )
    
      @$el.find(".base-url").html("www.quadrigram.com/hosting/user/")
      @$el.find(".key-path").val(quadrigram.router.dataModels.currentProject.get("pname"))
      externalGroups = $.grep( quadrigram.router.dataModels.currentProject.get("blockGroupsCollection").models,(e)->
        return e instanceof quadrigram.Models.ExternalBlockGroupModel
      )
      @sourcesList = new Backbone.Collection externalGroups
      # log "showing resources",@sourcesList
      @$el.find(".list-container").addClass('file-list')
      resListView = new quadrigram.Views.ExportResourceCollection collection:@sourcesList, el:@$el.find(".list-container")
      resListView.render()
    
    requestExport:()=>
      ##TODO: unhardcode all options...
      @$el.parent().find("button:eq(1)").html("Ok")
    
      @$el.parent().find("button:eq(1)").attr("disabled","disabled")
      # log "gathering export options",quadrigram.router.dataModels.currentProject
      options = {}
      options.projectName = quadrigram.router.dataModels.currentProject.get("pname")
      options.projectId = quadrigram.router.dataModels.currentProject.get("id")
      #TODO: this variable must be set from mode selector
      options.publish = @mode == "#publish"
      options.keyPath = @$el.find(".key-path").val()
      options.password = @$el.find(".pswd").val()
      if options.password == ""
        options.password = null
      options.providerName = "google"
      options.loggingLevel = 1
      options.resourceList = []
      for file in @sourcesList.models
        resource = {}
        resource.id = file.get("rid")
        ##WRONG: Very fake "google..."
        resource.providerName = "google"
        #if file.get("exportMode") then resource.exportMode = 0 else resource.exportMode = 1
        resource.exportMode = 0
        options.resourceList.push(resource)
    
      # log "will send ",options
      @setProgress({status: 99})
      quadrigram.router.managers.serverManager.requestExport(options,@requestCallback)
    
      @$el.find(".progress-bar").css('background-color', '#2861ff')
    
    requestCallback:(data, textStatus, jqXHR)=>
      # log "request callback",data
      if data.code? and data.code != 200
        @$el.parent().find("button:eq(1)").removeAttr("disabled")
        @$el.find(".progress-message").html(@ERROR_EXPORT_MESSAGE)
        @$el.parent().find("button:eq(1)").html("Retry")
      else
        @setupListener(data.body.id)
        @setProgress(data)
    
    ##TODO: MUST remove listener
    setupListener:(processId)=>
      # log "should setup timer to url",processId
      @currentProcessId = processId
      @$el.find(".progress-message").html("Requesting build...")
    
      if @intervalTrigger
        window.clearInterval(@intervalTrigger)
      @intervalTrigger = window.setInterval(@requestStatus, 700);
    
    removeListener:()=>
      window.clearInterval(@intervalTrigger);
    
    requestStatus:()=>
      # log "requesting status"
      statusUrl = quadrigram.baseUrl + "rs/export/"+@currentProcessId+"/status"
      $.ajax(
            url: statusUrl,
            type: 'GET'
            success: @handleStatusResponse
            error: @handleStatusError
          )
    ##TODO: must read the appropiate values from response
    ##TODO: must handle errors!!
    handleStatusResponse:(response)=>
      if response.code != 200
        return @handleStatusError(response)
      if response.body.status >=0
        @setProgress(response.body)
        if response.body.status == 6
          @removeListener()
          @requestDownload()
        if response.body.status == 7
          @removeListener()
          @requestPublication()
      else
        @handleStatusError(response)
    
    handleStatusError:(response)=>
      # log "received error"
      if response.code == 200
        @$el.find(".progress-message").html("There was an error: "+response.body.data)
      else
        @$el.find(".progress-message").html("There was an error: "+response.error)
      #@$el.parent().find("button:eq(1)").html("Retry")
      #@$el.parent().find("button:eq(1)").removeAttr("disabled")
      #@removeListener()
      #@setBarColor(-1)
    
    
    setProgress:(response)=>
      switch response.status
        when 99 then message = "Saving space..."
        when 0 then message = "Requesting build..."
        when 1 then message = "Gathering sources..."
        when 2 then message = "Starting build..."
        when 3 then message = "Compiling..."
        when 4 then message = "Zipping..."
        when 5 then message = "Zipping..."
        when 6 then message = "Download started"
        when 7 then message = "Publication finished"
        else message = "Unknown status"
      @$el.find(".progress-message").html(message)
    
      #@updateBar(response.status)
      #@setBarColor(response.status)
    
    setBarColor:(value)=>
      switch value
        when -1 then color = "#f00"
        when 6 then color = "#0f0"
        else message = "#2861ff"
      @$el.find(".progress-bar").css('background-color', color)
    updateBar:(value)=>
      percentsArray = [0,5,10,30,80,90,100,100]
    
      percent = percentsArray[value]
      # log "setting progress",value,@previousBarValue,percent
      if value == @previousBarValue
        percent = Math.min(percentsArray[value+1], @previousPercent + Math.random()*2)
      # log "setting result ",percent
    
      @$el.find(".progress-bar").css('width', percent+'%')
    
      @previousPercent = percent
      @previousBarValue = value
    
    
    requestPublication:() =>
      quadrigram.router.managers.serverManager.requestPublication(@currentProcessId, @callbackRequestPublication)
    
    callbackRequestPublication:(data) =>
      if data.code != 200
        quadrigram.router.appViews.loaderView.trigger("loaderErrorMessage","Project successfully published, but there is an error getting publication data")
        setTimeout(()=>
          quadrigram.router.appViews.loaderView.hide()
        ,3000)
        @close()
        #TODO send user to publications list
      else
        window.open(data.body.url,'_blank')
    
    requestDownload:()=>
      downloadUrl = quadrigram.baseUrl + "rs/export/"+@currentProcessId+"/result"
      $.fileDownload(
        downloadUrl,
        {
          failCallback: @failDownloadHandler
        }
      )
    
    failDownloadHandler:()=>
      @$el.parent().find("button:eq(1)").removeAttr("disabled")
      @$el.find(".progress-message").html(@ERROR_DOWNLOAD_MESSAGE)
      @$el.find(".progress-bar").css('width', 97+'%')
      #@setBarColor(-1)
      @$el.parent().find("button:eq(1)").html("Retry")
      #TODO offer to user direct download
    */


    return ExportOptions;

  })(quadrigram.Views.Dialog);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.StackedBarChartView = (function(_super) {
    __extends(StackedBarChartView, _super);

    function StackedBarChartView() {
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerWillExecBehaviors1 = __bind(this.visualizerWillExecBehaviors1, this);
      this.createStackFunction = __bind(this.createStackFunction, this);
      this.setAxisDirection = __bind(this.setAxisDirection, this);
      this.setIdsAndValues = __bind(this.setIdsAndValues, this);
      _ref = StackedBarChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StackedBarChartView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    StackedBarChartView.prototype.xAxisType = "bands";

    StackedBarChartView.prototype.yAxisType = "linear";

    StackedBarChartView.prototype.accumulate = true;

    StackedBarChartView.prototype.followMouse = true;

    StackedBarChartView.prototype.chartType = "stackedbarchart";

    StackedBarChartView.prototype.setIdsAndValues = function() {
      this.model.original._ids = this.idsItems;
      return this.model.original._values = this.values;
    };

    StackedBarChartView.prototype.setAxisDirection = function() {
      var axeIds;
      axeIds = this.model.get("IdsOnAxis");
      if (!axeIds) {
        axeIds = "Vertical";
      }
      if (axeIds === "Vertical") {
        this.yAxisType = "linear";
        return this.xAxisType = "bands";
      } else {
        this.yAxisType = "bands";
        return this.xAxisType = "linear";
      }
    };

    StackedBarChartView.prototype.createStackFunction = function() {
      var negBase, posBase;
      negBase = [];
      posBase = [];
      return this.stack = d3.layout.stack().values(function(d) {
        return d.value;
      }).y(function(d) {
        return d.value;
      }).out(function(d, y0, y) {
        y0 = 0;
        d.value = parseFloat(d.value);
        if (d.value < 0) {
          if (negBase[d.id] != null) {
            negBase[d.id] += d.value;
            y0 = negBase[d.id] - d.value;
            y = y0 + d.value;
          } else {
            negBase[d.id] = d.value;
            y0 = 0;
            y = d.value;
          }
        } else if (d.value > 0) {
          if (posBase[d.id] != null) {
            y0 = posBase[d.id];
            y = posBase[d.id] + d.value;
          }
          if (posBase[d.id] == null) {
            posBase[d.id] = 0;
          }
          posBase[d.id] += d.value;
        }
        if (isNaN(y0) || y0 === "") {
          y0 = 0;
        }
        if (isNaN(y) || y === "") {
          y = 0;
        }
        /*
          y0 is the start Y point of the bar
          y is the end Y point of the bar
        */

        return d.value0 = y0;
      });
    };

    StackedBarChartView.prototype.visualizerWillExecBehaviors1 = function() {
      this.createStackFunction();
      return this.values = this.stack(this.values);
    };

    StackedBarChartView.prototype.updateItems = function() {
      var self;
      this.items = this.behaviors.axis.graph.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.items.exit().remove();
      self = this;
      return this.items.each(function(itemData, itemIndex) {
        var rects, rectsEnter, size, transitionTime, transitionType, updateD3Object,
          _this = this;
        rects = d3.select(this).selectAll(".bar").data(itemData.value, function(d, i) {
          return d.id;
        });
        rectsEnter = rects.enter().append("rect").attr("class", "bar");
        rects.exit().remove();
        size = self.ids.length * self.idsItems.length;
        if (size < 1000 && self.animationActive) {
          transitionType = self.model.get("transition")[0];
          transitionTime = self.model.get("transition")[1];
          updateD3Object = rects.transition().duration(transitionTime).ease(transitionType);
        } else {
          updateD3Object = rects;
        }
        if (self.xAxisType === "bands") {
          return updateD3Object.attr("x", function(d, i) {
            return self.behaviors.axis.xScale(d.id);
          }).attr("width", self.behaviors.axis.xScale.rangeBand()).attr("y", function(d) {
            var barHeight, base, y;
            y = 0;
            base = d.value0;
            barHeight = Math.abs(self.behaviors.axis.yScale(d.value) - self.behaviors.axis.yScale(0));
            if (d.value < 0) {
              y = self.behaviors.axis.yScale(base);
            } else {
              y = self.behaviors.axis.yScale(base) - barHeight;
            }
            return Math.ceil(y);
          }).attr("height", function(d) {
            var firstPos, lastPos, result;
            result = Math.abs(self.behaviors.axis.yScale(d.value) - self.behaviors.axis.yScale(Math.max(0, self.behaviors.axis.yScale.domain()[0])));
            result = Math.ceil(result);
            if (d.value < 0) {
              result = Math.abs(self.behaviors.axis.yScale(d.value) - self.behaviors.axis.yScale(Math.max(0, self.behaviors.axis.yScale.domain()[0])));
              return result = Math.ceil(result);
            } else {
              firstPos = self.behaviors.axis.yScale(d.value0);
              lastPos = self.behaviors.axis.yScale(d.value0 + d.value);
              return result = Math.ceil(firstPos - lastPos);
            }
          });
        } else {
          return updateD3Object.attr("x", function(d, i) {
            var barWidth, base, basePos, x, y;
            y = 0;
            base = d.value0;
            if (d.value < 0) {
              basePos = self.behaviors.axis.xScale(base);
              barWidth = Math.abs(self.behaviors.axis.xScale(d.value) - self.behaviors.axis.xScale(Math.max(0, self.behaviors.axis.xScale.domain()[0])));
              x = Math.max(self.behaviors.axis.xScale(base) - barWidth, 0);
            } else {
              x = Math.max(self.behaviors.axis.xScale(base), self.behaviors.axis.xScale(self.behaviors.axis.xScale.domain()[0]));
            }
            return Math.ceil(x);
          }).attr("width", function(d) {
            var barWidth, basePos, correction, limitPos, result, resultCorrection;
            if (d.value < 0) {
              result = Math.abs(self.behaviors.axis.xScale(d.value) - self.behaviors.axis.xScale(Math.max(0, self.behaviors.axis.xScale.domain()[0])));
              basePos = self.behaviors.axis.xScale(d.value0);
              barWidth = Math.abs(self.behaviors.axis.xScale(d.value) - self.behaviors.axis.xScale(0));
              resultCorrection = Math.abs(Math.min(basePos - barWidth, 0));
              return result = Math.max(0, Math.ceil(result - resultCorrection));
            } else {
              barWidth = Math.abs(self.behaviors.axis.xScale(d.value) - self.behaviors.axis.xScale(0));
              basePos = self.behaviors.axis.xScale(d.value0);
              limitPos = self.behaviors.axis.xScale(Math.max(0, self.behaviors.axis.xScale.domain()[0]));
              correction = Math.max(0, limitPos - basePos);
              return result = Math.max(0, Math.ceil(barWidth - correction));
            }
          }).attr("y", function(d) {
            return self.behaviors.axis.yScale(d.id);
          }).attr("height", self.behaviors.axis.yScale.rangeBand());
        }
      });
    };

    return StackedBarChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.GroupedBarChartView = (function(_super) {
    __extends(GroupedBarChartView, _super);

    function GroupedBarChartView() {
      this.updateItems = __bind(this.updateItems, this);
      this.setAxisDirection = __bind(this.setAxisDirection, this);
      this.setIdsAndValues = __bind(this.setIdsAndValues, this);
      _ref = GroupedBarChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GroupedBarChartView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    GroupedBarChartView.prototype.xAxisType = "bands";

    GroupedBarChartView.prototype.yAxisType = "linear";

    GroupedBarChartView.prototype.accumulate = true;

    GroupedBarChartView.prototype.followMouse = true;

    GroupedBarChartView.prototype.chartType = "groupedbarchart";

    GroupedBarChartView.prototype.setIdsAndValues = function() {
      this.model.original._ids = this.idsItems;
      return this.model.original._values = this.values;
    };

    GroupedBarChartView.prototype.setAxisDirection = function() {
      var axeIds;
      axeIds = this.model.get("IdsOnAxis");
      if (!axeIds) {
        axeIds = "Vertical";
      }
      if (axeIds === "Vertical") {
        this.yAxisType = "linear";
        return this.xAxisType = "bands";
      } else {
        this.yAxisType = "bands";
        return this.xAxisType = "linear";
      }
    };

    GroupedBarChartView.prototype.updateItems = function() {
      var self;
      this.items = this.behaviors.axis.graph.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.items.exit().remove();
      self = this;
      return this.items.each(function(itemData, itemIndex) {
        var rects, rectsEnter, size, transitionTime, transitionType, updateD3Object,
          _this = this;
        rects = d3.select(this).selectAll(".bar").data(itemData.value, function(d, i) {
          return d.id;
        });
        rectsEnter = rects.enter().append("rect").attr("class", "bar");
        rects.exit().remove();
        size = self.ids.length * self.idsItems.length;
        if (size < 1000 && self.animationActive) {
          transitionType = self.model.get("transition")[0];
          transitionTime = self.model.get("transition")[1];
          updateD3Object = rects.transition().duration(transitionTime).ease(transitionType);
        } else {
          updateD3Object = rects;
        }
        if (self.xAxisType === "bands") {
          return updateD3Object.attr("x", function(d, i) {
            var groupItems, itemBandWidth, itemWidth;
            groupItems = self.idsItems.length;
            itemBandWidth = self.behaviors.axis.xScale.rangeBand();
            itemWidth = itemBandWidth / groupItems;
            return self.behaviors.axis.xScale(d.id) + (itemIndex * itemWidth);
          }).attr("width", function(d) {
            var groupItems, itemBandWidth;
            groupItems = self.idsItems.length;
            itemBandWidth = self.behaviors.axis.xScale.rangeBand();
            return itemBandWidth / groupItems;
          }).attr("y", function(d) {
            var barHeight;
            barHeight = Math.abs(self.behaviors.axis.yScale(0) - self.behaviors.axis.yScale(d.value));
            if (d.value < 0) {
              return self.behaviors.axis.yScale(d.value) - barHeight;
            } else {
              return self.behaviors.axis.yScale(d.value);
            }
          }).attr("height", function(d) {
            var barHeight;
            barHeight = Math.abs(self.behaviors.axis.yScale(d.value) - self.behaviors.axis.yScale(0));
            return Math.ceil(barHeight);
          });
        } else {
          return updateD3Object.attr("x", function(d, i) {
            var barWidth;
            barWidth = Math.abs(self.behaviors.axis.xScale(d.value) - self.behaviors.axis.xScale(0));
            if (d.value < 0) {
              return self.behaviors.axis.xScale(0) - barWidth;
            } else {
              return self.behaviors.axis.xScale(0);
            }
          }).attr("width", function(d) {
            var barWidth;
            barWidth = Math.abs(self.behaviors.axis.xScale(d.value) - self.behaviors.axis.xScale(0));
            return Math.ceil(barWidth);
          }).attr("y", function(d) {
            var groupItems, itemBandHeight, itemHeight;
            groupItems = self.idsItems.length;
            itemBandHeight = self.behaviors.axis.yScale.rangeBand();
            itemHeight = itemBandHeight / groupItems;
            return self.behaviors.axis.yScale(d.id) + (itemIndex * itemHeight);
          }).attr("height", function(d) {
            var groupItems, itemBandHeight;
            groupItems = self.idsItems.length;
            itemBandHeight = self.behaviors.axis.yScale.rangeBand();
            return itemBandHeight / groupItems;
          });
        }
      });
    };

    return GroupedBarChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.CustomBlockCollectionView = (function(_super) {
    __extends(CustomBlockCollectionView, _super);

    function CustomBlockCollectionView() {
      this.elementViewDidRemove = __bind(this.elementViewDidRemove, this);
      this.elementViewDidRender = __bind(this.elementViewDidRender, this);
      this.elementAdded = __bind(this.elementAdded, this);
      this.renderSelectedBlock = __bind(this.renderSelectedBlock, this);
      this.updateSelectedView = __bind(this.updateSelectedView, this);
      this.selectElementView = __bind(this.selectElementView, this);
      this.viewDidRemove = __bind(this.viewDidRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = CustomBlockCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CustomBlockCollectionView.prototype.template = JST['app/scripts/templates/blocks/customBlockCollection.hbs'];

    CustomBlockCollectionView.prototype.modelView = quadrigram.Views.CustomBlockCollectionElementView;

    CustomBlockCollectionView.prototype.bindModelViews = false;

    CustomBlockCollectionView.prototype.elementEvents = {
      "select": "selectElementView"
    };

    CustomBlockCollectionView.prototype.viewDidRender = function() {
      if (this.collection.models.length > 0) {
        return this.renderSelectedBlock(this.collection.models[0]);
      }
    };

    CustomBlockCollectionView.prototype.viewDidRemove = function() {};

    CustomBlockCollectionView.prototype.selectElementView = function(view) {
      this.updateSelectedView(view);
      return this.renderSelectedBlock(view.model);
    };

    CustomBlockCollectionView.prototype.updateSelectedView = function(view) {
      this.$el.find(".dropdown-menu").find(".list-item").removeClass("selected");
      return view.$el.find(".list-item").addClass("selected");
    };

    CustomBlockCollectionView.prototype.renderSelectedBlock = function(model) {
      var selectedBlockView;
      this.$el.closest(".block-inspector-content").find(".selected-block-container").empty();
      selectedBlockView = new quadrigram.Views.DataBlockSourceView({
        model: model,
        binding: false
      });
      selectedBlockView.render();
      this.$el.closest(".block-inspector-content").find(".selected-block-container").append(selectedBlockView.$el);
      return this.trigger("block-selected", model);
    };

    CustomBlockCollectionView.prototype.elementAdded = function(model, i) {
      var view;
      view = CustomBlockCollectionView.__super__.elementAdded.call(this, model, i);
      return this.$el.find(".dropdown-menu").append(view.$el);
    };

    CustomBlockCollectionView.prototype.elementViewDidRender = function(view) {
      var _this = this;
      return _.defer(function() {
        return _this.selectElementView(view);
      });
    };

    CustomBlockCollectionView.prototype.elementViewDidRemove = function(view) {
      return this.selectElementView(this.modelViews[this.collection.models[0].cid]);
    };

    return CustomBlockCollectionView;

  })(Backbone.CollectionView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.StacksOnTimeView = (function(_super) {
    __extends(StacksOnTimeView, _super);

    function StacksOnTimeView() {
      this.viewWillUpdate = __bind(this.viewWillUpdate, this);
      this.stackValuesOnDates = __bind(this.stackValuesOnDates, this);
      this.createDataItems = __bind(this.createDataItems, this);
      _ref = StacksOnTimeView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StacksOnTimeView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    StacksOnTimeView.prototype.createDataItems = function(dates, objects) {
      var arrayDate, candidatesObjects, date, output, outputValue, _i, _len;
      output = [];
      for (_i = 0, _len = dates.length; _i < _len; _i++) {
        date = dates[_i];
        outputValue = {};
        outputValue.id = date.id;
        arrayDate = date.value.split("/");
        outputValue.date = new Date(arrayDate[2], arrayDate[1] - 1, arrayDate[0]);
        outputValue.name = date.value;
        outputValue.stackName = arrayDate[1] + "/" + arrayDate[2];
        outputValue.roundedDate = new Date(arrayDate[2], arrayDate[1] - 1);
        candidatesObjects = _.where(objects, {
          id: date.id
        });
        if (candidatesObjects.length > 0) {
          outputValue.object = candidatesObjects[0].value;
        } else {
          outputValue.object = date.value;
        }
        output.push(outputValue);
      }
      return output;
    };

    StacksOnTimeView.prototype.stackValuesOnDates = function(values) {
      var stack, stackKey, stacksDictionary, stacksOutput, stacksOutputItem, value, _i, _len;
      stacksDictionary = {};
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        if (stacksDictionary[value.stackName] == null) {
          stacksDictionary[value.stackName] = {
            id: value.stackName,
            date: value.roundedDate,
            value: []
          };
        }
        stack = stacksDictionary[value.stackName];
        value.value = stack.value.length;
        stack.value.push(value);
      }
      stacksOutput = [];
      for (stackKey in stacksDictionary) {
        stacksOutputItem = stacksDictionary[stackKey];
        stacksOutputItem.value = _.sortBy(stacksOutputItem.value, function(d) {
          return d.date.getTime();
        });
        stacksOutput.push(stacksOutputItem);
      }
      stacksOutput = _.sortBy(stacksOutput, function(d) {
        return d.date.getTime();
      });
      return stacksOutput;
    };

    StacksOnTimeView.prototype.viewWillUpdate = function() {
      var heightItem, ids, idsItems, self, stacks, values,
        _this = this;
      log("viewWillUpdate@stackedGraph");
      values = this.createDataItems(this.model.get("dates"), this.model.get("objects"));
      stacks = this.stackValuesOnDates(values);
      ids = _.map(stacks, function(d, i) {
        return d.id;
      });
      idsItems = _.map(values, function(d, i) {
        return d.id;
      });
      this.behaviors.axis.updateSize({
        width: this.$el.width(),
        height: this.$el.height(),
        axisX: {
          type: "bands"
        },
        axisY: {
          type: "linear"
        }
      });
      this.behaviors.axis.updateConfig({
        values: stacks,
        ids: ids,
        axisLineColor: this.model.get("axisLineColor"),
        axisTextColor: this.model.get("axisTextColor"),
        axisXTitle: this.model.get("axisXTitle")
      });
      heightItem = 20;
      this.stacks = this.behaviors.axis.graph.selectAll(".stack").data(stacks, function(d, i) {
        return d.id;
      });
      self = this;
      this.stacksEnter = this.stacks.enter().append("g").attr("class", "stack").attr("transform", function(d, i) {
        return "translate(" + self.behaviors.axis.xScale(d.id) + ",0)";
      });
      this.stacks.exit().remove();
      return this.stacks.each(function(stackObject, stackIndex) {
        var stackItems, stackItemsEnter,
          _this = this;
        stackItems = d3.select(this).selectAll(".item").data(stackObject.value, function(itemObject, itemIndex) {
          return itemObject.id;
        });
        stackItemsEnter = stackItems.enter().append("g").attr("class", "item");
        stackItemsEnter.append("rect").attr("class", "rect");
        stackItems.exit().remove();
        stackItems.select(".rect").transition().duration(500).attr("width", self.behaviors.axis.xScale.rangeBand()).attr("y", function(d, i) {
          return self.behaviors.axis.size.graphHeight - (i + 1) * heightItem;
        }).attr("height", heightItem + "px");
        self.behaviors.tooltip.updateConfig({
          itemsEnter: stackItemsEnter,
          bodyFunction: function(d) {
            return d3.select(this[0]).datum().object;
          }
        });
        return self.behaviors.selection.updateConfig({
          itemsEnter: stackItemsEnter,
          values: values,
          ids: idsItems,
          fillColors: self.model.get("fillColors"),
          fillOpacities: self.model.get("fillOpacities"),
          lineColors: self.model.get("lineColors"),
          lineThickness: self.model.get("lineThickness"),
          lineOpacities: self.model.get("lineOpacities"),
          selectedItems: self.model.get("selectedItems"),
          forceSelection: this.model.get("forceSelection") === "true"
        });
      });
    };

    return StacksOnTimeView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.PieChartView = (function(_super) {
    __extends(PieChartView, _super);

    function PieChartView() {
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      this.createPieChartFunction = __bind(this.createPieChartFunction, this);
      this.createArcFunction = __bind(this.createArcFunction, this);
      _ref = PieChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PieChartView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    PieChartView.prototype.createArcFunction = function() {
      return this.arcFunction = d3.svg.arc();
    };

    PieChartView.prototype.createPieChartFunction = function() {
      return this.pieFunction = d3.layout.pie().value(function(d) {
        return d.value;
      }).sort(d3.descending);
    };

    PieChartView.prototype.visualizerWillUpdateItems = function() {
      var radius;
      if (this.pieFunction == null) {
        this.createPieChartFunction();
      }
      if (this.arcFunction == null) {
        this.createArcFunction();
      }
      radius = Math.max((Math.min(this.behaviors.svg.size.height, this.behaviors.svg.size.width) - 40) / 2, 25);
      return this.arcFunction.innerRadius(0).outerRadius(radius);
    };

    PieChartView.prototype.updateItems = function() {
      var pieValues;
      pieValues = this.pieFunction(this.values);
      pieValues.forEach(function(d, i) {
        d.value = d.data.value;
        return d.id = d.data.id;
      });
      this.items = this.behaviors.svg.root.selectAll(".item").data(pieValues, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g");
      this.itemsEnter.append("path").attr("class", "arc");
      this.items.exit().remove();
      this.items.attr("class", "item").attr("transform", "translate(" + this.behaviors.svg.size.width / 2 + "," + this.behaviors.svg.size.height / 2 + ")");
      return this.items.select(".arc").attr("d", this.arcFunction);
    };

    PieChartView.prototype.tooltipTitle = function(event, QTip) {
      var object;
      object = d3.select(this[0]).datum();
      if (object.name != null) {
        return object.name;
      } else {
        return object.id;
      }
    };

    return PieChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ExportResourceItem = (function(_super) {
    __extends(ExportResourceItem, _super);

    function ExportResourceItem() {
      this.triggerChange = __bind(this.triggerChange, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = ExportResourceItem.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExportResourceItem.prototype.template = JST['app/scripts/templates/UI/dialogs/exportResourceItem.hbs'];

    ExportResourceItem.prototype.className = "list-item";

    ExportResourceItem.prototype.events = {
      "change .include-checkbox": "triggerChange"
    };

    ExportResourceItem.prototype.viewDidRender = function() {
      log("ExportResourceItem:viewDidRender", this.templateData, this.model);
      if (this.model.get("exportMode") === 1) {
        return this.$el.find(".include-checkbox").prop('checked', true);
      } else {
        return this.$el.find(".include-checkbox").prop('checked', false);
      }
    };

    ExportResourceItem.prototype.triggerChange = function() {
      log("triggering selection");
      return this.trigger("change", this);
    };

    return ExportResourceItem;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ExportResourceCollection = (function(_super) {
    __extends(ExportResourceCollection, _super);

    function ExportResourceCollection() {
      this._handleCehckboxChange = __bind(this._handleCehckboxChange, this);
      _ref = ExportResourceCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ExportResourceCollection.prototype.modelView = quadrigram.Views.ExportResourceItem;

    ExportResourceCollection.prototype.elementEvents = {
      "change": "_handleCehckboxChange",
      "delete": "_clickOnDeleteItem"
    };

    ExportResourceCollection.prototype._handleCehckboxChange = function(itemView) {
      log(itemView.$el.find(".include-checkbox").is(':checked'), itemView.model.get("rid"));
      if (itemView.$el.find(".include-checkbox").is(':checked')) {
        return itemView.model.set("exportMode", 1, {
          silent: true
        });
      } else {
        return itemView.model.set("exportMode", 0, {
          silent: true
        });
      }
      /*WRONG
      @resourcesConfig = []
      for vid of @modelViews
        res = {}
        res.id = @modelViews[vid].model.get("rid")
        if @modelViews[vid].$el.find(".include-checkbox").is(':checked')
          res.exportMode = 1
        else
          res.exportMode = 0
        @resourcesConfig.push(res)
      */

    };

    return ExportResourceCollection;

  })(quadrigram.Views.LoadableCollectionView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ScatterPlotView = (function(_super) {
    __extends(ScatterPlotView, _super);

    function ScatterPlotView() {
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      _ref = ScatterPlotView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ScatterPlotView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    ScatterPlotView.prototype.xAxisType = "linear";

    ScatterPlotView.prototype.xAxisField = "xValue";

    ScatterPlotView.prototype.yAxisType = "linear";

    ScatterPlotView.prototype.yAxisField = "yValue";

    ScatterPlotView.prototype.bodyFields = [
      {
        field: "xValue",
        label: {
          objectField: "xDim",
          "default": "x"
        }
      }, {
        field: "yValue",
        label: {
          objectField: "yDim",
          "default": "y"
        }
      }, {
        field: "radiusValue",
        label: {
          objectField: "radiusDim",
          "default": "z"
        }
      }
    ];

    ScatterPlotView.prototype.extraAmplitudeDomain = 0.20;

    ScatterPlotView.prototype.followMouse = true;

    ScatterPlotView.prototype.radiusDim = "dataRadius";

    ScatterPlotView.prototype.visualizerWillUpdateItems = function() {
      var radiusDomain, radiusRange;
      if (this.model.get("dataRadius").currentFormat === "PxByValuesAndDomain") {
        radiusDomain = this.calculateNumberDomain(this.radiusValues, 0, false);
        if ((this.model.get("dataRadius")[1] != null) && this.model.get("dataRadius")[1] !== "") {
          radiusDomain[0] = this.model.get("dataRadius")[1];
        }
        if ((this.model.get("dataRadius")[2] != null) && this.model.get("dataRadius")[2] !== "") {
          radiusDomain[1] = this.model.get("dataRadius")[2];
        }
        radiusRange = [this.model.get("dataRadius")[3], this.model.get("dataRadius")[4]];
      } else {
        radiusDomain = this.calculateNumberDomain(this.radiusValues, false, "value");
        radiusRange = [this.model.get("dataRadius")[1], this.model.get("dataRadius")[2]];
      }
      return this.behaviors.circles.updateRadiusScale(radiusDomain, radiusRange);
    };

    ScatterPlotView.prototype.updateItems = function() {
      var self, size, transitionTime, transitionType, updateD3Object,
        _this = this;
      this.items = this.behaviors.axis.graph.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("g").attr("class", "item");
      this.itemsEnter.append("circle").attr("class", "dot");
      this.items.exit().remove();
      self = this;
      size = this.items.size();
      if (size < 1000 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        updateD3Object = this.items.select(".dot").transition().duration(transitionTime).ease(transitionType);
      } else {
        updateD3Object = this.items.select(".dot");
      }
      return updateD3Object.attr("r", function(d, i) {
        var value;
        value = _this.behaviors.circles.getRadiusFromValue(d.radiusValue);
        if (_.isNaN(value)) {
          value = 0;
        }
        if (value < 0) {
          value = 0;
        }
        return value;
      }).attr("cx", function(d, i) {
        var value;
        return value = self.behaviors.axis.xScale(d.xValue);
      }).attr("cy", function(d, i) {
        var value;
        return value = self.behaviors.axis.yScale(d.yValue);
      }).each(function(d, i) {
        var limitX, limitY, valueX, valueY;
        valueX = self.behaviors.axis.xScale(d.xValue);
        limitX = 0;
        valueY = self.behaviors.axis.yScale(d.yValue);
        limitY = self.behaviors.axis.yScale(self.behaviors.axis.yScale.domain()[0]);
        if (valueX < limitX || valueY > limitY) {
          return d3.select(this).style("display", "none");
        } else {
          return d3.select(this).style("display", "");
        }
      });
    };

    return ScatterPlotView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.TableView = (function(_super) {
    __extends(TableView, _super);

    function TableView() {
      this.getBuildData = __bind(this.getBuildData, this);
      this.rebuildData = __bind(this.rebuildData, this);
      this.unescapeForHot = __bind(this.unescapeForHot, this);
      this.escapeForHot = __bind(this.escapeForHot, this);
      this.tableFromModel = __bind(this.tableFromModel, this);
      this.rowFromModel = __bind(this.rowFromModel, this);
      this.listFromModel = __bind(this.listFromModel, this);
      this.flatDataFromModel = __bind(this.flatDataFromModel, this);
      this.setMode = __bind(this.setMode, this);
      this.handleTypeChange = __bind(this.handleTypeChange, this);
      this.handleSheetChange = __bind(this.handleSheetChange, this);
      this.addBlockIfNeeded = __bind(this.addBlockIfNeeded, this);
      this.findInvalidDatesInCol = __bind(this.findInvalidDatesInCol, this);
      this.headerPostRenderer = __bind(this.headerPostRenderer, this);
      this.renderHot = __bind(this.renderHot, this);
      this.renderNoDataYet = __bind(this.renderNoDataYet, this);
      this.renderNoData = __bind(this.renderNoData, this);
      this.renderSingleValue = __bind(this.renderSingleValue, this);
      this.hideAggregateWarning = __bind(this.hideAggregateWarning, this);
      this.clickOnLearnMore = __bind(this.clickOnLearnMore, this);
      this.showAggregateWarning = __bind(this.showAggregateWarning, this);
      this.showBadTableWarning = __bind(this.showBadTableWarning, this);
      this.showInvalidDataWarning = __bind(this.showInvalidDataWarning, this);
      this.setModeToggler = __bind(this.setModeToggler, this);
      this.renderContent = __bind(this.renderContent, this);
      this.setDynamic = __bind(this.setDynamic, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.renderDataTypeOptions = __bind(this.renderDataTypeOptions, this);
      this.renderFileTypeOptions = __bind(this.renderFileTypeOptions, this);
      this.hanldeChangeBlockStructure = __bind(this.hanldeChangeBlockStructure, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = TableView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TableView.prototype.template = JST['app/scripts/templates/UI/dialogs/BlockPreview/tableView.hbs'];

    TableView.prototype.modeTogglerTemplate = JST['app/scripts/templates/UI/dialogs/BlockPreview/viewModeTogglerTemplate.hbs'];

    TableView.prototype.dynamicCheckboxTemplate = JST['app/scripts/templates/UI/dialogs/BlockPreview/dynamicCheckboxTemplate.hbs'];

    TableView.prototype.noDataTempate = JST['app/scripts/templates/UI/dialogs/BlockPreview/noDataTemplate.hbs'];

    TableView.prototype.noDataYetTempate = JST['app/scripts/templates/UI/dialogs/BlockPreview/noDataYetTemplate.hbs'];

    TableView.prototype.processingTemplate = JST['app/scripts/templates/UI/dialogs/BlockPreview/processingTemplate.hbs'];

    TableView.prototype.singleValueTemplate = JST['app/scripts/templates/UI/dialogs/BlockPreview/singleValueTemplate.hbs'];

    TableView.prototype.warningBadDataTemplate = JST['app/scripts/templates/UI/dialogs/BlockPreview/warningBadDataTemplate.hbs'];

    TableView.prototype.warningInvalidDataTemplate = JST['app/scripts/templates/UI/dialogs/BlockPreview/warningInvalidDataTemplate.hbs'];

    TableView.prototype.warningAggregateTemplate = JST['app/scripts/templates/UI/dialogs/BlockPreview/warningAggregateTemplate.hbs'];

    TableView.prototype.className = 'table-view';

    TableView.prototype.events = {};

    TableView.prototype.viewWillRender = function() {
      return this.templateData.isBuilder = this.isBuilder;
    };

    TableView.prototype.viewDidRender = function() {
      if (!this.isBuilder) {
        this.$el.closest(".ui-dialog ").find(".ui-dialog-titlebar").append(this.modeTogglerTemplate());
        this.$el.find(".checkbox-container").addClass("hidden");
      } else {
        this.$el.find(".checkbox-container").addClass("hidden");
        /*
        if @model.get("blockGroup").get("spreadsheet")? and @model.get("blockGroup").get("spreadsheet") == 1
          #Deactivate functionality until there is a solution for spreadsheet linking
          @$el.find(".checkbox-container").addClass("hidden")
          
          #@$el.find(".checkbox-container").append(@dynamicCheckboxTemplate())
          #@$el.find(".checkbox-container").find(".dyanimc-checkbox").on("change",@setDynamic)
          #if@model.get("blockGroup").get("isDynamic")
          #  @$el.find(".checkbox-container").find(".dyanimc-checkbox").attr( "checked","checked" )
        else
          @$el.find(".checkbox-container").addClass("hidden")
        */

      }
      if (this.model) {
        if ((this.model.get("metaData") != null) && (this.model.get("metaData").viewMode != null)) {
          this.setMode(this.model.get("metaData").viewMode);
        }
        if (this.isBuilder) {
          this.renderFileTypeOptions();
          if (!this.parentGroup.invalidData) {
            this.renderDataTypeOptions();
          } else {
            this.$el.find(".data-type-options-container").empty();
          }
        } else {
          this.$el.closest(".ui-dialog").find("li.view-mode-item").on("click", this.handleTypeChange);
        }
        if (this.isBuilder) {
          this.parentGroup.on("change-block-structure", this.hanldeChangeBlockStructure);
        } else {
          this.model.on("change", this.renderContent);
        }
      }
      return this.renderContent();
    };

    TableView.prototype.hanldeChangeBlockStructure = function() {
      this.renderFileTypeOptions();
      if (!this.parentGroup.invalidData) {
        this.renderDataTypeOptions();
      } else {
        this.$el.find(".data-type-options-container").empty();
      }
      return this.renderContent();
    };

    TableView.prototype.renderFileTypeOptions = function() {
      var fileTypeOptionsView;
      this.$el.find(".file-type-options-container").empty();
      if ((this.model.get("blockGroup").get("currentSheet") != null) && (this.model.get("blockGroup").sheetOptions != null) && this.model.get("blockGroup").sheetOptions.length > 1) {
        log("sheet options = ", this.model.get("blockGroup").sheetOptions);
        fileTypeOptionsView = new quadrigram.Views.fileTypeOptions({
          model: this.model,
          binding: false
        });
        fileTypeOptionsView.parentGroup = this.parentGroup;
        fileTypeOptionsView.render();
        this.$el.find(".file-type-options-container").append(fileTypeOptionsView.$el);
        return fileTypeOptionsView.on("change-sheet", this.handleSheetChange);
      } else {

      }
    };

    TableView.prototype.renderDataTypeOptions = function() {
      var dataTypeOptionsView;
      this.$el.find(".data-type-options-container").empty();
      dataTypeOptionsView = new quadrigram.Views.dataTypeOptions({
        model: this.model,
        binding: false
      });
      dataTypeOptionsView.parentGroup = this.parentGroup;
      dataTypeOptionsView.render();
      this.$el.find(".data-type-options-container").append(dataTypeOptionsView.$el);
      dataTypeOptionsView.on("change:option", this.rebuildData);
      return this.dataTypeOptionsView = dataTypeOptionsView;
    };

    TableView.prototype.viewWillRemove = function() {
      if (this.isBuilder) {
        this.parentGroup.off("change-block-structure", this.hanldeChangeBlockStructure);
        this.parentGroup.off("change", this.renderContent);
        this.$el.find(".refresh-resource-btn").off("click", this.refreshTableData);
      } else {
        this.model.off("change", this.renderContent);
      }
      this.$el.find(".view-type-toggle .type-btn a").off("click");
      if (this.hot) {
        return this.hot.destroy();
      }
    };

    TableView.prototype.setDynamic = function(e) {
      return this.model.get("blockGroup").set("isDynamic", $(e.target).is(":checked"));
    };

    TableView.prototype.renderContent = function() {
      if (this.hot) {
        this.hot.destroy();
        this.hot = null;
      }
      this.$el.find(".hot-container").empty();
      this.$el.closest(".ui-dialog").find(".view-mode-toggle").addClass("hidden");
      if (this.isBuilder && this.parentGroup.invalidData) {
        this.renderNoData();
        return this.showInvalidDataWarning();
      } else if (BlockUtils.isEmpty(this.model)) {
        if (this.model.get("fetchState") === "ready") {
          return this.renderNoData();
        } else {
          return this.renderNoDataYet();
        }
      } else if (this.model.get("data") && this.model.get("data").length === 1 && !BlockUtils.isBlockOrData(this.model.get("data")[0].value)) {
        return this.renderSingleValue(this.model.get("data")[0]);
      } else if (this.model.get("data") && this.model.get("data").length > 0) {
        if (this.isBuilder && Number(this.model.get("blockGroup").get("consistency")) < 0) {
          if (!this.model.dismissedBadData) {
            this.showBadTableWarning(this.model.get("blockGroup").get("consistency"));
          }
        }
        this.$el.closest(".ui-dialog").find(".view-mode-toggle").removeClass("hidden");
        this.renderHot();
        return this.setModeToggler();
      }
    };

    TableView.prototype.setModeToggler = function() {
      var depth;
      depth = this.depth;
      if (depth < 2) {
        this.$el.closest(".ui-dialog").find(".view-mode-toggle .view-mode-item[value='table']").addClass("hidden");
      } else {
        this.$el.closest(".ui-dialog").find(".view-mode-toggle .view-mode-item[value='table']").removeClass("hidden");
      }
      if ((this.model.get("metaData") != null) && (this.model.get("metaData").viewMode != null)) {
        if (this.model.get("metaData").viewMode === "list") {
          if (this.model.get("metaData").viewDirection != null) {
            this.setMode(this.model.get("metaData").viewDirection);
          } else {
            this.setMode("col");
          }
        } else {
          this.setMode("table");
        }
      } else {
        if (depth === 1) {
          this.setMode("col");
        } else {
          this.setMode("table");
        }
      }
      return this.$el.closest(".ui-dialog").find(".view-mode-toggle").removeClass("hidden");
    };

    TableView.prototype.showInvalidDataWarning = function() {
      var _this = this;
      this.$el.find(".warning-container").empty();
      this.$el.find(".warning-container").removeClass("hidden");
      this.$el.find(".warning-container").css("height", "");
      this.$el.find(".warning-container").append(this.warningInvalidDataTemplate({
        "reason": "Something very bad happened..."
      }));
      return this.$el.find(".learn-more-link").on("click", function() {
        return _this.clickOnLearnMore("dataTables");
      });
    };

    TableView.prototype.showBadTableWarning = function(value) {
      var reason,
        _this = this;
      this.$el.find(".warning-container").empty();
      this.$el.find(".warning-container").removeClass("hidden");
      this.$el.find(".warning-container").css("height", "");
      switch (value) {
        case -4:
          reason = "Some headers are empty";
          break;
        case -3:
          reason = "Some headers are duplicated";
          break;
        case -2:
          reason = "A lot of empty cells";
          break;
        case -1:
          reason = "A lot of empty cells";
          break;
        default:
          reason = "unknown reason";
      }
      this.$el.find(".warning-container").append(this.warningBadDataTemplate({
        "reason": reason
      }));
      this.$el.find(".dismiss-btn").on("click", function() {
        _this.model.dismissedBadData = true;
        return _this.$el.find(".warning-container").css("height", "0px");
      });
      return this.$el.find(".learn-more-link").on("click", function() {
        return _this.clickOnLearnMore("dataTables");
      });
    };

    TableView.prototype.showAggregateWarning = function(idKey) {
      var _this = this;
      this.$el.find(".warning-container").empty();
      this.$el.find(".warning-container").removeClass("hidden");
      this.$el.find(".warning-container").css("height", "");
      this.$el.find(".warning-container").append(this.warningAggregateTemplate({
        "idKey": idKey
      }));
      return this.$el.find(".dismiss-btn").on("click", function() {
        _this.model.dismissedAggregate = true;
        return _this.$el.find(".warning-container").css("height", "0px");
      });
    };

    TableView.prototype.clickOnLearnMore = function(topic) {
      return window.open(quadrigram.webUrl + "#helpContent/" + topic, "_blank");
    };

    TableView.prototype.hideAggregateWarning = function() {
      return this.$el.find(".warning-container").css("height", "0px");
    };

    TableView.prototype.renderSingleValue = function(qvalue) {
      this.$el.find(".no-data-yet-table").remove();
      return this.$el.find(".hot-container").append(this.singleValueTemplate(qvalue));
    };

    TableView.prototype.renderNoData = function() {
      this.$el.find(".no-data-yet-table").remove();
      return this.$el.find(".hot-container").append(this.noDataTempate());
    };

    TableView.prototype.renderNoDataYet = function() {
      return this.$el.append(this.noDataYetTempate());
    };

    TableView.prototype.renderHot = function() {
      var columnsArray, fullData, h, styleParent, _i, _len, _ref1;
      this.$el.find(".no-data-yet-table").remove();
      fullData = this.flatDataFromModel();
      columnsArray = [];
      _ref1 = fullData.headerData;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        h = _ref1[_i];
        columnsArray.push({
          data: h
        });
      }
      if (fullData.headerData.indexOf("__Index__") >= 0) {
        fullData.headerData[fullData.headerData.indexOf("__Index__")] = "Index";
      }
      if (!this.hot) {
        styleParent = $("<div id='hot-style-container'> </di>");
        this.$el.find(".hot-container").append(styleParent);
        styleParent.css({
          "width": "100%"
        });
        styleParent.css({
          "height": "100%"
        });
        styleParent.css({
          "overflow": "auto"
        });
        this.hot = new Handsontable(styleParent[0], {
          data: fullData.contentData,
          colWidths: 150,
          rowHeights: 40,
          colHeaders: fullData.headerData,
          fixedColumnsLeft: 1,
          afterGetColHeader: this.headerPostRenderer,
          afterRenderer: this.addBlockIfNeeded,
          wordWrap: false,
          multiSelect: false,
          fragmentSelection: true,
          columns: columnsArray,
          manualColumnResize: true,
          cells: function(row, col, prop) {
            return {
              readOnly: true
            };
          }
        });
      } else {
        this.$el.find(".hot-container").append($(this.hot.container).parent());
        this.hot.updateSettings({
          colHeaders: fullData.headerData,
          columns: columnsArray
        });
        this.hot.loadData(fullData.contentData);
      }
      this.$el.find(".hot-container").prepend("<div class='white-header'></div>");
      this.$el.find(".hot-container").prepend("<div class='white-first'></div>");
      if (this.isBuilder) {
        this.$el.find(".white-header").addClass("big-header");
        this.$el.find(".hot-container").addClass("is-builder");
      } else {
        this.$el.find(".builer-options-container").addClass("hidden");
        this.$el.find(".white-header").addClass("small-header");
        this.$el.find(".hot-container").addClass("not-is-builder");
      }
      /*
      if @isBuilder
        if @$el.find(".table-viewer-header-id-selector").length == 0
          idSelector = $("<div class='table-viewer-header-id-selector table-viewer-cell'><select class='id-selector' name='id-selector'></select></div>")
      
          for key in @parentGroup.keys
            idSelector.find("select").append($("<option value='"+key+"'>"+key+"</option>"))
          idSelector.find("select").append($("<option value='__Index__'> Index </option>"))
          idSelector.find("select").val(@parentGroup.get("buildData").idKey)
      
          @$el.find(".id-selector-container").append(idSelector)
          idSelector.find("select").selectmenu({
              width:100
              change:@changeIdKey
            })
      
      #WRONG: esto tiene que ir dentro del dataTableOptions!!!! (vigilar con posibles referencias a ...-id-selector )
      */

      if (this.isBuilder) {
        if (this.parentGroup.hasIdRepetition[this.parentGroup.get("buildData").idKey]) {
          if (!this.model.dismissedAggregate) {
            this.showAggregateWarning(this.parentGroup.get("buildData").idKey);
          }
        } else {
          this.hideAggregateWarning();
        }
      }
      if (this.lastScrolls != null) {
        this.$el.find("#hot-style-container").scrollTop(this.lastScrolls.top);
        return this.$el.find("#hot-style-container").scrollLeft(this.lastScrolls.left);
      }
    };

    TableView.prototype.getqvvalue = function(attr) {
      return function(row) {
        return row[attr];
      };
    };

    TableView.prototype.headerPostRenderer = function(col, TH) {
      var aggregator, array, showDateWarning;
      $(TH).find(".colHeader").html(this.unescapeForHot($(TH).find(".colHeader").html()));
      if (this.isBuilder) {
        $(TH).addClass("big-header");
        $(TH).addClass("hot-builder-header");
        if (col === 0 && $(TH).closest(".ht_clone_corner").length > 0) {
          $(TH).append("<div class='table-preview-corner-aggregation'>Identifiers</div>");
        } else if ($(TH).closest(".ht_clone_top").length > 0) {
          if (this.parentGroup.hasIdRepetition[this.parentGroup.get("buildData").idKey] && $(TH).find(".aggregator").length <= 0) {
            aggregator = $("<div class='table-viewer-header-aggregator table-viewer-cell'><select data-col='" + (col - 1) + "' class='aggregator'>            <option value='add'>Aggreggate adding</option>            <option value='count'>Aggreggate counting</option>            <option value='mean'>Mean value</option>            <option value='min'>Minimum value</option>            <option value='max'>Maximum value</option>            <option value='first'>First value only</option>            <option value='last'>Last value only</option>            <option value='ignore'>Ignore this column</option>            </select></div>");
            if (_.findWhere(this.parentGroup.get("buildData").blocks, {
              "id": this.sortedKeys[col - 1]
            }) != null) {
              aggregator.find("select").val(_.findWhere(this.parentGroup.get("buildData").blocks, {
                "id": this.sortedKeys[col - 1]
              }).value);
            }
            $(TH).append(aggregator);
            aggregator.find("select").selectmenu({
              width: 125,
              change: this.rebuildData
            });
          }
        }
        if (col === 0) {
          array = this.model.get("data")[0].value.data.map(function(qv) {
            return qv.id;
          });
        } else {
          array = _.find(this.model.get("data"), {
            id: this.sortedKeys[col - 1]
          }).value.data.map(function(qv) {
            return qv.value;
          });
        }
        if (this.findInvalidDatesInCol(array)) {
          showDateWarning = true;
        }
        if (showDateWarning) {
          $(TH).append("<div class='table-preview-date-warning'>*date format should be DD/MM/YYYY</div>");
        }
      } else {
        $(TH).addClass("small-header");
      }
      return TH;
    };

    TableView.prototype.findInvalidDatesInCol = function(list) {
      var result, value, _i, _len;
      result = false;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        value = list[_i];
        result = result || BlockUtils.checkIsDate(value) === "invalid";
      }
      return result;
    };

    TableView.prototype.addBlockIfNeeded = function(TD, row, col, prop, value, cellProperties) {
      var block, fakeModel;
      if ((value != null) && (value.get != null) && $(TD).children().length <= 0) {
        if (value.get("data").length > 0) {
          fakeModel = new Backbone.Model({
            label: value.get("label")
          });
          block = new quadrigram.Views.DataBlockStatic({
            model: value.getBackboneModel()
          });
          block.render();
          $(TD).html("");
          return $(TD).append(block.$el);
        } else {
          return $(TD).html(value.get("data")[0].value);
        }
      }
    };

    TableView.prototype.handleSheetChange = function(sheetName) {
      this.$el.find(".hot-container").append(this.processingTemplate());
      return this.parentGroup.set("currentSheet", sheetName);
      /*
      @parentGroup.buildFromRawData(()=>
        setTimeout( ()=>
          @renderDataTypeOptions()
          @renderContent()
          ##Only used for viewModeHandleChange (<- searchit)
          @model.get("blockGroup").trigger("change-block-structure")
        ,2000)
      )
      */

    };

    /*
    handleDataTypeChange:(e)=>
      selectEl = @$el.find(".data-type-selector select")[0]
      #@currentDataType = selectEl.options[selectEl.selectedIndex].value
      @parentGroup.get("buildData").dataType = selectEl.options[selectEl.selectedIndex].value
      #if @currentDataType == "network"
      #  @model.get("parentGroup").get("buildData").networkFormat =  
    
      @renderDataTypeOptions()
    */


    TableView.prototype.handleTypeChange = function(e) {
      var mode;
      this.$el.find(".hot-container").append(this.processingTemplate());
      mode = $(e.currentTarget).attr("value");
      this.setMode(mode);
      if (mode === "row" || mode === "col") {
        this.model.get("metaData").viewMode = "list";
        this.model.get("metaData").viewDirection = mode;
      } else {
        this.model.get("metaData").viewMode = "table";
        this.model.get("metaData").viewDirection = "row";
      }
      this.renderContent();
      return this.model.get("blockGroup").trigger("change-block-structure");
    };

    TableView.prototype.setMode = function(mode) {
      this.$el.closest(".ui-dialog").find(".selected-instance").removeClass("col-icon");
      this.$el.closest(".ui-dialog").find(".selected-instance").removeClass("row-icon");
      this.$el.closest(".ui-dialog").find(".selected-instance").removeClass("table-icon");
      return this.$el.closest(".ui-dialog").find(".selected-instance").addClass(mode + "-icon");
    };

    TableView.prototype.flatDataFromModel = function() {
      var currentViewMode, depth, flatData;
      this.depth = BlockUtils.getBlockDepth(this.model);
      depth = this.depth;
      if ((this.model.get("metaData") != null) && (this.model.get("metaData").viewMode != null)) {
        currentViewMode = this.model.get("metaData").viewMode;
      } else {
        if (depth === 1) {
          currentViewMode = "list";
        } else if (depth === 2) {
          currentViewMode = "table";
        } else if (depth === 3) {
          currentViewMode = "table";
        } else {
          currentViewMode = "table";
        }
      }
      switch (currentViewMode) {
        case "list":
          if ((this.model.get("metaData") == null) || (this.model.get("metaData").viewDirection == null) || this.model.get("metaData").viewDirection === "col") {
            return flatData = this.listFromModel(this.model);
          } else {
            return flatData = this.rowFromModel(this.model);
          }
          break;
        case "table":
          if ((this.model.get("metaData") == null) || (this.model.get("metaData").viewDirection == null) || this.model.get("metaData").viewDirection === "row") {
            return flatData = this.tableFromModel(this.model);
          } else {
            return flatData = this.listFromModel(this.model);
          }
      }
    };

    TableView.prototype.listFromModel = function(model) {
      var b, headerData, i, j, qv, tableData, _i, _j, _len, _len1, _ref1, _ref2;
      tableData = [];
      headerData = [];
      this.sortedKeys = [];
      _ref1 = model.get("data");
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        b = _ref1[i];
        this.sortedKeys.push(this.escapeForHot(b.id));
      }
      if (model.get("metaData")) {
        headerData.push(this.escapeForHot(model.get("metaData").idLabel));
        headerData.push(this.escapeForHot(model.get("metaData").valueLabel));
      } else {
        headerData.push("-");
        headerData.push("value");
      }
      _ref2 = model.get("data");
      for (j = _j = 0, _len1 = _ref2.length; _j < _len1; j = ++_j) {
        qv = _ref2[j];
        if (tableData[j] == null) {
          tableData[j] = {};
          tableData[j][headerData[0]] = qv.id;
        }
        tableData[j][headerData[1]] = qv.value;
      }
      return {
        "contentData": tableData,
        "headerData": headerData
      };
    };

    TableView.prototype.rowFromModel = function(model) {
      var b, headerData, i, j, qv, tableData, _i, _j, _len, _len1, _ref1, _ref2;
      tableData = [];
      headerData = [];
      this.sortedKeys = [];
      _ref1 = model.get("data");
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        b = _ref1[i];
        this.sortedKeys.push(this.escapeForHot(b.id));
      }
      /*
      if model.get("metaData")
        headerData.push(@escapeForHot(model.get("metaData").idLabel))
        headerData.push(@escapeForHot(model.get("metaData").valueLabel))
      else
        headerData.push("-")
        headerData.push("value")
      */

      headerData.push("Row");
      _ref2 = model.get("data");
      for (j = _j = 0, _len1 = _ref2.length; _j < _len1; j = ++_j) {
        qv = _ref2[j];
        headerData.push(this.escapeForHot(qv.id));
        if (tableData[0] == null) {
          tableData[0] = {};
          tableData[0][headerData[0]] = model.get("metaData").valueLabel;
        }
        tableData[0][headerData[headerData.length - 1]] = qv.value;
      }
      return {
        "contentData": tableData,
        "headerData": headerData
      };
    };

    TableView.prototype.tableFromModel = function(model) {
      var b, col, depth, headerData, i, idsDict, idx, j, qv, tableData, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
      if (model.get("data").length === 0) {
        return;
      }
      tableData = [];
      headerData = [];
      depth = this.depth;
      this.sortedKeys = [];
      _ref1 = model.get("data");
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        b = _ref1[i];
        this.sortedKeys.push(this.escapeForHot(b.id));
      }
      headerData = this.sortedKeys.slice();
      if (model.get("data")[0].value.get && model.get("data")[0].value.get("metaData")) {
        headerData.unshift(this.escapeForHot(model.get("data")[0].value.get("metaData").idLabel));
      } else {
        headerData.unshift("-");
      }
      /*
      if depth == 3
        allids = BlockUtils.getIdsAtLevel(model,1)
      else if depth == 2
        allids = BlockUtils.getIdsAtLevel(model,0)
      else
        allids = new quadrigram.Models.DataBlockData
        allids.set("data",[{"id":model.get("metaData").valueLabel,"value":"nada"}])
      */

      idsDict = {};
      _ref2 = model.get("data");
      for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
        col = _ref2[i];
        if (col.value.data != null) {
          _ref3 = col.value.data;
          for (j = _k = 0, _len2 = _ref3.length; _k < _len2; j = ++_k) {
            qv = _ref3[j];
            if (idsDict[qv.id] == null) {
              tableData.push({});
              idx = tableData.length - 1;
              tableData[idx][this.escapeForHot(model.get("data")[0].value.get("metaData").idLabel)] = qv.id;
              idsDict[qv.id] = idx;
            } else {
              idx = idsDict[qv.id];
            }
            /*
            if !tableData[j]?
              tableData[j] = {}
              tableData[j][@escapeForHot(model.get("data")[0].value.get("metaData").idLabel)]=qv.id
            */

            tableData[idx][this.escapeForHot(col.id)] = qv.value;
          }
        } else {
          qv = col;
          if (tableData[0] == null) {
            tableData[0] = {};
            tableData[0]["-"] = model.get("metaData").valueLabel;
          }
          tableData[0][col.id] = col.value;
        }
      }
      return {
        "contentData": tableData,
        "headerData": headerData
      };
    };

    TableView.prototype.escapeForHot = function(value) {
      return String(value).replace(/\./g, "%2E");
    };

    TableView.prototype.unescapeForHot = function(value) {
      return String(value).replace(/%2E/g, ".");
    };

    TableView.prototype.rebuildData = function(options) {
      var _this = this;
      this.$el.find(".hot-container").append(this.processingTemplate());
      this.lastScrolls = {
        top: this.$el.find("#hot-style-container").scrollTop(),
        left: this.$el.find("#hot-style-container").scrollLeft()
      };
      quadrigram.tracker.sendEvent({
        event_type: 202,
        event_subtype: 1
      });
      return setTimeout(function() {
        return _this.parentGroup.updateBuildData(_this.getBuildData());
      }, 40);
    };

    TableView.prototype.getBuildData = function() {
      var aggEl, bkey, buildData, i, _i, _len, _ref1;
      buildData = {};
      buildData.dataType = this.dataTypeOptionsView.currentDataType;
      if (buildData.dataType === "dataTable") {
        buildData.idKey = this.dataTypeOptionsView.currentOptions.getIdKey();
        buildData.blocks = [];
        _ref1 = this.sortedKeys;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          bkey = _ref1[i];
          aggEl = this.$el.find('.ht_clone_top .aggregator[data-col="' + i + '"]')[0];
          if (aggEl != null) {
            buildData.blocks.push({
              id: bkey,
              value: aggEl.options[aggEl.selectedIndex].value
            });
          }
        }
      } else if (buildData.dataType === "network") {
        buildData.networkFormat = Object.keys(this.parentGroup.dataTypeOptions.network)[0];
      }
      return buildData;
    };

    return TableView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.LoaderView = (function(_super) {
    __extends(LoaderView, _super);

    function LoaderView() {
      this.hide = __bind(this.hide, this);
      this.getLoaderMessage = __bind(this.getLoaderMessage, this);
      this.showMessage = __bind(this.showMessage, this);
      this.showCurrentMessage = __bind(this.showCurrentMessage, this);
      this.handleLoader = __bind(this.handleLoader, this);
      this.resetStack = __bind(this.resetStack, this);
      this.unregisterProcess = __bind(this.unregisterProcess, this);
      this.registerProcess = __bind(this.registerProcess, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      this.init = __bind(this.init, this);
      _ref = LoaderView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LoaderView.prototype.template = JST['app/scripts/templates/UI/loader/loader.hbs'];

    LoaderView.prototype.MESSAGE1 = "Detected error from Google Drive: cannot get selected resource";

    LoaderView.prototype.MESSAGE2 = "Sorry, you cannot use this application because your administrator has disabled 3rd party Google Drive apps. Please ask your administrator to allow Google Drive apps by opening the Google Apps control panel and navigating to Settings -> Drive and Docs then verifying that Allow user sto install Google Drive apps is enabled.";

    LoaderView.prototype.MESSAGE3 = "Loading project...";

    LoaderView.prototype.MESSAGE4 = "Sorry, the project could not be loaded.";

    LoaderView.prototype.MESSAGE5 = "";

    LoaderView.prototype.MESSAGE6 = "";

    LoaderView.prototype.MESSAGE7 = "";

    LoaderView.prototype.init = function(object) {
      this.on("loaderMessage", this.handleLoader);
      return this.resetStack();
    };

    LoaderView.prototype.viewWillRender = function() {};

    LoaderView.prototype.viewDidRender = function() {
      $("#pre-loader-container").remove();
      return this.$el.find(".loader-message").html("Loading Quadrigram...");
    };

    LoaderView.prototype.viewWillRemove = function() {
      return this.off();
    };

    LoaderView.prototype.registerProcess = function(data) {
      return this.priorityStack[data.priority || 0].unshift(data);
    };

    LoaderView.prototype.unregisterProcess = function(data) {
      var d, idx, prio;
      prio = data.priority || 0;
      if (data.id != null) {
        d = _.find(this.priorityStack[prio], function(el) {
          return el.id === data.id;
        });
        idx = this.priorityStack[prio].indexOf(d);
        return this.priorityStack[prio].splice(idx, 1);
      } else {
        d = _.find(this.priorityStack[prio], function(el) {
          return el["class"] === data["class"];
        });
        idx = this.priorityStack[prio].indexOf(d);
        return this.priorityStack[prio].splice(idx, 1);
      }
    };

    LoaderView.prototype.resetStack = function() {
      this.priorityStack = [];
      this.priorityStack[0] = [];
      this.priorityStack[1] = [];
      return this.priorityStack[2] = [];
    };

    LoaderView.prototype.handleLoader = function(data) {
      log("LoaderView::handleLoader -> data = ", data);
      if (data.mode == null) {
        data.mode = 0;
      }
      if (data.mode === 0) {
        this.registerProcess(data);
      } else if (data.mode === 1) {
        this.unregisterProcess(data);
      } else if (data.mode === 2) {
        this.resetStack();
      }
      return this.showCurrentMessage();
    };

    LoaderView.prototype.showCurrentMessage = function() {
      if (this.priorityStack[2].length > 0) {
        return this.showMessage(this.priorityStack[2][0]);
      } else if (this.priorityStack[1].length > 0) {
        return this.showMessage(this.priorityStack[1][0]);
      } else if (this.priorityStack[0].length > 0) {
        return this.showMessage(this.priorityStack[0][0]);
      } else {
        return this.hide();
      }
    };

    LoaderView.prototype.showMessage = function(data) {
      var loaderClass, message,
        _this = this;
      if ((data.message == null) || data.message <= 0 || window.quadrigram.environment === "exported") {
        message = "Quadrigram";
      } else {
        message = this.getLoaderMessage(data.message);
      }
      if ((data.timeout != null) && data.timeout > 0) {
        setTimeout(function() {
          _this.unregisterProcess({
            id: data.id,
            priority: data.priority
          });
          return _this.showCurrentMessage();
        }, data.timeout);
      }
      if (data.type == null) {
        data.type = 0;
      }
      switch (data.type) {
        case 0:
          loaderClass = "";
          break;
        case 1:
          loaderClass = "loader-error-message";
          break;
        case 2:
          loaderClass = "loader-fatal-error-message";
          break;
        default:
          loaderClass = "";
      }
      if (data.priority == null) {
        data.priority = 0;
      }
      this.$el.find(".loader-message").remove();
      this.$el.html(this.template());
      this.$el.find(".loader-message").html(message);
      this.$el.find(".loader-message").removeClass("loader-error-message");
      this.$el.find(".loader-message").removeClass("loader-fatal-error-message");
      this.$el.find(".loader-message").addClass(loaderClass);
      return this.$el.show();
      /*
      if data.priority == 0
        if @$el.length == 0
          @$el.html(@template())
      
        @$el.find("#loader-message").html(message)
        @$el.find("#loader-message").removeClass()
        @$el.find("#loader-message").addClass(loaderClass)
        @$el.show()
      else if data.priority == 1
        @$el.append(@templateOver())
        @$el.find("#loader-over-message").html(message)
        @$el.find("#loader-over-message").removeClass()
        @$el.find("#loader-over-message").addClass(loaderClass)
        @$el.show()
      */

    };

    LoaderView.prototype.getLoaderMessage = function(message) {
      if (isNaN(message)) {
        return message;
      }
      switch (message) {
        case 1:
          return this.MESSAGE1;
        case 2:
          return this.MESSAGE2;
        case 3:
          return this.MESSAGE3;
        case 4:
          return this.MESSAGE4;
        case 5:
          return this.MESSAGE5;
        case 6:
          return this.MESSAGE6;
        case 7:
          return this.MESSAGE7;
        default:
          return "Quadrigram";
      }
    };

    LoaderView.prototype.hide = function() {
      return this.$el.hide();
      /*
      viewport = document.querySelector("meta[name=viewport]");
      viewport.setAttribute('content', 'initial-scale='+0.35);
      */

    };

    return LoaderView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PreFunctionBlockModel = (function(_super) {
    __extends(PreFunctionBlockModel, _super);

    function PreFunctionBlockModel() {
      this.activate = __bind(this.activate, this);
      this.initialize = __bind(this.initialize, this);
      _ref = PreFunctionBlockModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PreFunctionBlockModel.prototype.data = [];

    PreFunctionBlockModel.prototype.metaData = [];

    PreFunctionBlockModel.prototype.functionData = {};

    PreFunctionBlockModel.prototype.initialize = function() {
      return this.set("fetchState", "ready", {
        silent: true
      });
    };

    PreFunctionBlockModel.prototype.activate = function() {
      var newBlock;
      this.get("blockGroup").preBlocks.splice(this.get("blockGroup").preBlocks.indexOf(this), 1);
      newBlock = new quadrigram.Models.FunctionBlockModel();
      newBlock.set({
        "blockGroup": this.get("blockGroup"),
        "jsonKey": this.get("jsonKey"),
        "label": this.get("label"),
        "role": this.get("role"),
        "order": this.get("order"),
        "origin": this.get("origin"),
        "fetchState": "processing"
      }, {
        silent: true
      });
      newBlock.setOperation(this.get("operation"), false);
      newBlock.get("operator").setExpressionValues(this.get("options"));
      this.trigger("replace-model", newBlock);
      this.off();
      return newBlock;
    };

    return PreFunctionBlockModel;

  })(Backbone.Model);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockStatic = (function(_super) {
    __extends(DataBlockStatic, _super);

    function DataBlockStatic() {
      this.loopAnimation = __bind(this.loopAnimation, this);
      _ref = DataBlockStatic.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockStatic.prototype.template = JST['app/scripts/templates/blocks/dataBlock.hbs'];

    DataBlockStatic.prototype.className = 'data-block data-block-static';

    DataBlockStatic.prototype.loopAnimation = function() {};

    return DataBlockStatic;

  })(quadrigram.Views.DataBlockView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.LayoutSettings = (function(_super) {
    __extends(LayoutSettings, _super);

    function LayoutSettings() {
      this.collapseProperty = __bind(this.collapseProperty, this);
      this.updateLayoutProperties = __bind(this.updateLayoutProperties, this);
      this.updateBkgProperties = __bind(this.updateBkgProperties, this);
      this.updateProperties = __bind(this.updateProperties, this);
      this.showFormatProperties = __bind(this.showFormatProperties, this);
      this.showAsTab = __bind(this.showAsTab, this);
      this.changePreset = __bind(this.changePreset, this);
      this.handleChange = __bind(this.handleChange, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = LayoutSettings.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LayoutSettings.prototype.template = JST['app/scripts/templates/UI/dialogs/layoutSettingsTab.hbs'];

    LayoutSettings.prototype.events = {
      "click .collapsable-toggle": "collapseProperty"
    };

    LayoutSettings.prototype.viewWillRender = function() {
      var _this = this;
      this.templateData.presets = LayoutUtils.presets;
      return Handlebars.registerHelper('prettyLayoutFormat', function(val, options) {
        if (val === "web-layout") {
          return "responsive";
        }
        if (val === "full-screen-layout") {
          return "full screen";
        }
        if (val === "embed-layout") {
          return "fixed";
        }
      });
    };

    LayoutSettings.prototype.viewDidRender = function() {
      var self;
      self = this;
      this.$el.find("[qm-input-type]").each(function(i) {
        var camelCased;
        camelCased = $(this).attr("qm-input-type").replace(/-([a-z])/g, function(g) {
          return g[1].toUpperCase();
        });
        $(this)[camelCased]();
        return $(this).on("change", self.handleChange);
      });
      this.$el.find(".preset-selector").on("change", this.changePreset);
      this.tempSettings = $.extend({}, quadrigram.router.dataModels.currentProject.get("layout-settings"));
      return this.showFormatProperties(this.tempSettings.layoutFormat);
    };

    LayoutSettings.prototype.handleChange = function(e) {
      var $target;
      $target = $(e.target);
      delete this.tempSettings[$target.attr("data-id")];
      this.tempSettings[$target.attr("data-id")] = $target.val();
      this.tempSettings = LayoutUtils.validateLayoutSettings(this.tempSettings);
      return _.defer(this.updateProperties);
    };

    LayoutSettings.prototype.changePreset = function(e) {
      var newPreset;
      newPreset = $(e.currentTarget.selectedOptions[0]).attr("data-id");
      this.tempSettings.layoutPreset = newPreset;
      this.tempSettings = LayoutUtils.validateLayoutSettings(this.tempSettings, true);
      return this.showFormatProperties(this.tempSettings);
    };

    LayoutSettings.prototype.showAsTab = function() {};

    LayoutSettings.prototype.showFormatProperties = function() {
      /*
      if @$el.find(".preset-selector option[data-id='"+@tempSettings.layoutPreset+"']")
        @$el.find(".preset-selector option[data-id='"+@tempSettings.layoutPreset+"']").prop("selected",true)
      else
        @$el.find(".preset-selector").prepend("<option data-id='custom'>Custom (responsive)</option>")
        @$el.find(".preset-selector option[data-id='custom']").prop("selected",true)
      */

      this.$el.find(".layout-properties").addClass("hidden");
      this.$el.find(".layout-properties[data-id='" + this.tempSettings.layoutFormat + "']").removeClass("hidden");
      return this.updateProperties();
    };

    LayoutSettings.prototype.updateProperties = function() {
      var customMode;
      if (this.tempSettings.layoutPreset !== "custom") {
        this.$el.find(".preset-selector option[data-id='" + this.tempSettings.layoutPreset + "']").prop("selected", true);
      } else {
        switch (this.tempSettings.layoutFormat) {
          case "web-layout":
            customMode = "responsive";
            break;
          case "full-screen-layout":
            customMode = "fullscreen";
            break;
          case "embed-layout":
            customMode = "fixed";
        }
        this.$el.find(".preset-selector option[data-id='custom']").remove();
        this.$el.find(".preset-selector").prepend("<option data-id='custom'>Custom (" + customMode + ")</option>");
        this.$el.find(".preset-selector option[data-id='custom']").prop("selected", true);
      }
      this.updateBkgProperties();
      return this.updateLayoutProperties();
    };

    LayoutSettings.prototype.updateBkgProperties = function() {
      this.$el.find("input[data-id='backgroundColor']").val(this.tempSettings["backgroundColor"], {
        "trigger": false
      });
      return this.$el.find("input[data-id='foregroundColor']").val(this.tempSettings["foregroundColor"], {
        "trigger": false
      });
    };

    LayoutSettings.prototype.updateLayoutProperties = function() {
      var $currentEl, propName, _results;
      $currentEl = this.$el.find(".layout-properties[data-id='" + this.tempSettings.layoutFormat + "']");
      _results = [];
      for (propName in this.tempSettings) {
        if ($currentEl.find("input[data-id='" + propName + "']").length) {
          _results.push($currentEl.find("input[data-id='" + propName + "']").val(this.tempSettings[propName], {
            "trigger": false
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    LayoutSettings.prototype.collapseProperty = function(event) {
      $(event.currentTarget).parent().find('.propertyBody').slideToggle(300);
      $(event.currentTarget).toggleClass('selected');
      return $(event.currentTarget).parent().toggleClass('collapsed');
    };

    return LayoutSettings;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.StyleSettings = (function(_super) {
    __extends(StyleSettings, _super);

    function StyleSettings() {
      this.showAsTab = __bind(this.showAsTab, this);
      _ref = StyleSettings.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StyleSettings.prototype.template = JST['app/scripts/templates/UI/dialogs/settingsTabs/styleSettings.hbs'];

    StyleSettings.prototype.showAsTab = function() {};

    return StyleSettings;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.TooltipSettings = (function(_super) {
    __extends(TooltipSettings, _super);

    function TooltipSettings() {
      this.getFontFamily = __bind(this.getFontFamily, this);
      this.bodyFunction = __bind(this.bodyFunction, this);
      this.titleFunction = __bind(this.titleFunction, this);
      this.showAsTab = __bind(this.showAsTab, this);
      this.getFakeTooltipObject = __bind(this.getFakeTooltipObject, this);
      this.updateTooltipBehavior = __bind(this.updateTooltipBehavior, this);
      this.initTooltipBehavior = __bind(this.initTooltipBehavior, this);
      this.updateProperties = __bind(this.updateProperties, this);
      this.updateQMInputs = __bind(this.updateQMInputs, this);
      this.updateQMInputsWithOptions = __bind(this.updateQMInputsWithOptions, this);
      this.updateFonts = __bind(this.updateFonts, this);
      this.updateFontFamilySelector = __bind(this.updateFontFamilySelector, this);
      this.changeFontFamily = __bind(this.changeFontFamily, this);
      this.changePreset = __bind(this.changePreset, this);
      this.changeQMInput = __bind(this.changeQMInput, this);
      this.updateBaseStyle = __bind(this.updateBaseStyle, this);
      this.changeBaseStyle = __bind(this.changeBaseStyle, this);
      this.collapseProperty = __bind(this.collapseProperty, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = TooltipSettings.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TooltipSettings.prototype.template = JST['app/scripts/templates/UI/dialogs/settingsTabs/tooltipSettings.hbs'];

    TooltipSettings.prototype.templateBody = JST['app/scripts/templates/visualizers/tooltipBody.hbs'];

    TooltipSettings.prototype.templateTitle = JST['app/scripts/templates/visualizers/tooltipTitle.hbs'];

    TooltipSettings.prototype.events = {
      "click .collapsable-toggle": "collapseProperty"
    };

    TooltipSettings.prototype.viewWillRender = function() {
      this.templateData.tooltipSettings = quadrigram.router.dataModels.currentProject.get("tooltip-settings");
      this.templateData.styles = quadrigram.Managers.ToolTipManager.listStyles();
      return this.templateData.fonts = quadrigram.router.managers.fontManager.fontsList();
    };

    TooltipSettings.prototype.viewDidRender = function() {
      if (!this.tooltipBehavior) {
        this.initTooltipBehavior();
      }
      this.$(".base-style-selector").on("change", this.changeBaseStyle);
      this.tempSettings = JSON.parse(JSON.stringify(quadrigram.router.dataModels.currentProject.get("tooltip-settings")));
      this.updateQMInputs();
      this.updateQMInputsWithOptions();
      this.updateProperties();
      this.updateTooltipBehavior();
      return this.updateBaseStyle();
    };

    TooltipSettings.prototype.collapseProperty = function(event) {
      $(event.currentTarget).parent().find('.propertyBody').slideToggle(300);
      $(event.currentTarget).toggleClass('selected');
      return $(event.currentTarget).parent().toggleClass('collapsed');
    };

    TooltipSettings.prototype.changeBaseStyle = function(e) {
      var newBaseStyle;
      newBaseStyle = $(e.currentTarget.selectedOptions[0]).attr("data-id");
      this.tempSettings = JSON.parse(JSON.stringify(quadrigram.router.appViews.projectView.toolTipManager.getStyle(newBaseStyle)));
      this.updateBaseStyle();
      this.updateProperties();
      this.updateTooltipBehavior();
      return this.tip.qtip('show');
    };

    TooltipSettings.prototype.updateBaseStyle = function(e) {
      var presetName;
      this.$el.find(".preset-selector option[data-id='custom']").remove();
      presetName = this.tempSettings.name;
      if (presetName.indexOf("Custom") >= 0) {
        this.$el.find(".preset-selector").prepend("<option data-id='custom'>" + presetName + "</option>");
        return this.$el.find(".preset-selector option[data-id='custom']").prop("selected", true);
      } else {
        return this.$el.find(".preset-selector option[data-id='" + presetName + "']").prop("selected", true);
      }
    };

    TooltipSettings.prototype.changeQMInput = function(e) {
      var $target, preset, value;
      $target = $(e.target);
      value = $target.val();
      preset = $(e.target).attr("data-id");
      this.changePreset(preset, value);
      return this.updateFonts();
    };

    TooltipSettings.prototype.changePreset = function(preset, value) {
      var customName, text,
        _this = this;
      text = this.tempSettings.name;
      if (text.indexOf("Custom") === -1) {
        customName = "Custom (" + text + ")";
        this.$el.find(".preset-selector option[data-id='custom']").remove();
        this.$el.find(".preset-selector").prepend("<option data-id='custom'>" + customName + "</option>");
        this.$el.find(".preset-selector option[data-id='custom']").prop("selected", true);
        this.tempSettings.name = customName;
      }
      if (!this.tempSettings.body.label) {
        this.tempSettings.body.label = {};
      }
      if (!this.tempSettings.border) {
        this.tempSettings.border = {};
      }
      switch (preset) {
        case "borderColor":
          this.tempSettings.border.color = value;
          break;
        case "borderWidth":
          this.tempSettings.border.width = value;
          break;
        case "separatorColor":
          this.tempSettings.separatorColor = value;
          break;
        case "backgroundColorTitle":
          this.tempSettings.title.backgroundColor = value;
          break;
        case "textColorTitle":
          this.tempSettings.title.textColor = value;
          break;
        case "fontSizeTitle":
          this.tempSettings.title.fontSize = value;
          break;
        case "fontStyleTitle":
          this.tempSettings.title.fontStyle = value;
          break;
        case "backgroundColorValue":
          this.tempSettings.body.value.backgroundColor = value;
          break;
        case "textColorValue":
          this.tempSettings.body.value.textColor = value;
          break;
        case "fontSizeValue":
          this.tempSettings.body.value.fontSize = value;
          break;
        case "fontStyleValue":
          this.tempSettings.body.value.fontStyle = value;
          break;
        case "textColorLabel":
          this.tempSettings.body.label.textColor = value;
          break;
        case "fontSizeLabel":
          this.tempSettings.body.label.fontSize = value;
          break;
        case "fontStyleLabel":
          this.tempSettings.body.label.fontStyle = value;
          break;
        case "textColorDescription":
          this.tempSettings.body.description.textColor = value;
          break;
        case "fontSizeDescription":
          this.tempSettings.body.description.fontSize = value;
          break;
        case "lineHeightDescription":
          this.tempSettings.body.description.lineHeight = value;
          break;
        case "backgroundColorDescription":
          this.tempSettings.body.description.backgroundColor = value;
          break;
        case "fontStyleDescription":
          this.tempSettings.body.description.fontStyle = value;
          break;
        default:
          this.tempSettings[preset] = value;
      }
      return _.defer(function() {
        _this.updateTooltipBehavior();
        _this.updateProperties();
        return _this.tip.qtip('show');
      });
    };

    TooltipSettings.prototype.changeFontFamily = function(e) {
      var selectedOption, tooltipSettings;
      selectedOption = this.$el.find(".ql-font").val();
      tooltipSettings = this.tempSettings;
      this.$el.find(".ql-font .qm-input-element").css("font-family", selectedOption);
      this.changePreset("fontFamily", selectedOption);
      this.updateFontFamilySelector(".font-style-title-selector", selectedOption, tooltipSettings.title);
      this.updateFontFamilySelector(".font-style-value-selector", selectedOption, tooltipSettings.body);
      this.updateFontFamilySelector(".font-style-label-selector", selectedOption, tooltipSettings.body.label);
      return this.updateFontFamilySelector(".font-style-description-selector", selectedOption, tooltipSettings.body.description);
    };

    TooltipSettings.prototype.updateFontFamilySelector = function(className, fontFamily, value) {
      var contextual, fontFamilyStyles,
        _this = this;
      fontFamilyStyles = quadrigram.router.managers.fontManager.getFontStyles(fontFamily);
      value.fontStyle = fontFamilyStyles[0].styleName;
      this.$(className).inputWithOptions("instance").updateOptions(fontFamilyStyles, fontFamilyStyles[0].styleName);
      this.$el.find(className).closest(".property-group").find(".qm-input-element").css("font-family", fontFamily);
      contextual = this.$el.find(className).inputWithOptions("instance").contextual;
      return contextual.find("li").each(function(i, el) {
        var fontFamilyStyle;
        fontFamilyStyle = _this.getFontFamily($(el).html());
        $(el).css("font-style", fontFamilyStyle.fontStyle);
        return $(el).css("font-weight", fontFamilyStyle.fontWeight);
      });
    };

    TooltipSettings.prototype.updateFonts = function() {};

    TooltipSettings.prototype.updateQMInputsWithOptions = function() {
      var contextual, fontFamilyStyles, selectedOption, tooltipSettings,
        _this = this;
      contextual = this.$el.find(".ql-font").inputWithOptions("instance").contextual;
      tooltipSettings = this.tempSettings;
      contextual.find("li").each(function(i, el) {
        return $(el).css("font-family", $(el).html());
      });
      this.$el.find(".ql-font").on("change", this.changeFontFamily);
      selectedOption = this.tempSettings.fontFamily;
      fontFamilyStyles = quadrigram.router.managers.fontManager.getFontStyles(selectedOption);
      this.$(".font-style-title-selector").inputWithOptions("instance").updateOptions(fontFamilyStyles, tooltipSettings.title.fontStyle);
      this.$(".font-style-value-selector").inputWithOptions("instance").updateOptions(fontFamilyStyles, tooltipSettings.body.value.fontStyle);
      this.$(".font-style-label-selector").inputWithOptions("instance").updateOptions(fontFamilyStyles, tooltipSettings.body.label.fontStyle);
      return this.$(".font-style-description-selector").inputWithOptions("instance").updateOptions(fontFamilyStyles, tooltipSettings.body.description.fontStyle);
    };

    TooltipSettings.prototype.updateQMInputs = function() {
      var self, targetFunction;
      self = this;
      targetFunction = this.changeQMInput;
      return this.$el.find("[qm-input-type]").each(function(i) {
        var camelCased;
        camelCased = $(this).attr("qm-input-type").replace(/-([a-z])/g, function(g) {
          return g[1].toUpperCase();
        });
        $(this)[camelCased]();
        return $(this).on("change", targetFunction);
      });
    };

    TooltipSettings.prototype._renderItem = function(ul, item) {
      var contentItem, domItem;
      domItem = $("<li>");
      contentItem = $("<div>").css("font-family", item.value).text(item.value);
      contentItem.appendTo(domItem);
      return domItem.appendTo(ul);
    };

    TooltipSettings.prototype.updateProperties = function() {
      this.$el.find(".ql-font").val(this.tempSettings.fontFamily);
      this.$el.find(".ql-font").css("font-family", this.tempSettings.fontFamily);
      this.$el.find("input[data-id='separatorColor']").val(this.tempSettings.separatorColor, {
        "trigger": false
      });
      if (this.tempSettings.border) {
        this.$el.find("input[data-id='borderColor']").val(this.tempSettings.border.color, {
          "trigger": false
        });
        this.$el.find("input[data-id='borderWidth']").val(this.tempSettings.border.width, {
          "trigger": false
        });
      } else {
        this.$el.find("input[data-id='borderColor']").val("none", {
          "trigger": false
        });
        this.$el.find("input[data-id='borderWidth']").val("0px", {
          "trigger": false
        });
      }
      this.$el.find("input[data-id='roundedCorner']").val(this.tempSettings.roundedCorner, {
        trigger: false
      });
      if (this.tempSettings.title) {
        this.$el.find("input[data-id='backgroundColorTitle']").val(this.tempSettings.title.backgroundColor, {
          trigger: false
        });
        this.$el.find("input[data-id='textColorTitle']").val(this.tempSettings.title.textColor, {
          trigger: false
        });
        this.$el.find("input[data-id='fontSizeTitle']").val(this.tempSettings.title.fontSize, {
          trigger: false
        });
        this.$el.find(".font-style-title-selector").val(this.tempSettings.title.fontStyle, {
          trigger: false
        });
      }
      if (this.tempSettings.body.value) {
        this.$el.find("input[data-id='backgroundColorValue']").val(this.tempSettings.body.value.backgroundColor, {
          trigger: false
        });
        this.$el.find("input[data-id='textColorValue']").val(this.tempSettings.body.value.textColor, {
          trigger: false
        });
        this.$el.find("input[data-id='fontSizeValue']").val(this.tempSettings.body.value.fontSize, {
          trigger: false
        });
        this.$el.find(".font-style-value-selector").val(this.tempSettings.body.value.fontStyle, {
          trigger: false
        });
      }
      if (this.tempSettings.body.label) {
        this.$el.find("input[data-id='textColorLabel']").val(this.tempSettings.body.label.textColor, {
          trigger: false
        });
        this.$el.find("input[data-id='fontSizeLabel']").val(this.tempSettings.body.label.fontSize, {
          trigger: false
        });
        this.$el.find(".font-style-label-selector").val(this.tempSettings.body.label.fontStyle, {
          trigger: false
        });
      }
      if (this.tempSettings.body.description) {
        this.$el.find("input[data-id='textColorDescription']").val(this.tempSettings.body.description.textColor, {
          trigger: false
        });
        this.$el.find("input[data-id='fontSizeDescription']").val(this.tempSettings.body.description.fontSize, {
          trigger: false
        });
        this.$el.find("input[data-id='backgroundColorDescription']").val(this.tempSettings.body.description.backgroundColor, {
          trigger: false
        });
        this.$el.find("input[data-id='lineHeightDescription']").val(this.tempSettings.body.description.lineHeight, {
          trigger: false
        });
        this.$(".font-weight-description-container").find(".ui-selectmenu-text").text(this.tempSettings.body.description.fontWeight);
        return this.$el.find(".font-style-description-selector").val(this.tempSettings.body.description.fontStyle, {
          trigger: false
        });
      }
    };

    TooltipSettings.prototype.initTooltipBehavior = function() {
      var target;
      target = d3.select(this.el).select(".tooltip-box");
      d3.select("body").on('mousemove', function() {
        var y;
        y = d3.mouse(this)[1];
        return target.style("top", (y - 75) + "px");
      });
      return this.tooltipBehavior = new quadrigram.Models.TooltipBehavior;
    };

    TooltipSettings.prototype.updateTooltipBehavior = function() {
      var tooltipOptions;
      tooltipOptions = this.tooltipBehavior.tooltipOptions(true, this.titleFunction, this.bodyFunction, this.tempSettings);
      tooltipOptions.position = {
        target: this.$el.find(".tooltip-box-target"),
        container: this.$el.find(".tooltip-box"),
        my: "bottom center",
        at: "top center"
      };
      /*tooltipOptions.position.target = "mouse"
      tooltipOptions.position.adjust = {mouse:true}
      */

      tooltipOptions.content.text = this.bodyFunction;
      tooltipOptions.content.title = this.titleFunction;
      tooltipOptions.hide = false;
      return this.tip = this.$el.find(".tooltip-box").qtip(tooltipOptions);
    };

    TooltipSettings.prototype.getFakeTooltipObject = function() {
      return {
        title: "A title",
        metadata: {
          value: {
            label: "Example data"
          },
          dataDimensions: ["value"]
        },
        dataDimensions: {
          value: 50
        },
        value: [
          {
            label: "Value: ",
            prefix: "$",
            "value": "50",
            sufix: "cost"
          }
        ],
        description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s"
      };
    };

    TooltipSettings.prototype.showAsTab = function() {
      return this.tip.qtip('show');
    };

    TooltipSettings.prototype.titleFunction = function(itemDOM, event, api) {
      var output, titleFontFamilyStyle, tooltipData, tooltipObject, tooltipSettings;
      tooltipSettings = JSON.parse(JSON.stringify(this.tempSettings));
      tooltipObject = this.getFakeTooltipObject();
      if (tooltipSettings.mainBackgroundColor) {
        tooltipSettings.title.backgroundColor = tooltipSettings.mainBackgroundColor;
        delete tooltipSettings.mainBackgroundColor;
      }
      if (tooltipSettings.mainTextColor) {
        tooltipSettings.title.textColor = tooltipSettings.textColor;
        delete tooltipSettings.mainBackgroundColor;
      }
      tooltipData = _.extend(tooltipObject, {
        fontSize: tooltipSettings.title.fontSize,
        titleStyle: {
          backgroundColor: tooltipSettings.title.backgroundColor,
          textColor: tooltipSettings.title.textColor
        },
        lineHeight: tooltipSettings.title.lineHeight,
        fontFamily: tooltipSettings.fontFamily,
        mainTextColor: tooltipSettings.mainTextColor
      });
      titleFontFamilyStyle = this.getFontFamily(tooltipSettings.title.fontStyle);
      tooltipData.fontStyle = titleFontFamilyStyle.fontStyle;
      tooltipData.fontWeight = titleFontFamilyStyle.fontWeight;
      output = this.templateTitle(tooltipData);
      return output;
    };

    TooltipSettings.prototype.bodyFunction = function(event, api) {
      var descriptionFontFamilyStyle, labelFontFamilyStyle, output, tooltipData, tooltipObject, tooltipSettings, valueFontFamilyStyle;
      tooltipSettings = JSON.parse(JSON.stringify(this.tempSettings));
      tooltipObject = this.getFakeTooltipObject();
      if (tooltipObject.description && tooltipObject.description.length > 250) {
        tooltipObject.description = tooltipObject.description.substr(0, 246) + "...";
      }
      tooltipData = _.extend(tooltipObject, {
        style: _.extend(tooltipSettings.body, {
          fontFamily: tooltipSettings.fontFamily,
          mainBackgroundColor: tooltipSettings.mainBackgroundColor,
          mainTextColor: tooltipSettings.mainTextColor
        })
      });
      descriptionFontFamilyStyle = this.getFontFamily(tooltipSettings.body.description.fontStyle);
      tooltipData.style.description.fontStyle = descriptionFontFamilyStyle.fontStyle;
      tooltipData.style.description.fontWeight = descriptionFontFamilyStyle.fontWeight;
      valueFontFamilyStyle = this.getFontFamily(tooltipSettings.body.value.fontStyle);
      tooltipData.style.value.fontStyle = valueFontFamilyStyle.fontStyle;
      tooltipData.style.value.fontWeight = valueFontFamilyStyle.fontWeight;
      labelFontFamilyStyle = this.getFontFamily(tooltipSettings.body.label.fontStyle);
      tooltipData.style.label.fontStyle = labelFontFamilyStyle.fontStyle;
      tooltipData.style.label.fontWeight = labelFontFamilyStyle.fontWeight;
      if (!tooltipSettings.separatorColor || tooltipSettings.separatorColor === "none") {
        tooltipData.style.separatorColor = "transparent";
      } else {
        tooltipData.style.separatorColor = tooltipSettings.separatorColor;
      }
      if (tooltipObject.description) {
        d3.select(api.tooltip[0]).style("background-color", tooltipSettings.body.description.backgroundColor);
        d3.select(api.tooltip[0]).classed("no-desc", false);
      } else {
        d3.select(api.tooltip[0]).style("background-color", tooltipSettings.body.value.backgroundColor);
        d3.select(api.tooltip[0]).classed("no-desc", true);
      }
      output = this.templateBody(tooltipData);
      return output;
    };

    TooltipSettings.prototype.getFontFamily = function(familyName) {
      var fontFamilyStyles, output;
      fontFamilyStyles = quadrigram.router.managers.fontManager.getFontStyles(this.tempSettings.fontFamily);
      output = _.findWhere(fontFamilyStyles, {
        styleName: familyName
      });
      if (!output) {
        output = fontFamilyStyles[0];
      }
      return output;
    };

    return TooltipSettings;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.TableEditorView = (function(_super) {
    __extends(TableEditorView, _super);

    function TableEditorView() {
      this.close = __bind(this.close, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.updateModel = __bind(this.updateModel, this);
      this.saveAndClose = __bind(this.saveAndClose, this);
      this.qvViewisFilled = __bind(this.qvViewisFilled, this);
      this.qvisFilled = __bind(this.qvisFilled, this);
      this.changedValueOrId_OLD = __bind(this.changedValueOrId_OLD, this);
      this.changedValueOrId = __bind(this.changedValueOrId, this);
      this.renderTable = __bind(this.renderTable, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = TableEditorView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TableEditorView.prototype.template = JST['app/scripts/templates/blocks/tableEditor.hbs'];

    TableEditorView.prototype.className = "table-editor";

    TableEditorView.prototype.viewDidRender = function() {
      var parent;
      if (this.model.get("internalOfSlot").get("ownerSlotGroup") && this.model.get("internalOfSlot").get("ownerSlotGroup").getSourceIds) {
        this.sourceIds = this.model.get("internalOfSlot").get("ownerSlotGroup").getSourceIds(this.model.get("internalOfSlot").get("slotId"));
      } else {
        this.sourceIds = [];
      }
      $(".front-container").append(this.$el);
      this.renderTable();
      this.$el.draggable({
        handle: this.$el.find(".header")
      });
      if (this.owner.$el.closest(".viz-inspector-container").length > 0) {
        parent = this.owner.$el.closest(".viz-inspector-container")[0];
        this.$el.position({
          my: "right top",
          at: "left-5 top+30",
          of: parent,
          collision: "fit fit"
        });
      } else if (this.owner.$el.closest(".expression-container")) {
        parent = this.owner.$el.closest(".expression-container")[0];
        this.$el.position({
          my: "left top",
          at: "left+5 top+36",
          of: this.owner.$el,
          collision: "fit fit"
        });
      } else {
        this.$el.position({
          my: "right top",
          at: "left-40 top",
          of: this.owner.$el,
          collision: "fit fit"
        });
      }
      this.$el.find(".ok-button").on("click", this.saveAndClose);
      return this.$el.find(".close").on("click", this.close);
    };

    TableEditorView.prototype.renderTable = function() {
      var candidate, id, idsToSource, qvalue, repetitions, _i, _len;
      repetitions = {};
      if (this.sourceIds.length === 0) {
        idsToSource = this.model.get("data").map(function(qv) {
          return qv.id;
        });
      } else {
        idsToSource = this.sourceIds;
      }
      this.qvalueModels = [];
      for (_i = 0, _len = idsToSource.length; _i < _len; _i++) {
        id = idsToSource[_i];
        if (repetitions[id] != null) {
          continue;
        } else {
          repetitions[id] = true;
        }
        candidate = _.findWhere(this.model.get("data"), {
          "id": String(id)
        });
        if (candidate) {
          qvalue = candidate.value;
        } else {
          qvalue = "";
        }
        if (id !== "") {
          this.qvalueModels.push(new Backbone.Model({
            "id": id,
            "value": qvalue,
            "type": this.model.get("internalOfSlot").get("dataType"),
            "internalOfSlot": this.model.get("internalOfSlot")
          }));
        }
      }
      this.qvalueModels.push(new Backbone.Model({
        "id": "",
        "": qvalue,
        "type": this.model.get("internalOfSlot").get("dataType"),
        "internalOfSlot": this.model.get("internalOfSlot")
      }));
      this.collectionView = new quadrigram.Views.EditableQValuesCollectionView({
        collection: this.qvalueModels,
        el: this.$el.find(".table-editor-body")
      });
      this.collectionView.changeFunction = this.changedValueOrId;
      return this.collectionView.render();
    };

    TableEditorView.prototype.changedValueOrId = function() {
      var allFilled, m, _i, _len, _ref1;
      allFilled = true;
      _ref1 = this.qvalueModels;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        m = _ref1[_i];
        if (!this.qvisFilled(m)) {
          allFilled = false;
        }
      }
      if (allFilled) {
        this.qvalueModels.push(new Backbone.Model({
          "id": "",
          "value": "",
          "type": this.model.get("internalOfSlot").get("dataType"),
          "internalOfSlot": this.model.get("internalOfSlot")
        }));
        this.collectionView.elementAdded();
        return this.$el.find(".table-editor-body").animate({
          "scrollTop": this.$el.find(".collection-element-container").height() + "px"
        });
      }
    };

    TableEditorView.prototype.changedValueOrId_OLD = function() {
      var _this = this;
      return;
      return _.delay(function() {
        var allFilled, child, editableInput, index, newId, _i, _len, _ref1;
        allFilled = true;
        _ref1 = _this.$el.find(".table-editor-body").children();
        for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
          child = _ref1[index];
          if (!_this.qvViewisFilled($(child))) {
            allFilled = false;
          }
        }
        if (allFilled) {
          if (_this.sourceIds[index] != null) {
            newId = _this.sourceIds[index];
          } else {
            newId = "";
          }
          editableInput = new quadrigram.Views.QValueEditableView({
            model: new Backbone.Model({
              "id": newId,
              "value": "",
              "type": _this.model.get("internalOfSlot").get("dataType")
            })
          });
          editableInput.render();
          editableInput.on("change", _this.changedValueOrId);
          _this.$el.find(".table-editor-body").append(editableInput.$el);
          return _this.$el.find(".table-container").animate({
            "scrollTop": _this.$el.find(".table-editor-body").height() + "px"
          });
        }
      }, 300);
    };

    TableEditorView.prototype.qvisFilled = function(qv) {
      var hasId, hasValue;
      hasId = qv.get("id") !== "" && qv.get("id") !== void 0;
      hasValue = qv.get("value") !== "" && qv.get("value") !== void 0;
      return hasId && hasValue;
    };

    TableEditorView.prototype.qvViewisFilled = function($qv) {
      var hasID, hasValue;
      hasID = $qv.find(".id-input").val() !== "" && $qv.find(".id-input").val() !== void 0;
      hasValue = $qv.find(".value-input").val() !== "" && $qv.find(".value-input").val() !== void 0;
      return hasID && hasValue;
    };

    TableEditorView.prototype.saveAndClose = function() {
      this.updateModel();
      return this.close();
    };

    TableEditorView.prototype.updateModel = function() {
      var m, qv, resultData, _i, _len, _ref1;
      resultData = [];
      _ref1 = this.qvalueModels;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        m = _ref1[_i];
        qv = {};
        qv.id = m.get("id");
        qv.value = m.get("value");
        if (qv.id !== "" && qv.value !== "") {
          resultData.push(qv);
        }
      }
      if (resultData.length > 1) {
        this.model.get("metaData").viewMode = "list";
      } else {
        this.model.get("metaData").viewMode = "cell";
      }
      return this.model.setDataManual(resultData);
    };

    TableEditorView.prototype.viewWillRemove = function() {
      this.$el.find(".ok-button").off("click", this.saveAndClose);
      return this.$el.find(".close").off("click", this.close);
    };

    TableEditorView.prototype.close = function() {
      return this.remove();
    };

    return TableEditorView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DataBlockEditableTable = (function(_super) {
    __extends(DataBlockEditableTable, _super);

    function DataBlockEditableTable() {
      this.startDrag = __bind(this.startDrag, this);
      this.stopDrag = __bind(this.stopDrag, this);
      this.viewWillRemove = __bind(this.viewWillRemove, this);
      this.previewBlock = __bind(this.previewBlock, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = DataBlockEditableTable.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DataBlockEditableTable.prototype.template = JST['app/scripts/templates/blocks/dataBlock.hbs'];

    DataBlockEditableTable.prototype.className = 'data-block data-block-editable-table';

    DataBlockEditableTable.prototype.viewDidRender = function() {
      DataBlockEditableTable.__super__.viewDidRender.call(this);
      return this.$el.draggable("option", "revert", false);
    };

    DataBlockEditableTable.prototype.previewBlock = function() {
      if (this.editor == null) {
        this.editor = new quadrigram.Views.TableEditorView({
          model: this.model
        });
        this.editor.owner = this;
      }
      return this.editor.render();
    };

    DataBlockEditableTable.prototype.viewWillRemove = function() {
      if (this.editor) {
        return this.editor.close();
      }
    };

    DataBlockEditableTable.prototype.stopDrag = function(e, ui) {
      return DataBlockEditableTable.__super__.stopDrag.call(this, e, ui);
    };

    DataBlockEditableTable.prototype.startDrag = function(e, ui) {
      DataBlockEditableTable.__super__.startDrag.call(this, e, ui);
      return this.trigger("popped");
    };

    return DataBlockEditableTable;

  })(quadrigram.Views.DataBlockSourceView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.QValueEditableView = (function(_super) {
    __extends(QValueEditableView, _super);

    function QValueEditableView() {
      this.changeFromEditor = __bind(this.changeFromEditor, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = QValueEditableView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    QValueEditableView.prototype.template = JST['app/scripts/templates/blocks/QValueEditable.hbs'];

    QValueEditableView.prototype.tagName = 'tr';

    QValueEditableView.prototype.viewDidRender = function() {
      this.$el.find(".id-input").val(this.model.get("id"));
      this.inputEl = $("<input class='value-input'></input>");
      $(this.el).find(".value-input-container").append(this.inputEl);
      if (_.isArray(this.model.get("value"))) {
        log("WARINGIN: should render as another TableEditroBlock!!!");
      } else {
        switch (this.model.get("type")) {
          case "text":
            this.inputEl.inputWithFormat({
              "forceValueToFormat": /(.+)/
            });
            break;
          case "number":
            this.inputEl.inputWithFormat({
              "forceValueToFormat": /(-)?\s?(\d*[\.,]?\d*)/,
              "formatDefaults": "|"
            });
            break;
          case "number_px":
            this.inputEl.inputWithFormat({
              "forceValueToFormat": /(-)?(\d+)\s?(px)?/,
              "formatDefaults": "||px"
            });
            break;
          case "color":
            this.inputEl.colorInput({
              "contextualContainer": $('.front-container')
            });
            break;
          case "options":
            this.inputEl.inputWithOptions({
              "options": this.model.get("internalOfSlot").options,
              "autoOpenContextual": true,
              "forceValueToOption": true
            });
            break;
          case "percentage":
            this.inputEl.percentageInput();
            break;
          case "date":
            elog("input date not available");
            break;
          case "boolean":
            this.inputEl.booleanInput();
            break;
          default:
            this.inputEl.inputWithFormat({
              "forceValueToFormat": /(.+)/
            });
        }
      }
      this.inputEl.val(this.model.get("value"));
      if (this.model.get("type") === "options") {
        if (this.model.get("value") === "") {
          if (this.model.get("internalOfSlot").get("operationId") === "Aggregate") {
            this.inputEl.val("ignore");
          } else {
            this.inputEl.val(this.model.get("internalOfSlot").options[0].value);
          }
        }
      }
      this.inputEl.on("change", this.changeFromEditor);
      return this.$el.find(".id-input").on("change", this.changeFromEditor);
    };

    QValueEditableView.prototype.changeFromEditor = function() {
      this.model.set("id", this.$el.find(".id-input").val());
      this.model.set("value", this.$el.find(".value-input").val());
      return this.trigger("change");
    };

    return QValueEditableView;

  })(Backbone.ElementView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.EditableQValuesCollectionView = (function(_super) {
    __extends(EditableQValuesCollectionView, _super);

    function EditableQValuesCollectionView() {
      this.elementViewDidRender = __bind(this.elementViewDidRender, this);
      _ref = EditableQValuesCollectionView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    EditableQValuesCollectionView.prototype.template = JST['app/scripts/templates/blocks/dataBlockCollection.hbs'];

    EditableQValuesCollectionView.prototype.modelView = quadrigram.Views.QValueEditableView;

    EditableQValuesCollectionView.prototype.bindModelViews = false;

    EditableQValuesCollectionView.prototype.elementViewDidRender = function(view) {
      EditableQValuesCollectionView.__super__.elementViewDidRender.call(this);
      return view.on("change", this.changeFunction);
    };

    return EditableQValuesCollectionView;

  })(Backbone.ArrayOfModelsView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.fileTypeOptions = (function(_super) {
    __extends(fileTypeOptions, _super);

    function fileTypeOptions() {
      this.handleTabSelected = __bind(this.handleTabSelected, this);
      this.changeIdKey = __bind(this.changeIdKey, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = fileTypeOptions.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    fileTypeOptions.prototype.template = JST['app/scripts/templates/UI/dialogs/BlockPreview/fileTypeOptions.hbs'];

    fileTypeOptions.prototype.className = "file-type-options";

    fileTypeOptions.prototype.viewDidRender = function() {
      var key, _i, _len, _ref1;
      _ref1 = this.parentGroup.sheetOptions;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        key = _ref1[_i];
        this.$el.find(".tabs-list").append($("<li class='sheet-tab' value='" + key + "'>" + key + "</li>"));
      }
      this.$el.find(".sheet-tab").on("click", this.handleTabSelected);
      return this.$el.find(".sheet-tab[value='" + this.parentGroup.get("currentSheet") + "']").addClass("selected");
      /*
      selectorEl.find("select").selectmenu({
          width:100
          change:@changeIdKey
        })
      */

    };

    fileTypeOptions.prototype.changeIdKey = function() {
      var selectorEl, sheetName;
      selectorEl = this.$el.find(".sheet-selector")[0];
      sheetName = selectorEl.options[selectorEl.selectedIndex].value;
      return this.trigger("change-sheet", sheetName);
    };

    fileTypeOptions.prototype.handleTabSelected = function(e) {
      var sheetName;
      this.$el.find(".sheet-tab").removeClass("selected");
      $(e.target).addClass("selected");
      sheetName = $(e.target).attr("value");
      return this.trigger("change-sheet", sheetName);
    };

    return fileTypeOptions;

  })(Backbone.ElementView);

}).call(this);

(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ListChartView = (function(_super) {
    __extends(ListChartView, _super);

    function ListChartView() {
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = ListChartView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ListChartView.prototype.followMouse = true;

    ListChartView.prototype.stylableTexts = [".title-text"];

    ListChartView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    ListChartView.prototype.viewDidRender = function() {
      return this.listContainer = this.behaviors.layout.root.append("div").attr("class", "list-visualizer-container");
    };

    ListChartView.prototype.updateItems = function() {
      var self;
      this.items = this.listContainer.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.itemsEnter = this.items.enter().append("div").attr("class", "item list-visualizer-item-container");
      this.itemsEnter.append("div").attr("class", "item-child list-visualizer-item").append("div").attr("class", "title-text weighted-text");
      self = this;
      this.items.each(function(d, i) {
        self.$(this).detach();
        self.$(".list-visualizer-container").append($(this));
        return d3.select(this).select(".title-text").style("padding-left", "5px").style("padding-right", "5px").text(d.value);
      });
      return this.items.exit().remove();
    };

    return ListChartView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ListChartModel = (function(_super) {
    __extends(ListChartModel, _super);

    function ListChartModel() {
      _ref = ListChartModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ListChartModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TextListDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TextStyleBehavior", "quadrigram.Models.SelectionDOMBehavior"];

    ListChartModel.meta = {
      "name": "List",
      "properties": {
        "data": {
          "label": "Items to be shown",
          "family": "data",
          "hidden": false,
          "formats": {
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    "id": 1,
                    "value": "Item 01"
                  }, {
                    "id": 2,
                    "value": "Item 02"
                  }, {
                    "id": 3,
                    "value": "Item 03"
                  }, {
                    "id": 4,
                    "value": "Item 04"
                  }, {
                    "id": 5,
                    "value": "Item 05"
                  }, {
                    "id": 6,
                    "value": "Item 06"
                  }, {
                    "id": 7,
                    "value": "Item 07"
                  }
                ]
              }
            }
          }
        },
        "fillColors": {
          "label": "Fill color of each item",
          "family": "style",
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        },
        "fillOpacities": {
          "label": "Fill opacity of each item",
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "100"
              }
            }
          }
        },
        "lineColors": {
          "label": "Outline color of each item",
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "#DDDDDD"
              }
            }
          }
        },
        "lineThickness": {
          "label": "Outline thickness of each item",
          "formats": {
            "Px": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "1px"
              }
            }
          }
        },
        "lineOpacities": {
          "label": "Outline opacity of each item",
          "formats": {
            "Percentage": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "100"
              }
            }
          }
        },
        "cellHeight": {
          "label": "Height of cells",
          "family": "style",
          "sortingWeight": "27",
          "formats": {
            "Px": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "30px"
              }
            }
          }
        },
        "cellTextAlign": {
          "label": "Text align",
          "family": "style",
          "sortingWeight": "28",
          "hidden": true,
          "deprecated": true,
          "formats": {
            "Options": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "left"
              },
              "options": {
                "value": ["left", "center", "right"]
              }
            }
          }
        },
        "cellFontSize": {
          "label": "Font size",
          "family": "style",
          "sortingWeight": "29",
          "deprecated": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "12px"
              }
            }
          }
        },
        "labelColors": {
          "label": "Text color",
          "family": "style",
          "sortingWeight": "30",
          "deprecated": true,
          "formats": {
            "Color": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "#FFFFFF"
              }
            }
          }
        },
        "size_x": {
          "formats": {
            "Number": {
              "defaults": {
                "value": "3"
              }
            }
          }
        },
        "size_y": {
          "formats": {
            "Number": {
              "defaults": {
                "value": "4"
              }
            }
          }
        },
        "selectionBold": {
          "internal": false
        }
      }
    };

    ListChartModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(ListChartModel.meta, ListChartModel.behaviors);
      return output;
    };

    return ListChartModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.LinkControlView = (function(_super) {
    __extends(LinkControlView, _super);

    function LinkControlView() {
      this.getValidUrl = __bind(this.getValidUrl, this);
      this.updateItems = __bind(this.updateItems, this);
      this.onOutLinkContainer = __bind(this.onOutLinkContainer, this);
      this.onOverLinkContainer = __bind(this.onOverLinkContainer, this);
      this.replaceStyleProperty = __bind(this.replaceStyleProperty, this);
      this.setVerticalAlignment = __bind(this.setVerticalAlignment, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = LinkControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LinkControlView.prototype.followMouse = false;

    LinkControlView.prototype.template = JST['app/scripts/templates/visualizers/linkControl.hbs'];

    LinkControlView.prototype.viewDidRender = function() {
      this.vizBackground = $(this.behaviors.layout.root).get(0);
      this.vizBackground = $(this.vizBackground).find(".viz-view-background");
      this.linkItem = this.behaviors.layout.root.append("div").attr("class", "link-control-container").append("a").attr("class", "link-control-item");
      this.linkItem = $(this.linkItem).get(0);
      this.linkContainer = $(this.behaviors.layout.root).get(0);
      this.linkContainer = $(this.linkContainer).find(".link-control-container");
      $(this.linkContainer).on("mouseover", this.onOverLinkContainer);
      $(this.linkContainer).on("mouseout", this.onOutLinkContainer);
      this.values = "fakeValues";
      return this.ids = "fakeIds";
    };

    LinkControlView.prototype.setVerticalAlignment = function(mouseState) {
      var modelProperty, vAlign;
      modelProperty = "";
      if (mouseState === "default") {
        modelProperty = this.model.get("verticalAlign");
      } else if (mouseState === "hover") {
        modelProperty = this.model.get("verticalAlignHover");
      }
      if (modelProperty === "top") {
        vAlign = "link-control-item-vaTop";
      }
      if (modelProperty === "middle") {
        vAlign = "link-control-item-vaMiddle";
      } else if (modelProperty === "bottom") {
        vAlign = "link-control-item-vaBottom";
      }
      return $(this.linkItem).removeClass("link-control-item-vaTop").removeClass("link-control-item-vaMiddle").removeClass("link-control-item-vaBottom").addClass(vAlign);
    };

    LinkControlView.prototype.replaceStyleProperty = function(styles, property, value) {
      var currentStyles, replacedProperty;
      currentStyles = styles.split(";");
      replacedProperty = null;
      currentStyles.forEach(function(styleItem, index) {
        if (styleItem.indexOf(property) !== -1) {
          replacedProperty = styleItem.split(":");
          if (replacedProperty[0] === "background-image") {
            replacedProperty = replacedProperty.slice(0, 2);
            replacedProperty[1] = "url(" + value + ")";
          } else {
            replacedProperty[1] = value;
          }
          replacedProperty = replacedProperty.join(":");
        }
      });
      currentStyles.forEach(function(val, index) {
        if (val.indexOf(property) !== -1 && replacedProperty !== null) {
          return currentStyles[index] = replacedProperty;
        }
      });
      currentStyles = currentStyles.join(";");
      return currentStyles;
    };

    LinkControlView.prototype.onOverLinkContainer = function(e) {
      var containerStyles, styles;
      containerStyles = $(this.vizBackground).attr("style");
      styles = $(this.linkItem).attr("style");
      if (this.model.get("fontFamilyHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        styles = this.replaceStyleProperty(styles, "font-family", this.model.get("fontFamilyHover"));
      }
      if (this.model.get("textSizeHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        styles = this.replaceStyleProperty(styles, "font-size", this.model.get("textSizeHover"));
      }
      if (this.model.get("textColorHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        styles = this.replaceStyleProperty(styles, "color", this.model.get("textColorHover"));
      }
      if (this.model.get("textWeightHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        styles = this.replaceStyleProperty(styles, "font-weight", this.model.get("textWeightHover"));
      }
      if (this.model.get("textStyleHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        styles = this.replaceStyleProperty(styles, "font-style", this.model.get("textStyleHover"));
      }
      if (this.model.get("textDecorationHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        styles = this.replaceStyleProperty(styles, "text-decoration", this.model.get("textDecorationHover") + " !important");
      }
      if (this.model.get("textAlignHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        styles = this.replaceStyleProperty(styles, "text-align", this.model.get("textAlignHover"));
      }
      if (this.model.get("verticalAlignHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        this.setVerticalAlignment("hover");
      }
      if (this.model.get("bgColorHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        containerStyles = this.replaceStyleProperty(containerStyles, "background-color", this.model.get("bgColorHover"));
      }
      if (this.model.get("bgImageHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        containerStyles = this.replaceStyleProperty(containerStyles, "background-image", this.model.get("bgImageHover"));
      }
      if (this.model.get("bgOpacityHover") !== quadrigram.Models.VisualizerModel.DEACTIVATED) {
        containerStyles = this.replaceStyleProperty(containerStyles, "opacity", this.model.get("bgOpacityHover") / 100);
      }
      $(this.vizBackground).attr("style", containerStyles);
      return $(this.linkItem).attr("style", styles);
    };

    LinkControlView.prototype.onOutLinkContainer = function(e) {
      return this.updateItems();
    };

    LinkControlView.prototype.updateItems = function() {
      var containerStyles, styles;
      containerStyles = "background-color: " + this.model.get("bkg_color") + ";";
      if (this.model.get("bkg_image").currentFormat === "ImageUrl") {
        containerStyles += "background-image: url(" + this.model.get("bkg_image")[0] + ");";
      } else {
        containerStyles += "background-image: url(" + this.model.get("bkg_image") + ");";
      }
      containerStyles += "opacity: " + this.model.get("bkg_opacity") / 100 + ";";
      styles = "font-family: " + this.model.get("fontFamily") + ";";
      styles += "color: " + this.model.get("textColor") + ";";
      styles += "font-size: " + this.model.get("textSize") + ";";
      styles += "text-align: " + this.model.get("textAlign") + ";";
      styles += "font-weight: " + this.model.get("textWeight") + ";";
      styles += "font-style: " + this.model.get("textStyle") + ";";
      styles += "text-decoration: " + this.model.get("textDecoration") + " !important";
      $(this.vizBackground).attr("style", containerStyles);
      $(this.linkItem).html(this.model.get("data_text")).attr("href", this.getValidUrl(this.model.get("data_url"))).attr("target", this.model.get("data_target")).attr("style", styles);
      return this.setVerticalAlignment("default");
    };

    LinkControlView.prototype.getValidUrl = function(url) {
      if (!_.isString(url)) {
        return;
      }
      if (url.indexOf("http://") === -1) {
        if (url.indexOf("https://") === -1) {
          url = "http://" + url;
        }
      }
      return url;
    };

    return LinkControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.LinkControlModel = (function(_super) {
    __extends(LinkControlModel, _super);

    function LinkControlModel() {
      _ref = LinkControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LinkControlModel.behaviors = ["quadrigram.Models.LayoutBehavior"];

    LinkControlModel.meta = {
      name: "Link",
      properties: {
        data_text: {
          label: "Link text",
          family: "data",
          hidden: false,
          formats: {
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Link text to display"
              }
            }
          }
        },
        data_url: {
          label: "Link source URL",
          family: "data",
          hidden: false,
          formats: {
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: ""
              }
            }
          }
        },
        data_target: {
          label: "Link target",
          family: "data",
          hidden: false,
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "_blank"
              },
              options: {
                value: ["_blank", "_self", "_parent", "_top"]
              }
            }
          }
        },
        fontFamily: {
          label: "Font family",
          family: "style",
          hidden: false,
          sortingWeight: "24",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Roboto"
              },
              options: {
                value: ["Oswald", "Kreon", "Sans Serif", "Roboto", "Droid Sans", "Lato", "Titillium Web", "Open Sans Condensed", "Open Sans", "Ubuntu", "Verdana", "serif", "SlabSerif", "Droid Serif", "Roboto Slab", "EB Garamond", "Libre Baskerville", "Merriweather", "Georgia", "Display", "Playfair Display", "Playfair Display SC", "Old Standard TT"]
              }
            }
          }
        },
        textSize: {
          label: "Font size",
          family: "style",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Px: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "12px"
              }
            }
          }
        },
        textColor: {
          label: "Text color",
          family: "style",
          hidden: false,
          sortingWeight: "26",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#3d5afe"
              }
            }
          }
        },
        textWeight: {
          label: "Text weight",
          family: "style",
          hidden: false,
          sortingWeight: "27",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "normal"
              },
              options: {
                value: ["normal", "bold", "lighter"]
              }
            }
          }
        },
        textStyle: {
          label: "Text style",
          family: "style",
          hidden: false,
          sortingWeight: "28",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "normal"
              },
              options: {
                value: ["normal", "italic"]
              }
            }
          }
        },
        textDecoration: {
          label: "Text decoration",
          family: "style",
          hidden: false,
          sortingWeight: "29",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "underline"
              },
              options: {
                value: ["none", "underline", "overline", "line-through"]
              }
            }
          }
        },
        textAlign: {
          label: "Text align",
          family: "style",
          hidden: false,
          sortingWeight: "30",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "left"
              },
              options: {
                value: ["left", "center", "right"]
              }
            }
          }
        },
        verticalAlign: {
          label: "Vertical align",
          family: "style",
          hidden: false,
          sortingWeight: "31",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "top"
              },
              options: {
                value: ["top", "middle", "bottom"]
              }
            }
          }
        },
        fontFamilyHover: {
          label: "Font family",
          family: "over",
          hidden: false,
          sortingWeight: "24",
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Roboto"
              },
              options: {
                value: ["Oswald", "Kreon", "Sans Serif", "Roboto", "Droid Sans", "Lato", "Titillium Web", "Open Sans Condensed", "Open Sans", "Ubuntu", "Verdana", "serif", "SlabSerif", "Droid Serif", "Roboto Slab", "EB Garamond", "Libre Baskerville", "Merriweather", "Georgia", "Display", "Playfair Display", "Playfair Display SC", "Old Standard TT"]
              }
            }
          }
        },
        textSizeHover: {
          label: "Font size",
          family: "over",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Px: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "12px"
              }
            }
          }
        },
        textColorHover: {
          label: "Text color",
          family: "over",
          hidden: false,
          sortingWeight: "26",
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "##3d5afe"
              }
            }
          }
        },
        textWeightHover: {
          label: "Text weight",
          family: "over",
          hidden: false,
          sortingWeight: "27",
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "normal"
              },
              options: {
                value: ["normal", "bold", "lighter"]
              }
            }
          }
        },
        textStyleHover: {
          label: "Text style",
          family: "over",
          hidden: false,
          sortingWeight: "28",
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "normal"
              },
              options: {
                value: ["normal", "italic"]
              }
            }
          }
        },
        textDecorationHover: {
          label: "Text decoration",
          family: "over",
          hidden: false,
          sortingWeight: "29",
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "underline"
              },
              options: {
                value: ["none", "underline", "overline", "line-through"]
              }
            }
          }
        },
        textAlignHover: {
          label: "Text align",
          family: "over",
          hidden: false,
          sortingWeight: "30",
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "left"
              },
              options: {
                value: ["left", "center", "right"]
              }
            }
          }
        },
        verticalAlignHover: {
          label: "Vertical align",
          family: "over",
          hidden: false,
          sortingWeight: "31",
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "top"
              },
              options: {
                value: ["top", "middle", "bottom"]
              }
            }
          }
        },
        bgColorHover: {
          label: "Background Color",
          family: "over",
          hidden: true,
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#ffffff"
              }
            }
          }
        },
        bgImageHover: {
          label: "Background Image URL",
          family: "over",
          hidden: true,
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: ""
              }
            }
          }
        },
        bgOpacityHover: {
          label: "Background Opacity",
          family: "over",
          hidden: true,
          formats: {
            Deactivated: {
              multiValues: {
                value: false
              }
            },
            Percentage: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "100"
              }
            }
          }
        },
        size_x: {
          formats: {
            Number: {
              defaults: {
                value: 6
              }
            }
          }
        },
        size_y: {
          formats: {
            Number: {
              defaults: {
                value: 1
              }
            }
          }
        }
      }
    };

    LinkControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(LinkControlModel.meta, LinkControlModel.behaviors);
      return output;
    };

    return LinkControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.SliderControlView = (function(_super) {
    __extends(SliderControlView, _super);

    function SliderControlView() {
      this.getLongestString = __bind(this.getLongestString, this);
      this.valFromSlider = __bind(this.valFromSlider, this);
      this.onValueChanged = __bind(this.onValueChanged, this);
      this.setValueToSlider = __bind(this.setValueToSlider, this);
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = SliderControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SliderControlView.prototype.followMouse = false;

    SliderControlView.prototype.firstExec = true;

    SliderControlView.prototype.stylableTexts = [".feedback-text"];

    SliderControlView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    SliderControlView.prototype.viewDidRender = function() {
      var delayedChange;
      this.behaviors.layout.root.append("div").attr("class", "slider-container");
      this.original = $("<input class='original'></input>");
      this.feedbackText = $("<input class='feedback-text'></input>");
      this.$el.find(".slider-container").append(this.original);
      this.original.sliderInput();
      this.$el.find(".qm-input-wrapper").prepend(this.feedbackText);
      this.$el.find(".normalized-input").addClass("hidden");
      delayedChange = _.throttle(this.onValueChanged, 100);
      this.original.on("change", delayedChange);
      this.values = "something";
      return this.ids = "somethingElse";
    };

    SliderControlView.prototype.updateItems = function() {
      var array, longestString, newValue, prevValue, range, rangeSize, step, width;
      prevValue = this.original.val();
      if (this.model.get("range").currentFormat === "Range") {
        this.currentFormat = "Range";
        range = [Number(this.model.get("range")[0]), Number(this.model.get("range")[1])];
        rangeSize = range[1] - range[0];
        step = Number(this.model.get("range")[2]);
      } else if (this.model.get("range").currentFormat === "JustDrop" && this.model.get("range").length > 1) {
        this.currentFormat = "JustDrop";
        array = this.model.get("range");
        range = [0, array.length - 1];
        step = 1;
      }
      if (!range) {
        this.currentFormat = "Range";
        range = [0, 100];
        step = 1;
      }
      this.$el.find(".slider").slider("option", {
        "min": range[0],
        "max": range[1]
      });
      this.$el.find(".slider").slider("option", {
        "step": step
      });
      if ($(this.behaviors.layout.root[0]).width() < $(this.behaviors.layout.root[0]).height()) {
        this.$el.find(".slider").slider("option", {
          orientation: "vertical"
        });
        this.$el.find(".slider-container").addClass("vertical");
        this.$el.find(".slider-container").removeClass("horizontal");
        this.feedbackText.css("width", "100%");
      } else {
        this.$el.find(".slider").slider("option", {
          orientation: "horizontal"
        });
        this.$el.find(".slider-container").removeClass("vertical");
        this.$el.find(".slider-container").addClass("horizontal");
        longestString = this.getLongestString(range, step);
        this.feedbackText.val(longestString + "-");
        width = $.fn.textWidth(this.feedbackText);
        this.feedbackText.css("width", width + "px");
      }
      this.$el.find(".slider").slider("value", this.$el.find(".slider").slider("value"));
      newValue = this.$el.find(".slider").slider("value");
      this.original.val(newValue);
      this.feedbackText.val(this.valFromSlider(newValue));
      if (this.model.get("showNumber") === "true") {
        this.feedbackText.removeClass("hidden");
      } else {
        this.feedbackText.addClass("hidden");
      }
      if (this.original.val() < range[0]) {
        this.original.val(range[0]);
      } else if (this.original.val() > range[1]) {
        this.original.val(range[1]);
      }
      this.$el.find(".slider-input").css("display", "none");
      this.$el.find(".slider-input").css("display", "table");
      this.$el.find(".slider").css("background", this.model.get("grooveColor"));
      this.$el.find(".ui-slider-handle").css("background", this.model.get("handleColor"));
      this.$el.find(".ui-slider-handle").removeClass("shape-Circle");
      this.$el.find(".ui-slider-handle").removeClass("shape-Bar");
      this.$el.find(".ui-slider-handle").addClass("shape-" + this.model.get("handleShape"));
      if (this.firstExec || this.model.changed["initValue"]) {
        this.firstExec = false;
        this.setValueToSlider(this.model.get("initValue"));
      }
      return this.onValueChanged();
    };

    SliderControlView.prototype.setValueToSlider = function(input) {
      var index, max, min, value, valueEntry, _i, _len, _ref1;
      if (this.currentFormat === "JustDrop" && this.model.get("range").length > 0) {
        _ref1 = this.model.get("range");
        for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
          valueEntry = _ref1[index];
          if (valueEntry.id === input) {
            value = index;
            break;
          }
        }
      } else {
        min = this.model.get("range")[0];
        max = this.model.get("range")[1];
        input = parseFloat(input);
        if (!isNaN(input)) {
          value = Math.max(Math.min(max, input), min);
        }
      }
      if (value) {
        return this.original.val(value);
      }
    };

    SliderControlView.prototype.onValueChanged = function() {
      var finalValue, tempValue;
      tempValue = this.original.val();
      if (this.model.get("invert") === "true") {
        finalValue = this.$el.find(".slider").slider("option", "max") - (this.original.val() - this.$el.find(".slider").slider("option", "min"));
      } else {
        finalValue = tempValue;
      }
      if (this.lastValue !== this.valFromSlider(finalValue)) {
        this.feedbackText.val(this.valFromSlider(finalValue));
        this.updateOutput("value", this.valFromSlider(finalValue));
      }
      return this.lastValue = finalValue;
    };

    SliderControlView.prototype.valFromSlider = function(value) {
      if (this.currentFormat === "JustDrop" && this.model.get("range").length > 0) {
        return this.model.get("range")[value].value;
      } else {
        return value;
      }
    };

    SliderControlView.prototype.getLongestString = function(range, step) {
      var result;
      result = this.valFromSlider(range[0]);
      if (String(result).length < String(this.valFromSlider(range[1])).length) {
        result = this.valFromSlider(range[1]);
      }
      if (String(result).length < String(this.valFromSlider(range[1] - step)).length) {
        result = this.valFromSlider(range[1] - step);
      }
      return result;
    };

    return SliderControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.SliderControlModel = (function(_super) {
    __extends(SliderControlModel, _super);

    function SliderControlModel() {
      _ref = SliderControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SliderControlModel.behaviors = ["quadrigram.Models.LayoutBehavior", "quadrigram.Models.TextStyleBehavior"];

    SliderControlModel.meta = {
      name: "Slider",
      outputs: {
        value: {
          outputType: "style",
          "default": 0,
          label: "Slider position"
        }
      },
      properties: {
        showNumber: {
          label: "Show selected value",
          family: "style",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        range: {
          label: "Range of the slider",
          family: "data",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Range: {
              multiValues: {
                start: false,
                end: false,
                step: false
              },
              defaults: {
                start: "0",
                end: "100",
                step: "1"
              }
            },
            JustDrop: {
              multiValues: {
                value: false
              },
              defaults: {
                value: ""
              }
            }
          }
        },
        initValue: {
          label: "Initial Value",
          family: "data",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: ""
              }
            }
          }
        },
        invert: {
          label: "Invert the direction of the range",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "false"
              }
            }
          }
        },
        handleShape: {
          label: "Handle shape",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Bar"
              },
              options: {
                value: ["Bar", "Circle"]
              }
            }
          }
        },
        handleColor: {
          label: "Handle color",
          family: "style",
          hidden: true,
          sortingWeight: "0",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#ddd"
              }
            }
          }
        },
        grooveColor: {
          label: "Track color",
          family: "style",
          hidden: true,
          sortingWeight: "0",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#616161"
              }
            }
          }
        },
        size_x: {
          formats: {
            Number: {
              defaults: {
                value: 6
              }
            }
          }
        },
        size_y: {
          formats: {
            Number: {
              defaults: {
                value: 1
              }
            }
          }
        }
      }
    };

    SliderControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(SliderControlModel.meta, SliderControlModel.behaviors);
      return output;
    };

    return SliderControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.RangeControlView = (function(_super) {
    __extends(RangeControlView, _super);

    function RangeControlView() {
      this.getLongestString = __bind(this.getLongestString, this);
      this.valFromSlider = __bind(this.valFromSlider, this);
      this.onValueChanged = __bind(this.onValueChanged, this);
      this.setValueToSlider = __bind(this.setValueToSlider, this);
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = RangeControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RangeControlView.prototype.followMouse = false;

    RangeControlView.prototype.firstExec = true;

    RangeControlView.prototype.stylableTexts = [".feedback-text"];

    RangeControlView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    RangeControlView.prototype.viewDidRender = function() {
      var delayedChange;
      this.behaviors.layout.root.append("div").attr("class", "slider-container");
      this.original = $("<input class='original'></input>");
      this.feedbackTextMin = $("<input class='feedback-text min'></input>");
      this.feedbackTextMax = $("<input class='feedback-text max'></input>");
      this.$el.find(".slider-container").append(this.original);
      this.original.rangeInput();
      this.$el.find(".qm-input-wrapper").prepend(this.feedbackTextMin);
      this.$el.find(".qm-input-wrapper").append(this.feedbackTextMax);
      this.$el.find(".normalized-input").addClass("hidden");
      delayedChange = _.throttle(this.onValueChanged, 100);
      this.original.on("change", delayedChange);
      this.values = "something";
      return this.ids = "somethingElse";
    };

    RangeControlView.prototype.updateItems = function() {
      var array, longestString, newValues, range, rangeSize, step, width,
        _this = this;
      if (this.model.get("range").currentFormat === "Range") {
        this.currentFormat = "Range";
        this.range = range = [Number(this.model.get("range")[0]), Number(this.model.get("range")[1])];
        rangeSize = range[1] - range[0];
        step = Number(this.model.get("range")[2]);
      } else if (this.model.get("range").currentFormat === "JustDrop" && this.model.get("range").length > 1) {
        this.currentFormat = "JustDrop";
        array = this.model.get("range");
        range = [0, array.length - 1];
        step = 1;
      }
      if (!range) {
        this.currentFormat = "Range";
        range = [0, 100];
        step = 1;
      }
      this.$el.find(".slider").dragslider("option", {
        "min": range[0],
        "max": range[1]
      });
      this.$el.find(".slider").dragslider("option", {
        "step": step
      });
      this.$el.find(".slider").dragslider("values", this.$el.find(".slider").dragslider("values"));
      newValues = this.$el.find(".slider").dragslider("values");
      if (newValues[0] === newValues[1]) {
        this.$el.find(".slider").dragslider("option", {
          "values": range
        });
      }
      this.feedbackTextMin.val(this.valFromSlider(newValues[0]));
      this.feedbackTextMax.val(this.valFromSlider(newValues[1]));
      /*
      if  @original.val()<range[0] 
        @original.val(range[0])
      else if @original.val()>range[1]
        @original.val(range[1])
      */

      if ($(this.behaviors.layout.root[0]).width() < $(this.behaviors.layout.root[0]).height()) {
        this.$el.find(".slider").dragslider("option", {
          orientation: "vertical"
        });
        this.$el.find(".slider-container").addClass("vertical");
        this.$el.find(".slider-container").removeClass("horizontal");
        this.feedbackTextMin.css("width", "100%");
        this.feedbackTextMax.css("width", "100%");
      } else {
        this.$el.find(".slider").dragslider("option", {
          orientation: "horizontal"
        });
        this.$el.find(".slider-container").removeClass("vertical");
        this.$el.find(".slider-container").addClass("horizontal");
        longestString = this.getLongestString(range, step);
        this.feedbackTextMin.val(longestString + "-");
        width = $.fn.textWidth(this.feedbackTextMin);
        this.feedbackTextMin.css("width", width + "px");
        this.feedbackTextMax.css("width", width + "px");
      }
      if ((this.model.get("invert") === "true" && $(this.behaviors.layout.root[0]).width() > $(this.behaviors.layout.root[0]).height()) || (this.model.get("invert") === "false" && $(this.behaviors.layout.root[0]).width() < $(this.behaviors.layout.root[0]).height())) {
        this.feedbackTextMin = this.$el.find('.feedback-text.max');
        this.feedbackTextMax = this.$el.find('.feedback-text.min');
      } else {
        this.feedbackTextMin = this.$el.find('.feedback-text.min');
        this.feedbackTextMax = this.$el.find('.feedback-text.max');
      }
      this.$el.find(".slider").css("background", this.model.get("grooveColor"));
      this.$el.find(".ui-slider-handle").css("background", this.model.get("handleColor"));
      this.$el.find(".ui-slider-range-graphic").css("background", this.model.get("rangeColor"));
      this.$el.find(".ui-slider-handle").removeClass("shape-Circle");
      this.$el.find(".ui-slider-handle").removeClass("shape-Bar");
      this.$el.find(".ui-slider-handle").addClass("shape-" + this.model.get("handleShape"));
      if (this.firstExec || this.model.changed["initValue"]) {
        this.firstExec = false;
        this.setValueToSlider(this.model.get("initValue")[0], this.model.get("initValue")[1]);
      }
      this.onValueChanged();
      if (this.model.get("showNumber") === "true") {
        this.feedbackTextMin.removeClass("hidden");
        this.feedbackTextMax.removeClass("hidden");
      } else {
        this.feedbackTextMax.addClass("hidden");
        this.feedbackTextMin.addClass("hidden");
      }
      this.$el.find(".slider-input").css("display", "none");
      return _.defer(function() {
        return _this.$el.find(".slider-input").css("display", "table");
      });
    };

    RangeControlView.prototype.setValueToSlider = function(inputMin, inputMax) {
      var actualMax, actualMin, changed, index, max, min, newValues, realMax, realMin, valueEntry, _i, _len, _ref1;
      changed = false;
      if (this.currentFormat === "JustDrop" && this.model.get("range").length > 0) {
        _ref1 = this.model.get("range");
        for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
          valueEntry = _ref1[index];
          if (valueEntry.id === inputMin) {
            realMin = index;
            changed = true;
          }
          if (valueEntry.id === inputMax) {
            realMax = index;
            changed = true;
          }
        }
      } else {
        min = this.model.get("range")[0];
        max = this.model.get("range")[1];
        inputMin = parseFloat(inputMin);
        if (!isNaN(inputMin)) {
          changed = true;
          realMin = Math.max(Math.min(max, inputMin), min);
        }
        inputMax = parseFloat(inputMax);
        if (!isNaN(inputMax)) {
          changed = true;
          realMax = Math.max(Math.min(max, inputMax), min);
        }
      }
      if (changed) {
        newValues = this.$el.find(".slider").dragslider("values");
        if (!realMin) {
          actualMin = this.valFromSlider(newValues[0]);
          realMin = actualMin;
        }
        if (!realMax) {
          actualMax = this.valFromSlider(newValues[1]);
          realMax = actualMax;
        }
        return this.$el.find(".slider").dragslider("values", [realMin, realMax]);
      }
    };

    RangeControlView.prototype.onValueChanged = function() {
      var finalValues, tempValues;
      tempValues = this.$el.find(".slider").dragslider("option", "values");
      finalValues = [];
      if (this.model.get("invert") === "true") {
        finalValues[1] = this.$el.find(".slider").dragslider("option", "max") - (tempValues[0] - this.$el.find(".slider").dragslider("option", "min"));
        finalValues[0] = this.$el.find(".slider").dragslider("option", "max") - (tempValues[1] - this.$el.find(".slider").dragslider("option", "min"));
      } else {
        finalValues = tempValues;
      }
      this.feedbackTextMin.val(this.valFromSlider(finalValues[0]));
      this.feedbackTextMax.val(this.valFromSlider(finalValues[1]));
      this.updateOutput("min", this.valFromSlider(finalValues[0]));
      return this.updateOutput("max", this.valFromSlider(finalValues[1]));
    };

    RangeControlView.prototype.valFromSlider = function(value) {
      if (this.currentFormat === "JustDrop" && this.model.get("range").length > 0) {
        return this.model.get("range")[value].value;
      } else {
        return value;
      }
    };

    RangeControlView.prototype.getLongestString = function(range, step) {
      var result;
      result = this.valFromSlider(range[0]);
      if (String(result).length < String(this.valFromSlider(range[1])).length) {
        result = this.valFromSlider(range[1]);
      }
      if (String(result).length < String(this.valFromSlider(range[1] - step)).length) {
        result = this.valFromSlider(range[1] - step);
      }
      return result;
    };

    return RangeControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.RangeControlModel = (function(_super) {
    __extends(RangeControlModel, _super);

    function RangeControlModel() {
      _ref = RangeControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RangeControlModel.behaviors = ["quadrigram.Models.LayoutBehavior", "quadrigram.Models.TextStyleBehavior"];

    RangeControlModel.meta = {
      name: "Slider",
      outputs: {
        min: {
          outputType: "style",
          "default": 0,
          label: "Start value"
        },
        max: {
          outputType: "style",
          "default": 0,
          label: "End value"
        }
      },
      properties: {
        showNumber: {
          label: "Show selected value",
          family: "style",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        range: {
          label: "Range of the slider",
          family: "data",
          hidden: false,
          sortingWeight: "1",
          formats: {
            Range: {
              multiValues: {
                start: false,
                end: false,
                step: false
              },
              defaults: {
                start: "0",
                end: "100",
                step: "1"
              }
            },
            JustDrop: {
              multiValues: {
                value: false
              }
            }
          }
        },
        initValue: {
          label: "Init values",
          family: "data",
          hidden: false,
          sortingWeight: "2",
          formats: {
            SimpleRange: {
              multiValues: {
                min: false,
                max: false
              },
              defaults: {
                min: "",
                max: ""
              }
            },
            JustDrop: {
              multiValues: {
                value: false
              }
            }
          }
        },
        invert: {
          label: "Invert the direction of the range",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "false"
              }
            }
          }
        },
        handleColor: {
          label: "Handle color",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#ddd"
              }
            }
          }
        },
        handleShape: {
          label: "Handle shape",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Bar"
              },
              options: {
                value: ["Bar", "Circle"]
              }
            }
          }
        },
        grooveColor: {
          label: "Track color",
          family: "style",
          hidden: true,
          sortingWeight: "0",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#616161"
              }
            }
          }
        },
        rangeColor: {
          label: "Groove color",
          family: "style",
          hidden: true,
          sortingWeight: "0",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#aaa"
              }
            }
          }
        },
        size_x: {
          formats: {
            Number: {
              defaults: {
                value: 6
              }
            }
          }
        },
        size_y: {
          formats: {
            Number: {
              defaults: {
                value: 1
              }
            }
          }
        }
      }
    };

    RangeControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(RangeControlModel.meta, RangeControlModel.behaviors);
      return output;
    };

    return RangeControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.TableControlView = (function(_super) {
    __extends(TableControlView, _super);

    function TableControlView() {
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = TableControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TableControlView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    TableControlView.prototype.viewDidRender = function() {
      this.behaviors.layout.root.append("div").attr("class", "table-control");
      /*
      @hot = new Handsontable(@$el.find(".hot-container")[0],
          #data: fullData.contentData,
          #colHeaders:  fullData.headerData,
          #TAMAÑO CELDAS
          #colWidths: 150,
          #rowHeights: 40,
          
          fixedColumnsLeft: 1
          #afterGetColHeader: @headerPostRenderer,
          #afterRenderer: @addBlockIfNeeded,
          wordWrap: false,
          #multiSelect: false,
          fragmentSelection: true,
          #columns: columnsArray,
          manualColumnResize: true,
      
      
          cells: (row, col, prop) ->
            {readOnly: true}
        )
      */

      this.tableView = new quadrigram.Views.TableView;
      return this.$el.find(".table-control").append(this.tableView.$el);
    };

    TableControlView.prototype.updateItems = function() {
      var dataProp;
      dataProp = this.model.original.get("propertiesCollection").findWhere({
        "propId": "data"
      });
      if (dataProp != null) {
        this.tableView.model = dataProp.getBlocks()[0];
        return this.tableView.render();
      }
    };

    return TableControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.TableControlModel = (function(_super) {
    __extends(TableControlModel, _super);

    function TableControlModel() {
      _ref = TableControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TableControlModel.behaviors = ["quadrigram.Models.LayoutBehavior", "quadrigram.Models.MessagesBehavior", "quadrigram.Models.TwoDimDataControllerBehavior"];

    TableControlModel.meta = {
      name: "Table",
      outputs: {
        value: {
          outputType: "style",
          "default": 0,
          label: "Slider position"
        }
      },
      properties: {
        "data": {
          "uiTipContent": "Insert a block with columns of numbers. Each column will be represented as a line",
          "label": "Data to plot in line",
          "family": "data",
          "sortingWeight": 1,
          "hidden": false,
          "formats": {
            "Number": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example Data"
              },
              "defaults": {
                "value": [
                  {
                    "id": 1,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 20
                      }, {
                        "id": 2,
                        "value": 10
                      }, {
                        "id": 3,
                        "value": 15
                      }, {
                        "id": 4,
                        "value": 30
                      }, {
                        "id": 5,
                        "value": 20
                      }, {
                        "id": 6,
                        "value": 50
                      }, {
                        "id": 7,
                        "value": 50
                      }, {
                        "id": 8,
                        "value": 60
                      }
                    ]
                  }, {
                    "id": 2,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 10
                      }, {
                        "id": 2,
                        "value": 20
                      }, {
                        "id": 3,
                        "value": 25
                      }, {
                        "id": 4,
                        "value": 30
                      }, {
                        "id": 5,
                        "value": 30
                      }, {
                        "id": 6,
                        "value": 45
                      }, {
                        "id": 7,
                        "value": 51
                      }, {
                        "id": 8,
                        "value": 32
                      }
                    ]
                  }, {
                    "id": 3,
                    "name": "dummy data",
                    "value": [
                      {
                        "id": 1,
                        "value": 20
                      }, {
                        "id": 2,
                        "value": 12
                      }, {
                        "id": 3,
                        "value": 20
                      }, {
                        "id": 4,
                        "value": 40
                      }, {
                        "id": 5,
                        "value": 30
                      }, {
                        "id": 6,
                        "value": 25
                      }, {
                        "id": 7,
                        "value": 11
                      }, {
                        "id": 8,
                        "value": 22
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        size_x: {
          formats: {
            Number: {
              defaults: {
                value: 4
              }
            }
          }
        },
        size_y: {
          formats: {
            Number: {
              defaults: {
                value: 4
              }
            }
          }
        }
      }
    };

    TableControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(TableControlModel.meta, TableControlModel.behaviors);
      return output;
    };

    return TableControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DropDownView = (function(_super) {
    __extends(DropDownView, _super);

    function DropDownView() {
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.visualizerDidResize = __bind(this.visualizerDidResize, this);
      this.updateItems = __bind(this.updateItems, this);
      this.handleChange = __bind(this.handleChange, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = DropDownView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DropDownView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    DropDownView.prototype.stylableTexts = [];

    DropDownView.prototype.viewDidRender = function() {
      var dropDownGroup, dropdDownContainer;
      dropdDownContainer = this.behaviors.layout.root.append("div").attr("class", "drop-down-container");
      dropDownGroup = dropdDownContainer.append("did").attr("class", "drop-down-group");
      dropDownGroup.append("div").attr("class", "dropdown-label");
      this.label = this.$el.find(".dropdown-label");
      this.label.html("Dropdown: ");
      dropDownGroup.append("select").attr("class", "original-dropdown");
      this.selector = this.$el.find(".original-dropdown");
      this.selector.selectmenu({
        change: this.handleChange,
        appendTo: this.$el.closest(".gridster")
      });
      return this.$el.find(".ui-selectmenu-button").css("width", this.$el.find(".ui-selectmenu-text").width());
    };

    DropDownView.prototype.handleChange = function() {
      var id, value;
      id = decodeURI(this.selector.val());
      value = _.findWhere(this.values, {
        id: id
      }).value;
      this.updateOutput("value", [
        {
          id: id,
          value: value
        }
      ]);
      return this.updateOutput("id", [
        {
          id: id,
          value: id
        }
      ]);
    };

    DropDownView.prototype.updateItems = function() {
      var defaultId1, defaultId2, defaultOption, key, _i, _j, _len, _len1, _ref1, _ref2;
      if (this.model.get("LabelText") === "") {
        this.$el.find(".dropdown-label").addClass("hidden");
      } else {
        this.$el.find(".dropdown-label").removeClass("hidden");
        this.$el.find(".dropdown-label").html(this.model.get("LabelText"));
      }
      this.selector.empty();
      _ref1 = this.values;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        key = _ref1[_i];
        if (key.value != null) {
          this.selector.append($('<option value="' + encodeURI(key.id) + '">' + key.value + "</option>"));
        }
      }
      if (this.model.get("defaultSelection") !== "") {
        defaultOption = this.model.get("defaultSelection");
        _ref2 = this.values;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          key = _ref2[_j];
          if (key.value === defaultOption) {
            defaultId1 = key.id;
          }
          if (key.id === encodeURI(defaultOption)) {
            defaultId2 = key.id;
          }
        }
        if (defaultId1 != null) {
          this.selector.val(defaultId1);
        } else if (defaultId2 != null) {
          this.selector.val(defaultId2);
        }
      }
      this.selector.selectmenu("refresh");
      this.stylableTexts = [];
      this.stylableTexts.push(".dropdown-label");
      this.stylableTexts.push(".ui-widget");
      this.stylableTexts.push(this.selector.selectmenu("menuWidget").find(".ui-menu-item"));
      this.$el.find(".ui-icon-triangle-1-s").css("background-color", this.model.get("bkg_color"));
      if (this.model.get("dropDownColor") != null) {
        this.$el.find(".ui-menu-item").css("background-color", this.model.get("dropDownColor"));
      }
      if (this.model.get("borderColor") != null) {
        this.$el.find(".ui-menu-item").css("outline", "solid 1px " + this.model.get("borderColor"));
        this.$el.find(".ui-selectmenu-button").css("background-color", this.model.get("borderColor"));
        return this.$el.find(".ui-selectmenu-button").css("border-color", this.model.get("borderColor"));
      }
    };

    DropDownView.prototype.visualizerDidResize = function() {
      return this.visualizerDidUpdateItems();
    };

    DropDownView.prototype.visualizerDidUpdateItems = function() {
      var maxHeight, maxWidth, totalWidth;
      maxWidth = 0;
      maxHeight = 0;
      this.selector.selectmenu("menuWidget").find(".ui-menu-item").each(function() {
        var height, width;
        width = $.fn.textWidth(this);
        if (maxWidth < width) {
          maxWidth = width;
        }
        height = $.fn.textHeight(this);
        if (maxHeight < height) {
          return maxHeight = height;
        }
      });
      totalWidth = maxWidth + 1.7 * maxHeight;
      this.$el.find('.ui-selectmenu-button').css("width", Math.round(totalWidth) + "px");
      this.selector.selectmenu("menuWidget").parent().css("width", this.$el.find('.ui-selectmenu-button').css("width"));
      this.$el.find('.ui-icon').css("width", Math.round(maxHeight / 2) + "px");
      this.$el.find('.ui-icon').css("height", Math.round(maxHeight / 2) + "px");
      this.$el.find('.ui-icon').css("margin-right", Math.round(maxHeight / 5) + "px");
      this.$el.find('.ui-selectmenu-text').css("padding-left", Math.round(maxHeight / 2) + "px");
      this.$el.find('.ui-selectmenu-text').css("padding-right", Math.round(maxHeight) + "px");
      return this.handleChange();
    };

    return DropDownView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.DropDownModel = (function(_super) {
    __extends(DropDownModel, _super);

    function DropDownModel() {
      _ref = DropDownModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DropDownModel.behaviors = ["quadrigram.Models.TextListDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TextStyleBehavior"];

    DropDownModel.meta = {
      "name": "DropDown",
      outputs: {
        value: {
          outputType: "selection",
          "default": 0,
          label: "Selected option"
        },
        id: {
          outputType: "selection",
          "default": 0,
          label: "Selected option id"
        }
      },
      properties: {
        "data": {
          "label": "Items to be shown",
          "family": "data",
          "hidden": false,
          sortingWeight: "0",
          "formats": {
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": "Option 01"
                  }, {
                    "id": "2",
                    "value": "Option 02"
                  }, {
                    "id": "3",
                    "value": "Option 03"
                  }, {
                    "id": "4",
                    "value": "Option 04"
                  }, {
                    "id": "5",
                    "value": "Option 05"
                  }, {
                    "id": "6",
                    "value": "Option 06"
                  }, {
                    "id": "7",
                    "value": "Option 07"
                  }
                ]
              }
            }
          }
        },
        defaultSelection: {
          label: "Default selection",
          family: "selection",
          hidden: false,
          sortingWeight: "11",
          formats: {
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: ""
              }
            }
          }
        },
        LabelText: {
          label: "Title for the dropdown",
          family: "data",
          hidden: false,
          sortingWeight: "1",
          formats: {
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Select one: "
              }
            }
          }
        },
        borderColor: {
          label: "Outline color",
          family: "style",
          hidden: true,
          sortingWeight: "32",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#9e9e9e"
              }
            }
          }
        },
        dropDownColor: {
          label: "Dropdown background color",
          family: "style",
          hidden: true,
          sortingWeight: "31",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#fff"
              }
            }
          }
        },
        "size_y": {
          "formats": {
            "Number": {
              "defaults": {
                "value": "1"
              }
            }
          }
        },
        "size_x": {
          "formats": {
            "Number": {
              "defaults": {
                "value": "3"
              }
            }
          }
        }
      }
    };

    DropDownModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(DropDownModel.meta, DropDownModel.behaviors);
      return output;
    };

    return DropDownModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DynamicTextControlView = (function(_super) {
    __extends(DynamicTextControlView, _super);

    function DynamicTextControlView() {
      this.getScrollDomElement = __bind(this.getScrollDomElement, this);
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = DynamicTextControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DynamicTextControlView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    DynamicTextControlView.prototype.stylableTexts = [".dynamic-text"];

    DynamicTextControlView.prototype.dontUseGif = true;

    DynamicTextControlView.prototype.viewDidRender = function() {
      return this.behaviors.layout.root.append("div").attr("class", "dynamic-text-container").append("div").attr("class", "dynamic-text");
    };

    DynamicTextControlView.prototype.updateItems = function() {
      var str, v, _i, _len, _ref1;
      str = "";
      _ref1 = this.values;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        str += v.value;
      }
      return this.$el.find(".dynamic-text").html(str);
    };

    DynamicTextControlView.prototype.getScrollDomElement = function() {
      return $(this.behaviors.layout.root[0]).find(".dynamic-text-container");
    };

    return DynamicTextControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.DynamicTextControlModel = (function(_super) {
    __extends(DynamicTextControlModel, _super);

    function DynamicTextControlModel() {
      _ref = DynamicTextControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DynamicTextControlModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TextListDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TextStyleBehavior"];

    DynamicTextControlModel.dontUseGif = true;

    DynamicTextControlModel.meta = {
      "name": "DynamicTextControl",
      properties: {
        "data": {
          "label": "Text",
          "family": "data",
          "hidden": false,
          "formats": {
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "Dynamic text"
              }
            }
          }
        },
        "scroll_enabled": {
          "internal": false
        },
        "size_y": {
          "formats": {
            "Number": {
              "defaults": {
                "value": "1"
              }
            }
          }
        },
        "size_x": {
          "formats": {
            "Number": {
              "defaults": {
                "value": "3"
              }
            }
          }
        }
      }
    };

    DynamicTextControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(DynamicTextControlModel.meta, DynamicTextControlModel.behaviors);
      return output;
    };

    return DynamicTextControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.PlayPauseControlView = (function(_super) {
    __extends(PlayPauseControlView, _super);

    function PlayPauseControlView() {
      this.valueChanged = __bind(this.valueChanged, this);
      this.handleButtonClicked = __bind(this.handleButtonClicked, this);
      this.checkAndUpdate = __bind(this.checkAndUpdate, this);
      this.prevStep = __bind(this.prevStep, this);
      this.nextStep = __bind(this.nextStep, this);
      this.stopInterval = __bind(this.stopInterval, this);
      this.pauseInterval = __bind(this.pauseInterval, this);
      this.resumeInterval = __bind(this.resumeInterval, this);
      this.setActiveColor = __bind(this.setActiveColor, this);
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = PlayPauseControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PlayPauseControlView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    PlayPauseControlView.prototype.buttonTemplate = JST['app/scripts/templates/visualizers/playPauseButton.hbs'];

    PlayPauseControlView.prototype.viewDidRender = function() {
      var container, group,
        _this = this;
      container = this.behaviors.layout.root.append("div").attr("class", "play-pause-control");
      group = container.append("div").attr("class", "control-btn-group");
      this.group = this.$el.find(".control-btn-group");
      this.group.append(this.buttonTemplate("play"));
      this.group.append(this.buttonTemplate("pause"));
      this.group.append(this.buttonTemplate("stop"));
      this.group.append(this.buttonTemplate("prev"));
      this.group.append(this.buttonTemplate("next"));
      this.$el.find(".play-pause-control").append("<div class='progress-container'><div class='control-progress-bar progress-bar'></div></div>");
      this.group.find(".control-btn").on("click", this.handleButtonClicked);
      return this.$el.find("img").each(function(i, el) {
        return $.fn.convertToDynamicSvg($(el), _this.updateItems);
      });
    };

    PlayPauseControlView.prototype.updateItems = function() {
      this.step = 0;
      this.totalSteps = this.model.get("data").length - 1;
      this.timeStep = Number(this.model.get("timeStep")) * 1000;
      if (this.model.get("showProgress") === "true") {
        this.$el.find(".control-progress-bar").removeClass("hidden");
      } else {
        this.$el.find(".control-progress-bar").addClass("hidden");
      }
      if (this.model.get("showStepButtons") === "true") {
        this.$el.find(".prev-btn").removeClass("hidden");
        this.$el.find(".next-btn").removeClass("hidden");
      } else {
        this.$el.find(".prev-btn").addClass("hidden");
        this.$el.find(".next-btn").addClass("hidden");
      }
      if (this.model.get("iconSize") != null) {
        this.$el.find(".control-btn svg").attr("width", this.model.get("iconSize"));
        this.$el.find(".control-btn svg").attr("height", this.model.get("iconSize"));
        this.$el.find(".control-progress-bar").css("height", (this.model.get("iconSize").replace("px", "") / 20) + "px");
      }
      if (this.model.get("iconColor") != null) {
        this.$el.find(".svg-control-icon").find("path, rect, polygon").css("fill", this.model.get("iconColor"));
      }
      if (this.model.get("activeColor") != null) {
        this.$el.find(".control-progress-bar").css("background-color", this.model.get("activeColor"));
      }
      return this.valueChanged();
    };

    PlayPauseControlView.prototype.setActiveColor = function(className) {
      var activeColor, originalColor;
      activeColor = this.model.get("activeColor") || "#3D5AFE";
      originalColor = this.model.get("iconColor") || "#000";
      this.$el.find(".svg-control-icon").find("path, rect, polygon").css("fill", originalColor);
      if (className !== "") {
        return this.$el.find(className).find("path, rect, polygon").css("fill", activeColor);
      }
    };

    PlayPauseControlView.prototype.resumeInterval = function() {
      var _this = this;
      this.setActiveColor(".play-btn");
      this.paused = false;
      this.step++;
      this.checkAndUpdate();
      clearTimeout(this.timeout);
      return this.timeout = setTimeout(function() {
        if (!_this.paused) {
          if (_this.step === _this.totalSteps) {
            return _this.pauseInterval();
          } else {
            return _this.resumeInterval();
          }
        }
      }, this.timeStep);
    };

    PlayPauseControlView.prototype.pauseInterval = function() {
      this.paused = true;
      clearTimeout(this.timeout);
      if (this.step !== this.totalSteps && this.step !== 0) {
        this.setActiveColor(".pause-btn");
      } else {
        this.setActiveColor("");
      }
      return this.checkAndUpdate();
    };

    PlayPauseControlView.prototype.stopInterval = function() {
      this.setActiveColor("");
      this.step = 0;
      return this.pauseInterval();
    };

    PlayPauseControlView.prototype.nextStep = function() {
      this.setActiveColor("");
      this.step++;
      this.pauseInterval();
      return this.checkAndUpdate();
    };

    PlayPauseControlView.prototype.prevStep = function() {
      this.setActiveColor("");
      this.step--;
      this.pauseInterval();
      return this.checkAndUpdate();
    };

    PlayPauseControlView.prototype.checkAndUpdate = function() {
      if (this.step < 0) {
        this.step = 0;
      }
      if (this.step > this.totalSteps) {
        this.step = this.totalSteps;
      }
      if (this.step === this.totalSteps) {
        this.setActiveColor(".pause-btn");
      }
      if (this.step === 0) {
        this.setActiveColor("");
      }
      this.$el.find(".control-progress-bar").css("width", (100 * this.step / this.totalSteps) + "%");
      return this.valueChanged();
    };

    PlayPauseControlView.prototype.handleButtonClicked = function(e) {
      var tragetId;
      tragetId = $(e.currentTarget).attr("data-id");
      switch (tragetId) {
        case "play":
          return this.resumeInterval();
        case "pause":
          return this.pauseInterval();
        case "stop":
          return this.stopInterval();
        case "next":
          return this.nextStep();
        case "prev":
          return this.prevStep();
      }
    };

    PlayPauseControlView.prototype.valueChanged = function() {
      log("updateing: ", this.model.get("data")[this.step]);
      if (this.model.get("data")[this.step]) {
        this.updateOutput("id", this.model.get("data")[this.step].id);
        if (_.isArray(this.model.get("data")[this.step].value)) {
          return this.updateOutput("value", this.model.get("data")[this.step].value, {
            valueLabel: this.model.get("data")[this.step].id,
            idLabel: "id"
          });
        } else {
          return this.updateOutput("value", this.model.get("data")[this.step].value);
        }
      } else {
        return this.updateOutput("value", "");
      }
    };

    return PlayPauseControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.PlayPauseControlModel = (function(_super) {
    __extends(PlayPauseControlModel, _super);

    function PlayPauseControlModel() {
      _ref = PlayPauseControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PlayPauseControlModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TextListDataControllerBehavior", "quadrigram.Models.LayoutBehavior"];

    PlayPauseControlModel.meta = {
      name: "Slider",
      outputs: {
        value: {
          outputType: "data",
          "default": 0,
          label: "Current value"
        },
        id: {
          outputType: "data",
          "default": 0,
          label: "Current id"
        }
      },
      properties: {
        "data": {
          "uiTipContent": "List to iterate through",
          "label": "List of values",
          "family": "data",
          "sortingWeight": "1",
          "hidden": false,
          "formats": {
            "Text": {
              "multiValues": {
                "value": true
              },
              "defaultsNames": {
                "value": "Example data"
              },
              "defaults": {
                "value": [
                  {
                    "id": "1",
                    "value": 10
                  }, {
                    "id": "2",
                    "value": 20
                  }, {
                    "id": "3",
                    "value": 30
                  }, {
                    "id": "4",
                    "value": 40
                  }, {
                    "id": "5",
                    "value": 50
                  }
                ]
              }
            }
          }
        },
        iconColor: {
          label: "Icon color",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#444"
              }
            }
          }
        },
        activeColor: {
          label: "Color of the active icon",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Color: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "#3D5AFE"
              }
            }
          }
        },
        iconSize: {
          label: "Icon size",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Px: {
              multiValues: {
                value: true
              },
              defaults: {
                value: "40px"
              }
            }
          }
        },
        timeStep: {
          label: "Time (in seconds) between steps",
          family: "selection",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Number: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "2"
              }
            }
          }
        },
        showProgress: {
          label: "Show a progress bar",
          family: "style",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        showStepButtons: {
          label: "Show Next/Prev buttons",
          family: "style",
          hidden: false,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        size_x: {
          formats: {
            Number: {
              defaults: {
                value: 4
              }
            }
          }
        },
        size_y: {
          formats: {
            Number: {
              defaults: {
                value: 1
              }
            }
          }
        }
      }
    };

    PlayPauseControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(PlayPauseControlModel.meta, PlayPauseControlModel.behaviors);
      return output;
    };

    return PlayPauseControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.LegendControlView = (function(_super) {
    __extends(LegendControlView, _super);

    function LegendControlView() {
      this.getScrollDomElement = __bind(this.getScrollDomElement, this);
      this.visualizerDidUpdateItems = __bind(this.visualizerDidUpdateItems, this);
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = LegendControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LegendControlView.prototype.followMouse = false;

    LegendControlView.prototype.stylableTexts = [".legend-label"];

    LegendControlView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    LegendControlView.prototype.viewDidRender = function() {
      return this.legendContainer = this.behaviors.layout.root.append("div").attr("class", "legend-container");
    };

    LegendControlView.prototype.updateItems = function() {
      var iconClass;
      this.items = this.legendContainer.selectAll(".item").data(this.values, function(d, i) {
        return d.id;
      });
      this.items.exit().remove();
      this.itemsEnter = this.items.enter().append("div").attr("class", "item legend-item");
      this.itemsEnter.append("div").attr("class", "legend-icon-container").append("div").attr("class", "legend-icon");
      this.itemsEnter.append("div").attr("class", "legend-label-container").append("div").attr("class", "legend-label weighted-text");
      iconClass = this.model.get("iconShape");
      if (this.model.get("data").currentFormat === "Color") {
        return this.items.each(function(d, i) {
          d3.select(this).select(".legend-label").text(d.id);
          return d3.select(this).select(".legend-icon").style("background", d.value).style("width", "80%").style("height", "80%").classed("line", iconClass === "line").classed("circle", iconClass === "circle").classed("square", iconClass === "square");
        });
      } else if (this.model.get("data").currentFormat === "Number") {
        return this.items.each(function(d, i) {
          d3.select(this).select(".legend-label").text(d.id);
          return d3.select(this).select(".legend-icon").style("background", "#ddd").style("width", d.value + "px").style("height", d.value + "px").classed("line", iconClass === "line").classed("circle", iconClass === "circle").classed("square", iconClass === "square");
        });
      }
    };

    LegendControlView.prototype.visualizerDidUpdateItems = function() {
      var iconSize, maxHeight, maxWidth;
      maxWidth = 0;
      maxHeight = 0;
      this.items.each(function(d, i) {
        var h, w;
        w = d3.select(this).select(".legend-label")[0][0].clientWidth;
        h = d3.select(this).select(".legend-label")[0][0].clientHeight;
        if (maxWidth < Math.round(w)) {
          maxWidth = Math.round(w);
        }
        if (maxHeight < Math.round(h)) {
          return maxHeight = Math.round(h);
        }
      });
      if (this.model.get("data").currentFormat === "Number") {
        iconSize = 0;
        this.items.each(function(d, i) {
          if (Number(d.value) > iconSize) {
            return iconSize = Number(d.value);
          }
        });
      } else {
        iconSize = maxHeight;
      }
      return this.items.each(function(d, i) {
        d3.select(this).style("width", (iconSize + maxWidth + 10) + "px");
        d3.select(this).style("height", iconSize + "px");
        return d3.select(this).select(".legend-icon-container").style("width", iconSize + "px").style("height", iconSize + "px");
      });
    };

    LegendControlView.prototype.getScrollDomElement = function() {
      return $(this.behaviors.layout.root[0]).find(".legend-container");
    };

    return LegendControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.LegendControlModel = (function(_super) {
    __extends(LegendControlModel, _super);

    function LegendControlModel() {
      _ref = LegendControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LegendControlModel.behaviors = ["quadrigram.Models.MessagesBehavior", "quadrigram.Models.TextListDataControllerBehavior", "quadrigram.Models.LayoutBehavior", "quadrigram.Models.TextStyleBehavior", "quadrigram.Models.SelectionDOMBehavior"];

    LegendControlModel.meta = {
      name: "Legend",
      properties: {
        "data": {
          "label": "Items to be shown",
          "family": "data",
          "hidden": false,
          "formats": {
            "Color": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": [
                  {
                    "id": "Item 1",
                    "value": "rgb(13, 113, 146)"
                  }, {
                    "id": "Item 2",
                    "value": "rgb(127, 204, 109)"
                  }, {
                    "id": "Item 3",
                    "value": "rgb(253, 216, 53)"
                  }, {
                    "id": "Item 4",
                    "value": "rgb(246, 149, 67)"
                  }, {
                    "id": "Item 5",
                    "value": "rgb(187, 48, 80)"
                  }
                ]
              }
            }
          }
        },
        iconShape: {
          label: "Shape of the icons",
          family: "style",
          hidden: true,
          sortingWeight: "28",
          formats: {
            Options: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "square"
              },
              options: {
                value: ["circle", "square", "line"]
              }
            }
          }
        },
        size_x: {
          formats: {
            Number: {
              defaults: {
                value: 2
              }
            }
          }
        },
        size_y: {
          formats: {
            Number: {
              defaults: {
                value: 2
              }
            }
          }
        },
        "fillColors": {
          "internal": true
        },
        "fillOpacities": {
          "internal": true
        },
        "lineColors": {
          "internal": true
        },
        "lineThickness": {
          "internal": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "0px"
              }
            }
          }
        },
        "lineOpacities": {
          "internal": true
        },
        "forceSelection": {
          "internal": true
        },
        "selectedItems": {
          "internal": true
        },
        "selectionFillColors": {
          "internal": true
        },
        "selectionFillOpacities": {
          "internal": true
        },
        "selectionLineColors": {
          "internal": true
        },
        "selectionLineThickness": {
          "internal": true,
          "formats": {
            "Px": {
              "multiValues": {
                "value": true
              },
              "defaults": {
                "value": "0px"
              }
            }
          }
        },
        "selectionLineOpacities": {
          "internal": true
        },
        "selectionBold": {
          "internal": true,
          "formats": {
            "Boolean": {
              "defaults": {
                "value": "true"
              }
            }
          }
        }
      }
    };

    LegendControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(LegendControlModel.meta, LegendControlModel.behaviors);
      return output;
    };

    return LegendControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

  /*
  "Number":
                  "multiValues":
                    "value": true
                  "defaults":
                        "value":
                            [
                                {
                                    "id": "Small",
                                    "value": "10"
                                },
                                {
                                    "id": "Medium",
                                    "value": "20"
                                },
                                {
                                    "id": "Large",
                                    "value": "30"
                                }
                            ]
  */


}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.IFrameControlView = (function(_super) {
    __extends(IFrameControlView, _super);

    function IFrameControlView() {
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = IFrameControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    IFrameControlView.prototype.template = JST['app/scripts/templates/visualizers/rectangle.hbs'];

    IFrameControlView.prototype.viewWillRender = function() {
      this.values = [];
      return this.ids = [];
    };

    IFrameControlView.prototype.viewDidRender = function() {
      this.$iframe = $("<iframe class='i-frame'/>");
      return this.$el.append(this.$iframe);
    };

    IFrameControlView.prototype.updateItems = function() {
      return this.$iframe.attr("src", this.model.get("iframeURL"));
    };

    return IFrameControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.IFrameControlModel = (function(_super) {
    __extends(IFrameControlModel, _super);

    function IFrameControlModel() {
      _ref = IFrameControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    IFrameControlModel.behaviors = ["quadrigram.Models.LayoutBehavior"];

    IFrameControlModel.meta = {
      "name": "iframe",
      "properties": {
        "iframeURL": {
          "uiTipContent": "URL to the iframe to be embeded",
          "label": "URL",
          "family": "data",
          "sortingWeight": "82",
          "hidden": false,
          "formats": {
            "Text": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "bkg_image": {
          internal: true
        },
        "bkg_color": {
          internal: true
        },
        "bkg_opacity": {
          internal: true
        }
      }
    };

    IFrameControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(IFrameControlModel.meta, IFrameControlModel.behaviors);
      return output;
    };

    return IFrameControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.YoutubeControlView = (function(_super) {
    __extends(YoutubeControlView, _super);

    function YoutubeControlView() {
      this.updateItems = __bind(this.updateItems, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = YoutubeControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    YoutubeControlView.prototype.template = JST['app/scripts/templates/visualizers/rectangle.hbs'];

    YoutubeControlView.prototype.viewWillRender = function() {
      this.values = [];
      return this.ids = [];
    };

    YoutubeControlView.prototype.viewDidRender = function() {
      this.$iframe = $("<iframe class='i-frame'/>");
      return this.$el.append(this.$iframe);
    };

    YoutubeControlView.prototype.updateItems = function() {
      var ID, url;
      ID = this.YouTubeGetID(this.model.get("youtubeID"));
      url = "http://www.youtube.com/embed/" + ID;
      url += "?";
      if (this.model.get("autoPlay") === "true") {
        url += "autoplay=1;";
      }
      if (this.model.get("showControls") === "false") {
        url += "controls=0;";
      }
      url += "modestbranding=1;";
      url += "rel=0;";
      url += "showinfo=0;";
      return this.$iframe.attr("src", url);
    };

    YoutubeControlView.prototype.YouTubeGetID = function(url) {
      var ID;
      ID = '';
      url = url.replace(/(>|<)/gi, '').split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/)/);
      if (url[2] !== void 0) {
        ID = url[2].split(/[^0-9a-z_\-]/i);
        ID = ID[0];
      } else {
        ID = url;
      }
      return ID;
    };

    return YoutubeControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.YoutubeControlModel = (function(_super) {
    __extends(YoutubeControlModel, _super);

    function YoutubeControlModel() {
      _ref = YoutubeControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    YoutubeControlModel.behaviors = ["quadrigram.Models.LayoutBehavior"];

    YoutubeControlModel.meta = {
      "name": "iframe",
      "properties": {
        "youtubeID": {
          "uiTipContent": "Youtube id of the video to load",
          "label": "Youtube URL (or video Id)",
          "family": "data",
          "sortingWeight": "82",
          "hidden": false,
          "formats": {
            "Text": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": ""
              }
            }
          }
        },
        "showControls": {
          "uiTipContent": "Show or hide the play controls and progress bar",
          "label": "Show controls",
          "family": "style",
          "sortingWeight": "82",
          "hidden": false,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "false"
              }
            }
          }
        },
        "autoPlay": {
          "uiTipContent": "Start playing automaically when loaded",
          "label": "Auto play",
          "family": "data",
          "sortingWeight": "82",
          "hidden": false,
          "formats": {
            "Boolean": {
              "multiValues": {
                "value": false
              },
              "defaults": {
                "value": "false"
              }
            }
          }
        },
        "bkg_image": {
          internal: true
        },
        "bkg_color": {
          internal: true
        },
        "bkg_opacity": {
          internal: true
        }
      }
    };

    YoutubeControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(YoutubeControlModel.meta, YoutubeControlModel.behaviors);
      return output;
    };

    return YoutubeControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ImageControlView = (function(_super) {
    __extends(ImageControlView, _super);

    function ImageControlView() {
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = ImageControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ImageControlView.prototype.template = JST['app/scripts/templates/visualizers/rectangle.hbs'];

    ImageControlView.prototype.viewWillRender = function() {
      this.values = [];
      return this.ids = [];
    };

    return ImageControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ImageControlModel = (function(_super) {
    __extends(ImageControlModel, _super);

    function ImageControlModel() {
      _ref = ImageControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ImageControlModel.behaviors = ["quadrigram.Models.LayoutBehavior"];

    ImageControlModel.meta = {
      "name": "Image",
      "properties": {
        "bkg_image": {
          "sortingWeight": "0",
          "hidden": false,
          "label": "Image"
        }
      }
    };

    ImageControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(ImageControlModel.meta, ImageControlModel.behaviors);
      return output;
    };

    return ImageControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.ShareButtonsControlView = (function(_super) {
    __extends(ShareButtonsControlView, _super);

    function ShareButtonsControlView() {
      this.setURLS = __bind(this.setURLS, this);
      this.updateItems = __bind(this.updateItems, this);
      this.clickHandler = __bind(this.clickHandler, this);
      this.handleMouseLeave = __bind(this.handleMouseLeave, this);
      this.handleMouseEnter = __bind(this.handleMouseEnter, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      this.viewWillRender = __bind(this.viewWillRender, this);
      _ref = ShareButtonsControlView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ShareButtonsControlView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    ShareButtonsControlView.prototype.buttonTemplate = JST['app/scripts/templates/visualizers/shareButton.hbs'];

    ShareButtonsControlView.prototype.shareTypes = {
      Facebook: {
        defaultColor: "#3C5B99"
      },
      Twitter: {
        defaultColor: "#00ACED"
      },
      Google: {
        defaultColor: "#DC4B38"
      },
      Tumblr: {
        defaultColor: "#44546A"
      },
      Pinterest: {
        defaultColor: "#CA2027"
      },
      Reddit: {
        defaultColor: "#FF4500"
      },
      Linkedin: {
        defaultColor: "#007BB6"
      },
      Wordpress: {
        defaultColor: "#464646"
      }
    };

    ShareButtonsControlView.prototype.viewWillRender = function() {
      this.values = [];
      return this.ids = [];
    };

    ShareButtonsControlView.prototype.viewDidRender = function() {
      var container, group, type,
        _this = this;
      container = this.behaviors.layout.root.append("div").attr("class", "share-buttons-control");
      group = container.append("div").attr("class", "control-btn-group");
      this.group = this.$el.find(".control-btn-group");
      for (type in this.shareTypes) {
        this.group.append(this.buttonTemplate(type));
      }
      this.$el.find("img").each(function(i, el) {
        return $.fn.convertToDynamicSvg($(el), _this.updateItems);
      });
      this.$el.find(".control-btn").on("mouseenter", this.handleMouseEnter);
      return this.$el.find(".control-btn").on("mouseleave", this.handleMouseLeave);
    };

    ShareButtonsControlView.prototype.handleMouseEnter = function(e) {
      if (this.model.get("iconColor") !== "@QDeactivatedWord") {
        $(e.currentTarget).find(".circle").css("background", this.model.get("iconColor"));
      } else {
        $(e.currentTarget).find(".circle").css("background", this.shareTypes[$(e.currentTarget).attr("data-id")].defaultColor);
      }
      if (this.model.get("bkg_color") !== "none") {
        return $(e.currentTarget).find("svg").attr("fill", this.model.get("bkg_color"));
      } else {
        return $(e.currentTarget).find("svg").attr("fill", "#fff");
      }
    };

    ShareButtonsControlView.prototype.handleMouseLeave = function(e) {
      this.$el.find(".circle").css("background", "none");
      if (this.model.get("iconColor") !== "@QDeactivatedWord") {
        return $(e.currentTarget).find("svg").attr("fill", this.model.get("iconColor"));
      } else {
        return $(e.currentTarget).find("svg").attr("fill", this.shareTypes[$(e.currentTarget).attr("data-id")].defaultColor);
      }
    };

    ShareButtonsControlView.prototype.clickHandler = function(e) {};

    ShareButtonsControlView.prototype.updateItems = function() {
      var circleSize, size, svgSize, type, _results;
      this.setURLS();
      size = Number(this.model.get("iconSize").replace("px", ""));
      svgSize = Math.floor(size * 0.8);
      for (type in this.shareTypes) {
        if (this.model.get("show" + type) === "true") {
          this.$el.find("." + type + "-btn").removeClass("hidden");
        } else {
          this.$el.find("." + type + "-btn").addClass("hidden");
        }
        this.$el.find("." + type + "-btn").find("svg").attr("width", svgSize).attr("height", svgSize);
      }
      circleSize = size + "px";
      this.$el.find(".circle").css("width", circleSize).css("height", circleSize);
      if (this.model.get("iconColor") !== "@QDeactivatedWord") {
        this.$el.find(".circle").css("background", this.model.get("iconColor") + " !important");
        return this.$el.find("svg").attr("fill", this.model.get("iconColor"));
      } else {
        _results = [];
        for (type in this.shareTypes) {
          _results.push(this.$el.find("." + type + "-btn").find("svg").attr("fill", this.shareTypes[type].defaultColor));
        }
        return _results;
      }
    };

    ShareButtonsControlView.prototype.setURLS = function() {
      var projectTitle, projectURL, sourceURL;
      projectTitle = this.model.get("postTitle");
      projectURL = window.location.href;
      sourceURL = "http%3A%2F%2Fwww.quadrigram.com";
      this.$el.find(".Facebook-btn").attr("href", "https://www.facebook.com/sharer/sharer.php?u=" + projectURL + "&t=" + projectTitle);
      this.$el.find(".Twitter-btn").attr("href", "https://twitter.com/intent/tweet?source=" + sourceURL + "&text=" + projectTitle + "%20-%20" + projectURL);
      this.$el.find(".Google-btn").attr("href", "https://plus.google.com/share?url=" + projectURL);
      this.$el.find(".Tumblr-btn").attr("href", "http://www.tumblr.com/share?v=3&u=" + projectURL + "&t=" + projectTitle + "&s=");
      this.$el.find(".Pinterest-btn").attr("href", "http://pinterest.com/pin/create/button/?url=" + projectURL + "&description=" + projectTitle);
      this.$el.find(".Reddit-btn").attr("href", "http://www.reddit.com/submit?url=" + projectURL + "&title=" + projectTitle);
      this.$el.find(".Linkedin-btn").attr("href", "http://www.linkedin.com/shareArticle?mini=true&url=" + projectURL + "&title=" + projectTitle);
      return this.$el.find(".Wordpress-btn").attr("href", "http://wordpress.com/press-this.php?u=" + projectURL + "&t=" + projectTitle);
    };

    return ShareButtonsControlView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Models.ShareButtonsControlModel = (function(_super) {
    __extends(ShareButtonsControlModel, _super);

    function ShareButtonsControlModel() {
      _ref = ShareButtonsControlModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ShareButtonsControlModel.behaviors = ["quadrigram.Models.LayoutBehavior"];

    ShareButtonsControlModel.meta = {
      name: "shareButtons",
      properties: {
        iconColor: {
          label: "Icon color",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Deactivated: {
              label: "Default colors",
              multiValues: {
                value: false
              }
            },
            Color: {
              label: "Single color",
              multiValues: {
                value: false
              },
              defaults: {
                value: "#000"
              }
            }
          }
        },
        iconSize: {
          label: "Icon size",
          family: "style",
          hidden: false,
          sortingWeight: "0",
          formats: {
            Px: {
              multiValues: {
                value: true
              },
              defaults: {
                value: "40px"
              }
            }
          }
        },
        showFacebook: {
          label: "Show Facebook button",
          family: "data",
          hidden: true,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        showTwitter: {
          label: "Show Facebook button",
          family: "data",
          hidden: true,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        showGoogle: {
          label: "Show Google+ button",
          family: "data",
          hidden: true,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        showTumblr: {
          label: "Show Tumblr button",
          family: "data",
          hidden: true,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        showPinterest: {
          label: "Show Pinterest button",
          family: "data",
          hidden: true,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        showReddit: {
          label: "Show Reddit button",
          family: "data",
          hidden: true,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        showLinkedin: {
          label: "Show Linkedin button",
          family: "data",
          hidden: true,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        showWordpress: {
          label: "Show Wordpress button",
          family: "data",
          hidden: true,
          sortingWeight: "25",
          formats: {
            Boolean: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "true"
              }
            }
          }
        },
        postTitle: {
          label: "Title to show in the shared link",
          uiTipContent: "The text that will appear by default in the post, entry or tweet",
          family: "data",
          hidden: false,
          sortingWeight: "1",
          formats: {
            Text: {
              multiValues: {
                value: false
              },
              defaults: {
                value: "Made with quadrigram"
              }
            }
          }
        },
        bkg_color: {
          formats: {
            Color: {
              defaults: {
                value: "none"
              }
            }
          }
        },
        size_x: {
          formats: {
            Number: {
              defaults: {
                value: 7
              }
            }
          }
        },
        size_y: {
          formats: {
            Number: {
              defaults: {
                value: 1
              }
            }
          }
        }
      }
    };

    ShareButtonsControlModel.info = function() {
      var output;
      output = quadrigram.Models.VisualizerModel.mergeInfo(ShareButtonsControlModel.meta, ShareButtonsControlModel.behaviors);
      return output;
    };

    return ShareButtonsControlModel;

  }).call(this, quadrigram.Models.VisualizerModel);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.NetworkVisualizerView = (function(_super) {
    __extends(NetworkVisualizerView, _super);

    function NetworkVisualizerView() {
      this.initNetworkStructure = __bind(this.initNetworkStructure, this);
      this.updateItems = __bind(this.updateItems, this);
      this.visualizerDidResize = __bind(this.visualizerDidResize, this);
      this.visualizerWillUpdateItems = __bind(this.visualizerWillUpdateItems, this);
      this.tickExecution = __bind(this.tickExecution, this);
      this.viewDidRender = __bind(this.viewDidRender, this);
      _ref = NetworkVisualizerView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NetworkVisualizerView.prototype.template = JST['app/scripts/templates/visualizers/empty.hbs'];

    NetworkVisualizerView.prototype.linkStrengthRatio = 1;

    NetworkVisualizerView.prototype.linkDistance = 10;

    NetworkVisualizerView.prototype.firstExec = true;

    NetworkVisualizerView.prototype.viewDidRender = function() {
      var self;
      self = this;
      this.force = d3.layout.force();
      this.force.size([this.$el.width(), this.$el.height()]);
      /*
      .charge(-500)
      .linkStrength( (d) ->
        
        maxWeight = self.behaviors.relations.strokeWidthScale.domain()[1]
        output = d.weight / maxWeight - 0.5 + self.linkStrengthRatio
        output = d.weight / maxWeight - 0.5 + self.linkStrengthRatio
        ##WARNING: creo que: si le pone zero peta!!!!
        output = 1 #Math.max(Math.min(output,1),0.5)
        
        return self.linkStrengthRatio;
      )
      .linkDistance((d)->
        self.linkDistance
        #return 50
      )
      */

      this.force.on('tick', this.tickExecution);
      this.networkLayer = this.behaviors.svg.root.append("g").attr("id", 'graph-layer').attr("class", "zoomable-layer");
      this.backgroundLayer = this.networkLayer.append("rect").attr("width", "100%").attr("height", "100%").attr("fill", "rgba(0,0,0,0)").attr("class", "zoomable-area");
      this.linksLayer = this.networkLayer.append("g").attr("id", 'graph-layer-links').attr("class", "zoomable-target");
      return this.nodesLayer = this.networkLayer.append("g").attr("id", 'graph-layer-nodes').attr("class", "zoomable-target");
    };

    NetworkVisualizerView.prototype.tickExecution = function() {
      var graphHeight, graphWidth, self;
      graphWidth = this.$el.width();
      graphHeight = this.$el.height();
      this.force.size([graphWidth, graphHeight]);
      self = this;
      this.linksItems.each(function(d, i) {
        d3.select(this).select(".link-line").attr('x1', d.source.x).attr('y1', d.source.y).attr('x2', d.target.x).attr('y2', d.target.y);
        return d3.select(this).select(".link-aura").attr('x1', d.source.x).attr('y1', d.source.y).attr('x2', d.target.x).attr('y2', d.target.y);
        /*
        padding = Number(self.model.get("linePadding").replace("px",""))
        if padding > 0
          rsource = self.behaviors.circles.getRadiusFromValue(d.source.value)
          rtarget = self.behaviors.circles.getRadiusFromValue(d.target.value)
          
          totalLength = Math.sqrt( Math.pow(d.target.x-d.source.x,2) + Math.pow(d.target.y-d.source.y,2) )
          newDashes = [0,(rsource+padding),Math.max(totalLength-rsource-rtarget-2*padding,0),(rtarget+padding)]
          #strokeDashArray =  "0 "+ (rsource+padding) + " " + Math.max(totalLength-rsource-rtarget-2*padding,0) + " " + (rtarget+padding)
          
          strokeDashArray = newDashes.join(" ")
          d3.select(this).attr("stroke-dasharray",strokeDashArray)
          #d3.select(this).attr("stroke-dasharray", "10 10" )
        else 
          d3.select(this).attr("stroke-dasharray","")
        */

      });
      return this.items.attr('cx', function(d) {
        return d.x;
      }).attr('cy', function(d) {
        return d.y;
      });
    };

    NetworkVisualizerView.prototype.visualizerWillUpdateItems = function() {
      var format, radiusDomain, radiusRange;
      this.behaviors.relations.setWeightScale();
      radiusDomain = this.calculateNumberDomain(this.radiusValues, 0, false);
      format = this.model.get("values").currentFormat;
      switch (format) {
        case "PxByValues":
          radiusRange = [this.model.get("values")[1], this.model.get("values")[2]];
          break;
        case "PxRange":
          radiusRange = [this.model.get("values")[0], this.model.get("values")[1]];
          break;
        default:
          radiusRange = [this.model.get("values"), this.model.get("values")];
      }
      return this.behaviors.circles.updateRadiusScale(radiusDomain, radiusRange);
    };

    NetworkVisualizerView.prototype.visualizerDidResize = function() {
      return this.force.start();
    };

    NetworkVisualizerView.prototype.updateItems = function() {
      var linkItemsEnter, size, transitionTime, transitionType, updateD3ObjectNodes, updateD3ObjectRelations,
        _this = this;
      this.linksItems = this.linksLayer.selectAll('.link').data(this.networkObject.relations, function(d) {
        return d.id;
      });
      this.linksItems.exit().remove();
      linkItemsEnter = this.linksItems.enter().append("g").attr("class", "link");
      linkItemsEnter.insert('line').attr('class', 'link-line');
      linkItemsEnter.insert('line').attr('class', 'link-aura').attr("stroke-width", "5px").attr("stroke", "rgba(0,0,0,0)");
      this.items = this.nodesLayer.selectAll('.item').data(this.networkObject.nodes, function(d) {
        return d.id;
      });
      this.items.exit().remove();
      this.items.enter().insert('circle').attr('class', 'item');
      if (this.model.get("draggableNodes") === "true") {
        this.items.call(this.force.drag).on("mousedown", function() {
          return d3.event.stopPropagation();
        });
      } else {
        this.items.on(".drag", null);
      }
      size = this.items.size();
      if (size < 1000 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        updateD3ObjectNodes = this.items.transition().duration(transitionTime).ease(transitionType);
      } else {
        updateD3ObjectNodes = this.items;
      }
      updateD3ObjectNodes.attr('r', function(d) {
        var value;
        value = _this.behaviors.circles.getRadiusFromValue(d.value);
        if (_.isNaN(value)) {
          value = 0;
        }
        return value;
      });
      size = this.linksItems.size();
      if (size < 1000 && this.animationActive) {
        transitionType = this.model.get("transition")[0];
        transitionTime = this.model.get("transition")[1];
        updateD3ObjectRelations = this.linksItems.transition().duration(transitionTime).ease(transitionType);
      } else {
        updateD3ObjectRelations = this.linksItems;
      }
      updateD3ObjectRelations.attr("stroke-width", function(d) {
        return _this.behaviors.relations.strokeWidthScale(d.value);
      });
      if (this.firstExec || (this.model.changed["charge"] != null) || (this.model.changed["network"] != null)) {
        this.force.charge(-1 * Math.max(1, parseInt(this.model.get("charge"))));
        this.force.start();
      }
      if (this.firstExec || (this.model.changed["linkDistance"] != null) || (this.model.changed["network"] != null)) {
        this.force.linkDistance(100 - parseInt(this.model.get("linkDistance")));
        this.force.start();
      }
      if (this.firstExec || (this.model.changed["network"] != null)) {
        this.initNetworkStructure();
      }
      return this.firstExec = false;
    };

    NetworkVisualizerView.prototype.initNetworkStructure = function() {
      /*
      for node in @networkObject.nodes
        node.x = Math.random()*@$el.width()
        node.y = Math.random()*@$el.height()
      */

      var dx, dy, i, node, size, _i, _j, _len, _ref1, _ref2, _results;
      this.force.nodes(this.networkObject.nodes).links(this.networkObject.relations);
      this.force.start();
      size = this.linksItems.size();
      for (i = _i = 0, _ref1 = Math.max(30, size / 10); 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        this.force.tick();
      }
      if (size < 1000) {
        _ref2 = this.networkObject.nodes;
        _results = [];
        for (_j = 0, _len = _ref2.length; _j < _len; _j++) {
          node = _ref2[_j];
          dx = node.x - this.$el.width() / 2;
          dy = node.y - this.$el.height() / 2;
          dx *= 0.9;
          dy *= 0.9;
          node.x = this.$el.width() / 2 + dx;
          _results.push(node.y = this.$el.height() / 2 + dy);
        }
        return _results;
      }
    };

    return NetworkVisualizerView;

  })(quadrigram.Views.VisualizerView);

}).call(this);

(function() {
  'use strict';
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  quadrigram.Views.DisclaimerDeviceView = (function(_super) {
    __extends(DisclaimerDeviceView, _super);

    function DisclaimerDeviceView() {
      _ref = DisclaimerDeviceView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DisclaimerDeviceView.prototype.template = JST['app/scripts/templates/UI/disclaimerDeviceView.hbs'];

    return DisclaimerDeviceView;

  })(Backbone.ElementView);

}).call(this);
